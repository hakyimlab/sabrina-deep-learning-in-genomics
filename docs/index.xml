<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>deep-learning-in-genomics</title>
<link>https://sabrinami.quarto.pub/deep-learning-in-genomics/index.html</link>
<atom:link href="https://sabrinami.quarto.pub/deep-learning-in-genomics/index.xml" rel="self" type="application/rss+xml"/>
<description>Sabrina&#39;s blog for Deep Learning in Genomics course</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Wed, 10 Jan 2024 08:00:00 GMT</lastBuildDate>
<item>
  <title>Comparing EpigenomeXcan and Enformer gene expression prediction performance</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes/index.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-6">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">pred_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_human_predicted_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-2">obs_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_observed_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-3">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(pred_expr.columns)</span>
<span id="cb2-4">gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/gene_mapping.txt"</span>)</span>
<span id="cb2-5">genes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].isin(gene_list)]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">probabilities_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Br_genotype_probabilities"</span></span>
<span id="cb3-2">reference_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/human"</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># project_dir = "/eagle/AIHPC4Edu/sabrina/Br_predictions/Br_epigenomes"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, gene, start, end, prob):</span>
<span id="cb4-2">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb4-3">    scaled_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]: </span>
<span id="cb4-5">        scaled_prob.append(np.interp(bins, prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>], prob[column]))</span>
<span id="cb4-6">    pr_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(np.array(scaled_prob))</span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb4-8">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb4-9">    ref_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(matrix, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-10">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(pr_matrix[:, np.newaxis,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ref_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb4-12">    </span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, prob, gene_annot):</span>
<span id="cb4-15">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># interp = interpolate.interp1d(np.array(prob['POS']), np.array(prob.drop(columns=['POS'])), axis = 0)</span></span>
<span id="cb4-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb4-18">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb4-19">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb4-20">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb4-21">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb4-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if (start &gt;= prob.iloc[0,0] and end &lt;= prob.iloc[-1,0]):</span></span>
<span id="cb4-23">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, gene, start, end, prob)</span>
<span id="cb4-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb4-25">        predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output</span>
<span id="cb4-26"></span>
<span id="cb4-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_expr.columns, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_expr.index)</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, group <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome"</span>):</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb5-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pred_expr.index:</span>
<span id="cb5-5">            prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[individual][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb5-6">            predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr1'</span>, prob, genes_df)</span>
<span id="cb5-7">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(predictions)</span>
<span id="cb5-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb5-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>KeyError: "Unable to open object (object 'ENSRNOG00000016580' doesn't exist)"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"></span>
<span id="cb7-3"></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb7-6">        output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(project_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000789972A'</span>)</span>
<span id="cb7-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if not os.path.isdir(output_dir):</span></span>
<span id="cb7-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     os.makedirs(output_dir)</span></span>
<span id="cb7-9">        prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000789972A'</span>][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb7-10">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr1'</span>, prob, genes_df)</span>
<span id="cb7-11">        write_h5(os.path.join(output_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), predictions) </span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"{chr}:", len(group), "genes...", (end_time - start_time) // 60, "minutes")</span></span></code></pre></div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes/index.html</guid>
  <pubDate>Wed, 10 Jan 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Scaling up EpigenomeXcan: execution time, parallelization</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-31-scaling-up-Br-epigenome-predictions/index.html</link>
  <description><![CDATA[ 




<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.interpolate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> interp1d</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-7">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/Br_expressed_genes.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-2">    gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/metadata/intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-4">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-5">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>: gene_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"interval"</span>: intervals})</span>
<span id="cb2-6">split_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)</span>
<span id="cb2-7">mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_intervals.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-8">mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_intervals.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-9">mapping.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>]).to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/gene_mapping.txt"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">probabilities_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Br_genotype_probabilities"</span></span>
<span id="cb3-2">reference_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/human"</span></span>
<span id="cb3-3">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/Br_epigenomes"</span></span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/Br_samples.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-5">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb3-6">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/gene_mapping.txt"</span>)</span>
<span id="cb3-7">genes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr1'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_h5(path, predictions):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> predictions.items():</span>
<span id="cb4-4">            hf[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span></code></pre></div>
</div>
</section>
<section id="numpy-test" class="level2">
<h2 class="anchored" data-anchor-id="numpy-test">Numpy Test</h2>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, gene, start, end, prob):</span>
<span id="cb5-2">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb5-3">    interp_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]: </span>
<span id="cb5-5">        interp_prob.append(np.interp(bins, prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>], prob[column]))</span>
<span id="cb5-6">    pr_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(np.array(interp_prob))</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb5-8">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb5-9">    ref_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(matrix, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb5-10">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(pr_matrix[:, np.newaxis,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ref_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb5-12">    </span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, prob, gene_annot):</span>
<span id="cb5-15">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># interp = interpolate.interp1d(np.array(prob['POS']), np.array(prob.drop(columns=['POS'])), axis = 0)</span></span>
<span id="cb5-17">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb5-19">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb5-20">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb5-21">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb5-22">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb5-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if (start &gt;= prob.iloc[0,0] and end &lt;= prob.iloc[-1,0]):</span></span>
<span id="cb5-24">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, gene, start, end, prob)</span>
<span id="cb5-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb5-26">        predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output</span>
<span id="cb5-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb5-28">            end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb5-29">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations:"</span>, end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span>
<span id="cb5-30"></span>
<span id="cb5-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb6-2">        output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(project_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0007899884'</span>)</span>
<span id="cb6-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.isdir(output_dir):</span>
<span id="cb6-4">                os.makedirs(output_dir)</span>
<span id="cb6-5">        prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0007899884'</span>][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb6-6">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr1'</span>, prob, genes_df)</span>
<span id="cb6-7">        write_h5(os.path.join(output_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), predictions) </span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"{chr}:", len(group), "genes...", (end_time - start_time) // 60, "minutes")</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>200 iterations: 43.178196704000584 seconds
400 iterations: 85.30787616000089 seconds
600 iterations: 127.37160777700046 seconds
800 iterations: 170.39981612300107 seconds
1000 iterations: 214.97213824600112 seconds
1200 iterations: 258.91626574399925 seconds
1400 iterations: 302.4928128120009 seconds
1600 iterations: 346.4003939719987 seconds
1800 iterations: 389.48382942399985 seconds
2000 iterations: 433.0845548489997 seconds
2200 iterations: 476.6690443709995 seconds
2400 iterations: 546.7537841170015 seconds
2600 iterations: 592.0861903549994 seconds
2800 iterations: 658.7331474230014 seconds
3000 iterations: 718.2645332190004 seconds</code></pre>
</div>
</div>
</section>
<section id="scipy-test" class="level2">
<h2 class="anchored" data-anchor-id="scipy-test">Scipy Test</h2>
<p>Using scipy’s interp1d function to interpolate all 8 columns simultaneously. Generating the interpolation function costs about 20 seconds of runtime</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(gene, start, end, interp):</span>
<span id="cb8-2">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb8-3">    pr_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interp(bins)</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb8-5">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb8-6">    ref_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(matrix, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb8-7">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(pr_matrix[:, np.newaxis,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ref_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb8-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(prob, gene_annot):</span>
<span id="cb8-10">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-11">    interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interp1d(np.array(prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>]), np.array(prob.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>])), axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-12">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb8-14">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb8-15">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb8-16">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb8-17">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb8-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> prob.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> prob.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb8-19">            output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(gene, start, end, interp)</span>
<span id="cb8-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb8-21">            predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output</span>
<span id="cb8-22">            end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb8-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb8-24">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations:"</span>, end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span>
<span id="cb8-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb9-2">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000789972A'</span>][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb9-3">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(prob, genes_df)</span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write_h5(os.path.join(output_dir, f"{chr}_genes.h5"), predictions) </span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>200 iterations: 55.26515249814838 seconds
400 iterations: 105.58576967194676 seconds
600 iterations: 136.04839484021068 seconds
800 iterations: 193.6581759629771 seconds
1000 iterations: 254.47129005938768 seconds
1200 iterations: 305.2362718908116 seconds
1400 iterations: 355.68491036072373 seconds
1600 iterations: 417.03871417138726 seconds
1800 iterations: 469.593163177371 seconds
2000 iterations: 522.8375322008505 seconds
2200 iterations: 576.9442004561424 seconds
2400 iterations: 629.3138183737174 seconds
2600 iterations: 687.7609961153939 seconds
2800 iterations: 739.739781155251 seconds
3000 iterations: 797.2053201990202 seconds</code></pre>
</div>
</div>
</section>
<section id="tensorflow-test-gpu" class="level2">
<h2 class="anchored" data-anchor-id="tensorflow-test-gpu">Tensorflow Test (GPU)</h2>
<p>Neither tensorflow or torch libraries offer interpolation for the purpose I need, so I wrote my interpolation function in order to keep all of the computational steps as tensorflow operations.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tf.config.list_physical_devices(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPU'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2024-01-11 04:34:01.727643: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-01-11 04:34:07.546710: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/opt/cray/libfabric/1.15.2.0/lib64:/opt/cray/pe/papi/7.0.0.1/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/comm_libs/nvshmem/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/comm_libs/nccl/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/math_libs/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/compilers/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/compilers/extras/qd/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/cuda/extras/CUPTI/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/cuda/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32
2024-01-11 04:34:07.548177: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/opt/cray/libfabric/1.15.2.0/lib64:/opt/cray/pe/papi/7.0.0.1/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/comm_libs/nvshmem/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/comm_libs/nccl/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/math_libs/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/compilers/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/compilers/extras/qd/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/cuda/extras/CUPTI/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/cuda/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32
2024-01-11 04:34:07.548196: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2024-01-11 04:34:12.436563: E tensorflow/compiler/xla/stream_executor/cuda/cuda_driver.cc:267] failed call to cuInit: CUDA_ERROR_NOT_INITIALIZED: initialization error</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> interpolate(x, xi, y):</span>
<span id="cb14-2">    j   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.argsort(tf.concat((x, xi), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb14-3">    k   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(j))</span>
<span id="cb14-4">    q   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.scatter_nd(j[:, tf.newaxis], k, k.shape)</span>
<span id="cb14-5"></span>
<span id="cb14-6">    lxi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xi)</span>
<span id="cb14-7"></span>
<span id="cb14-8">    r   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   q[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lxi:]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, lxi)</span>
<span id="cb14-9">    r   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.where(xi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], q[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lxi, r)</span>
<span id="cb14-10"></span>
<span id="cb14-11">    x2  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(x, r)</span>
<span id="cb14-12">    x1  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(x, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-13">    y2  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(y, r)</span>
<span id="cb14-14">    y1  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(y, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-15"></span>
<span id="cb14-16">    u   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   (xi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)</span>
<span id="cb14-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> tf.rank(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tf.rank(y1):</span>
<span id="cb14-18">        u   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.expand_dims(u, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-19"></span>
<span id="cb14-20">    yi  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>u)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y2</span>
<span id="cb14-21"></span>
<span id="cb14-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tf.where(y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y2, y1, yi)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(gene, start, end, prob):</span>
<span id="cb15-2">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>].values)</span>
<span id="cb15-3">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>]).values)</span>
<span id="cb15-4">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb15-5">    pr_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.expand_dims(tf.cast(interpolate(x, bins, y), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.float32), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb15-7">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb15-8">    ref_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.transpose(matrix, perm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb15-9">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.squeeze(tf.matmul(pr_tensor, ref_tensor), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb15-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(prob, gene_annot):</span>
<span id="cb15-12">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb15-13">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb15-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb15-15">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb15-16">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb15-17">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb15-18">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb15-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> prob.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> prob.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb15-20">            output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(gene, start, end, prob)</span>
<span id="cb15-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb15-22">            predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output</span>
<span id="cb15-23">            end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb15-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb15-25">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations:"</span>, end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span>
<span id="cb15-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb16-2">    output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(project_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0007899884'</span>)</span>
<span id="cb16-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.isdir(output_dir):</span>
<span id="cb16-4">        os.makedirs(output_dir)</span>
<span id="cb16-5">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000789FF64'</span>][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb16-6">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(prob, genes_df)</span>
<span id="cb16-7">    write_h5(os.path.join(output_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), predictions) </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2024-01-10 21:51:44.193582: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 38167 MB memory:  -&gt; device: 0, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:07:00.0, compute capability: 8.0
2024-01-10 21:51:44.197736: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 37815 MB memory:  -&gt; device: 1, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:46:00.0, compute capability: 8.0
2024-01-10 21:51:44.204366: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:2 with 37755 MB memory:  -&gt; device: 2, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:85:00.0, compute capability: 8.0
2024-01-10 21:51:44.205973: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:3 with 37755 MB memory:  -&gt; device: 3, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:c7:00.0, compute capability: 8.0</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(gene, start, end, interp):</span>
<span id="cb18-2">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb18-3">    pr_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interp(bins)</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb18-5">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb18-6">    ref_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(matrix, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb18-7">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(pr_matrix[:, np.newaxis,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ref_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb18-11">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000789FF64'</span>][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb18-12">    interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interp1d(np.array(prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>]), np.array(prob.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>])), axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-13">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb18-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes_df.iterrows():</span>
<span id="cb18-15">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb18-16">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb18-17">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb18-18">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb18-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> prob.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> prob.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb18-20">            output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(gene, start, end, interp)</span>
<span id="cb18-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb18-22">            predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output</span>
<span id="cb18-23">            end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb18-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb18-25">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations:"</span>, end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span>
<span id="cb18-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb18-27">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(output)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[0.08767378 0.09323303 0.16627961 ... 0.00949302 0.03075832 0.03259552]
 [0.08988153 0.09385183 0.13803922 ... 0.00846795 0.02565644 0.02787809]
 [0.0828562  0.08802018 0.08945152 ... 0.00512026 0.01920758 0.01718544]
 ...
 [0.08135339 0.08957597 0.0973008  ... 0.00999105 0.03571409 0.02636748]
 [0.09193078 0.0944492  0.10272115 ... 0.00973209 0.03738421 0.02245922]
 [0.09127819 0.08846645 0.08769749 ... 0.01205442 0.0357308  0.02092708]]</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-31-scaling-up-Br-epigenome-predictions/index.html</guid>
  <pubDate>Wed, 03 Jan 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Organizing founder haplotype probabilities to h5 database</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-01-qtl2-probabilities-to-h5-database/index.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd </span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5">probabilities_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/Br_genotype_probabilities'</span></span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-02-Br-personalized-prediction-additional-genes/metadata/individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-7">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to read CSV files and create tables in SQLite database</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_db(N):</span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to SQLite database</span></span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.h5'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb2-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb2-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hf.keys():</span>
<span id="cb2-7">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb2-8">            prob_csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.csv'</span>)</span>
<span id="cb2-9">            df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(prob_csv, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-10">            positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) </span>
<span id="cb2-11">            df.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, positions)</span>
<span id="cb2-12">            hf[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df</span>
<span id="cb2-13"></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> N <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>):</span>
<span id="cb3-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chromosome"</span>, N)</span>
<span id="cb3-3">    create_db(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(N))</span></code></pre></div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-01-qtl2-probabilities-to-h5-database/index.html</guid>
  <pubDate>Mon, 01 Jan 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>EpigenomeXcan Test</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-21-test-Br-epigenome-predictions/test.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2024-01-02 01:28:35.841177: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE3 SSE4.1 SSE4.2 AVX AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-01-02 01:28:39.354976: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000070168"</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr1"</span></span>
<span id="cb3-3">tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">157231467</span></span>
<span id="cb3-4">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb3-5">end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb3-6">sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"00078A02B6"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> query(cursor, sample, start, end):</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute SQL query</span></span>
<span id="cb4-4">    cursor.execute(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'SELECT * FROM `</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">` WHERE POS BETWEEN </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> AND </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch all rows</span></span>
<span id="cb4-6">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.fetchall()</span>
<span id="cb4-7">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> df</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/home/s1mi/Br_genotype_probabilities/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.db"</span>)</span>
<span id="cb5-2">cursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb5-3">prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query(cursor, sample, start, end)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">pr_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prob.mean()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb6-2">pr_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.tile(pr_mean, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb6-3">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb6-4">pr_matrix[indices, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prob.iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].values</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pr_matrix.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(896, 8)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/human/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb9-2">    matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">ref_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(matrix, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">res_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(pr_matrix[:, np.newaxis,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ref_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-21-test-Br-epigenome-predictions/test.html</guid>
  <pubDate>Wed, 27 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Plotting haplotype transitions by gene interval</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/gene_interval_plots.html</link>
  <description><![CDATA[ 




<div class="cell" data-hash="gene_interval_plots_cache/html/libraries_855b786838f56081626540e59c3e37b4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
</div>
<div class="cell" data-hash="gene_interval_plots_cache/html/calc_genoprob to df function_8439cc331fa4a92f6b5394ab28693a71">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">reshape_genoprob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(sample, prob) {</span>
<span id="cb5-2">  sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][sample, , ]))</span>
<span id="cb5-3">  snps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(sample_prob), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(snps) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chrom"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pos"</span>)</span>
<span id="cb5-5">  sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(sample_prob, snps)</span>
<span id="cb5-6">  sample_prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(sample_prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pos)</span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(sample_prob)</span>
<span id="cb5-8">}</span></code></pre></div>
</div>
<div class="cell" data-hash="gene_interval_plots_cache/html/gene annot_ac5d6bfe0a0e5620fad29e1bbf190d09">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">intervals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/metadata/intervals.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb6-2">genes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/Br_expressed_genes.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb6-3">split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(intervals<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>V1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb6-4">genes_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">genes =</span> genes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>V1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chrom =</span> split[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tss =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(split[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span></code></pre></div>
</div>
<div class="cell" data-hash="gene_interval_plots_cache/html/unnamed-chunk-1_82b85e205297cc4af9b57edacb6dc2a2">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">filtered_genes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(genes_df, chrom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr20'</span>)</span>
<span id="cb7-2">prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/qtl2-outputs/chr20-qtl2-outputs/batch0_prob.rds"</span>)</span>
<span id="cb7-3">sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reshape_genoprob</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"000789972A"</span>, prob)</span>
<span id="cb7-4">grouped_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>()</span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(filtered_genes)) {</span>
<span id="cb7-6">  gene <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_genes[i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genes"</span>]</span>
<span id="cb7-7">  chrom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_genes[i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chrom"</span>]</span>
<span id="cb7-8">  tss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_genes[i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tss"</span>]</span>
<span id="cb7-9">  </span>
<span id="cb7-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for matching 'chrom' and 'pos' in sample_prob</span></span>
<span id="cb7-11">  filtered_snps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sample_prob <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">between</span>(pos, tss<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-28672</span>, tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28672</span>))</span>
<span id="cb7-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If a match is found, add a 'gene' column and append to grouped_df</span></span>
<span id="cb7-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(filtered_snps) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb7-14">    filtered_snps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>gene <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gene</span>
<span id="cb7-15">    grouped_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(grouped_df, filtered_snps)</span>
<span id="cb7-16">  }</span>
<span id="cb7-17">}</span></code></pre></div>
</div>
<div class="cell" data-hash="gene_interval_plots_cache/html/unnamed-chunk-2_293adbdca64c7486e1ddeced7c611cda">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot_df &lt;- pivot_longer(grouped_df, cols = -c(chrom, pos, gene), names_to = "Strain", values_to = "prob")</span></span>
<span id="cb8-2">plot_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"000789972A_gene_probs.rds"</span>)</span></code></pre></div>
</div>
<div class="cell" data-hash="gene_interval_plots_cache/html/unnamed-chunk-3_1986b35d4ef7ea29c504874e86080dd4">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">sampled_genes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> plot_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>gene <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb9-2">sampled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> plot_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(gene <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> sampled_genes)</span>
<span id="cb9-4">plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(sampled_data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> pos, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> prob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> Strain)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> gene, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group by 'gene' with 2 columns</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qual"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_discrete</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust x-axis</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust y-axis</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Genes"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimated Proportion"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"000789972A: 25 genes sampled from chr20"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb9-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotate x-axis labels</span></span>
<span id="cb9-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb9-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb9-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span></span>
<span id="cb9-19">  ) </span>
<span id="cb9-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(plot)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/gene_interval_plots_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"000789972A_genes.png"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> plot, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span></code></pre></div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/gene_interval_plots.html</guid>
  <pubDate>Thu, 14 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Plotting Br Rats’ Haplotype Distributions</title>
  <dc:creator>Sabrina Mi, Dan Munro</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index.html</link>
  <description><![CDATA[ 




<div class="cell" data-hash="index_cache/html/libraries_22bb44a289b2f55c57889e4dec72c44a">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/calc_genoprob to df function_7163612ce7af857ca69e441c8c99b402">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">reshape_genoprob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(sample, prob) {</span>
<span id="cb2-2">  sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][sample, , ]))</span>
<span id="cb2-3">  snps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(sample_prob), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(snps) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chrom"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pos"</span>)</span>
<span id="cb2-5">  sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(sample_prob, snps)</span>
<span id="cb2-6">  plot_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(sample_prob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(chrom, pos), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strain"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prob"</span>)</span>
<span id="cb2-7">  plot_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(plot_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pos)</span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(plot_df)</span>
<span id="cb2-9">}</span></code></pre></div>
</div>
<section id="samples-plots" class="level3">
<h3 class="anchored" data-anchor-id="samples-plots">Samples Plots</h3>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_d6ca36b0eb38fc076848616681ebb2cf">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb3-2">chr20_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/chr20-qtl2-outputs/batch0_prob.rds"</span>)</span>
<span id="cb3-3">chr19_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/chr19-qtl2-outputs/batch0_prob.rds"</span>)</span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (sample <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(chr19_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) {</span>
<span id="cb3-5">  chr20_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reshape_genoprob</span>(sample, chr20_prob)</span>
<span id="cb3-6">  chr19_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reshape_genoprob</span>(sample, chr19_prob)</span>
<span id="cb3-7">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(chr19_df, chr20_df)</span>
<span id="cb3-8">  plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> pos, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> prob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> Strain)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> chrom, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qual"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Position (Mb)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimated Proportion"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Br Sample: "</span>, sample)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb3-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb3-19">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-21">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-22">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.line.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>),</span>
<span id="cb3-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.border =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-25">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>,</span>
<span id="cb3-26">    )</span>
<span id="cb3-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(plot)</span>
<span id="cb3-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(sample,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> plot, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb3-29">}</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.
ℹ Please use the `linewidth` argument instead.</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index_files/figure-html/unnamed-chunk-1-2.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index.html</guid>
  <pubDate>Wed, 13 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Concatenating HS Founder Epigenomes</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-07-concatenating-HS-reference-epigenomes/index.html</link>
  <description><![CDATA[ 




<section id="initialize-gene-interval-mapping" class="level2">
<h2 class="anchored" data-anchor-id="initialize-gene-interval-mapping">Initialize Gene-Interval Mapping</h2>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/Br_expressed_genes.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-3">    gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/metadata/intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-5">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-6">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>: gene_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"interval"</span>: intervals})</span>
<span id="cb2-7">mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span></code></pre></div>
</div>
</section>
<section id="concatenate-by-chromosome" class="level2">
<h2 class="anchored" data-anchor-id="concatenate-by-chromosome">Concatenate by Chromosome</h2>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/predictions_folder/HS_founders_genome_wide/predictions_2023-11-27/enformer_predictions"</span></span>
<span id="cb3-2">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes"</span></span>
<span id="cb3-3">gene_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>).to_dict()</span>
<span id="cb3-4">founders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> concatenate_predictions(N, completed_genes):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_dict[N]: </span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> completed_genes:</span>
<span id="cb4-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span>  </span>
<span id="cb4-5">        interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].item()</span>
<span id="cb4-6">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>: [], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>: []}</span>
<span id="cb4-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> founders:</span>
<span id="cb4-8">            input_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype0"</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb4-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(input_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb4-10">                predictions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>][:])</span>
<span id="cb4-11">                predictions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>][:])       </span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(output_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output:</span>
<span id="cb4-13">            output[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(predictions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>])</span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(output_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output:</span>
<span id="cb4-15">            output[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(predictions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>])</span>
<span id="cb4-16">        completed_genes.append(gene)</span></code></pre></div>
</div>
<p>Writing to a single file case.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> concatenate_model(N, model):</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(output_dir, model, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output:  </span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_dict[N]: </span>
<span id="cb5-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output.keys():</span>
<span id="cb5-5">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span>  </span>
<span id="cb5-6">            interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].item()</span>
<span id="cb5-7">            predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> founders:</span>
<span id="cb5-9">                input_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype0"</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb5-10">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(input_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb5-11">                    predictions.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[model][:])</span>
<span id="cb5-12">            output[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(predictions)    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(output_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr5_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output:  </span>
<span id="cb6-2">    completed_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.keys()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> N <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>):</span>
<span id="cb7-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chromosome"</span>, N)</span>
<span id="cb7-3">    concatenate_model(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(N), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chromosome 5
Chromosome 6</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>KeyboardInterrupt: </code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span> </span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_dict[N]: </span>
<span id="cb10-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output.keys():</span>
<span id="cb10-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span>  </span>
<span id="cb10-5">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].item()</span>
<span id="cb10-6">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gene:"</span>, gene)</span>
<span id="cb10-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> founders:</span>
<span id="cb10-9">        input_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype0"</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb10-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tic = time.perf_counter()</span></span>
<span id="cb10-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(input_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb10-12">            predictions.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>][:])</span>
<span id="cb10-13">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># toc = time.perf_counter()</span></span>
<span id="cb10-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(individual, "...",toc - tic, "seconds")</span></span>
<span id="cb10-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output[gene] = np.array(predictions)    </span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Gene: ENSRNOG00000007189
Gene: ENSRNOG00000010162
Gene: ENSRNOG00000010169</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>KeyboardInterrupt: </code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-07-concatenating-HS-reference-epigenomes/index.html</guid>
  <pubDate>Wed, 06 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Organizing founder haplotype probabilities into SQLite database</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-06-qtl2-probabilites-to-sqlite-database/index.html</link>
  <description><![CDATA[ 




<p>We want to store the qtl2 outputs in a database that is easily queryable by sample ID and genomic region.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5">probabilities_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/Br_genotype_probabilities'</span></span>
<span id="cb1-6">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [d <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(probabilities_dir) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.isdir(os.path.join(probabilities_dir, d))]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to read CSV files and create tables in SQLite database</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_sqlite_db(N):</span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to SQLite database</span></span>
<span id="cb2-4">    conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.db'</span>))</span>
<span id="cb2-5">    </span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb2-7">        check_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SELECT name FROM sqlite_master WHERE type='table' AND name='</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>individual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">';"</span></span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the result of the query into a DataFrame</span></span>
<span id="cb2-9">        existing_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(check_query, conn)</span>
<span id="cb2-10"></span>
<span id="cb2-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the table doesn't exist, create table</span></span>
<span id="cb2-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> existing_table.empty:</span>
<span id="cb2-13">            prob_csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.csv'</span>)</span>
<span id="cb2-14">            df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(prob_csv, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-15">            positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) </span>
<span id="cb2-16">            df.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, positions)</span>
<span id="cb2-17">            df.to_sql(individual, conn, if_exists<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'replace'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commit changes and close connection</span></span>
<span id="cb2-19">    conn.commit()</span>
<span id="cb2-20">    conn.close()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> N <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb3-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Working on chromosome"</span>, N)</span>
<span id="cb3-3">    create_sqlite_db(N)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Working on chromosome 14
Working on chromosome 15
Working on chromosome 16
Working on chromosome 17
Working on chromosome 18
Working on chromosome 19</code></pre>
</div>
</div>
<section id="preview-database" class="level2">
<h2 class="anchored" data-anchor-id="preview-database">Preview Database</h2>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to the SQLite database</span></span>
<span id="cb5-2">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/eagle/AIHPC4Edu/sabrina/Br_genotype_probabilities/chr20_probabilities.db'</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a cursor object</span></span>
<span id="cb5-5">cursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb5-6"></span>
<span id="cb5-7">query_tables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT name FROM sqlite_master WHERE type='table';"</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute the query to get table names</span></span>
<span id="cb5-10">cursor.execute(query_tables)</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch all table names</span></span>
<span id="cb5-13">tables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.fetchall()</span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through tables and print their data</span></span>
<span id="cb5-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> table <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tables[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb5-17">    table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Table: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-19">    </span>
<span id="cb5-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Query to fetch all data from the table</span></span>
<span id="cb5-21">    query_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SELECT * FROM `</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">` LIMIT 3;"</span></span>
<span id="cb5-22">    cursor.execute(query_data)</span>
<span id="cb5-23">    </span>
<span id="cb5-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch all data from the table</span></span>
<span id="cb5-25">    table_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.fetchall()</span>
<span id="cb5-26">    </span>
<span id="cb5-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the table's data</span></span>
<span id="cb5-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> table_data:</span>
<span id="cb5-29">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb5-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the database connection</span></span>
<span id="cb5-31">conn.close()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table: 00078A02B6
(3201, 0.499262964281572, 1.88520490019066e-06, 0.162477747051664, 0.0129312367910615, 0.162477747062661, 0.162477747068122, 1.88520490019106e-06, 0.0003687873347151)
(7226, 0.499997674934029, 4.75965339555511e-08, 0.162469115322473, 0.0125925304011694, 0.162469115333482, 0.162469115338949, 4.75965339555847e-08, 2.35347571803293e-06)
(7266, 0.499999935708622, 3.16496421849708e-08, 0.162469769268664, 0.0125905455363656, 0.162469769279672, 0.162469769285139, 3.16496421849787e-08, 1.47622298115919e-07)
Table: 00078A16DB
(3201, 0.499262964281493, 1.88520490019009e-06, 0.162477747051738, 0.0129312367910557, 0.16247774706207, 0.162477747068565, 1.88520490019092e-06, 0.0003687873347151)
(7226, 0.499997674934177, 4.75965339555652e-08, 0.162469115322621, 0.0125925304011694, 0.162469115332964, 0.162469115339466, 4.75965339555987e-08, 2.35347571803365e-06)
(7266, 0.499999935708543, 3.16496421849658e-08, 0.162469769268737, 0.0125905455363599, 0.162469769279081, 0.162469769285583, 3.16496421849737e-08, 1.47622298115918e-07)
Table: 000789FF72
(3201, 0.0003664564160026, 1.85213961479645e-06, 0.324211104988895, 0.0254914257674219, 0.325349456441836, 0.324211105067843, 1.85213961479693e-06, 0.0003667470385653)
(7226, 2.21861272689951e-08, 1.60772193495428e-10, 0.324559451115323, 0.0251804466288168, 0.325700315103997, 0.324559451194463, 1.60772193495378e-10, 3.13450143706256e-07)
(7266, 9.90597147195846e-12, 1.42360488857325e-13, 0.324560774755233, 0.0251764992806042, 0.325701658830483, 0.324560774834422, 1.4236048885734499e-13, 2.92289221332857e-07)
Table: 0007929C19
(3201, 0.0003664564160031, 1.85213961479936e-06, 0.179968257973192, 0.459358312378058, 0.179968263935356, 0.179968257979997, 1.85213961479891e-06, 0.000366747038566)
(7226, 2.21861272690162e-08, 1.60772193495526e-10, 0.179998235542256, 0.460004951434442, 0.179998241517562, 0.179998235549009, 1.60772193495612e-10, 3.13450143706583e-07)
(7266, 9.905971471970129e-12, 1.42360488857486e-13, 0.179997013978896, 0.460008659782977, 0.179997019954297, 0.179997013985643, 1.42360488857615e-13, 2.92289221333234e-07)
Table: 000789FF64
(3201, 0.499262964281413, 1.88520490018993e-06, 0.162477747051369, 0.0129312367910499, 0.162477747062366, 0.162477747068565, 1.88520490019076e-06, 0.0003687873347151)
(7226, 0.499997674934097, 4.75965339555576e-08, 0.162469115322252, 0.0125925304011637, 0.16246911533326, 0.162469115339466, 4.75965339555912e-08, 2.35347571803323e-06)
(7266, 0.49999993570869, 3.16496421849751e-08, 0.162469769268442, 0.0125905455363599, 0.16246976927945, 0.162469769285657, 3.1649642184983e-08, 1.47622298115919e-07)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr20'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7230</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7230</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span>
<span id="cb7-2">probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]:</span>
<span id="cb7-4">    db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.db"</span>)</span>
<span id="cb7-5">    conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(db)</span>
<span id="cb7-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a cursor object</span></span>
<span id="cb7-7">    cursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb7-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameterized query to select rows within the specified interval for the 'POS' column</span></span>
<span id="cb7-9">    query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SELECT * FROM `</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">` WHERE POS BETWEEN </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> AND </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">;"</span></span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute the query with the interval bounds as parameters</span></span>
<span id="cb7-11">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(query, conn)</span>
<span id="cb7-12">    probabilities[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df</span>
<span id="cb7-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(probabilities)</span>
<span id="cb7-14">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'00078A02B6':     POS       ACI            BN       BUF      F344      M520        MR  \
0  7226  0.499998  4.759653e-08  0.162469  0.012593  0.162469  0.162469   
1  7266  0.500000  3.164964e-08  0.162470  0.012591  0.162470  0.162470   
2  7269  0.500000  3.039399e-08  0.162470  0.012590  0.162470  0.162470   
3  7341  0.500000  2.313504e-09  0.162471  0.012587  0.162471  0.162471   
4  7581  0.500000  2.433167e-09  0.162475  0.012575  0.162475  0.162475   

            WKY            WN  
0  4.759653e-08  2.353476e-06  
1  3.164964e-08  1.476223e-07  
2  3.039399e-08  1.459054e-07  
3  2.313504e-09  1.265991e-07  
4  2.433167e-09  6.040197e-08  , '00078A16DB':     POS       ACI            BN       BUF      F344      M520        MR  \
0  7226  0.499998  4.759653e-08  0.162469  0.012593  0.162469  0.162469   
1  7266  0.500000  3.164964e-08  0.162470  0.012591  0.162470  0.162470   
2  7269  0.500000  3.039399e-08  0.162470  0.012590  0.162470  0.162470   
3  7341  0.500000  2.313504e-09  0.162471  0.012587  0.162471  0.162471   
4  7581  0.500000  2.433167e-09  0.162475  0.012575  0.162475  0.162475   

            WKY            WN  
0  4.759653e-08  2.353476e-06  
1  3.164964e-08  1.476223e-07  
2  3.039399e-08  1.459054e-07  
3  2.313504e-09  1.265991e-07  
4  2.433167e-09  6.040197e-08  , '000789FF72':     POS       ACI            BN       BUF      F344      M520        MR  \
0  7226  0.499998  4.759653e-08  0.162469  0.012593  0.162469  0.162469   
1  7266  0.500000  3.164964e-08  0.162470  0.012591  0.162470  0.162470   
2  7269  0.500000  3.039399e-08  0.162470  0.012590  0.162470  0.162470   
3  7341  0.500000  2.313504e-09  0.162471  0.012587  0.162471  0.162471   
4  7581  0.500000  2.433167e-09  0.162475  0.012575  0.162475  0.162475   

            WKY            WN  
0  4.759653e-08  2.353476e-06  
1  3.164964e-08  1.476223e-07  
2  3.039399e-08  1.459054e-07  
3  2.313504e-09  1.265991e-07  
4  2.433167e-09  6.040197e-08  }</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-06-qtl2-probabilites-to-sqlite-database/index.html</guid>
  <pubDate>Wed, 06 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Den’s haplotypes for 88 outbred rats</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-01-Den-outbred-rats-haplotypes/index.html</link>
  <description><![CDATA[ 




<p>Den’s files are all on TSCC:</p>
<ol type="1">
<li>Run qtl2-founder-haps: <code>/projects/ps-palmer/DenghuiChen/1U01DA051234/HS/eQTL/haplotypes_BiSNPs/code/run_qtl2_HaoChen.sh</code></li>
<li>Founder pair haplotypes: <code>/projects/ps-palmer/DenghuiChen/1U01DA051234/HS/eQTL/haplotypes_BiSNPs/qtl2_out/chr*_haplotype.parquet.gz</code></li>
<li>Single founder dosage: <code>/projects/ps-palmer/DenghuiChen/1U01DA051234/HS/eQTL/haplotypes_BiSNPs/qtl2_out/chr*_haplotype_collapsed.parquet.gz</code></li>
</ol>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyarrow.parquet <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pq</span>
<span id="cb1-2">haplo_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/outbred_rats_qtl2_outputs'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">founder_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pq.read_table(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>haplo_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/chr20_haplotype.parquet.gz'</span>)</span>
<span id="cb2-2">single_founder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pq.read_table(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>haplo_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/chr20_haplotype_collapsed.parquet.gz'</span>)</span></code></pre></div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-01-Den-outbred-rats-haplotypes/index.html</guid>
  <pubDate>Fri, 01 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Processing qtl2-founder-haps probabilies</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-26-qtl2-probabilities-to-csv/index.html</link>
  <description><![CDATA[ 




<p>I eventually want to organize these probabilities indexed by position in an h5 file, so that given a genomic region, for each individual, we can query probabilities at all snps in the interval. But for now, I just combine the .rds outputs into csvs for each individual, with snp IDs as row names and the 8 founder rats as the columns.</p>
<p>I created a new folder <code>/home/s1mi/Br_genotype_probabilities</code> with subdirectories for each chromosome to store csvs for each individual.</p>
<section id="concatenate-probabilites-by-chromosome" class="level2">
<h2 class="anchored" data-anchor-id="concatenate-probabilites-by-chromosome">Concatenate Probabilites by Chromosome</h2>
<div class="cell" data-hash="index_cache/html/global variables_3388f019ced2a8f039da434304fbde4f">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">qtl2_output_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/qtl2-outputs/"</span></span>
<span id="cb1-2">batch_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-3">n_batches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span></span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/functions_f5ce2b0bf17a6fa54fcaf88c64657fbe">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&amp;%"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a,b) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(a,b,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-2">split_by_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(chromosome) {</span>
<span id="cb2-3">  chr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(chromosome)</span>
<span id="cb2-4">  prob_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> qtl2_output_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-qtl2-outputs/"</span></span>
<span id="cb2-5">  output_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Br_genotype_probabilities/"</span></span>
<span id="cb2-6">  batches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(prob_dir)</span>
<span id="cb2-7"></span>
<span id="cb2-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (file <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> batches) {</span>
<span id="cb2-9">    pr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(prob_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> file)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb2-10">    samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(pr)</span>
<span id="cb2-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (sample <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples) {</span>
<span id="cb2-12">      sample_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> output_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> sample</span>
<span id="cb2-13">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(sample_dir)) {</span>
<span id="cb2-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(sample_dir)</span>
<span id="cb2-15">      }</span>
<span id="cb2-16">      csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> sample_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/chr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_probabilities.csv"</span></span>
<span id="cb2-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(csv)) {</span>
<span id="cb2-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(pr[sample, ,]), csv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quote=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-19">      }</span>
<span id="cb2-20">    }</span>
<span id="cb2-21">  }</span>
<span id="cb2-22">}</span></code></pre></div>
</div>
</section>
<section id="write-csvs" class="level2">
<h2 class="anchored" data-anchor-id="write-csvs">Write CSVs</h2>
<div class="cell" data-hash="index_cache/html/run_edbad592ddbd8208d6a58794812e013a">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chromosome:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>((i)))</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_by_sample</span>(i)</span>
<span id="cb3-4">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chromosome: 1Chromosome: 2Chromosome: 3Chromosome: 4Chromosome: 5Chromosome: 6Chromosome: 7Chromosome: 8Chromosome: 9Chromosome: 10Chromosome: 11Chromosome: 12Chromosome: 13Chromosome: 14Chromosome: 15Chromosome: 16Chromosome: 17Chromosome: 18Chromosome: 19Chromosome: 20</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-26-qtl2-probabilities-to-csv/index.html</guid>
  <pubDate>Sun, 26 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Br rat haplotype probabilities from HS founders by chromosome</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/index.html</link>
  <description><![CDATA[ 




<section id="prepare-chromosome-inputs" class="level3">
<h3 class="anchored" data-anchor-id="prepare-chromosome-inputs">Prepare Chromosome Inputs</h3>
<p>We first generate chromosome-wide input files with Dan’s original make_qtl2_inputs function locally, because I’m having so much trouble creating a conda environment with both R and python’s pysam libraries on polaris.</p>
<pre><code>conda activate genomics
cd Github/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array
GENO_DIR=/Users/sabrinami/Desktop/Sabrina/2022-23/tutorials/enformer_pipeline_test/rn7_data
DATA_DIR=/Users/sabrinami/Desktop/qtl2_data
for CHR in {1..20}
do
    python make_qtl2_inputs.py $GENO_DIR/BrainVCFs/chr${CHR}.vcf.gz $GENO_DIR/FounderVCFs/chr${CHR}.vcf.gz --working-dir $DATA_DIR/chr${CHR}-qtl2-founder-haps --gmap-dir $DATA_DIR/genetic_map
done

scp -r $DATA_DIR/chr*-qtl2-founder-haps polaris:qtl2-data</code></pre>
<p><a href="https://github.com/hakyimlab/sabrina-deep-learning-in-genomics/blob/main/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/run_qtl2_batches.py"><code>run_qtl2_batches.py</code></a> splits genotype inputs for a given chromsome into batches of 10 samples. I passed in chromosome number as a variables when I submitted <a href="https://github.com/hakyimlab/sabrina-deep-learning-in-genomics/blob/main/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/qtl2-founder-haps-by-chromsome.pbs"><code>qtl2-founder-haps-by-chromsome.pbs</code></a>.</p>
<pre><code>cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array
for i in {1..20}
do
    qsub -v CHR=${i} -N chr${i}-qtl2-founder-haps-by-chromosome qtl2-founder-haps-by-chromsome.pbs
    sleep 5
done
</code></pre>
</section>
<section id="fill-in-gaps" class="level3">
<h3 class="anchored" data-anchor-id="fill-in-gaps">Fill in Gaps</h3>
<pre><code>module load conda
conda activate genomics
GENO_DIR=/home/s1mi/enformer_rat_data/genotypes
DATA_DIR=/home/s1mi/qtl2-data
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array
python run_qtl2_batches.py --data_dir $DATA_DIR/chr1-qtl2-founder-haps --output_dir /home/s1mi/qtl2-outputs/chr1-qtl2-outputs --work_dir $DATA_DIR/tmp-chr1-qtl2-founder-haps
</code></pre>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/index.html</guid>
  <pubDate>Wed, 22 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Splitting chr20 Brain rats into batches for qtl2 analysis</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-19-split-qlt2-inputs-batches/index.html</link>
  <description><![CDATA[ 




<p>We’ll split the 340 Br rats into batches of 10. The goal is to do this without creating a new VCF for each batchThe following code subsets the chr20 input files, specifically geno.csv and covar.csv files, that were generated with <a href="https://sabrina-dl.hakyimlab.org/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/">qtl2-founder-haps code</a>. I set up by copying over the other input files that should stay the same.</p>
<pre><code>mkdir tmp-chr20-qtl2-founder-haps
mkdir chr20-qtl2-outputs
cp chr20-qtl2-founder-haps/control.yaml tmp-chr20-qtl2-founder-haps/control.yaml
cp chr20-qtl2-founder-haps/founder_geno.csv tmp-chr20-qtl2-founder-haps/founder_geno.csv
cp chr20-qtl2-founder-haps/gmap.csv tmp-chr20-qtl2-founder-haps/gmap.csv
cp chr20-qtl2-founder-haps/pmap.csv tmp-chr20-qtl2-founder-haps/pmap.csv</code></pre>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="cb2-4">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/chr20-qtl2-founder-haps'</span></span>
<span id="cb2-5">tmp_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/tmp-chr20-qtl2-founder-haps'</span></span>
<span id="cb2-6">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/chr20-qtl2-outputs'</span></span>
<span id="cb2-7">geno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/geno.csv'</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb2-8">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-9">n_batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(geno.columns) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> batch_size</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> qtl_command(output_file, n_cores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-2">    cmd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'library(qtl2); '</span></span>
<span id="cb3-4">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cross &lt;- read_cross2("</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tmp_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/control.yaml"); '</span></span>
<span id="cb3-5">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_cores<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">); '</span></span>
<span id="cb3-6">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">")'</span></span>
<span id="cb3-7">    )</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cmd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_batches):</span>
<span id="cb4-2">    tic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb4-3">    geno_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geno.iloc[:, i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>batch_size]</span>
<span id="cb4-4">    samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geno_df.columns.to_list()</span>
<span id="cb4-5">    covar_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>: samples, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'generations'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(samples)})</span>
<span id="cb4-6">    geno_df.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tmp_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/geno.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-7">    covar_df.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tmp_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/covar.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-8">    cmd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qtl_command(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/batch</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_prob.rds'</span>, n_cores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-9">    subprocess.run(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"R -e '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cmd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>, shell<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-10">    toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb4-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Batch:"</span>, i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..."</span>, (toc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tic)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minutes"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch0_prob.rds")
&gt; 
&gt; 
Batch: 1 ... 5.516161077900324 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch1_prob.rds")
&gt; 
&gt; 
Batch: 2 ... 5.188156945933588 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch2_prob.rds")
&gt; 
&gt; 
Batch: 3 ... 5.320735947232849 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch3_prob.rds")
&gt; 
&gt; 
Batch: 4 ... 5.9591666307009294 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch4_prob.rds")
&gt; 
&gt; 
Batch: 5 ... 5.304590424666336 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch5_prob.rds")
&gt; 
&gt; 
Batch: 6 ... 5.208924225267643 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch6_prob.rds")
&gt; 
&gt; 
Batch: 7 ... 5.362514834082686 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch7_prob.rds")
&gt; 
&gt; 
Batch: 8 ... 5.318476139800623 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch8_prob.rds")
&gt; 
&gt; 
Batch: 9 ... 5.43069331633354 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch9_prob.rds")
&gt; 
&gt; 
Batch: 10 ... 5.109263749249901 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch10_prob.rds")
&gt; 
&gt; 
Batch: 11 ... 5.2156281993336355 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch11_prob.rds")
&gt; 
&gt; 
Batch: 12 ... 5.699721770366887 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch12_prob.rds")
&gt; 
&gt; 
Batch: 13 ... 5.225824187783291 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch13_prob.rds")
&gt; 
&gt; 
Batch: 14 ... 4.885130250700361 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch14_prob.rds")
&gt; 
&gt; 
Batch: 15 ... 5.367877415949867 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch15_prob.rds")
&gt; 
&gt; 
Batch: 16 ... 5.298072982882149 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch16_prob.rds")
&gt; 
&gt; 
Batch: 17 ... 5.088831246948879 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch17_prob.rds")
&gt; 
&gt; 
Batch: 18 ... 5.172468327915218 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch18_prob.rds")
&gt; 
&gt; 
Batch: 19 ... 5.2715786983006785 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch19_prob.rds")
&gt; 
&gt; 
Batch: 20 ... 4.73374969640087 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch20_prob.rds")
&gt; 
&gt; 
Batch: 21 ... 4.411744385201018 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch21_prob.rds")
&gt; 
&gt; 
Batch: 22 ... 4.215313976900264 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch22_prob.rds")
&gt; 
&gt; 
Batch: 23 ... 4.53186046264988 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch23_prob.rds")
&gt; 
&gt; 
Batch: 24 ... 3.9959222979164526 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch24_prob.rds")
&gt; 
&gt; 
Batch: 25 ... 3.932872584433062 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch25_prob.rds")
&gt; 
&gt; 
Batch: 26 ... 4.306167855666717 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch26_prob.rds")
&gt; 
&gt; 
Batch: 27 ... 4.43262422256715 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch27_prob.rds")
&gt; 
&gt; 
Batch: 28 ... 4.370494974033985 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch28_prob.rds")
&gt; 
&gt; 
Batch: 29 ... 4.498125915382601 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch29_prob.rds")
&gt; 
&gt; 
Batch: 30 ... 5.5711056028997215 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch30_prob.rds")
&gt; 
&gt; 
Batch: 31 ... 5.131772985549954 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch31_prob.rds")
&gt; 
&gt; 
Batch: 32 ... 5.087727682616484 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch32_prob.rds")</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-19-split-qlt2-inputs-batches/index.html</guid>
  <pubDate>Sun, 19 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Debugging qtl2’s calc_genoprob</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-17-debugging-qtl2-founder-haps/index.html</link>
  <description><![CDATA[ 




<section id="subset-individuals" class="level3">
<h3 class="anchored" data-anchor-id="subset-individuals">Subset Individuals</h3>
<p>For debugging, we filter the VCFs to 2 samples:</p>
<pre><code>cd /Users/sabrinami/Desktop/qtl2_data
bcftools view -s '000789972A,0007899884' -Oz -o test/chr20.vcf.gz BrainVCFs/chr20.vcf.gz
bcftools index -t test/chr20.vcf.gz
bcftools view -s '000789972A,0007899884' -Oz -o test/chr19.vcf.gz BrainVCFs/chr19.vcf.gz
bcftools index -t test/chr19.vcf.gz
</code></pre>
<p>Create the input files:</p>
<pre><code>conda activate genomics
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py test/chr20.vcf.gz FounderVCFs/chr20.vcf.gz output/chr20_prob.rds --working-dir chr20-test
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py test/chr19.vcf.gz FounderVCFs/chr19.vcf.gz output/chr19_prob.rds --working-dir chr19-test
</code></pre>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_475932e5ff924ca91e9f463b2bbf0cac">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&amp;%"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a,b) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(a,b,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-2">data_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data/'</span></span>
<span id="cb3-3">chr20_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(data_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output/chr20_prob.rds'</span>)</span>
<span id="cb3-4">chr19_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(data_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output/chr19_prob.rds'</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6">chr20_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][, , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>, , chr20:3201

                    ACI           BN       BUF       F344      M520        MR
000789972A 0.4992629643 1.885205e-06 0.1389550 0.01293124 0.2504721 0.0980062
0007899884 0.0003664564 1.852144e-06 0.3551907 0.02549159 0.3575424 0.2610384
                    WKY           WN
000789972A 1.885205e-06 0.0003687873
0007899884 1.852144e-06 0.0003667471

, , chr20:7226

                    ACI           BN       BUF       F344      M520         MR
000789972A 4.999977e-01 4.759653e-08 0.1388944 0.01259253 0.2506577 0.09785527
0007899884 2.218615e-08 1.648856e-10 0.3556074 0.02518061 0.3579643 0.26124736
                    WKY           WN
000789972A 4.759653e-08 2.353476e-06
0007899884 1.648856e-10 3.134648e-07

, , chr20:7266

                    ACI           BN       BUF       F344      M520         MR
000789972A 4.999999e-01 3.164964e-08 0.1388947 0.01259055 0.2506599 0.09785478
0007899884 9.923816e-12 4.269602e-12 0.3556093 0.02517666 0.3579662 0.26124757
                    WKY           WN
000789972A 3.164964e-08 1.476223e-07
0007899884 4.269602e-12 2.923039e-07

, , chr20:7269

                    ACI           BN       BUF       F344      M520         MR
000789972A 4.999999e-01 3.039399e-08 0.1388947 0.01259039 0.2506600 0.09785475
0007899884 1.107912e-12 4.627740e-12 0.3556094 0.02517635 0.3579663 0.26124758
                    WKY           WN
000789972A 3.039399e-08 1.459054e-07
0007899884 4.627740e-12 2.906267e-07

, , chr20:7341

                    ACI           BN       BUF       F344      M520        MR
000789972A 5.000000e-01 2.313504e-09 0.1388951 0.01258686 0.2506640 0.0978539
0007899884 8.523267e-12 1.790190e-09 0.3556128 0.02516929 0.3579697 0.2612479
                    WKY           WN
000789972A 2.313504e-09 1.265991e-07
0007899884 1.790190e-09 2.523467e-07</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(chr20_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]      2      8 202387</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">chr19_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][, , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>, , chr19:2445

                 ACI           BN       BUF         F344         M520        MR
000789972A 0.2438649 4.366846e-08 0.2844450 0.0006018009 0.0006018009 0.2438649
0007899884 0.2434618 4.366846e-08 0.2848848 0.0006018009 0.0006018009 0.2434618
                    WKY        WN
000789972A 0.0006018009 0.2260199
0007899884 0.0006018009 0.2263861

, , chr19:2531

                 ACI           BN       BUF        F344        M520        MR
000789972A 0.2438709 4.949989e-10 0.2844534 0.000593287 0.000593287 0.2438709
0007899884 0.2434678 4.949989e-10 0.2848934 0.000593287 0.000593287 0.2434678
                   WKY        WN
000789972A 0.000593287 0.2260249
0007899884 0.000593287 0.2263911

, , chr19:2727

                 ACI          BN       BUF         F344         M520        MR
000789972A 0.2438845 2.10961e-13 0.2844724 0.0005741863 0.0005741863 0.2438845
0007899884 0.2434814 2.10961e-13 0.2849124 0.0005741863 0.0005741863 0.2434814
                    WKY        WN
000789972A 0.0005741863 0.2260360
0007899884 0.0005741863 0.2264023

, , chr19:2728

                 ACI           BN       BUF         F344         M520        MR
000789972A 0.2438846 2.351976e-13 0.2844726 0.0005740712 0.0005740712 0.2438846
0007899884 0.2434814 2.351976e-13 0.2849125 0.0005740712 0.0005740712 0.2434814
                    WKY        WN
000789972A 0.0005740712 0.2260361
0007899884 0.0005740712 0.2264024

, , chr19:3021

                 ACI           BN       BUF         F344         M520        MR
000789972A 0.2439049 6.487041e-12 0.2845011 0.0005454151 0.0005454151 0.2439049
0007899884 0.2435017 6.487041e-12 0.2849412 0.0005454151 0.0005454151 0.2435017
                    WKY        WN
000789972A 0.0005454151 0.2260528
0007899884 0.0005454151 0.2264192</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(chr19_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]      2      8 139713</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-17-debugging-qtl2-founder-haps/index.html</guid>
  <pubDate>Fri, 17 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Testing qtl’s founder haplotype probability inferences on a single chromosome</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/index.html</link>
  <description><![CDATA[ 




<p>We are trying to work around memory limitations by splitting the genotype inferences by chromosome. We’ll first try to get working results for chromosome 12.</p>
<section id="convert-dans-code" class="level3">
<h3 class="anchored" data-anchor-id="convert-dans-code">Convert Dan’s Code</h3>
<p>My first attempt was to copy his make_qtl_inputs and take out any loops iterating over each chromosome number. However, I run into an unexplainable <code>negative length vectors are not allowed</code> error, even though I checked that the files (gmap.csv, pmap.csv, geno.csv, founder_geno.csv) generated by the new code are identical to the original when subsetted to lines with “chr20”.</p>
<div class="cell" data-hash="index_cache/html/make_qtl_inputs_be26d11ac927d23705fca74c6b8a7c60">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qtl2_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_qtl_inputs</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-3">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data'</span></span>
<span id="cb1-4">individuals_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BrainVCFs'</span>)</span>
<span id="cb1-5">founders_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FounderVCFs'</span>)</span>
<span id="cb1-6">gmap_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>os.path.join(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'genetic_map'</span>)</span>
<span id="cb1-7">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data/qtl_inputs'</span></span>
<span id="cb1-8">make_qtl_inputs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr20'</span>, individuals_dir, founders_dir, gmap_dir, output_dir,snps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
</div>
<p>Now run the R code:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_9ac05524c49206076a3fab304e9db5ac">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data/qtl_inputs/chr20'</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(qtl2)</span>
<span id="cb2-3">cross <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_cross2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"control.yaml"</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(cross, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cross.rds'</span>)</span>
<span id="cb2-4">pr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calc_genoprob</span>(cross, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error_prob =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(pr, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'genoprob.rds'</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in .calc_genoprob2(cross$crosstype, t(cross$geno[[chr]][group[[i]], : negative length vectors are not allowed</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in saveRDS(pr, "genoprob.rds"): object 'pr' not found</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">pr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">genoprob_to_alleleprob</span>(pr); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(pr, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alleleprob.rds"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in genoprob_to_alleleprob(pr): object 'pr' not found</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in saveRDS(pr, "alleleprob.rds"): object 'pr' not found</code></pre>
</div>
</div>
<p>It’s very puzzling to me why this cross object is causing issues that didn’t appear when we marked the whole genome.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-2_d1a2559addc989cf19e5ac6e795766ce">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cross)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Object of class cross2 (crosstype "hs")

Total individuals               340
No. genotyped individuals       340
No. phenotyped individuals        0
No. with both geno &amp; pheno        0
No. covariates                    1
No. phenotype covariates          0

No. chromosomes                   1
Total markers                202387

No. markers by chr:
    20 
202387 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Github/qtl2-founder-haps/tmp-qtl2-founder-haps/cross.rds"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Object of class cross2 (crosstype "hs")

Total individuals                340
No. genotyped individuals        340
No. phenotyped individuals         0
No. with both geno &amp; pheno         0
No. covariates                     1
No. phenotype covariates           0

No. chromosomes                   20
Total markers                7144158

No. markers by chr:
     1      2      3      4      5      6      7      8      9     10     11 
720616 810342 423788 503477 532683 378129 398571 345747 328200 285406 239651 
    12     13     14     15     16     17     18     19     20 
133178 377791 324143 273548 271191 228981 226616 139713 202387 </code></pre>
</div>
</div>
</section>
<section id="original-code" class="level3">
<h3 class="anchored" data-anchor-id="original-code">Original Code</h3>
<p>I’m going back to Dan’s original code, passing in chromosome 20 VCFs. My inital reasoning for converting Dan’s code to a module was to 1) save memory by not reading in genetic mapping files for every chromosome and 2) have better control over file naming, and 3) break up the task into preparing input files (python) and qtl2 computations (R), but I realized it’s not worth the trouble of debugging.</p>
<pre><code>cd /Users/sabrinami/Desktop/qtl2_data
conda activate genomics
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py BrainVCFs/chr20.vcf.gz FounderVCFs/chr20.vcf.gz output/chr20_prob.rds --working-dir chr20-qtl2-founder-haps
</code></pre>
<p>Since I’m getting the same error as before, I want to check that it’s not an issue with chromosome 20.</p>
<pre><code>cd /Users/sabrinami/Desktop/qtl2_data
conda activate genomics
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py BrainVCFs/chr19.vcf.gz FounderVCFs/chr19.vcf.gz output/chr19_prob.rds --working-dir chr19-qtl2-founder-haps
</code></pre>
<p>It seems to run fine for chromosome 19, although I can’t confirm until I try running it on Polaris or Expanse with sufficient memory. On my local computer (8G memory), the R code ran for just under 2 hours before being killed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/macbook_calc_genoprob_bug.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">R on MacBook</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/index.html</guid>
  <pubDate>Tue, 14 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>All of the bugs encountered when calculating haplotype probabilites from founders</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-08-calculating-Br-genotype-probabilities/index.html</link>
  <description><![CDATA[ 




<p>I am using Dan Munro’s scripts to compute probabilities across the 8 founders per locus per individual. His code uses the R qtl2 package.</p>
<p>Github: <a href="https://github.com/daniel-munro/qtl2-founder-haps/tree/main">https://github.com/daniel-munro/qtl2-founder-haps/tree/main</a></p>
<p>The <code>genetic_map</code> subdirectory contains genetic mapping files from the older build rn6. I downloaded rn7 genetic markers from his preprint, <a href="https://www.biorxiv.org/content/10.1101/2023.04.13.536694v2.article-info">A revamped rat reference genome improves the discovery of genetic diversity in laboratory rats</a>, <a href="https://www.biorxiv.org/content/biorxiv/early/2023/09/29/2023.04.13.536694/DC2/embed/media-2.xlsx?download=true">Supplementary Table S2</a>.</p>
<p>I first saved Table S2 as a CSV, then split it by chromosome.</p>
<section id="write-genetic-mapping-files" class="level2">
<h2 class="anchored" data-anchor-id="write-genetic-mapping-files">Write Genetic Mapping Files</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the original CSV file</span></span>
<span id="cb1-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/MAP.csv'</span>)</span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name, group <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CHR'</span>):</span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> group[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CHR'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cM'</span>]]</span>
<span id="cb1-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/Users/sabrinami/Github/qtl2-founder-haps/rn7_genetic_map/MAP4chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt.gz'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, compression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gzip'</span>)</span></code></pre></div>
</div>
<pre><code>conda activate genomics
cd ~/Github/qtl2-founder-haps
DATA_DIR=~/Desktop/Sabrina/2022-23/tutorials/enformer_pipeline_test/rn7_data
python qtl2-founder-haps.py $DATA_DIR/filtered.Brain.rn7.vcf.gz $DATA_DIR/Palmer_HS_founders_mRatBN7_filtered.vcf.gz probs.rds --gmap-dir rn7_genetic_map
</code></pre>
<p>The <code>make_qtl_inputs</code> function in line 160 of <code>qtl2-founder-haps.py</code> writes input files for the R package qtl2, specifically the <code>calc_genoprob</code> function that computes haplotype probabilities for each individual at each loci. I was able to run through the <code>make_qtl_inputs</code> locally, but the process was killed during the R computations:</p>
<pre><code>&gt; library(qtl2); cross &lt;- read_cross2("tmp-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 1); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "probs.rds")
Error: vector memory exhausted (limit reached?)
Execution halted
</code></pre>
<p>I copied over the input files in <code>~/Github/qtl2-founder-haps/tmp-qtl2-founder-haps</code> to polaris and started an interactive job: <code>qsub -I -A AIHPC4EDU -l select=1:ncpus=64 -l walltime=2:00:00 -l filesystems=home -q preemptable</code></p>
<pre><code>cd ~/Github/qtl2-founder-haps/tmp-qtl2-founder-haps
module load conda
conda activate genomics</code></pre>
<p>Then in R:</p>
<pre><code>library(qtl2)
cross &lt;- read_cross2("control.yaml")
pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 64)
pr &lt;- genoprob_to_alleleprob(pr)
saveRDS(pr, "~/Github/qtl2-founder-haps/probs.rds")
</code></pre>
<p><strong>Debugging:</strong> I am stuck at the step calling <code>calc_genoprob</code>; after 25 minutes of running, the process gets killed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-08-calculating-Br-genotype-probabilities/polaris_calc_genoprob_bug.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">R on Polaris Compute Node with 64 CPUs</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-08-calculating-Br-genotype-probabilities/index.html</guid>
  <pubDate>Wed, 08 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Running Enformer genome-wide on HS founder rats</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/pipeline.html</link>
  <description><![CDATA[ 




<p>After subset to genes that were expressed in rat brain tissue, we end up with 23,867 genomic regions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">rn7_reference_brain_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/rn7_reference_predicted_vs_observed_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-3">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(rn7_reference_brain_gex.index[rn7_reference_brain_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'observed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Br_expressed_genes.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-5">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(gene_list))</span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## write intervals.txt</span></span>
<span id="cb1-7">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,  index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geneId'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_intervals(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>):</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb1-12">            gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot_df.loc[gene]</span>
<span id="cb1-13">            tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb1-14">            interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-15">            f.write(interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">write_intervals(gene_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata/intervals.txt"</span>)</span></code></pre></div>
</div>
<section id="run-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="run-pipeline">Run Pipeline</h3>
<pre><code>module load conda
conda activate enformer-predict-tools

python /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/founder_epigenome_config.json</code></pre>
</section>
<section id="check-predictions" class="level2">
<h2 class="anchored" data-anchor-id="check-predictions">Check Predictions</h2>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb3-2">h5_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/predictions_folder/HS_founders_genome_wide/predictions_2023-11-27/enformer_predictions/BN/haplotype0/chr10_100115821_100115821_predictions.h5"</span></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(h5_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hf.items():</span>
<span id="cb3-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key)</span>
<span id="cb3-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(value[:])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>human
[[0.09566703 0.10165276 0.08404372 ... 0.00587161 0.06136435 0.04359803]
 [0.10662825 0.1139144  0.09694222 ... 0.00824633 0.07404334 0.06823193]
 [0.09993935 0.10983597 0.09347952 ... 0.00431036 0.06122369 0.04992136]
 ...
 [0.06703217 0.06465818 0.05357087 ... 0.01535742 0.05460119 0.04726781]
 [0.03674487 0.03669333 0.02561367 ... 0.00362175 0.01091049 0.00503846]
 [0.06257919 0.07025048 0.06735092 ... 0.00419223 0.00971855 0.00822341]]
mouse
[[0.09508593 0.04494116 0.08364319 ... 0.24798432 0.38567212 0.3783706 ]
 [0.09461962 0.05752731 0.08894978 ... 0.299645   0.44955045 0.44385162]
 [0.10998561 0.07225344 0.09443015 ... 0.2621954  0.35028058 0.3864176 ]
 ...
 [0.04612014 0.0642754  0.07402609 ... 0.4328676  1.1677598  0.7585961 ]
 [0.02304047 0.02882738 0.04057743 ... 0.13793258 0.27883688 0.23426382]
 [0.04535931 0.05920705 0.08596259 ... 0.24028273 0.40435565 0.40454867]]</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/pipeline.html</guid>
  <pubDate>Tue, 07 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Running personalized Enformer pipeline on Br (round 2)</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-02-Br-personalized-prediction-additional-genes/pipeline.html</link>
  <description><![CDATA[ 




<section id="selecting-genes" class="level2">
<h2 class="anchored" data-anchor-id="selecting-genes">Selecting Genes</h2>
<p>We selected 868 genes in the first round, we are aiming to double the gene set.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed"</span>, header <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,  index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>)</span>
<span id="cb2-2">tpm_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tpm.iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:].var(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-3">tpm_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tpm_var.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## subset of genes with high observed expression variation</span></span>
<span id="cb2-5">high_tpm_var_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tpm[tpm_var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> tpm_threshold].index)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_79532/161308317.py:1: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.
  tpm = pd.read_csv("/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed", header = 0, sep="\t",  index_col= 'gene_id')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">eqtl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/Brain.rn7.cis_qtl_signif.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-2">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eqtl[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>].value_counts()</span>
<span id="cb4-3">counts.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>count    11238.000000
mean      2312.935398
std       1490.079008
min          1.000000
25%       1160.250000
50%       2236.000000
75%       3277.750000
max      10799.000000
Name: gene_id, dtype: float64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">eqtl_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb6-2">eqtl_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts[counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> eqtl_threshold].index</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> high_tpm_var_genes.intersection(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(eqtl_genes))</span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"candidate genes for enformer prediction experiments"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1358 candidate genes for enformer prediction experiments</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/gene_list.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb9-2">    completed_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb9-3">remaining_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [gene <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> completed_genes]</span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene_list_2.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb9-5">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(remaining_genes))</span></code></pre></div>
</div>
</section>
<section id="run-the-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="run-the-pipeline">Run the Pipeline</h2>
<section id="write-metadata" class="level3">
<h3 class="anchored" data-anchor-id="write-metadata">Write Metadata</h3>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## write intervals.txt</span></span>
<span id="cb10-2">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,  index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geneId'</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_intervals(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>):</span>
<span id="cb10-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb10-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb10-7">            gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot_df.loc[gene]</span>
<span id="cb10-8">            tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb10-9">            interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-10">            f.write(interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-11"></span>
<span id="cb10-12">write_intervals(remaining_genes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata/intervals.txt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_79532/3155180299.py:2: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.
  annot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\t',  index_col='geneId')</code></pre>
</div>
</div>
<pre><code>mkdir metadata
cp ~/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/metadata/individuals.txt metadata
cp ~/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/personalized_config.json .</code></pre>
<p>(Replace every string <code>2023-08-31-Br-personalized-prediction-on-more-genes</code> with <code>2023-11-02-Br-personalized-prediction-additional-genes</code>)</p>
</section>
<section id="submit-jobs" class="level3">
<h3 class="anchored" data-anchor-id="submit-jobs">Submit Jobs</h3>
<pre><code>module load conda
conda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools

python /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-02-Br-personalized-prediction-additional-genes/personalized_config.json
</code></pre>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-02-Br-personalized-prediction-additional-genes/pipeline.html</guid>
  <pubDate>Thu, 02 Nov 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Full report on Borzoi performance analysis</title>
  <dc:creator>Sofia Salazar, Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this notebook, we explored the question: <strong>Does borzoi predictions have a better performance compared to Enformer, at predicting cross-population expression for the CAGE LCL tracks?</strong></p>
<p><strong>Sofia’s Analysis</strong> involved comparisons between observed and predicted expression 136 of the top-performing genes for enformer and 140 of the worst-performing genes for enformer (total 276 genes). She sampled 100 individuals from the Geuvadis dataset for both borzoi and enformer predictions</p>
<p><strong>Sabrina’s Analysis</strong> predicted gene expression for 100 randomly-sampled genes across all 455 Geuvadis samples.</p>
<p>For both experiments, we compared the correlation between the predictions using both tools, and the ground truth measurements of the Geuvadis gene expression for the same individuals as the prediction. We examined correlations with the ground truth as a measure of performance.</p>
</section>
<section id="sofias-analysis" class="level1">
<h1>Sofia’s Analysis</h1>
<section id="libraries" class="level2">
<h2 class="anchored" data-anchor-id="libraries">Libraries</h2>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span></code></pre></div>
</details>
</div>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">DATA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/t-9ssal0/data/'</span></span>
<span id="cb2-2">PROJECT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/project2/haky/sofia/borzoiRun/'</span></span>
<span id="cb2-3">geuvadis_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DATA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geuvadis_expression.gz'</span></span>
<span id="cb2-4">geuvadis_gene_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(geuvadis_file, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb2-5">                                         dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chr'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>})</span>
<span id="cb2-6">individuals_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(PROJECT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_individuals.tsv'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-7">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals_file[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Individuals'</span>].to_list()</span></code></pre></div>
</details>
</div>
<p>Loading gene lists for both analysis</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">best_predicted_genes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/project2/haky/sofia/borzoiRun/predicted_genes_20oct.csv'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-2">best_my_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> best_predicted_genes_df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].to_list() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 136 best performing genes</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>):</span>
<span id="cb3-6">    genes_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROJECT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">gene_lists/worst_list</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv'</span>)</span>
<span id="cb3-7">    gene_list.append(genes_file[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>].to_list())</span>
<span id="cb3-8">worst_my_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sublist <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sublist] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 140 worst performing genes</span></span></code></pre></div>
</details>
</div>
</section>
<section id="functions" class="level2">
<h2 class="anchored" data-anchor-id="functions">Functions</h2>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_genes_per_file(num_files, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<span id="cb4-2">    file_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fast_"</span></span>
<span id="cb4-3">    predicted_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4">    all_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb4-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assuming both files have the same genes</span></span>
<span id="cb4-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/scratch/midway3/t-9ssal0/h5_files/'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>file_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer_predictions'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(s)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb4-8">            group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[individuals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb4-9">            predicted_genes.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(group.keys()))</span>
<span id="cb4-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> predicted_genes:</span>
<span id="cb4-11">        all_genes.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([re.sub(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"_haplo\d+"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, s) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l]))))</span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(all_genes)</span>
<span id="cb4-13"></span>
<span id="cb4-14">best_genes_per_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_genes_per_file(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>)</span>
<span id="cb4-15">worst_genes_per_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_genes_per_file(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worst"</span>)</span></code></pre></div>
</details>
</div>
<p>Note: moved all h5 files to /cds/haky/sofia/h5_files/</p>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_expression_dic(number_files, software, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>, genes_per_file):</span>
<span id="cb5-2">    file_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fast_"</span></span>
<span id="cb5-3">    expression_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k:{} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals}</span>
<span id="cb5-4">    start_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-5">    end_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb5-6">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span></span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb5-8">        gene_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> file_num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, number_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/scratch/midway3/t-9ssal0/h5_files/'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>file_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_predictions'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(file_num)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb5-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes_per_file[file_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#iterate through genes in file</span></span>
<span id="cb5-12">                    group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[individual]</span>
<span id="cb5-13">                    expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-14">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through haplotypes</span></span>
<span id="cb5-15">                        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> group[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_haplo</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>][:, index]</span>
<span id="cb5-16">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>:</span>
<span id="cb5-17">                            prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(prediction, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean over track replicates</span></span>
<span id="cb5-18">                        expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> np.mean(prediction[start_bin: end_bin])</span>
<span id="cb5-19">                    gene_expr[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expression</span>
<span id="cb5-20">                    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> prediction</span>
<span id="cb5-21">        expression_dic[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_expr</span>
<span id="cb5-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expression_dic</span>
<span id="cb5-23"></span>
<span id="cb5-24"></span>
<span id="cb5-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_predictions_across_indiv(expression_dic, genes):</span>
<span id="cb5-26">    predictions_across_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene:[] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes}</span>
<span id="cb5-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> expression_dic:</span>
<span id="cb5-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes:</span>
<span id="cb5-29">            predictions_across_ind[gene].append(expression_dic[individual][gene])</span>
<span id="cb5-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions_across_ind</span>
<span id="cb5-31"></span>
<span id="cb5-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_correlations(dic1, dic2):</span>
<span id="cb5-33">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene: np.empty(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(individuals)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dic1.keys()}</span>
<span id="cb5-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dic1.keys():</span>
<span id="cb5-35">        col_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.corrcoef(dic1[gene], dic2[gene])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-36">        corr[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col_corr</span>
<span id="cb5-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(corr)</span></code></pre></div>
</details>
</div>
</section>
<section id="first-analysis-performance-comparison-in-best-performing-genes-with-enformer" class="level2">
<h2 class="anchored" data-anchor-id="first-analysis-performance-comparison-in-best-performing-genes-with-enformer">First analysis: performance comparison in best-performing genes with Enformer</h2>
<section id="get-expression-across-individuals-for-each-gene" class="level4">
<h4 class="anchored" data-anchor-id="get-expression-across-individuals-for-each-gene">Get expression across individuals for each gene</h4>
<div class="cell" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">best_expression_borzoi_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best'</span>, best_genes_per_file)</span>
<span id="cb6-2">best_expression_enformer_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best'</span>, best_genes_per_file)</span>
<span id="cb6-3"></span>
<span id="cb6-4">best_borzoi_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(best_expression_borzoi_dic, best_my_genes)</span>
<span id="cb6-5">best_enformer_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(best_expression_enformer_dic, best_my_genes)</span></code></pre></div>
</details>
</div>
<p>Geuvadis data</p>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression.loc[geuvadis_gene_expression[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>].isin(best_my_genes)]</span>
<span id="cb7-2">geuvadis.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>]</span>
<span id="cb7-3">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[:, individuals]</span>
<span id="cb7-4">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[best_my_genes]</span>
<span id="cb7-5">best_GT_across <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene:val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(best_my_genes, geuvadis.values.tolist())}</span></code></pre></div>
</details>
</div>
</section>
<section id="correlations" class="level4">
<h4 class="anchored" data-anchor-id="correlations">Correlations</h4>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">best_corr_borzoi_enf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(best_borzoi_across_individuals, best_enformer_across_individuals)</span>
<span id="cb8-2">best_corr_enf_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(best_enformer_across_individuals, best_GT_across)</span>
<span id="cb8-3">best_corr_bor_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(best_borzoi_across_individuals, best_GT_across)</span></code></pre></div>
</details>
</div>
</section>
<section id="correlations-between-enformer-and-borzoi-predictions" class="level4">
<h4 class="anchored" data-anchor-id="correlations-between-enformer-and-borzoi-predictions">Correlations between enformer and borzoi predictions</h4>
<div class="cell" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">best_df_enf_bor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>: best_corr_borzoi_enf,</span>
<span id="cb9-2">                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>:best_corr_borzoi_enf})</span>
<span id="cb9-3">best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>])</span>
<span id="cb9-4">best_df_enf_bor.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Correlations</th>
<th data-quarto-table-cell-role="th">abs_Correlations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CDC16</td>
<td>0.824303</td>
<td>0.824303</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DPYSL4</td>
<td>0.725614</td>
<td>0.725614</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFAND2A</td>
<td>-0.945341</td>
<td>0.945341</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DCAF4</td>
<td>0.221603</td>
<td>0.221603</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFYVE19</td>
<td>0.560699</td>
<td>0.560699</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MCOLN2</td>
<td>0.664648</td>
<td>0.664648</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">XRRA1</td>
<td>0.864334</td>
<td>0.864334</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TTLL12</td>
<td>0.821124</td>
<td>0.821124</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">USP40</td>
<td>0.959084</td>
<td>0.959084</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">UGT2B17</td>
<td>0.989967</td>
<td>0.989967</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb10-2"></span>
<span id="cb10-3">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb10-4">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb10-5">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb10-6">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations Enformer - Borzoi'</span>)</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the second histogram in the second subplot</span></span>
<span id="cb10-9">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb10-10">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb10-11">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb10-12">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations Enformer - Borzoi'</span>)</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust layout and display the subplots</span></span>
<span id="cb10-15">plt.tight_layout()</span>
<span id="cb10-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="correlations-against-ground-truth" class="level4">
<h4 class="anchored" data-anchor-id="correlations-against-ground-truth">Correlations against Ground truth</h4>
<div class="cell" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">best_df_against_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>: best_corr_enf_GT,</span>
<span id="cb11-2">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>: best_corr_bor_GT,</span>
<span id="cb11-3">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>: best_corr_enf_GT,</span>
<span id="cb11-4">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>: best_corr_bor_GT})</span>
<span id="cb11-5">best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>])</span>
<span id="cb11-6">best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>])</span>
<span id="cb11-7">best_df_against_GT.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Enformer</th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">abs_Enformer</th>
<th data-quarto-table-cell-role="th">abs_Borzoi</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CDC16</td>
<td>-0.242646</td>
<td>-0.308183</td>
<td>0.242646</td>
<td>0.308183</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DPYSL4</td>
<td>0.318979</td>
<td>0.439701</td>
<td>0.318979</td>
<td>0.439701</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFAND2A</td>
<td>-0.444695</td>
<td>0.386350</td>
<td>0.444695</td>
<td>0.386350</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DCAF4</td>
<td>-0.478554</td>
<td>0.248134</td>
<td>0.478554</td>
<td>0.248134</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFYVE19</td>
<td>-0.017018</td>
<td>0.119285</td>
<td>0.017018</td>
<td>0.119285</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MCOLN2</td>
<td>0.440237</td>
<td>0.086427</td>
<td>0.440237</td>
<td>0.086427</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">XRRA1</td>
<td>0.367341</td>
<td>0.476587</td>
<td>0.367341</td>
<td>0.476587</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TTLL12</td>
<td>0.284871</td>
<td>0.278919</td>
<td>0.284871</td>
<td>0.278919</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">USP40</td>
<td>-0.452123</td>
<td>-0.500160</td>
<td>0.452123</td>
<td>0.500160</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">UGT2B17</td>
<td>0.399678</td>
<td>0.409415</td>
<td>0.399678</td>
<td>0.409415</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="51">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb12-2"></span>
<span id="cb12-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb12-4">ax1.scatter(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb12-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb12-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb12-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb12-8">ax1.legend()</span>
<span id="cb12-9"></span>
<span id="cb12-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb12-11">ax2.scatter(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>], best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb12-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb12-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb12-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb12-15">ax2.legend()</span>
<span id="cb12-16"></span>
<span id="cb12-17">plt.tight_layout()</span>
<span id="cb12-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="qq-plots-of-correlations-against-ground-truth" class="level4">
<h4 class="anchored" data-anchor-id="qq-plots-of-correlations-against-ground-truth">QQ plots of correlations against Ground truth</h4>
<div class="cell" data-execution_count="62">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb13-2"></span>
<span id="cb13-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb13-4">ax1.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb13-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.80</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.80</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb13-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb13-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb13-8">ax1.legend()</span>
<span id="cb13-9"></span>
<span id="cb13-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb13-11">ax2.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb13-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb13-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb13-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb13-15">ax2.legend()</span>
<span id="cb13-16"></span>
<span id="cb13-17">plt.tight_layout()</span>
<span id="cb13-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="comparing-different-bin-ranges-in-borzoi-performances" class="level2">
<h2 class="anchored" data-anchor-id="comparing-different-bin-ranges-in-borzoi-performances">Comparing different bin ranges in borzoi performances</h2>
<div class="cell" data-execution_count="52">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_expression_dic2(number_files, software, bins_around):</span>
<span id="cb14-2">    expression_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k:{} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals}</span>
<span id="cb14-3">    start_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bins_around) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb14-4">    end_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bins_around) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb14-5">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span></span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb14-7">        gene_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb14-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> file_num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, number_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb14-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/scratch/midway3/t-9ssal0/h5_files/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_predictions'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(file_num)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb14-10">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> best_genes_per_file[file_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#iterate through genes in file</span></span>
<span id="cb14-11">                    group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[individual]</span>
<span id="cb14-12">                    expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb14-13">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through haplotypes</span></span>
<span id="cb14-14">                        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> group[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_haplo</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>][:, index]</span>
<span id="cb14-15">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>:</span>
<span id="cb14-16">                            prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(prediction, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean over track replicates</span></span>
<span id="cb14-17">                        expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> np.mean(prediction[start_bin: end_bin])</span>
<span id="cb14-18">                    gene_expr[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expression</span>
<span id="cb14-19">                    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> prediction</span>
<span id="cb14-20">        expression_dic[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_expr</span>
<span id="cb14-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expression_dic</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="53">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">expression_borzoi_8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-2">borzoi_across_individuals_8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(expression_borzoi_8, best_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="56">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">expression_borzoi_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb16-2">borzoi_across_individuals_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(expression_borzoi_4, best_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="57">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">expression_borzoi_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-2">borzoi_across_individuals_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(expression_borzoi_2, best_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="58">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">corr_borzoi_8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(borzoi_across_individuals_8, best_GT_across)</span>
<span id="cb18-2">corr_borzoi_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(borzoi_across_individuals_4, best_GT_across)</span>
<span id="cb18-3">corr_borzoi_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(borzoi_across_individuals_2, best_GT_across)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="59">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">bin_ranges_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 16 bins'</span>: best_corr_bor_GT,</span>
<span id="cb19-2">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 8 bins'</span>: corr_borzoi_8,</span>
<span id="cb19-3">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 4 bins'</span>: corr_borzoi_4,</span>
<span id="cb19-4">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 2 bins'</span>: corr_borzoi_2})</span>
<span id="cb19-5">bin_ranges_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="59">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi 16 bins</th>
<th data-quarto-table-cell-role="th">Borzoi 8 bins</th>
<th data-quarto-table-cell-role="th">Borzoi 4 bins</th>
<th data-quarto-table-cell-role="th">Borzoi 2 bins</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CDC16</td>
<td>-0.308183</td>
<td>-0.173212</td>
<td>-0.097312</td>
<td>0.064835</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DPYSL4</td>
<td>0.439701</td>
<td>0.442904</td>
<td>0.438260</td>
<td>0.057265</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFAND2A</td>
<td>0.386350</td>
<td>0.386898</td>
<td>0.043857</td>
<td>0.544630</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DCAF4</td>
<td>0.248134</td>
<td>0.519006</td>
<td>0.557798</td>
<td>0.529078</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFYVE19</td>
<td>0.119285</td>
<td>0.125048</td>
<td>0.367074</td>
<td>-0.365466</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MCOLN2</td>
<td>0.086427</td>
<td>-0.420791</td>
<td>-0.507746</td>
<td>-0.510637</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">XRRA1</td>
<td>0.476587</td>
<td>0.488511</td>
<td>0.541467</td>
<td>0.566548</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TTLL12</td>
<td>0.278919</td>
<td>0.278045</td>
<td>0.274921</td>
<td>0.302587</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">USP40</td>
<td>-0.500160</td>
<td>-0.493973</td>
<td>-0.475467</td>
<td>-0.469835</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">UGT2B17</td>
<td>0.409415</td>
<td>0.402573</td>
<td>0.391174</td>
<td>0.389104</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="60">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> itertools</span>
<span id="cb20-2">column_combinations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(itertools.combinations(bin_ranges_df.columns, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb20-3">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, (col1, col2) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(column_combinations):</span>
<span id="cb20-6">    row, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">divmod</span>(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the row and column for the current subplot</span></span>
<span id="cb20-7">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[row, col]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the current subplot</span></span>
<span id="cb20-8"></span>
<span id="cb20-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data (customize this part as needed)</span></span>
<span id="cb20-10">    ax.scatter(bin_ranges_df[col1], bin_ranges_df[col2], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'darkorange'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations against GT'</span>)</span>
<span id="cb20-11">    ax.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity Line'</span>)</span>
<span id="cb20-12">    ax.set_xlabel(col1)</span>
<span id="cb20-13">    ax.set_ylabel(col2)</span>
<span id="cb20-14">    ax.legend()</span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust layout and display the plot</span></span>
<span id="cb20-17">plt.tight_layout()</span>
<span id="cb20-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-21-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="second-analysis-performance-comparison-in-worst-performing-genes-with-enformer" class="level2">
<h2 class="anchored" data-anchor-id="second-analysis-performance-comparison-in-worst-performing-genes-with-enformer">Second analysis: performance comparison in worst-performing genes with Enformer</h2>
<section id="get-expression-across-individuals-for-each-gene-1" class="level4">
<h4 class="anchored" data-anchor-id="get-expression-across-individuals-for-each-gene-1">Get expression across individuals for each gene</h4>
<div class="cell" data-execution_count="16">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">worst_expression_borzoi_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'worst'</span>, worst_genes_per_file)</span>
<span id="cb21-2">worst_expression_enformer_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'worst'</span>, worst_genes_per_file)</span>
<span id="cb21-3"></span>
<span id="cb21-4">worst_borzoi_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(worst_expression_borzoi_dic, worst_my_genes)</span>
<span id="cb21-5">worst_enformer_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(worst_expression_enformer_dic, worst_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="19">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression.loc[geuvadis_gene_expression[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>].isin(worst_my_genes)]</span>
<span id="cb22-2">geuvadis.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>]</span>
<span id="cb22-3">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[:, individuals]</span>
<span id="cb22-4">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[worst_my_genes]</span>
<span id="cb22-5">worst_GT_across <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene:val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(worst_my_genes, geuvadis.values.tolist())}</span></code></pre></div>
</details>
</div>
</section>
<section id="correlations-1" class="level3">
<h3 class="anchored" data-anchor-id="correlations-1">Correlations</h3>
<div class="cell" data-execution_count="20">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">worst_corr_borzoi_enf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(worst_borzoi_across_individuals, worst_enformer_across_individuals)</span>
<span id="cb23-2">worst_corr_enf_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(worst_enformer_across_individuals, worst_GT_across)</span>
<span id="cb23-3">worst_corr_bor_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(worst_borzoi_across_individuals, worst_GT_across)</span></code></pre></div>
</details>
</div>
<section id="correlations-between-enformer-and-borzoi-predictions-1" class="level4">
<h4 class="anchored" data-anchor-id="correlations-between-enformer-and-borzoi-predictions-1">Correlations between enformer and borzoi predictions</h4>
<div class="cell" data-execution_count="21">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">worst_df_enf_bor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>: worst_corr_borzoi_enf,</span>
<span id="cb24-2">                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>:worst_corr_borzoi_enf})</span>
<span id="cb24-3">worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>])</span>
<span id="cb24-4">worst_df_enf_bor.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Correlations</th>
<th data-quarto-table-cell-role="th">abs_Correlations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ATP6V1E2</td>
<td>0.052960</td>
<td>0.052960</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ZNF384</td>
<td>0.672741</td>
<td>0.672741</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SART3</td>
<td>0.732671</td>
<td>0.732671</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SLC15A2</td>
<td>-0.523820</td>
<td>0.523820</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AKR7A2</td>
<td>0.075323</td>
<td>0.075323</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">GBP1</td>
<td>0.513649</td>
<td>0.513649</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZNF624</td>
<td>-0.668723</td>
<td>0.668723</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MRTO4</td>
<td>-0.090715</td>
<td>0.090715</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CD84</td>
<td>0.076973</td>
<td>0.076973</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RAB40B</td>
<td>-0.690359</td>
<td>0.690359</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="22">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb25-2"></span>
<span id="cb25-3">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb25-4">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb25-5">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb25-6">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations Enformer - Borzoi'</span>)</span>
<span id="cb25-7"></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the second histogram in the second subplot</span></span>
<span id="cb25-9">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb25-10">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb25-11">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb25-12">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations Enformer - Borzoi'</span>)</span>
<span id="cb25-13"></span>
<span id="cb25-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust layout and display the subplots</span></span>
<span id="cb25-15">plt.tight_layout()</span>
<span id="cb25-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-26-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="correlations-against-ground-truth-1" class="level4">
<h4 class="anchored" data-anchor-id="correlations-against-ground-truth-1">Correlations against Ground truth</h4>
<div class="cell" data-execution_count="23">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">worst_df_against_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>: worst_corr_enf_GT,</span>
<span id="cb26-2">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>: worst_corr_bor_GT,</span>
<span id="cb26-3">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>: worst_corr_enf_GT,</span>
<span id="cb26-4">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>: worst_corr_bor_GT})</span>
<span id="cb26-5">worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>])</span>
<span id="cb26-6">worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>])</span>
<span id="cb26-7">worst_df_against_GT.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Enformer</th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">abs_Enformer</th>
<th data-quarto-table-cell-role="th">abs_Borzoi</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ATP6V1E2</td>
<td>0.164837</td>
<td>0.322586</td>
<td>0.164837</td>
<td>0.322586</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ZNF384</td>
<td>0.079999</td>
<td>0.129734</td>
<td>0.079999</td>
<td>0.129734</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SART3</td>
<td>-0.031612</td>
<td>-0.124788</td>
<td>0.031612</td>
<td>0.124788</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SLC15A2</td>
<td>-0.078513</td>
<td>0.076483</td>
<td>0.078513</td>
<td>0.076483</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AKR7A2</td>
<td>-0.107319</td>
<td>0.280086</td>
<td>0.107319</td>
<td>0.280086</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">GBP1</td>
<td>-0.167450</td>
<td>-0.006239</td>
<td>0.167450</td>
<td>0.006239</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZNF624</td>
<td>0.037769</td>
<td>0.005369</td>
<td>0.037769</td>
<td>0.005369</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MRTO4</td>
<td>-0.255579</td>
<td>0.036356</td>
<td>0.255579</td>
<td>0.036356</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CD84</td>
<td>0.096425</td>
<td>0.063115</td>
<td>0.096425</td>
<td>0.063115</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RAB40B</td>
<td>-0.045073</td>
<td>0.052897</td>
<td>0.045073</td>
<td>0.052897</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="47">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb27-2"></span>
<span id="cb27-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb27-4">ax1.scatter(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb27-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb27-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb27-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb27-8">ax1.legend()</span>
<span id="cb27-9"></span>
<span id="cb27-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb27-11">ax2.scatter(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>], worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb27-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb27-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb27-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb27-15">ax2.legend()</span>
<span id="cb27-16"></span>
<span id="cb27-17">plt.tight_layout()</span>
<span id="cb27-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-28-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="qq-plots-of-correlations-against-ground-truth-1" class="level4">
<h4 class="anchored" data-anchor-id="qq-plots-of-correlations-against-ground-truth-1">QQ plots of correlations against ground truth</h4>
<div class="cell" data-execution_count="49">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb28-2"></span>
<span id="cb28-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb28-4">ax1.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb28-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.70</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.70</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb28-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb28-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb28-8">ax1.legend()</span>
<span id="cb28-9"></span>
<span id="cb28-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb28-11">ax2.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb28-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb28-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb28-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb28-15">ax2.legend()</span>
<span id="cb28-16"></span>
<span id="cb28-17">plt.tight_layout()</span>
<span id="cb28-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-29-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
</section>
</section>
<section id="sabrinas-analysis" class="level1">
<h1>Sabrina’s Analysis</h1>
<section id="collecting-results" class="level2">
<h2 class="anchored" data-anchor-id="collecting-results">Collecting Results</h2>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb29-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb29-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb29-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb29-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb29-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb29-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb29-8"></span>
<span id="cb29-9">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb29-10">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb29-11">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb29-12">prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction"</span></span>
<span id="cb29-13">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions"</span></span>
<span id="cb29-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb29-15">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb29-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/completed_intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb29-17">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb29-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with open("intervals.txt", "r") as f:</span></span>
<span id="cb29-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     intervals.extend(f.read().splitlines()[:5]) # test on first few genes</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb30-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> interval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> intervals:</span>
<span id="cb30-3">    split_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb30-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span>
<span id="cb30-5">    tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb30-6">    gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.index[(hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tss)]</span>
<span id="cb30-7">    gene_list.append(gene.item())</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">CAGE_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list}</span>
<span id="cb31-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb31-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb31-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb31-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb31-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb31-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb31-8">                haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, :])</span>
<span id="cb31-9">                haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, :])</span>
<span id="cb31-10">                prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb31-11">            CAGE_dict[gene].append(prediction)</span>
<span id="cb31-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb31-13">            CAGE_dict[gene].append(np.nan)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb32-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb33-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb33-3">    observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb33-4">    expr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>: CAGE_dict[gene]}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb33-5">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df.dropna()</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="6">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">pearson_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb34-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb34-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb34-4">    pearson_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">spearman_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb35-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb35-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb35-4">    spearman_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</details>
</div>
<section id="borzois-best-performing-gene" class="level3">
<h3 class="anchored" data-anchor-id="borzois-best-performing-gene">Borzoi’s Best Performing Gene</h3>
<p><strong>(out of the first 47 randomly-sampled genes)</strong> ENSG00000137265 was the best performing gene (both for Spearman and Pearson R) for Borzoi’s personalized prediction.</p>
<div class="cell" data-execution_count="8">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb36-2">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000137265'</span>]</span>
<span id="cb36-3">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb36-4">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb36-5"></span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb36-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb36-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb36-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for ENSG00000137265"</span>)</span>
<span id="cb36-11"></span>
<span id="cb36-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb36-13">plt.legend()</span>
<span id="cb36-14">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-37-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="compare-correlations-to-enformer" class="level2">
<h2 class="anchored" data-anchor-id="compare-correlations-to-enformer">Compare Correlations to Enformer</h2>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb37-2">enformer_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb37-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb37-4">    gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'external_gene_name'</span>]</span>
<span id="cb37-5">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ge'</span>][enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene_name]</span>
<span id="cb37-6">    enformer_corr.append(corr.item())</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr</span>
<span id="cb38-2">spearman_corr_by_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>}).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>])</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">spearman_corr_by_model.head()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">Enformer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000011638</td>
<td>0.097914</td>
<td>0.241614</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000112031</td>
<td>0.036816</td>
<td>-0.007003</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000172732</td>
<td>0.022511</td>
<td>0.078569</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000173638</td>
<td>0.112324</td>
<td>-0.084114</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000156535</td>
<td>0.084083</td>
<td>0.031968</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb40-2">plt.scatter(spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb40-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb40-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb40-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb40-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb40-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb40-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb40-9"></span>
<span id="cb40-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-41-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb41-2">plt.scatter(spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(), spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(), marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb41-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb41-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb41-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb41-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb41-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Absolute Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb41-9"></span>
<span id="cb41-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-42-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="bin-sizing" class="level3">
<h3 class="anchored" data-anchor-id="bin-sizing">Bin Sizing</h3>
<p>We used a 4 bin window centered at the TSS for each CAGE computation, we want to see which bin width gives the best estimate.</p>
<div class="cell" data-execution_count="15">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">CAGE_dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb42-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb42-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb42-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb42-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb42-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb42-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb42-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): </span>
<span id="cb42-9">                    haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb42-10">                    haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb42-11">                    prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb42-12">                    CAGE_dicts[i][gene].append(prediction)</span>
<span id="cb42-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb42-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb42-15">                CAGE_dicts[i][gene].append(np.nan)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="16">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">spearman_corr_by_bin_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>: enformer_corr}, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_list)</span>
<span id="cb43-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb43-3">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb43-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb43-5">        observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb43-6">        predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CAGE_dicts[i][gene]</span>
<span id="cb43-7">        corr, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(observed, predicted)</span>
<span id="cb43-8">        results.append(corr)</span>
<span id="cb43-9">    spearman_corr_by_bin_size[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Borzoi, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> bins'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="17">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> histogram(x, title):</span>
<span id="cb44-2">    plt.hist(x, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb44-3">    plt.title(title)</span>
<span id="cb44-4">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spearman Correlations'</span>)</span>
<span id="cb44-5">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb44-6">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(x)</span>
<span id="cb44-7">    plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb44-8">    plt.legend()</span>
<span id="cb44-9"></span>
<span id="cb44-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb44-11">    plt.show()</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="18">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size:</span>
<span id="cb45-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)</span>
<span id="cb45-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size[column]</span>
<span id="cb45-4">    histogram(x, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Cross-Population Prediction Performance for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on N=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-6.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="19">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size:</span>
<span id="cb46-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)</span>
<span id="cb46-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size[column].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>()</span>
<span id="cb46-4">    histogram(x, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Absolute Cross-Population Prediction Correlation for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on N=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-6.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">model_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb47-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb47-3">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.loc[index].idxmax()</span>
<span id="cb47-4">    model_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb47-5">model_abs_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb47-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb47-7">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().loc[index].idxmax()</span>
<span id="cb47-8">    model_abs_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb47-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Correlation Model:"</span>)</span>
<span id="cb47-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_perf_dict)</span>
<span id="cb47-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Absolute Valued Correlation Model:"</span>)</span>
<span id="cb47-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_abs_perf_dict)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Highest Correlation Model:
{'Enformer': 30, 'Borzoi, 2 bins': 6, 'Borzoi, 4 bins': 5, 'Borzoi, 6 bins': 2, 'Borzoi, 8 bins': 5, 'Borzoi, 10 bins': 4}
Highest Absolute Valued Correlation Model:
{'Enformer': 33, 'Borzoi, 2 bins': 7, 'Borzoi, 4 bins': 5, 'Borzoi, 6 bins': 2, 'Borzoi, 8 bins': 4, 'Borzoi, 10 bins': 1}</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>After these analysis, we can conclude that predictions with borzoi are not significantly different, in performance terms, than enformer. While it does seem that borzoi improves the performance for those genes that previously performed bad with enformer, the improvement is not significant. Additionally, borzoi doesn’t improve predictive performance for the genes that already performed well with enformer.</p>
<p>It should be noted that these analysis are limited by the number of individuals and the small sample of genes that I considered. Also, they are based only on the CAGE LCL track(s), yet, it’s important to remember that borzoi does predict for RNA-seq tracks while enformer does not.</p>


</section>
</section>

 ]]></description>
  <category>analysis</category>
  <category>report</category>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index.html</guid>
  <pubDate>Wed, 25 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Comparing Enformer and Borzoi prediction on GEUVADIS individuals</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index.html</link>
  <description><![CDATA[ 




<p>Based off the limited results from personalized prediction across GEUVADIS individuals (N=455), I conclude that Borzoi does not outperform Enformer in predicting cross-population variation in gene expression. At the very bottom, I found that for most genes, Enformer had the best cross-population predictions out of all Borzoi estimates (from varying CAGE TSS window sizes).</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb1-3">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"external_gene_name"</span>)</span>
<span id="cb1-4">genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>]).intersection(hg38_annot.index)</span>
<span id="cb1-5">genes_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(genes)]</span>
<span id="cb1-6">sample_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genes_annot.sample(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, annot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_genes.iterrows():</span>
<span id="cb2-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-4">    intervals.append(interval)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(intervals))</span></code></pre></div>
</div>
<section id="submit-pbs-job" class="level3">
<h3 class="anchored" data-anchor-id="submit-pbs-job">Submit PBS Job</h3>
<pre><code>#!/bin/bash
#PBS -A AIHPC4EDU
#PBS -q preemptable
#PBS -l walltime=6:00:00
#PBS -l select=2:ncpus=64:ngpus=16
#PBS -l filesystems=home:eagle
#PBS -N borzoi_across_geuvadis_parallel

module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction

python3 personalized_prediction.py \
--intervals_file intervals.txt \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions</code></pre>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-8"></span>
<span id="cb5-9">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb5-10">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb5-11">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb5-12">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions"</span></span>
<span id="cb5-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-14">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb5-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"completed_intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-16">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb5-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-18">    intervals.extend(f.read().splitlines()[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test on first few genes</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> interval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> intervals:</span>
<span id="cb6-3">    split_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb6-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span>
<span id="cb6-5">    tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb6-6">    gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.index[(hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tss)]</span>
<span id="cb6-7">    gene_list.append(gene.item())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">CAGE_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list}</span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb7-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb7-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb7-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb7-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb7-8">                haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, :])</span>
<span id="cb7-9">                haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, :])</span>
<span id="cb7-10">                prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-11">            CAGE_dict[gene].append(prediction)</span>
<span id="cb7-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-13">            CAGE_dict[gene].append(np.nan)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb9-3">    observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb9-4">    expr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>: CAGE_dict[gene]}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb9-5">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df.dropna()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pearson_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb10-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb10-4">    pearson_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">spearman_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb11-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb11-4">    spearman_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb12-2">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000137265'</span>]</span>
<span id="cb12-3">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb12-4">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb12-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb12-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb12-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for ENSG00000137265"</span>)</span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb12-13">plt.legend()</span>
<span id="cb12-14">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>ENSG00000137265 was the best performing gene (both for Spearman and Pearson R) for Borzoi’s personalized prediction.</p>
</section>
<section id="compare-correlations-to-enformer" class="level2">
<h2 class="anchored" data-anchor-id="compare-correlations-to-enformer">Compare Correlations to Enformer</h2>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb13-2">enformer_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb13-4">    gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'external_gene_name'</span>]</span>
<span id="cb13-5">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ge'</span>][enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene_name]</span>
<span id="cb13-6">    enformer_corr.append(corr.item())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr</span>
<span id="cb14-2">spearman_corr_by_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>}).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">spearman_corr_by_model.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">Enformer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000176058</td>
<td>-0.005758</td>
<td>-0.027832</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000156931</td>
<td>-0.075927</td>
<td>0.051405</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000118804</td>
<td>0.027522</td>
<td>0.004061</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000076924</td>
<td>0.058653</td>
<td>0.324224</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000167562</td>
<td>-0.027883</td>
<td>0.062367</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb16-2">plt.scatter(spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb16-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb16-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb16-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb16-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb16-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="bin-sizing" class="level3">
<h3 class="anchored" data-anchor-id="bin-sizing">Bin Sizing</h3>
<p>We used a 4 bin window centered at the TSS for each CAGE computation, we want to see which bin width gives the best estimate.</p>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">CAGE_dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb17-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb17-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb17-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb17-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb17-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb17-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): </span>
<span id="cb17-9">                    haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb17-10">                    haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb17-11">                    prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb17-12">                    CAGE_dicts[i][gene].append(prediction)</span>
<span id="cb17-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb17-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb17-15">                CAGE_dicts[i][gene].append(np.nan)</span>
<span id="cb17-16">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">spearman_corr_by_bin_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>: enformer_corr}, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_list)</span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb18-3">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb18-5">        observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb18-6">        predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CAGE_dicts[i][gene]</span>
<span id="cb18-7">        corr, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(observed, predicted)</span>
<span id="cb18-8">        results.append(corr)</span>
<span id="cb18-9">    spearman_corr_by_bin_size[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Borzoi, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> bins'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span></code></pre></div>
</div>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> histogram(x, title):</span>
<span id="cb19-2">    plt.hist(x, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb19-3">    plt.title(title)</span>
<span id="cb19-4">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spearman Correlations'</span>)</span>
<span id="cb19-5">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb19-6">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(x)</span>
<span id="cb19-7">    plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb19-8">    plt.legend()</span>
<span id="cb19-9"></span>
<span id="cb19-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb19-11">    plt.show()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size:</span>
<span id="cb20-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)</span>
<span id="cb20-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size[column]</span>
<span id="cb20-4">    histogram(x, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Personalized Prediction Performance for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on N=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-6.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">model_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb21-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb21-3">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.loc[index].idxmax()</span>
<span id="cb21-4">    model_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb21-5">model_abs_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb21-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb21-7">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().loc[index].idxmax()</span>
<span id="cb21-8">    model_abs_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Correlation Model:"</span>)</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_perf_dict)</span>
<span id="cb22-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Absolute Valued Correlation Model:"</span>)</span>
<span id="cb22-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_abs_perf_dict)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Highest Correlation Model:
{'Enformer': 18, 'Borzoi, 2 bins': 4, 'Borzoi, 4 bins': 1, 'Borzoi, 6 bins': 2, 'Borzoi, 8 bins': 2, 'Borzoi, 10 bins': 1}
Highest Absolute Valued Correlation Model:
{'Enformer': 18, 'Borzoi, 2 bins': 3, 'Borzoi, 4 bins': 2, 'Borzoi, 6 bins': 1, 'Borzoi, 8 bins': 3, 'Borzoi, 10 bins': 1}</code></pre>
</div>
</div>
<p>These plots suggest that averaging an 8-bin window (equivalent to 2 Enformer bins) might be the best method to estimate gene expression, but not by much:</p>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb24-2">plt.scatter(spearman_corr_by_bin_size[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_bin_size[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi, 8 bins'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb24-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb24-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb24-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb24-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb24-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-23-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index.html</guid>
  <pubDate>Fri, 20 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Validating High Correlation Genes from Huang et al.</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index.html</link>
  <description><![CDATA[ 




<p><a href="https://www.biorxiv.org/content/10.1101/2023.06.30.547100v1.full.pdf">Huang et al.</a> recorded high cross-population correlation for SLFN5 (Ensembl: ENSG00000166750) from Enformer (CAGE:LCL) on GEUVADIS individuals. We will run the same test with Borzoi’s stranded CAGE tracks and GTEx RNA-seq.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/SLFN5.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Huang et al.&nbsp;Figure</figcaption>
</figure>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb1-3">hg38_annot.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000166750'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>external_gene_name             SLFN5
chromosome_name                   17
transcription_start_site    35243072
transcript_start            35243072
transcript_end              35273655
Name: ENSG00000166750, dtype: object</code></pre>
</div>
</div>
<pre><code>module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene

export LD_LIBRARY_PATH=/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:$LD_LIBRARY_PATH

echo $LD_LIBRARY_PATH

python3 personalized_prediction.py \
--intervals_file intervals.txt \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /grand/TFXcan/imlab/users/sabrina/redo-borzoi-personalized-test
</code></pre>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb4-5">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb4-6">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb4-7">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb4-8">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSG00000166750"</span></span>
<span id="cb4-9">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/redo-borzoi-personalized-test"</span></span>
<span id="cb4-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-11">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb5-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr17_35243072_35243072_predictions.h5'</span>)</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb5-5">        haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]]</span>
<span id="cb5-6">        haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]]</span>
<span id="cb5-7">        CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_1)</span>
<span id="cb5-8">        CAGE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_2)</span>
<span id="cb5-9">        CAGE_predictions.append((CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CAGE_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb6-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-4">observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>: CAGE_predictions, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb7-2">gex_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Predicted</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Predicted</td>
<td>1.000000</td>
<td>0.158283</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Observed</td>
<td>0.158283</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb8-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb9-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb9-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pearson R: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb9-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb9-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb9-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for SLFN5"</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb9-11">plt.legend()</span>
<span id="cb9-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="positive-strand-only" class="level2">
<h2 class="anchored" data-anchor-id="positive-strand-only">Positive Strand Only</h2>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">stranded_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb10-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr17_35243072_35243072_predictions.h5'</span>)</span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb10-5">        haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>]</span>
<span id="cb10-6">        haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>]</span>
<span id="cb10-7">        CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_1)</span>
<span id="cb10-8">        CAGE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_2)</span>
<span id="cb10-9">        stranded_CAGE_predictions.append((CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CAGE_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted+'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stranded_CAGE_predictions</span>
<span id="cb11-2">gex_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted+'</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Observed</th>
<th data-quarto-table-cell-role="th">Predicted</th>
<th data-quarto-table-cell-role="th">Predicted+</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Observed</td>
<td>1.000000</td>
<td>0.158283</td>
<td>0.160137</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Predicted</td>
<td>0.158283</td>
<td>1.000000</td>
<td>0.997363</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Predicted+</td>
<td>0.160137</td>
<td>0.997363</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb12-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted+'</span>])</span>
<span id="cb12-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pearson R: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb12-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb12-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted+"</span>)</span>
<span id="cb12-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for SLFN5"</span>)</span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb12-11">plt.legend()</span>
<span id="cb12-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index.html</guid>
  <pubDate>Wed, 18 Oct 2023 07:00:00 GMT</pubDate>
</item>
</channel>
</rss>
