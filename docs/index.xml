<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>deep-learning-in-genomics</title>
<link>https://sabrinami.quarto.pub/deep-learning-in-genomics/index.html</link>
<atom:link href="https://sabrinami.quarto.pub/deep-learning-in-genomics/index.xml" rel="self" type="application/rss+xml"/>
<description>Sabrina&#39;s blog for Deep Learning in Genomics course</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Fri, 20 Oct 2023 07:00:00 GMT</lastBuildDate>
<item>
  <title>Comparing Enformer and Borzoi prediction on GEUVADIS individuals</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index.html</link>
  <description><![CDATA[ 




<p>Based off the limited results from personalized prediction across GEUVADIS individuals (N=455), I conclude that Borzoi does not outperform Enformer in predicting cross-population variation in gene expression. At the very bottom, I found that for most genes, Enformer had the best cross-population predictions out of all Borzoi estimates (from varying CAGE TSS window sizes).</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb1-3">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"external_gene_name"</span>)</span>
<span id="cb1-4">genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>]).intersection(hg38_annot.index)</span>
<span id="cb1-5">genes_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(genes)]</span>
<span id="cb1-6">sample_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genes_annot.sample(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, annot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_genes.iterrows():</span>
<span id="cb2-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-4">    intervals.append(interval)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(intervals))</span></code></pre></div>
</div>
<section id="submit-pbs-job" class="level3">
<h3 class="anchored" data-anchor-id="submit-pbs-job">Submit PBS Job</h3>
<pre><code>#!/bin/bash
#PBS -A AIHPC4EDU
#PBS -q preemptable
#PBS -l walltime=6:00:00
#PBS -l select=2:ncpus=64:ngpus=16
#PBS -l filesystems=home:eagle
#PBS -N borzoi_across_geuvadis_parallel

module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction

python3 personalized_prediction.py \
--intervals_file intervals.txt \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions</code></pre>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-8"></span>
<span id="cb5-9">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb5-10">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb5-11">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb5-12">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions"</span></span>
<span id="cb5-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-14">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb5-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"completed_intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-16">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb5-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-18">    intervals.extend(f.read().splitlines()[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test on first few genes</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> interval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> intervals:</span>
<span id="cb6-3">    split_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb6-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span>
<span id="cb6-5">    tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb6-6">    gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.index[(hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tss)]</span>
<span id="cb6-7">    gene_list.append(gene.item())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">CAGE_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list}</span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb7-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb7-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb7-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb7-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb7-8">                haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, :])</span>
<span id="cb7-9">                haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, :])</span>
<span id="cb7-10">                prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-11">            CAGE_dict[gene].append(prediction)</span>
<span id="cb7-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-13">            CAGE_dict[gene].append(np.nan)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb9-3">    observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb9-4">    expr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>: CAGE_dict[gene]}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb9-5">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df.dropna()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pearson_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb10-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb10-4">    pearson_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">spearman_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb11-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb11-4">    spearman_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb12-2">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000137265'</span>]</span>
<span id="cb12-3">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb12-4">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb12-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb12-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb12-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for ENSG00000137265"</span>)</span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb12-13">plt.legend()</span>
<span id="cb12-14">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>ENSG00000137265 was the best performing gene (both for Spearman and Pearson R) for Borzoi’s personalized prediction.</p>
</section>
<section id="compare-correlations-to-enformer" class="level2">
<h2 class="anchored" data-anchor-id="compare-correlations-to-enformer">Compare Correlations to Enformer</h2>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb13-2">enformer_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb13-4">    gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'external_gene_name'</span>]</span>
<span id="cb13-5">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ge'</span>][enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene_name]</span>
<span id="cb13-6">    enformer_corr.append(corr.item())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr</span>
<span id="cb14-2">spearman_corr_by_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>}).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">spearman_corr_by_model.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">Enformer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000176058</td>
<td>-0.005758</td>
<td>-0.027832</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000156931</td>
<td>-0.075927</td>
<td>0.051405</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000118804</td>
<td>0.027522</td>
<td>0.004061</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000076924</td>
<td>0.058653</td>
<td>0.324224</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000167562</td>
<td>-0.027883</td>
<td>0.062367</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb16-2">plt.scatter(spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb16-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb16-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb16-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb16-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb16-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="bin-sizing" class="level3">
<h3 class="anchored" data-anchor-id="bin-sizing">Bin Sizing</h3>
<p>We used a 4 bin window centered at the TSS for each CAGE computation, we want to see which bin width gives the best estimate.</p>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">CAGE_dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb17-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb17-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb17-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb17-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb17-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb17-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): </span>
<span id="cb17-9">                    haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb17-10">                    haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb17-11">                    prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb17-12">                    CAGE_dicts[i][gene].append(prediction)</span>
<span id="cb17-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb17-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb17-15">                CAGE_dicts[i][gene].append(np.nan)</span>
<span id="cb17-16">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">spearman_corr_by_bin_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>: enformer_corr}, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_list)</span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb18-3">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb18-5">        observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb18-6">        predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CAGE_dicts[i][gene]</span>
<span id="cb18-7">        corr, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(observed, predicted)</span>
<span id="cb18-8">        results.append(corr)</span>
<span id="cb18-9">    spearman_corr_by_bin_size[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Borzoi, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> bins'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span></code></pre></div>
</div>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> histogram(x, title):</span>
<span id="cb19-2">    plt.hist(x, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb19-3">    plt.title(title)</span>
<span id="cb19-4">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spearman Correlations'</span>)</span>
<span id="cb19-5">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb19-6">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(x)</span>
<span id="cb19-7">    plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb19-8">    plt.legend()</span>
<span id="cb19-9"></span>
<span id="cb19-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb19-11">    plt.show()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size:</span>
<span id="cb20-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)</span>
<span id="cb20-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size[column]</span>
<span id="cb20-4">    histogram(x, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Personalized Prediction Performance for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on N=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-6.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">model_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb21-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb21-3">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.loc[index].idxmax()</span>
<span id="cb21-4">    model_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb21-5">model_abs_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb21-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb21-7">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().loc[index].idxmax()</span>
<span id="cb21-8">    model_abs_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Correlation Model:"</span>)</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_perf_dict)</span>
<span id="cb22-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Absolute Valued Correlation Model:"</span>)</span>
<span id="cb22-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_abs_perf_dict)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Highest Correlation Model:
{'Enformer': 18, 'Borzoi, 2 bins': 4, 'Borzoi, 4 bins': 1, 'Borzoi, 6 bins': 2, 'Borzoi, 8 bins': 2, 'Borzoi, 10 bins': 1}
Highest Absolute Valued Correlation Model:
{'Enformer': 18, 'Borzoi, 2 bins': 3, 'Borzoi, 4 bins': 2, 'Borzoi, 6 bins': 1, 'Borzoi, 8 bins': 3, 'Borzoi, 10 bins': 1}</code></pre>
</div>
</div>
<p>These plots suggest that averaging an 8-bin window (equivalent to 2 Enformer bins) might be the best method to estimate gene expression, but not by much:</p>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb24-2">plt.scatter(spearman_corr_by_bin_size[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_bin_size[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi, 8 bins'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb24-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb24-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb24-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb24-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb24-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-23-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index.html</guid>
  <pubDate>Fri, 20 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Validating High Correlation Genes from Huang et al.</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index.html</link>
  <description><![CDATA[ 




<p><a href="https://www.biorxiv.org/content/10.1101/2023.06.30.547100v1.full.pdf">Huang et al.</a> recorded high cross-population correlation for SLFN5 (Ensembl: ENSG00000166750) from Enformer (CAGE:LCL) on GEUVADIS individuals. We will run the same test with Borzoi’s stranded CAGE tracks and GTEx RNA-seq.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/SLFN5.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Huang et al.&nbsp;Figure</figcaption>
</figure>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb1-3">hg38_annot.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000166750'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>external_gene_name             SLFN5
chromosome_name                   17
transcription_start_site    35243072
transcript_start            35243072
transcript_end              35273655
Name: ENSG00000166750, dtype: object</code></pre>
</div>
</div>
<pre><code>module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene

export LD_LIBRARY_PATH=/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:$LD_LIBRARY_PATH

echo $LD_LIBRARY_PATH

python3 personalized_prediction.py \
--intervals_file intervals.txt \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /grand/TFXcan/imlab/users/sabrina/redo-borzoi-personalized-test
</code></pre>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb4-5">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb4-6">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb4-7">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb4-8">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSG00000166750"</span></span>
<span id="cb4-9">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/redo-borzoi-personalized-test"</span></span>
<span id="cb4-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-11">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb5-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr17_35243072_35243072_predictions.h5'</span>)</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb5-5">        haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]]</span>
<span id="cb5-6">        haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]]</span>
<span id="cb5-7">        CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_1)</span>
<span id="cb5-8">        CAGE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_2)</span>
<span id="cb5-9">        CAGE_predictions.append((CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CAGE_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb6-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-4">observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>: CAGE_predictions, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb7-2">gex_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Predicted</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Predicted</td>
<td>1.000000</td>
<td>0.158283</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Observed</td>
<td>0.158283</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb8-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb9-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb9-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pearson R: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb9-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb9-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb9-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for SLFN5"</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb9-11">plt.legend()</span>
<span id="cb9-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="positive-strand-only" class="level2">
<h2 class="anchored" data-anchor-id="positive-strand-only">Positive Strand Only</h2>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">stranded_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb10-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr17_35243072_35243072_predictions.h5'</span>)</span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb10-5">        haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>]</span>
<span id="cb10-6">        haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>]</span>
<span id="cb10-7">        CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_1)</span>
<span id="cb10-8">        CAGE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_2)</span>
<span id="cb10-9">        stranded_CAGE_predictions.append((CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CAGE_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted+'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stranded_CAGE_predictions</span>
<span id="cb11-2">gex_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted+'</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Observed</th>
<th data-quarto-table-cell-role="th">Predicted</th>
<th data-quarto-table-cell-role="th">Predicted+</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Observed</td>
<td>1.000000</td>
<td>0.158283</td>
<td>0.160137</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Predicted</td>
<td>0.158283</td>
<td>1.000000</td>
<td>0.997363</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Predicted+</td>
<td>0.160137</td>
<td>0.997363</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb12-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted+'</span>])</span>
<span id="cb12-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pearson R: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb12-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb12-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted+"</span>)</span>
<span id="cb12-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for SLFN5"</span>)</span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb12-11">plt.legend()</span>
<span id="cb12-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index.html</guid>
  <pubDate>Wed, 18 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Rerunning Borzoi personalized prediction with shifted indices</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index.html</link>
  <description><![CDATA[ 




<p>This job took less than 30 minutes in total</p>
<pre><code>module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011

export LD_LIBRARY_PATH=/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:$LD_LIBRARY_PATH

echo $LD_LIBRARY_PATH

python3 personalized_prediction.py \
--intervals_file intervals.txt \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /grand/TFXcan/imlab/users/sabrina/redo-borzoi-personalized-test
</code></pre>
<section id="plot-predictions" class="level2">
<h2 class="anchored" data-anchor-id="plot-predictions">Plot Predictions</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb2-5">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb2-6">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb2-7">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb2-8">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSG00000161011"</span></span>
<span id="cb2-9">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/redo-borzoi-personalized-test"</span></span>
<span id="cb2-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-11">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>]</span>
<span id="cb3-2">interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcript_start'</span>]</span>
<span id="cb3-3">interval_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcript_end'</span>]</span>
<span id="cb3-4">tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]</span>
<span id="cb3-5">center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> interval_end) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-6">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-7">end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-8">seq_out_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb3-9">tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_out_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb4-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb4-5">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:]</span>
<span id="cb4-6">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:]</span>
<span id="cb4-7">        CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo1[:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb4-8">        CAGE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo2[:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb4-9">        CAGE_predictions.append((CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CAGE_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-10"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-4">observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>: CAGE_predictions, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">gex_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Predicted</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Predicted</td>
<td>1.000000</td>
<td>0.026531</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Observed</td>
<td>0.026531</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb8-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb8-5"></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb9-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb9-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb9-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb9-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb9-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for ENSG00000161011"</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb9-11">plt.legend()</span>
<span id="cb9-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="plotting-cage-tracks-along-personalized-genome" class="level2">
<h2 class="anchored" data-anchor-id="plotting-cage-tracks-along-personalized-genome">Plotting CAGE tracks along Personalized Genome</h2>
<p>There are two CAGE:B lymphoblastoid cell line tracks, for positive and negative strands. I am trying to understand the difference between them.</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kipoiseq <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Interval</span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_tracks(tracks, interval, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>):</span>
<span id="cb10-4">  fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tracks), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tracks)), sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax, (title, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axes, tracks.items()):</span>
<span id="cb10-6">    ax.fill_between(np.linspace(interval.start, interval.end, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)), y)</span>
<span id="cb10-7">    ax.set_title(title)</span>
<span id="cb10-8">    sns.despine(top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-9">  ax.set_xlabel(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(interval))</span>
<span id="cb10-10">  plt.tight_layout()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb11-2">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(individuals, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples:</span>
<span id="cb12-2">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, sample, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb12-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb12-4">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-5">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-6">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-7">        tss_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, tss, tss).resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb12-8">        tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'- strand'</span>: predictions[tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>],</span>
<span id="cb12-9">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+ strand'</span>: predictions[tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]}</span>
<span id="cb12-10">        plot_tracks(tracks, tss_interval)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Those predictions were made by subtracting for 0-based indexing of the fasta file. The original results would have given:</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">old_predictions_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/borzoi-personalized-test"</span></span>
<span id="cb13-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples:</span>
<span id="cb13-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(old_predictions_dir, sample, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb13-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb13-5">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:],axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-6">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:],axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-7">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb13-8">        tss_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, tss, tss).resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb13-9">        tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'- strand'</span>: predictions[tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>],</span>
<span id="cb13-10">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+ strand'</span>: predictions[tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]}</span>
<span id="cb13-11">        plot_tracks(tracks, tss_interval)</span>
<span id="cb13-12"></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="plotting-cagelcl-predicted-vs-observed-expression" class="level2">
<h2 class="anchored" data-anchor-id="plotting-cagelcl-predicted-vs-observed-expression">Plotting CAGE:LCL+ Predicted vs Observed Expression</h2>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">stranded_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb14-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb14-5">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:]</span>
<span id="cb14-6">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:]</span>
<span id="cb14-7">        CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo1[:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>])</span>
<span id="cb14-8">        CAGE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo2[:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>])</span>
<span id="cb14-9">        stranded_CAGE_predictions.append((CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CAGE_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>: stranded_CAGE_predictions, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb16-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb16-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb16-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb16-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb16-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE:LCL+ predictions for ENSG00000161011"</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb16-11">plt.legend()</span>
<span id="cb16-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">old_stranded_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb17-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(old_predictions_dir, sample, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb17-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb17-5">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>])</span>
<span id="cb17-6">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>])</span>
<span id="cb17-7">        old_stranded_CAGE_predictions.append((haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>: old_stranded_CAGE_predictions, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb19-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb19-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb19-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb19-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb19-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE:LCL+ predictions for ENSG00000161011 (Old Indexing)"</span>)</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb19-11">plt.legend()</span>
<span id="cb19-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index.html</guid>
  <pubDate>Tue, 17 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Debugging Borzoi Personalized Predictions Test</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-16-debugging-personalized-borzoi-gene-expression-predictions/index.html</link>
  <description><![CDATA[ 




<p>Use human gene ENSG00000161011 to compute CAGE tracks for personalized genomes.</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">search_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000161011'</span></span>
<span id="cb1-2">chrom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr5'</span></span>
<span id="cb1-3">gene_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">179820905</span></span>
<span id="cb1-4">gene_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">179838078</span></span>
<span id="cb1-5">tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_start</span>
<span id="cb1-6">center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (gene_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_end) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-7">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-8">end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-9">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA20521'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA18934'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">gene_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [gene_key <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene_key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> transcriptome.genes.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> search_gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_key]</span>
<span id="cb2-2"></span>
<span id="cb2-3">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transcriptome.genes[gene_keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Determine output sequence start</span></span>
<span id="cb2-6">seq_out_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seqnn_model.model_strides[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>seqnn_model.target_crops[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-7">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seqnn_model.model_strides[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>seqnn_model.target_lengths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Determine output positions of gene exons</span></span>
<span id="cb2-10">gene_slice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene.output_slice(seq_out_start, seq_out_len, seqnn_model.model_strides[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> find_variants_in_vcf_file(cyvcf2_object, interval_object, samples, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phased"</span>):</span>
<span id="cb3-2">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-3">    query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-4">    variants_dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-5">    variants_dictionary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>]</span>
<span id="cb3-6">    variants_dictionary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(variant.POS <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> variant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object(query))</span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'phased'</span>:</span>
<span id="cb3-8">        delim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|'</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unphased'</span>:</span>
<span id="cb3-10">        delim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(samples):</span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object.samples:</span>
<span id="cb3-13">            variants_dictionary[sample] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>([variant.genotypes[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], variant.gt_bases[i].split(delim)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> variant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object(query))</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> variants_dictionary</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_sequence(models, sample_input):</span>
<span id="cb3-17">    prediction_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> haplotype, sequence_encoding <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_input.items():</span>
<span id="cb3-19">        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_tracks(models, sequence_encoding)</span>
<span id="cb3-20">        prediction_output[haplotype] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction</span>
<span id="cb3-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> prediction_output</span>
<span id="cb3-22"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cyvcf2</span>
<span id="cb4-2">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>: chrom, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>: start, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>: end}</span>
<span id="cb4-3">vcf_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/data/1000G/vcf_snps_only"</span></span>
<span id="cb4-4">path_to_vcf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(vcf_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ALL.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>chrom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz"</span>)</span>
<span id="cb4-5">vcf_chr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cyvcf2.cyvcf2.VCF(path_to_vcf, samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>individuals)</span>
<span id="cb4-6">variants_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_variants_in_vcf_file(vcf_chr, target_interval, individuals, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phased"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mutate_sequence(sequence_one_hot, start, poses, alts):</span>
<span id="cb5-2">    </span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Induce mutation(s)</span></span>
<span id="cb5-4">    sequence_one_hot_mut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.copy(sequence_one_hot)</span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pos, alt <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(poses, alts) :</span>
<span id="cb5-7">        alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span> :</span>
<span id="cb5-9">            alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span> :</span>
<span id="cb5-11">            alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'G'</span> :</span>
<span id="cb5-13">            alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T'</span> :</span>
<span id="cb5-15">            alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-16"></span>
<span id="cb5-17">        sequence_one_hot_mut[pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb5-18">        sequence_one_hot_mut[pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, alt_ix] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span></span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sequence_one_hot_mut</span>
<span id="cb5-20"></span>
<span id="cb5-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> replace_variants_in_reference_sequence(variants_array, individuals):</span>
<span id="cb5-22">    poses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> variants_array[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>]</span>
<span id="cb5-23">    variant_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb5-25">        alts_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [variants_array[individual][i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(poses))]</span>
<span id="cb5-26">        alts_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [variants_array[individual][i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(poses))]</span>
<span id="cb5-27">        sequence_one_hot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_sequence(fasta_open, chrom, gene_start, gene_end)</span>
<span id="cb5-28">        haplotype1_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mutate_sequence(sequence_one_hot, gene_start, poses, alts_1)</span>
<span id="cb5-29">        haplotype2_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mutate_sequence(sequence_one_hot, gene_start, poses, alts_2)</span>
<span id="cb5-30">        variant_encoded[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>: haplotype1_encoded, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>: haplotype2_encoded}</span>
<span id="cb5-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> variant_encoded</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">samples_variants_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> replace_variants_in_reference_sequence(variants_array, individuals)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb7-2">    sample_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> samples_variants_encoded[individual]</span>
<span id="cb7-3">    sample_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_on_sequence(models, sample_input)</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>individual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/test.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb7-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hap <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_predictions.keys():</span>
<span id="cb7-6">            hf[hap]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(sample_predictions[hap], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb8-3">old_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-4">new_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb8-6">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/borzoi-personalized-test"</span>, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr5_179567347_180091635_predictions.h5'</span>)</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb8-8">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:]</span>
<span id="cb8-9">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:]</span>
<span id="cb8-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(haplo1.shape)</span>
<span id="cb8-11">    old_predictions[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>: haplo1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>: haplo2}</span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.h5'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb8-13">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:]</span>
<span id="cb8-14">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:]</span>
<span id="cb8-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(haplo1.shape)</span>
<span id="cb8-16">    new_predictions[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>: haplo1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>: haplo2}</span>
<span id="cb8-17">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(4, 16352, 7611)
(1, 16352, 7611)
(4, 16352, 7611)
(1, 16352, 7611)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">old_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-2">new_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-3">tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_out_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb10-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb10-5">    old_CAGE_haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(old_predictions[individual][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb10-6">    old_CAGE_haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(old_predictions[individual][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb10-7">    old_CAGE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (old_CAGE_haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> old_CAGE_haplo2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-8">    new_CAGE_haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(new_predictions[individual][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb10-9">    new_CAGE_haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(new_predictions[individual][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb10-10">    new_CAGE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (new_CAGE_haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> new_CAGE_haplo2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>    </span>
<span id="cb10-11">    old_CAGE_predictions.append(old_CAGE)</span>
<span id="cb10-12">    new_CAGE_predictions.append(new_CAGE)</span>
<span id="cb10-13">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(old_CAGE_predictions)</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(new_CAGE_predictions)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[41.0625, 41.0]
[42.78125, 42.78125]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">sequence_one_hot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_sequence(fasta_open, chrom, gene_start, gene_end)</span>
<span id="cb13-2">reference_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_tracks(models, sequence_one_hot)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">reference_CAGE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(reference_prediction[..., tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(reference_CAGE)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>42.8</code></pre>
</div>
</div>
<p>Since it looks like the new predictions are closer to reference, it could mean our bug was how we indexed variants into the reference sequence.</p>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-16-debugging-personalized-borzoi-gene-expression-predictions/index.html</guid>
  <pubDate>Mon, 16 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Personalized Borzoi test on a few genes</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-04-personalized-test-on-a-few-genes/index.html</link>
  <description><![CDATA[ 




<section id="select-genes" class="level3">
<h3 class="anchored" data-anchor-id="select-genes">Select Genes</h3>
<p>We want to pick a handful of human genes (with rat orthologs) used in the Enformer personalized runs (on rats) that will roughly have a similar distribution of Spearman correlations.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">rn7_gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_spearman_corr_human.csv"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="33">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate mean and standard deviation</span></span>
<span id="cb3-2">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(gene_list[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>])</span>
<span id="cb3-3">std_dev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(gene_list[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>])</span>
<span id="cb3-4"></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group the elements based on their distance from the mean</span></span>
<span id="cb3-7">df_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>])</span>
<span id="cb3-8">df_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>])</span>
<span id="cb3-9">df_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>])</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> rn7_gene_list.iterrows():</span>
<span id="cb3-12">    deviation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean)</span>
<span id="cb3-13">    df_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>: [gene], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>]})</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> deviation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> std_dev:</span>
<span id="cb3-15">        df_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_1, df_row], ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> deviation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> std_dev:</span>
<span id="cb3-17">        df_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_2, df_row], ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-19">        df_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_3, df_row], ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">rn7_hg38_ortho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb4-2">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-3">ortho_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>((rn7_gene_list.index).intersection(rn7_hg38_ortho.index))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select human gene from each standard deviation grouping</span></span>
<span id="cb5-2">df_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_1[df_1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].isin(ortho_genes)]</span>
<span id="cb5-3">df_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_2[df_2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].isin(ortho_genes)]</span>
<span id="cb5-4">df_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_3[df_3[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].isin(ortho_genes)]</span>
<span id="cb5-5">test_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [df_1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].sample().item(), df_2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].sample().item(), df_3[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].sample().item()]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">hg38_gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rn7_hg38_ortho[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hsapiens_homolog_ensembl_gene'</span>].loc[test_genes].to_list()</span>
<span id="cb6-2">hg38_gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot[hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensembl_gene_id'</span>].isin(hg38_gene_list)]</span>
<span id="cb6-3">hg38_gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_gene_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_end"</span>]]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="86">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">hg38_gene_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene_list.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="write-individuals-list" class="level3">
<h3 class="anchored" data-anchor-id="write-individuals-list">Write Individuals List</h3>
<p>There are 455 individuals in the GEUVADIS data with LCL gene expression data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cyvcf2</span>
<span id="cb8-2">vcf_chr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cyvcf2.cyvcf2.VCF(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/data/1000G/vcf_snps_only/ALL.chr1.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz"</span>)</span>
<span id="cb8-3">vcf_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vcf_chr.samples</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-2">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:].tolist()</span>
<span id="cb9-3">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(vcf_samples).intersection(individuals))</span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb9-5">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(samples))</span></code></pre></div>
</div>
</section>
<section id="run-predictions" class="level3">
<h3 class="anchored" data-anchor-id="run-predictions">Run Predictions</h3>
<p>I started a pipeline for personalized prediction in this <a href="https://sabrina-dl.hakyimlab.org/posts/2023-09-26-borzoi-personalized-test/geuvadis_personalized_test">notebook</a>, and put it into a <a href="personalized_prediction.py">python script</a>.</p>
<p>I submitted this as a <a href="borzoi_test_run.pbs">PBS job</a>, <code>qsub borzoi_test_run.pbs</code>.</p>
<pre><code>module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-04-personalized-test-on-a-few-genes

export LD_LIBRARY_PATH=/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:$LD_LIBRARY_PATH

echo $LD_LIBRARY_PATH

python3 personalized_prediction.py \
--gene_df gene_list.csv \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /grand/TFXcan/imlab/users/sabrina/borzoi-personalized-test
</code></pre>
</section>
<section id="check-results" class="level3">
<h3 class="anchored" data-anchor-id="check-results">Check Results</h3>
<p>Expand the code below for setting global variables and reading GEUVADIS data.</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#### LIBRARIES AND DEFINITIONS</span></span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb11-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb11-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb11-6">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/grand/TFXcan/imlab/users/sabrina/borzoi-personalized-test"</span></span>
<span id="cb11-7">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-8">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb11-9">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-10">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#### GET LIST OF GENES</span></span>
<span id="cb11-12">genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene_list.csv"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensembl_gene_id'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x)).to_list()</span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#### GET LIST OF INDIVIDUALS</span></span>
<span id="cb11-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb11-15">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read().splitlines()</span>
<span id="cb11-16"></span>
<span id="cb11-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> borzoi_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb11-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gene <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bgene</span>
<span id="cb11-19">prefix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/borzoi_tutorial"</span></span>
<span id="cb11-20">splice_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/gencode41_basic_protein_splice.csv.gz'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, compression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gzip'</span>)</span>
<span id="cb11-21">transcriptome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bgene.Transcriptome(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/gencode41_basic_nort.gtf'</span>)</span>
<span id="cb11-22"></span>
<span id="cb11-23">targets_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/targets_human.txt'</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-24">target_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets_df.index</span>
<span id="cb11-25"></span>
<span id="cb11-26"></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Create local index of strand_pair (relative to sliced targets)</span></span>
<span id="cb11-28">strand_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets_df.strand_pair</span>
<span id="cb11-29"></span>
<span id="cb11-30">target_slice_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {ix : i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(target_index.values.tolist())}</span>
<span id="cb11-31">slice_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb11-32">    target_slice_dict[ix] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_slice_dict <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> ix <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> strand_pair.values.tolist()</span>
<span id="cb11-33">], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int32'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>2023-10-12 03:16:08.150141: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-10-12 03:16:11.340129: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2023-10-12 03:16:16.242235: E tensorflow/compiler/xla/stream_executor/cuda/cuda_driver.cc:266] failed call to cuInit: CUDA_ERROR_NOT_INITIALIZED: initialization error
2023-10-12 03:16:16.242438: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:168] retrieving CUDA diagnostic information for host: polaris-login-02
2023-10-12 03:16:16.242469: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:175] hostname: polaris-login-02
2023-10-12 03:16:16.243018: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:199] libcuda reported version is: 470.103.4
2023-10-12 03:16:16.243100: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:203] kernel reported version is: 470.103.4
2023-10-12 03:16:16.243112: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:309] kernel version seems to match DSO: 470.103.4</code></pre>
</div>
</div>
<p>We compare gene expression predictions derived from borzoi’s CAGE and RNA tracks. The GEUVADIS dataset includes RNA-seq data collected from LCL samples. Borzoi was trained on ENCODE’s CAGE:B lymphoblastoid cell line data (tracks 870, 871) as well as GTEx RNA-seq data from EBV-transformed lymphosites, however, it’s unclear to me which track this fell under. My guess is that track 7531:GTEX-1I4MK-0002-SM-EZ6M9 is the best approximation for LCL tissue.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> borzoi_calculation_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract_RNA(ensembl_gene_id, seq_out_start, predictions, tracks, seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span>):</span>
<span id="cb13-3">    gene_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [gene_key <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene_key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> transcriptome.genes.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ensembl_gene_id <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_key]</span>
<span id="cb13-4">    gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transcriptome.genes[gene_keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb13-5">    gene_slice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene.output_slice(seq_out_start, seq_out_len, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expr_attr(predictions, tracks, gene_slice)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract_CAGE(predictions, tss_bin, tracks):</span>
<span id="cb14-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.mean(predictions[:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, tracks])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb15-2">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb15-3">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb15-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes:</span>
<span id="cb15-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(gene)</span>
<span id="cb15-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>]</span>
<span id="cb15-7">    interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcript_start'</span>]</span>
<span id="cb15-8">    interval_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcript_end'</span>]</span>
<span id="cb15-9">    tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]</span>
<span id="cb15-10">    center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> interval_end) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-11">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-12">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-13">    seq_out_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb15-14">    tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_out_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb15-15">    CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-16">    RNA_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb15-18">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb15-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb15-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb15-21">                haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:]</span>
<span id="cb15-22">                haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:]</span>
<span id="cb15-23">            CAGE_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (extract_CAGE(haplo1, tss_bin, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> extract_CAGE(haplo2, tss_bin, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-24">            RNA_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (extract_RNA(gene, seq_out_start, haplo1, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7531</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> extract_RNA(gene, seq_out_start, haplo2, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7531</span>])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-25">            CAGE_predictions.append(CAGE_mean)</span>
<span id="cb15-26">            RNA_predictions.append(RNA_mean)</span>
<span id="cb15-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-28">            CAGE_predictions.append(np.nan)</span>
<span id="cb15-29">            RNA_predictions.append(np.nan)</span>
<span id="cb15-30">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAGE predicted'</span>: CAGE_predictions, </span>
<span id="cb15-31">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RNA predicted'</span>: RNA_predictions}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb15-32">      </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ENSG00000142949
ENSG00000133247
ENSG00000161011</code></pre>
</div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_rat_data/output/borzoi_personalized_predictions_test.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb17-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> expr_dict.items():</span>
<span id="cb17-3">        hf[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_rat_data/output/borzoi_personalized_predictions_test.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb18-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hf.items():</span>
<span id="cb18-3">        expr_dict[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(value, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAGE predicted'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RNA predicted'</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes:</span>
<span id="cb19-2">    observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb19-3">    observed.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'observed'</span></span>
<span id="cb19-4">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[gene].merge(observed, left_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb19-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#expr_dict[gene] = expr_dict[gene].apply(pd.to_numeric)</span></span></code></pre></div>
</div>
<section id="compare-predictions-to-observed" class="level4">
<h4 class="anchored" data-anchor-id="compare-predictions-to-observed">Compare Predictions to Observed</h4>
<p>To add context to each gene, we’ll first pull correlations from Enformer personalized prediction on rat orthologs.</p>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">rn7_hg38_ortho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hsapiens_homolog_ensembl_gene"</span>)</span>
<span id="cb20-2">rn7_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rn7_hg38_ortho.loc[genes][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensembl_gene_id'</span>].to_list()</span>
<span id="cb20-3">rn7_spearman_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_spearman_corr_human.csv"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-4">rn7_pearson_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_pearson_corr_human.csv"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<p><strong>Br Rat Pearson Correlations</strong></p>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">rn7_pearson_corr.loc[rn7_genes]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">pearson r</th>
<th data-quarto-table-cell-role="th">pvalue</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000019977</td>
<td>-0.245970</td>
<td>4.443961e-06</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSRNOG00000017508</td>
<td>0.033957</td>
<td>5.326182e-01</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000003147</td>
<td>0.624152</td>
<td>4.101428e-38</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><strong>Br Rat Spearman Correlations</strong></p>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">rn7_spearman_corr.loc[rn7_genes]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">spearman r</th>
<th data-quarto-table-cell-role="th">pvalue</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000019977</td>
<td>-0.235618</td>
<td>1.130621e-05</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSRNOG00000017508</td>
<td>0.012958</td>
<td>8.118338e-01</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000003147</td>
<td>0.614930</td>
<td>9.560589e-37</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><strong>GEUVADIS Human Pearson Correlations</strong></p>
<p>ENSG00000142949 (Enformer Rat R=-0.246): Both CAGE and RNA tracks predict in the correct direction of gene effect, but with reduced magnitude</p>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearson'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.460416</td>
<td>0.086982</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.460416</td>
<td>1.000000</td>
<td>0.073000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.086982</td>
<td>0.073000</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>ENSG00000133247 (Enformer Rat R = 0.034): Borzoi performs weakly as well.</p>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearson'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.641555</td>
<td>-0.010348</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.641555</td>
<td>1.000000</td>
<td>0.024595</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>-0.010348</td>
<td>0.024595</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>ENSG00000161011 (Enformer Rat R = 0.624): Borzoi underperforms in both tracks, I will need to debug.</p>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearson'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.18870</td>
<td>0.021334</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.188700</td>
<td>1.00000</td>
<td>0.003480</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.021334</td>
<td>0.00348</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><strong>GEUVADIS Human Spearman Correlations</strong></p>
<div class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.526191</td>
<td>0.071541</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.526191</td>
<td>1.000000</td>
<td>0.085379</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.071541</td>
<td>0.085379</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.665929</td>
<td>0.00412</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.665929</td>
<td>1.000000</td>
<td>0.02841</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.004120</td>
<td>0.028410</td>
<td>1.00000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="72">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.481421</td>
<td>0.022248</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.481421</td>
<td>1.000000</td>
<td>0.029495</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.022248</td>
<td>0.029495</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb29-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb29-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb29-4">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb29-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> scatter_plot(x, y, xlabel, ylabel, title, corr):</span>
<span id="cb29-6">    plt.scatter(x, y, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-7"></span>
<span id="cb29-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb29-9">    plt.xlabel(xlabel)</span>
<span id="cb29-10">    plt.ylabel(ylabel)</span>
<span id="cb29-11">    plt.title(gene)</span>
<span id="cb29-12"></span>
<span id="cb29-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb29-14">    plt.legend()</span>
<span id="cb29-15">    plt.show()</span>
<span id="cb29-16"></span>
<span id="cb29-17"></span>
<span id="cb29-18"></span>
<span id="cb29-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_spearman_corr(gene):</span>
<span id="cb29-20">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>]</span>
<span id="cb29-21">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human predicted"</span>]</span>
<span id="cb29-22">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(x, y)</span>
<span id="cb29-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.scatter(x, y, marker='o', color='blue', label=f"Correlation: {corr:.3f}\nP-value: {pval}")</span></span>
<span id="cb29-24">    plt.scatter(stats.rankdata(x), stats.rankdata(y), marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-25"></span>
<span id="cb29-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb29-27">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed Ranks'</span>)</span>
<span id="cb29-28">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted Ranks'</span>)</span>
<span id="cb29-29">    plt.title(gene)</span>
<span id="cb29-30"></span>
<span id="cb29-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb29-32">    plt.legend()</span>
<span id="cb29-33">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'ENSG00000142949':          CAGE predicted  RNA predicted
 NA20521       20.140625   30171.421875
 NA18934       20.171875   31623.371094
 HG00324       20.062500   31657.937500
 HG00103       20.281250   32049.599609
 NA20516       20.156250   31728.843750
 ...                 ...            ...
 HG00152       20.093750   30087.642578
 HG00351       20.218750   31902.732422
 HG00185       20.218750   31106.968750
 NA06994       20.250000   32102.337891
 NA12341       20.125000   31183.824219
 
 [455 rows x 2 columns],
 'ENSG00000133247':          CAGE predicted  RNA predicted
 NA20521       22.968750   61911.656250
 NA18934       23.000000   62215.453125
 HG00324       22.859375   60991.593750
 HG00103       22.968750   61437.328125
 NA20516       22.906250   61042.312500
 ...                 ...            ...
 HG00152       22.843750   60993.703125
 HG00351       22.875000   61338.320312
 HG00185       22.968750   61601.574219
 NA06994       22.796875   61072.781250
 NA12341       22.875000   61673.406250
 
 [455 rows x 2 columns],
 'ENSG00000161011':          CAGE predicted  RNA predicted
 NA20521        41.06250      6132596.0
 NA18934        41.00000      5838809.0
 HG00324        41.12500      5967448.0
 HG00103        40.96875      5852593.0
 NA20516        41.00000      5942520.0
 ...                 ...            ...
 HG00152        41.09375      6227792.5
 HG00351        41.12500      6053156.0
 HG00185        41.06250      6043781.0
 NA06994        41.06250      5897614.0
 NA12341        41.12500      6036931.0
 
 [455 rows x 2 columns]}</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-04-personalized-test-on-a-few-genes/index.html</guid>
  <pubDate>Wed, 04 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Code Snippets for Borzoi Personalized Prediction</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-26-borzoi-personalized-test/geuvadis_personalized_test.html</link>
  <description><![CDATA[ 




<section id="step-1-vcf-to-one-hot-encode" class="level2">
<h2 class="anchored" data-anchor-id="step-1-vcf-to-one-hot-encode">Step 1: VCF to One-hot Encode</h2>
<div class="cell" data-execution_count="127">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cyvcf2</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pysam</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> borzoi_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> process_sequence, predict_tracks</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/gene_list.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-2">    rn7_gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read().splitlines()</span>
<span id="cb2-3">rn7_hg38_ortho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb2-4">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">ortho_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(rn7_gene_list).intersection(rn7_hg38_ortho.index))</span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## convert to hg38</span></span>
<span id="cb3-3">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rn7_hg38_ortho.loc[ortho_genes]</span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## annotate hg38 genes</span></span>
<span id="cb3-5">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_df.merge(hg38_annot, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hsapiens_homolog_ensembl_gene"</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>)</span>
<span id="cb3-6">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_end"</span>]]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> find_variants_in_vcf_file(cyvcf2_object, interval_object, samples, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phased"</span>):</span>
<span id="cb4-2">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-3">    query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-4">    variants_dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb4-5">    variants_dictionary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>]</span>
<span id="cb4-6">    variants_dictionary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(variant.POS <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> variant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object(query))</span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'phased'</span>:</span>
<span id="cb4-8">        delim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|'</span></span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unphased'</span>:</span>
<span id="cb4-10">        delim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span></span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(samples):</span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object.samples:</span>
<span id="cb4-13">            variants_dictionary[sample] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>([variant.genotypes[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], variant.gt_bases[i].split(delim)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> variant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object(query))</span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> variants_dictionary</span></code></pre></div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_mapping_dictionary(variants_array, samples, interval_start):</span>
<span id="cb5-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-3">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb5-4">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb5-5">    G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb5-6">    T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb5-7">    seq_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>: A, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>: C, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'G'</span>: G, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T'</span>: T}</span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># collect common information</span></span>
<span id="cb5-10">    samples_haplotype_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-11">    samples_haplotype_map[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>((variants_array[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>][i]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> interval_start <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(variants_array[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>])))</span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples:</span>
<span id="cb5-13">        samples_haplotype_map[sample] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-14">        samples_haplotype_map[sample][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(seq_dict[variants_array[sample][i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(variants_array[sample])))</span>
<span id="cb5-15">        samples_haplotype_map[sample][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(seq_dict[variants_array[sample][i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(variants_array[sample])))</span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> samples_haplotype_map</span></code></pre></div>
</div>
<div class="cell" data-execution_count="83">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> resize(region, seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span>):</span>
<span id="cb6-2">    center_bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (region[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> region[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-3">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-4">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>: region[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>: start, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>: end}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="96">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> replace_variants_in_reference_sequence(query_sequences_encoded, mapping_dict, samples):</span>
<span id="cb7-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb7-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-4">    positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>]</span>
<span id="cb7-5">    variant_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples:</span>
<span id="cb7-7">        haplotype1_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.copy(query_sequences_encoded)</span>
<span id="cb7-8">        haplotype2_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.copy(query_sequences_encoded)</span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, position <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(positions):</span>
<span id="cb7-10">            haplotype1_encoded[position] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping_dict[sample][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype1"</span>][i]</span>
<span id="cb7-11">            haplotype2_encoded[position] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping_dict[sample][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype2"</span>][i]</span>
<span id="cb7-12">        variant_encoded[sample] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype1"</span>: haplotype1_encoded, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype2"</span>: haplotype2_encoded}</span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> variant_encoded</span></code></pre></div>
</div>
<div class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_model(model_dir):</span>
<span id="cb8-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb8-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb8-4">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb8-5">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb8-6">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb8-7"></span>
<span id="cb8-8">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> baskerville</span>
<span id="cb8-9">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seqnn</span>
<span id="cb8-10">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dna</span>
<span id="cb8-11">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gene <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bgene</span>
<span id="cb8-12"></span>
<span id="cb8-13">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb8-14"></span>
<span id="cb8-15">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pysam</span>
<span id="cb8-16">    params_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'params_pred.json'</span>) </span>
<span id="cb8-17">    targets_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'targets_human.txt'</span>) </span>
<span id="cb8-18"></span>
<span id="cb8-19">    n_folds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#To use only one model fold, change to 'n_folds = 1'</span></span>
<span id="cb8-20">    rc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Average across reverse-complement prediction</span></span>
<span id="cb8-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Read model parameters</span></span>
<span id="cb8-22"></span>
<span id="cb8-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(params_file) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> params_open :</span>
<span id="cb8-24">        </span>
<span id="cb8-25">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(params_open)</span>
<span id="cb8-26">        </span>
<span id="cb8-27">        params_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>]</span>
<span id="cb8-28"></span>
<span id="cb8-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Read targets</span></span>
<span id="cb8-30"></span>
<span id="cb8-31">    targets_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(targets_file, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-32">    target_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets_df.index</span>
<span id="cb8-33"></span>
<span id="cb8-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Create local index of strand_pair (relative to sliced targets)</span></span>
<span id="cb8-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rc :</span>
<span id="cb8-36">        strand_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets_df.strand_pair</span>
<span id="cb8-37">        </span>
<span id="cb8-38">        target_slice_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {ix : i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(target_index.values.tolist())}</span>
<span id="cb8-39">        slice_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb8-40">            target_slice_dict[ix] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_slice_dict <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> ix <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> strand_pair.values.tolist()</span>
<span id="cb8-41">        ], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int32'</span>)</span>
<span id="cb8-42"></span>
<span id="cb8-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Initialize model ensemble</span></span>
<span id="cb8-44"></span>
<span id="cb8-45">    models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> fold_ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_folds) :</span>
<span id="cb8-47">        </span>
<span id="cb8-48">        model_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"saved_models/f"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(fold_ix) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/model0_best.h5"</span>)</span>
<span id="cb8-49"></span>
<span id="cb8-50">        seqnn_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seqnn.SeqNN(params_model)</span>
<span id="cb8-51">        seqnn_model.restore(model_file, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-52">        seqnn_model.build_slice(target_index)</span>
<span id="cb8-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rc :</span>
<span id="cb8-54">            seqnn_model.strand_pair.append(slice_pair)</span>
<span id="cb8-55">        seqnn_model.build_ensemble(rc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>)</span>
<span id="cb8-56">        </span>
<span id="cb8-57">        models.append(seqnn_model)</span>
<span id="cb8-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> models</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_sequence(models, sample_input):</span>
<span id="cb9-2">    prediction_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> haplotype, sequence_encoding <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_input.items():</span>
<span id="cb9-4">        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_tracks(models, sequence_encoding)</span>
<span id="cb9-5">        prediction_output[haplotype] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> prediction_output</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">fasta_open <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pysam.Fastafile(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/borzoi_tutorial/hg38.fa'</span>)</span>
<span id="cb10-2">model_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/borzoi_tutorial'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="137">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> enformer_predict_on_region(target_interval, samples, path_to_vcf, output_dir):</span>
<span id="cb11-2">    models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model(model_dir)</span>
<span id="cb11-3">    sequence_one_hot_ref <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_sequence(fasta_open, target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>], target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>], target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>])</span>
<span id="cb11-4">    vcf_chr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cyvcf2.cyvcf2.VCF(path_to_vcf, samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>samples)</span>
<span id="cb11-5">    variants_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_variants_in_vcf_file(vcf_chr, target_interval, samples, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phased"</span>)</span>
<span id="cb11-6">    mapping_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_mapping_dictionary(variants_array, samples, target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>])</span>
<span id="cb11-7">    samples_variants_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> replace_variants_in_reference_sequence(sequence_one_hot_ref, mapping_dict, samples)</span>
<span id="cb11-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples:</span>
<span id="cb11-9">        sample_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> samples_variants_encoded[sample]</span>
<span id="cb11-10">        sample_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_on_sequence(models, sample_input)</span>
<span id="cb11-11">        sample_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb11-12">        sample_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(output_dir, sample)</span>
<span id="cb11-13">        output_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(sample_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb11-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(sample_dir): os.makedirs(sample_dir, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(output_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb11-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hap <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_predictions.keys():</span>
<span id="cb11-17">                sample_output[hap]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(sample_predictions[hap], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="138">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb12-2">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA21143"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA21144"</span>]</span>
<span id="cb12-3">vcf_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/data/1000G/vcf_snps_only"</span></span>
<span id="cb12-4">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-09-26-borzoi-personalized-test/"</span></span>
<span id="cb12-5">interval_object <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome_name"</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>: gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_start"</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>: gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_end"</span>]}</span>
<span id="cb12-6">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(interval_object)</span>
<span id="cb12-7">path_to_vcf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(vcf_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ALL.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz"</span>)</span>
<span id="cb12-8">enformer_predict_on_region(interval_object, samples, path_to_vcf, output_dir)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-26-borzoi-personalized-test/geuvadis_personalized_test.html</guid>
  <pubDate>Wed, 27 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Borzoi CAGE test</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index.html</link>
  <description><![CDATA[ 




<p>We ran the Borzoi human track models on the same genes as the GTEx track runs to compare the performance.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-3">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-4">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list.dropna()</span>
<span id="cb1-5">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list.merge(annot_df, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, right_on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb1-6">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcription_start_site"</span>]]</span>
<span id="cb1-7">gene_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene_list.csv"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<section id="run-predictions" class="level1">
<h1>Run Predictions</h1>
<p>Each run can take anywhere from 2.5-5 GPU seconds, so allocate walltime accordingly. For my 981 gene regions, I requested <code>qsub -I -A AIHPC4EDU -l walltime=1:30:00 -l filesystems=home:grand -q preemptable</code></p>
<pre><code>module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test
python borzoi_predict_CAGE.py --gene_df gene_list.csv --CAGE_tracks 610,611 </code></pre>
</section>
<section id="process-results" class="level1">
<h1>Process Results</h1>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read CAGE predictions</span></span>
<span id="cb4-2">hg38_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_borzoi_CAGE_test_predictions.csv"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read GTEx predictions</span></span>
<span id="cb4-4">gtex_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read observed gene expression</span></span>
<span id="cb4-6">human_brain_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_all_GTEx_brain_tissues.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).dropna()</span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># merge dataframes</span></span>
<span id="cb4-8">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gtex_predictions.merge(human_brain_gex, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, right_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>)</span>
<span id="cb4-9">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cortex"</span>]]</span>
<span id="cb4-10">merged_df.columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gene"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]</span>
<span id="cb4-11">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df.merge(hg38_predictions, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gene"</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gene"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]]</span>
<span id="cb5-2">merged_df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gene"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write to File</span></span>
<span id="cb5-4">merged_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_borzoi_vs_enformer_test_predictions.csv"</span>, header <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<p>We have 3 different prediction methods to evaluate, the outputs are combined in the following table:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">merged_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Gene</th>
<th data-quarto-table-cell-role="th">Borzoi (GTEx)</th>
<th data-quarto-table-cell-role="th">Borzoi (CAGE)</th>
<th data-quarto-table-cell-role="th">Enformer (CAGE)</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>ENSG00000260286</td>
<td>6.873438e+02</td>
<td>0.002146</td>
<td>0.005209</td>
<td>0.086014</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>ENSG00000162877</td>
<td>3.553310e+03</td>
<td>0.174000</td>
<td>0.270328</td>
<td>0.128466</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>ENSG00000083845</td>
<td>9.018748e+06</td>
<td>1.906000</td>
<td>18.964096</td>
<td>135.113922</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>ENSG00000143199</td>
<td>1.511829e+03</td>
<td>0.019640</td>
<td>0.049658</td>
<td>0.256258</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>ENSG00000188522</td>
<td>8.282543e+04</td>
<td>0.777000</td>
<td>0.083827</td>
<td>0.460673</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">968</td>
<td>ENSG00000198626</td>
<td>3.959017e+04</td>
<td>2.357000</td>
<td>11.577308</td>
<td>8.737213</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">969</td>
<td>ENSG00000184206</td>
<td>8.352521e+03</td>
<td>0.006187</td>
<td>0.002583</td>
<td>0.155200</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">970</td>
<td>ENSG00000140043</td>
<td>3.883056e+04</td>
<td>0.748500</td>
<td>5.710264</td>
<td>7.826176</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">971</td>
<td>ENSG00000081248</td>
<td>3.480795e+03</td>
<td>0.037500</td>
<td>0.021962</td>
<td>0.345895</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">972</td>
<td>ENSG00000198774</td>
<td>1.029021e+04</td>
<td>0.293000</td>
<td>0.156194</td>
<td>0.116595</td>
</tr>
</tbody>
</table>

<p>973 rows × 5 columns</p>
</div>
</div>
</div>
</section>
<section id="plot-correlations" class="level1">
<h1>Plot Correlations</h1>
<p>The correlation tables validate two key claims from the Borzoi paper:</p>
<ol type="1">
<li>Borzoi performs comparably, if not better, than Enformer on shared ENCODE tracks</li>
<li>Borzoi’s RNA-seq coverage metric for gene expression correlates higher than CAGE predictions from both Borzoi and Enformer
<ul>
<li>This correlation is biased because Borzoi was trained on some GTEx data</li>
<li>We need to validate on new data (GEUVADIS, HS rats, …)</li>
</ul></li>
</ol>
<p>Although this experiment was tested on N=981 randomly selected genes, I believe this sample decently reflects how the Enformer/Borzoi methods would perform genome-wide. This subset has correlations similar to the full set of human genes when we look at the CAGE tracks, with Spearman R = 0.796 (subset) and R = 0.794 (all genes).</p>
<p><strong>Pearson Correlations</strong></p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pearson_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pearson"</span>)</span>
<span id="cb7-2">pearson_corr_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi (GTEx)</th>
<th data-quarto-table-cell-role="th">Borzoi (CAGE)</th>
<th data-quarto-table-cell-role="th">Enformer (CAGE)</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Borzoi (GTEx)</td>
<td>1.000000</td>
<td>0.190700</td>
<td>0.225605</td>
<td>0.620217</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Borzoi (CAGE)</td>
<td>0.190700</td>
<td>1.000000</td>
<td>0.719421</td>
<td>0.469197</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Enformer (CAGE)</td>
<td>0.225605</td>
<td>0.719421</td>
<td>1.000000</td>
<td>0.593030</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Observed</td>
<td>0.620217</td>
<td>0.469197</td>
<td>0.593030</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The low correlations between CAGE tracks (Enformer and Borzoi) and GTex tracks can be explained by non-linearity. We calculated RNA-seq coverage from a series of exponents, log transforms to better represent counts of transcripts, which can also explains why it has the highest correlation with observed GTEx TPM.</p>
<p><strong>Spearman Correlations</strong></p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">spearman_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span>
<span id="cb8-2">spearman_corr_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi (GTEx)</th>
<th data-quarto-table-cell-role="th">Borzoi (CAGE)</th>
<th data-quarto-table-cell-role="th">Enformer (CAGE)</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Borzoi (GTEx)</td>
<td>1.000000</td>
<td>0.843272</td>
<td>0.773361</td>
<td>0.856641</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Borzoi (CAGE)</td>
<td>0.843272</td>
<td>1.000000</td>
<td>0.888218</td>
<td>0.806720</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Enformer (CAGE)</td>
<td>0.773361</td>
<td>0.888218</td>
<td>1.000000</td>
<td>0.795909</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Observed</td>
<td>0.856641</td>
<td>0.806720</td>
<td>0.795909</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<section id="plot-against-observed" class="level3">
<h3 class="anchored" data-anchor-id="plot-against-observed">Plot against Observed</h3>
<blockquote class="blockquote">
<p>All plots are comparing predicted and observed reference gene expression in human brain tissue, based off data from N=981 human genes. To account for outliers, we are plotting relative expression levels (rank) and the correlations shown are all Spearman R.</p>
</blockquote>
<div class="cell" data-execution_count="35">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]</span>
<span id="cb9-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>]</span>
<span id="cb9-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>]</span>
<span id="cb9-4">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed (Rank)'</span>)</span>
<span id="cb9-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer CAGE (Rank)'</span>)</span>
<span id="cb9-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer CAGE Prediction"</span>)</span>
<span id="cb9-8">plt.legend()</span>
<span id="cb9-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="36">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]</span>
<span id="cb10-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb10-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb10-4">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed (Rank)'</span>)</span>
<span id="cb10-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi CAGE (Rank)'</span>)</span>
<span id="cb10-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE Prediction"</span>)</span>
<span id="cb10-8">plt.legend()</span>
<span id="cb10-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="38">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]</span>
<span id="cb11-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>]</span>
<span id="cb11-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>]</span>
<span id="cb11-4">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed (Rank)'</span>)</span>
<span id="cb11-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi GTEx (Rank)'</span>)</span>
<span id="cb11-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi GTEx Prediction"</span>)</span>
<span id="cb11-8">plt.legend()</span>
<span id="cb11-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="extra-plots" class="level2">
<h2 class="anchored" data-anchor-id="extra-plots">Extra Plots</h2>
<p>Since Borzoi and Enformer CAGE tracks are measured on the same scale, it makes sense that the two have the highest pearson correlation out of all pairs. It’s not clear why the plot looks curved though.</p>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>]</span>
<span id="cb12-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb12-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pearson_corr_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb12-4">plt.scatter(x, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer CAGE'</span>)</span>
<span id="cb12-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi CAGE'</span>)</span>
<span id="cb12-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer and Borzoi CAGE Predictions"</span>)</span>
<span id="cb12-8">plt.legend()</span>
<span id="cb12-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Borzoi CAGE and GTEx had a large improvement from Pearson R = 0.191 to Spearman R = 0.843.</p>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>]</span>
<span id="cb13-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb13-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pearson_corr_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb13-4">plt.scatter(x, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi GTEx'</span>)</span>
<span id="cb13-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi CAGE'</span>)</span>
<span id="cb13-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE and GTEx Predictions"</span>)</span>
<span id="cb13-8">plt.legend()</span>
<span id="cb13-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index.html</guid>
  <pubDate>Tue, 26 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Borzoi test predictions on small gene set</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html</link>
  <description><![CDATA[ 




<section id="sample-genes" class="level2">
<h2 class="anchored" data-anchor-id="sample-genes">Sample Genes</h2>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb1-3">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-4">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-5">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot_df[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>annot_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>].isin(gene_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])]</span>
<span id="cb1-6">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot_df.sample(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"external_gene_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcription_start_site"</span>])</span>
<span id="cb1-7">gene_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene_list.txt"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="run-borzoi" class="level2">
<h2 class="anchored" data-anchor-id="run-borzoi">Run Borzoi</h2>
<pre><code>module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-09-21-borzoi-reference-gene-expression-prediction-test
python borzoi_predict.py --gene_df gene_list.txt --tracks "17,18,19" </code></pre>
</section>
<section id="plot-comparisons-across-genes" class="level2">
<h2 class="anchored" data-anchor-id="plot-comparisons-across-genes">Plot Comparisons Across Genes</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!cat gene_predictions.csv gene_predictions0.csv &gt; /home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv</span></span>
<span id="cb3-2">output_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>).dropna()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">human_brain_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_all_GTEx_brain_tissues.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).dropna()</span>
<span id="cb4-2">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output_df.merge(human_brain_gex, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, right_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-3">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cortex"</span>]]</span>
<span id="cb4-4">merged_df.columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"borzoi"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>]</span>
<span id="cb4-5">merged_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">gene</th>
<th data-quarto-table-cell-role="th">borzoi</th>
<th data-quarto-table-cell-role="th">enformer</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>ENSG00000260286</td>
<td>6.873438e+02</td>
<td>0.005209</td>
<td>0.086014</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>ENSG00000162877</td>
<td>3.553310e+03</td>
<td>0.270328</td>
<td>0.128466</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>ENSG00000083845</td>
<td>9.018748e+06</td>
<td>18.964096</td>
<td>135.113922</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>ENSG00000143199</td>
<td>1.511829e+03</td>
<td>0.049658</td>
<td>0.256258</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>ENSG00000188522</td>
<td>8.282543e+04</td>
<td>0.083827</td>
<td>0.460673</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">998</td>
<td>ENSG00000198626</td>
<td>3.959017e+04</td>
<td>11.577308</td>
<td>8.737213</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">999</td>
<td>ENSG00000184206</td>
<td>8.352521e+03</td>
<td>0.002583</td>
<td>0.155200</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1000</td>
<td>ENSG00000140043</td>
<td>3.883056e+04</td>
<td>5.710264</td>
<td>7.826176</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1001</td>
<td>ENSG00000081248</td>
<td>3.480795e+03</td>
<td>0.021962</td>
<td>0.345895</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1002</td>
<td>ENSG00000198774</td>
<td>1.029021e+04</td>
<td>0.156194</td>
<td>0.116595</td>
</tr>
</tbody>
</table>

<p>973 rows × 4 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>]</span>
<span id="cb5-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"borzoi"</span>]</span>
<span id="cb5-4">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(x, y)</span>
<span id="cb5-5">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>)</span>
<span id="cb5-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb5-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Reference Gene Expression in Brain Tissue"</span>)</span>
<span id="cb5-9">plt.legend()</span>
<span id="cb5-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>]</span>
<span id="cb6-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"borzoi"</span>]</span>
<span id="cb6-3">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(x, y)</span>
<span id="cb6-4">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed Rank'</span>)</span>
<span id="cb6-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi Rank'</span>)</span>
<span id="cb6-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Reference Gene Expression in Brain Tissue"</span>)</span>
<span id="cb6-8">plt.legend()</span>
<span id="cb6-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>]</span>
<span id="cb7-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer"</span>]</span>
<span id="cb7-3">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(x, y)</span>
<span id="cb7-4">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb7-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank Observed'</span>)</span>
<span id="cb7-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank Enformer'</span>)</span>
<span id="cb7-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Reference Gene Expression in Brain Tissue"</span>)</span>
<span id="cb7-8">plt.legend()</span>
<span id="cb7-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"borzoi"</span>]</span>
<span id="cb8-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer"</span>]</span>
<span id="cb8-3">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(x, y)</span>
<span id="cb8-4">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank Borzoi'</span>)</span>
<span id="cb8-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank Enformer'</span>)</span>
<span id="cb8-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Reference Gene Expression in Brain Tissue"</span>)</span>
<span id="cb8-8">plt.legend()</span>
<span id="cb8-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson R"</span>)</span>
<span id="cb9-2">merged_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pearson"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Pearson R</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_42770/1150790563.py:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
  merged_df.corr(method="pearson")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="35">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">borzoi</th>
<th data-quarto-table-cell-role="th">enformer</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">borzoi</td>
<td>1.000000</td>
<td>0.225605</td>
<td>0.620217</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">enformer</td>
<td>0.225605</td>
<td>1.000000</td>
<td>0.593030</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.620217</td>
<td>0.593030</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>)</span>
<span id="cb12-2">merged_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Spearman R</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_42770/774805496.py:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
  merged_df.corr(method="spearman")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="34">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">borzoi</th>
<th data-quarto-table-cell-role="th">enformer</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">borzoi</td>
<td>1.000000</td>
<td>0.773361</td>
<td>0.856641</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">enformer</td>
<td>0.773361</td>
<td>1.000000</td>
<td>0.795909</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.856641</td>
<td>0.795909</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html</guid>
  <pubDate>Thu, 21 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Borzoi eQTL Example</title>
  <dc:creator>Johannes Linder, David R. Kelley</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C.html</link>
  <description><![CDATA[ 




<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#os.environ['CUDA_VISIBLE_DEVICES'] = '-1'</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> baskerville</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seqnn</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gene <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bgene</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dna</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pysam</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyfaidx</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.patches <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> patches</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> borzoi_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2023-09-20 21:36:27.557905: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-09-20 21:36:30.375102: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2023-09-20 21:36:34.863088: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1956] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.
Skipping registering GPU devices...</code></pre>
</div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Download model files and other dependencies (skip this cell if already executed once)</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Create model file structure</span></span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir saved_models</span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir saved_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f0</span>
<span id="cb3-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir saved_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f1</span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir saved_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f2</span>
<span id="cb3-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>mkdir saved_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f3</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Download model weights</span></span>
<span id="cb3-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>storage.googleapis.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>seqnn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>borzoi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>model0_best.h5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O saved_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>model0_best.h5</span>
<span id="cb3-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>storage.googleapis.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>seqnn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>borzoi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>model0_best.h5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O saved_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>model0_best.h5</span>
<span id="cb3-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>storage.googleapis.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>seqnn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>borzoi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>model0_best.h5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O saved_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>model0_best.h5</span>
<span id="cb3-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>storage.googleapis.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>seqnn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>borzoi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>model0_best.h5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O saved_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>f3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>model0_best.h5</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Download and uncompress annotation files</span></span>
<span id="cb3-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>storage.googleapis.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>seqnn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>helper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>gencode41_basic_nort.gtf.gz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> gunzip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> gencode41_basic_nort.gtf</span>
<span id="cb3-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>storage.googleapis.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>seqnn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>helper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>gencode41_basic_protein_splice.csv.gz</span>
<span id="cb3-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>storage.googleapis.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>seqnn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>helper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>polyadb_human_v3.csv.gz</span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Download and index hg38 genome</span></span>
<span id="cb3-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> http:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>hgdownload.cse.ucsc.edu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>goldenPath<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>hg38<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>bigZips<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>hg38.fa.gz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> gunzip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> hg38.fa</span>
<span id="cb3-23">pyfaidx.Faidx(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hg38.fa'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--2023-09-19 17:48:11--  https://storage.googleapis.com/seqnn-share/borzoi/f0/model0_best.h5
Resolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...
Connecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 744112468 (710M) [application/octet-stream]
Saving to: ‘saved_models/f0/model0_best.h5’

saved_models/f0/mod 100%[===================&gt;] 709.64M  25.8MB/s    in 27s     

2023-09-19 17:48:39 (26.0 MB/s) - ‘saved_models/f0/model0_best.h5’ saved [744112468/744112468]

--2023-09-19 17:48:39--  https://storage.googleapis.com/seqnn-share/borzoi/f1/model0_best.h5
Resolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...
Connecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 744112468 (710M) [application/octet-stream]
Saving to: ‘saved_models/f1/model0_best.h5’

saved_models/f1/mod 100%[===================&gt;] 709.64M  28.1MB/s    in 28s     

2023-09-19 17:49:08 (25.1 MB/s) - ‘saved_models/f1/model0_best.h5’ saved [744112468/744112468]

--2023-09-19 17:49:08--  https://storage.googleapis.com/seqnn-share/borzoi/f2/model0_best.h5
Resolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...
Connecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 744112468 (710M) [application/octet-stream]
Saving to: ‘saved_models/f2/model0_best.h5’

saved_models/f2/mod 100%[===================&gt;] 709.64M  22.8MB/s    in 29s     

2023-09-19 17:49:36 (24.8 MB/s) - ‘saved_models/f2/model0_best.h5’ saved [744112468/744112468]

--2023-09-19 17:49:37--  https://storage.googleapis.com/seqnn-share/borzoi/f3/model0_best.h5
Resolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...
Connecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 744112468 (710M) [application/octet-stream]
Saving to: ‘saved_models/f3/model0_best.h5’

saved_models/f3/mod 100%[===================&gt;] 709.64M  23.9MB/s    in 28s     

2023-09-19 17:50:05 (25.3 MB/s) - ‘saved_models/f3/model0_best.h5’ saved [744112468/744112468]

--2023-09-19 17:50:05--  https://storage.googleapis.com/seqnn-share/helper/gencode41_basic_nort.gtf.gz
Resolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...
Connecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 30909907 (29M) [application/octet-stream]
Saving to: ‘STDOUT’

-                   100%[===================&gt;]  29.48M  8.28MB/s    in 3.7s    

2023-09-19 17:50:09 (8.03 MB/s) - written to stdout [30909907/30909907]

--2023-09-19 17:50:09--  https://storage.googleapis.com/seqnn-share/helper/gencode41_basic_protein_splice.csv.gz
Resolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...
Connecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3729563 (3.6M) [text/csv]
Saving to: ‘gencode41_basic_protein_splice.csv.gz’

gencode41_basic_pro 100%[===================&gt;]   3.56M  --.-KB/s    in 0.1s    

2023-09-19 17:50:10 (29.2 MB/s) - ‘gencode41_basic_protein_splice.csv.gz’ saved [3729563/3729563]

--2023-09-19 17:50:10--  https://storage.googleapis.com/seqnn-share/helper/polyadb_human_v3.csv.gz
Resolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...
Connecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 5889770 (5.6M) [text/csv]
Saving to: ‘polyadb_human_v3.csv.gz’

polyadb_human_v3.cs 100%[===================&gt;]   5.62M  --.-KB/s    in 0.1s    

2023-09-19 17:50:10 (58.6 MB/s) - ‘polyadb_human_v3.csv.gz’ saved [5889770/5889770]

--2023-09-19 17:50:10--  http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz
Resolving hgdownload.cse.ucsc.edu (hgdownload.cse.ucsc.edu)... 128.114.119.163
Connecting to hgdownload.cse.ucsc.edu (hgdownload.cse.ucsc.edu)|128.114.119.163|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 983659424 (938M) [application/x-gzip]
Saving to: ‘STDOUT’

-                   100%[===================&gt;] 938.09M  44.0MB/s    in 20s     

2023-09-19 17:50:30 (48.1 MB/s) - written to stdout [983659424/983659424]
</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>Faidx("hg38.fa")</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Model configuration</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">params_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'params_pred.json'</span></span>
<span id="cb6-4">targets_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'targets_gtex.txt'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Subset of targets_human.txt</span></span>
<span id="cb6-5"></span>
<span id="cb6-6">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb6-7">n_folds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#To use only one model fold, change to 'n_folds = 1'</span></span>
<span id="cb6-8">rc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Average across reverse-complement prediction</span></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Read model parameters</span></span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(params_file) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> params_open :</span>
<span id="cb6-13">    </span>
<span id="cb6-14">    params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(params_open)</span>
<span id="cb6-15">    </span>
<span id="cb6-16">    params_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>]</span>
<span id="cb6-17">    params_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>]</span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Read targets</span></span>
<span id="cb6-20"></span>
<span id="cb6-21">targets_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(targets_file, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-22">target_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets_df.index</span>
<span id="cb6-23"></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Create local index of strand_pair (relative to sliced targets)</span></span>
<span id="cb6-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rc :</span>
<span id="cb6-26">    strand_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets_df.strand_pair</span>
<span id="cb6-27">    </span>
<span id="cb6-28">    target_slice_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {ix : i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(target_index.values.tolist())}</span>
<span id="cb6-29">    slice_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb6-30">        target_slice_dict[ix] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_slice_dict <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> ix <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> strand_pair.values.tolist()</span>
<span id="cb6-31">    ], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int32'</span>)</span>
<span id="cb6-32"></span>
<span id="cb6-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Initialize model ensemble</span></span>
<span id="cb6-34"></span>
<span id="cb6-35">models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-36"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> fold_ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_folds) :</span>
<span id="cb6-37">    </span>
<span id="cb6-38">    model_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"saved_models/f"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(fold_ix) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/model0_best.h5"</span></span>
<span id="cb6-39"></span>
<span id="cb6-40">    seqnn_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seqnn.SeqNN(params_model)</span>
<span id="cb6-41">    seqnn_model.restore(model_file, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-42">    seqnn_model.build_slice(target_index)</span>
<span id="cb6-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rc :</span>
<span id="cb6-44">        seqnn_model.strand_pair.append(slice_pair)</span>
<span id="cb6-45">    seqnn_model.build_ensemble(rc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>)</span>
<span id="cb6-46">    </span>
<span id="cb6-47">    models.append(seqnn_model)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
Model: "model_1"
__________________________________________________________________________________________________
 Layer (type)                   Output Shape         Param #     Connected to                     
==================================================================================================
 sequence (InputLayer)          [(None, 524288, 4)]  0           []                               
                                                                                                  
 stochastic_reverse_complement   ((None, 524288, 4),  0          ['sequence[0][0]']               
 (StochasticReverseComplement)   ())                                                              
                                                                                                  
 stochastic_shift (StochasticSh  (None, 524288, 4)   0           ['stochastic_reverse_complement[0
 ift)                                                            ][0]']                           
                                                                                                  
 conv1d (Conv1D)                (None, 524288, 512)  31232       ['stochastic_shift[0][0]']       
                                                                                                  
 max_pooling1d (MaxPooling1D)   (None, 262144, 512)  0           ['conv1d[0][0]']                 
                                                                                                  
 sync_batch_normalization (Sync  (None, 262144, 512)  2048       ['max_pooling1d[0][0]']          
 BatchNormalization)                                                                              
                                                                                                  
 tf.nn.gelu (TFOpLambda)        (None, 262144, 512)  0           ['sync_batch_normalization[0][0]'
                                                                 ]                                
                                                                                                  
 conv1d_1 (Conv1D)              (None, 262144, 608)  1557088     ['tf.nn.gelu[0][0]']             
                                                                                                  
 max_pooling1d_1 (MaxPooling1D)  (None, 131072, 608)  0          ['conv1d_1[0][0]']               
                                                                                                  
 sync_batch_normalization_1 (Sy  (None, 131072, 608)  2432       ['max_pooling1d_1[0][0]']        
 ncBatchNormalization)                                                                            
                                                                                                  
 tf.nn.gelu_1 (TFOpLambda)      (None, 131072, 608)  0           ['sync_batch_normalization_1[0][0
                                                                 ]']                              
                                                                                                  
 conv1d_2 (Conv1D)              (None, 131072, 736)  2238176     ['tf.nn.gelu_1[0][0]']           
                                                                                                  
 max_pooling1d_2 (MaxPooling1D)  (None, 65536, 736)  0           ['conv1d_2[0][0]']               
                                                                                                  
 sync_batch_normalization_2 (Sy  (None, 65536, 736)  2944        ['max_pooling1d_2[0][0]']        
 ncBatchNormalization)                                                                            
                                                                                                  
 tf.nn.gelu_2 (TFOpLambda)      (None, 65536, 736)   0           ['sync_batch_normalization_2[0][0
                                                                 ]']                              
                                                                                                  
 conv1d_3 (Conv1D)              (None, 65536, 896)   3298176     ['tf.nn.gelu_2[0][0]']           
                                                                                                  
 max_pooling1d_3 (MaxPooling1D)  (None, 32768, 896)  0           ['conv1d_3[0][0]']               
                                                                                                  
 sync_batch_normalization_3 (Sy  (None, 32768, 896)  3584        ['max_pooling1d_3[0][0]']        
 ncBatchNormalization)                                                                            
                                                                                                  
 tf.nn.gelu_3 (TFOpLambda)      (None, 32768, 896)   0           ['sync_batch_normalization_3[0][0
                                                                 ]']                              
                                                                                                  
 conv1d_4 (Conv1D)              (None, 32768, 1056)  4731936     ['tf.nn.gelu_3[0][0]']           
                                                                                                  
 max_pooling1d_4 (MaxPooling1D)  (None, 16384, 1056)  0          ['conv1d_4[0][0]']               
                                                                                                  
 sync_batch_normalization_4 (Sy  (None, 16384, 1056)  4224       ['max_pooling1d_4[0][0]']        
 ncBatchNormalization)                                                                            
                                                                                                  
 tf.nn.gelu_4 (TFOpLambda)      (None, 16384, 1056)  0           ['sync_batch_normalization_4[0][0
                                                                 ]']                              
                                                                                                  
 conv1d_5 (Conv1D)              (None, 16384, 1280)  6759680     ['tf.nn.gelu_4[0][0]']           
                                                                                                  
 max_pooling1d_5 (MaxPooling1D)  (None, 8192, 1280)  0           ['conv1d_5[0][0]']               
                                                                                                  
 sync_batch_normalization_5 (Sy  (None, 8192, 1280)  5120        ['max_pooling1d_5[0][0]']        
 ncBatchNormalization)                                                                            
                                                                                                  
 tf.nn.gelu_5 (TFOpLambda)      (None, 8192, 1280)   0           ['sync_batch_normalization_5[0][0
                                                                 ]']                              
                                                                                                  
 conv1d_6 (Conv1D)              (None, 8192, 1536)   9831936     ['tf.nn.gelu_5[0][0]']           
                                                                                                  
 max_pooling1d_6 (MaxPooling1D)  (None, 4096, 1536)  0           ['conv1d_6[0][0]']               
                                                                                                  
 layer_normalization (LayerNorm  (None, 4096, 1536)  3072        ['max_pooling1d_6[0][0]']        
 alization)                                                                                       
                                                                                                  
 multihead_attention (Multihead  (None, 4096, 1536)  6310400     ['layer_normalization[0][0]']    
 Attention)                                                                                       
                                                                                                  
 dropout (Dropout)              (None, 4096, 1536)   0           ['multihead_attention[0][0]']    
                                                                                                  
 add (Add)                      (None, 4096, 1536)   0           ['max_pooling1d_6[0][0]',        
                                                                  'dropout[0][0]']                
                                                                                                  
 layer_normalization_1 (LayerNo  (None, 4096, 1536)  3072        ['add[0][0]']                    
 rmalization)                                                                                     
                                                                                                  
 dense (Dense)                  (None, 4096, 3072)   4721664     ['layer_normalization_1[0][0]']  
                                                                                                  
 dropout_1 (Dropout)            (None, 4096, 3072)   0           ['dense[0][0]']                  
                                                                                                  
 re_lu (ReLU)                   (None, 4096, 3072)   0           ['dropout_1[0][0]']              
                                                                                                  
 dense_1 (Dense)                (None, 4096, 1536)   4720128     ['re_lu[0][0]']                  
                                                                                                  
 dropout_2 (Dropout)            (None, 4096, 1536)   0           ['dense_1[0][0]']                
                                                                                                  
 add_1 (Add)                    (None, 4096, 1536)   0           ['add[0][0]',                    
                                                                  'dropout_2[0][0]']              
                                                                                                  
 layer_normalization_2 (LayerNo  (None, 4096, 1536)  3072        ['add_1[0][0]']                  
 rmalization)                                                                                     
                                                                                                  
 multihead_attention_1 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_2[0][0]']  
 adAttention)                                                                                     
                                                                                                  
 dropout_3 (Dropout)            (None, 4096, 1536)   0           ['multihead_attention_1[0][0]']  
                                                                                                  
 add_2 (Add)                    (None, 4096, 1536)   0           ['add_1[0][0]',                  
                                                                  'dropout_3[0][0]']              
                                                                                                  
 layer_normalization_3 (LayerNo  (None, 4096, 1536)  3072        ['add_2[0][0]']                  
 rmalization)                                                                                     
                                                                                                  
 dense_2 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_3[0][0]']  
                                                                                                  
 dropout_4 (Dropout)            (None, 4096, 3072)   0           ['dense_2[0][0]']                
                                                                                                  
 re_lu_1 (ReLU)                 (None, 4096, 3072)   0           ['dropout_4[0][0]']              
                                                                                                  
 dense_3 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_1[0][0]']                
                                                                                                  
 dropout_5 (Dropout)            (None, 4096, 1536)   0           ['dense_3[0][0]']                
                                                                                                  
 add_3 (Add)                    (None, 4096, 1536)   0           ['add_2[0][0]',                  
                                                                  'dropout_5[0][0]']              
                                                                                                  
 layer_normalization_4 (LayerNo  (None, 4096, 1536)  3072        ['add_3[0][0]']                  
 rmalization)                                                                                     
                                                                                                  
 multihead_attention_2 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_4[0][0]']  
 adAttention)                                                                                     
                                                                                                  
 dropout_6 (Dropout)            (None, 4096, 1536)   0           ['multihead_attention_2[0][0]']  
                                                                                                  
 add_4 (Add)                    (None, 4096, 1536)   0           ['add_3[0][0]',                  
                                                                  'dropout_6[0][0]']              
                                                                                                  
 layer_normalization_5 (LayerNo  (None, 4096, 1536)  3072        ['add_4[0][0]']                  
 rmalization)                                                                                     
                                                                                                  
 dense_4 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_5[0][0]']  
                                                                                                  
 dropout_7 (Dropout)            (None, 4096, 3072)   0           ['dense_4[0][0]']                
                                                                                                  
 re_lu_2 (ReLU)                 (None, 4096, 3072)   0           ['dropout_7[0][0]']              
                                                                                                  
 dense_5 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_2[0][0]']                
                                                                                                  
 dropout_8 (Dropout)            (None, 4096, 1536)   0           ['dense_5[0][0]']                
                                                                                                  
 add_5 (Add)                    (None, 4096, 1536)   0           ['add_4[0][0]',                  
                                                                  'dropout_8[0][0]']              
                                                                                                  
 layer_normalization_6 (LayerNo  (None, 4096, 1536)  3072        ['add_5[0][0]']                  
 rmalization)                                                                                     
                                                                                                  
 multihead_attention_3 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_6[0][0]']  
 adAttention)                                                                                     
                                                                                                  
 dropout_9 (Dropout)            (None, 4096, 1536)   0           ['multihead_attention_3[0][0]']  
                                                                                                  
 add_6 (Add)                    (None, 4096, 1536)   0           ['add_5[0][0]',                  
                                                                  'dropout_9[0][0]']              
                                                                                                  
 layer_normalization_7 (LayerNo  (None, 4096, 1536)  3072        ['add_6[0][0]']                  
 rmalization)                                                                                     
                                                                                                  
 dense_6 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_7[0][0]']  
                                                                                                  
 dropout_10 (Dropout)           (None, 4096, 3072)   0           ['dense_6[0][0]']                
                                                                                                  
 re_lu_3 (ReLU)                 (None, 4096, 3072)   0           ['dropout_10[0][0]']             
                                                                                                  
 dense_7 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_3[0][0]']                
                                                                                                  
 dropout_11 (Dropout)           (None, 4096, 1536)   0           ['dense_7[0][0]']                
                                                                                                  
 add_7 (Add)                    (None, 4096, 1536)   0           ['add_6[0][0]',                  
                                                                  'dropout_11[0][0]']             
                                                                                                  
 layer_normalization_8 (LayerNo  (None, 4096, 1536)  3072        ['add_7[0][0]']                  
 rmalization)                                                                                     
                                                                                                  
 multihead_attention_4 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_8[0][0]']  
 adAttention)                                                                                     
                                                                                                  
 dropout_12 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_4[0][0]']  
                                                                                                  
 add_8 (Add)                    (None, 4096, 1536)   0           ['add_7[0][0]',                  
                                                                  'dropout_12[0][0]']             
                                                                                                  
 layer_normalization_9 (LayerNo  (None, 4096, 1536)  3072        ['add_8[0][0]']                  
 rmalization)                                                                                     
                                                                                                  
 dense_8 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_9[0][0]']  
                                                                                                  
 dropout_13 (Dropout)           (None, 4096, 3072)   0           ['dense_8[0][0]']                
                                                                                                  
 re_lu_4 (ReLU)                 (None, 4096, 3072)   0           ['dropout_13[0][0]']             
                                                                                                  
 dense_9 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_4[0][0]']                
                                                                                                  
 dropout_14 (Dropout)           (None, 4096, 1536)   0           ['dense_9[0][0]']                
                                                                                                  
 add_9 (Add)                    (None, 4096, 1536)   0           ['add_8[0][0]',                  
                                                                  'dropout_14[0][0]']             
                                                                                                  
 layer_normalization_10 (LayerN  (None, 4096, 1536)  3072        ['add_9[0][0]']                  
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_5 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_10[0][0]'] 
 adAttention)                                                                                     
                                                                                                  
 dropout_15 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_5[0][0]']  
                                                                                                  
 add_10 (Add)                   (None, 4096, 1536)   0           ['add_9[0][0]',                  
                                                                  'dropout_15[0][0]']             
                                                                                                  
 layer_normalization_11 (LayerN  (None, 4096, 1536)  3072        ['add_10[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_10 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_11[0][0]'] 
                                                                                                  
 dropout_16 (Dropout)           (None, 4096, 3072)   0           ['dense_10[0][0]']               
                                                                                                  
 re_lu_5 (ReLU)                 (None, 4096, 3072)   0           ['dropout_16[0][0]']             
                                                                                                  
 dense_11 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_5[0][0]']                
                                                                                                  
 dropout_17 (Dropout)           (None, 4096, 1536)   0           ['dense_11[0][0]']               
                                                                                                  
 add_11 (Add)                   (None, 4096, 1536)   0           ['add_10[0][0]',                 
                                                                  'dropout_17[0][0]']             
                                                                                                  
 layer_normalization_12 (LayerN  (None, 4096, 1536)  3072        ['add_11[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_6 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_12[0][0]'] 
 adAttention)                                                                                     
                                                                                                  
 dropout_18 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_6[0][0]']  
                                                                                                  
 add_12 (Add)                   (None, 4096, 1536)   0           ['add_11[0][0]',                 
                                                                  'dropout_18[0][0]']             
                                                                                                  
 layer_normalization_13 (LayerN  (None, 4096, 1536)  3072        ['add_12[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_12 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_13[0][0]'] 
                                                                                                  
 dropout_19 (Dropout)           (None, 4096, 3072)   0           ['dense_12[0][0]']               
                                                                                                  
 re_lu_6 (ReLU)                 (None, 4096, 3072)   0           ['dropout_19[0][0]']             
                                                                                                  
 dense_13 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_6[0][0]']                
                                                                                                  
 dropout_20 (Dropout)           (None, 4096, 1536)   0           ['dense_13[0][0]']               
                                                                                                  
 add_13 (Add)                   (None, 4096, 1536)   0           ['add_12[0][0]',                 
                                                                  'dropout_20[0][0]']             
                                                                                                  
 layer_normalization_14 (LayerN  (None, 4096, 1536)  3072        ['add_13[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_7 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_14[0][0]'] 
 adAttention)                                                                                     
                                                                                                  
 dropout_21 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_7[0][0]']  
                                                                                                  
 add_14 (Add)                   (None, 4096, 1536)   0           ['add_13[0][0]',                 
                                                                  'dropout_21[0][0]']             
                                                                                                  
 layer_normalization_15 (LayerN  (None, 4096, 1536)  3072        ['add_14[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_14 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_15[0][0]'] 
                                                                                                  
 dropout_22 (Dropout)           (None, 4096, 3072)   0           ['dense_14[0][0]']               
                                                                                                  
 re_lu_7 (ReLU)                 (None, 4096, 3072)   0           ['dropout_22[0][0]']             
                                                                                                  
 dense_15 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_7[0][0]']                
                                                                                                  
 dropout_23 (Dropout)           (None, 4096, 1536)   0           ['dense_15[0][0]']               
                                                                                                  
 add_15 (Add)                   (None, 4096, 1536)   0           ['add_14[0][0]',                 
                                                                  'dropout_23[0][0]']             
                                                                                                  
 sync_batch_normalization_6 (Sy  (None, 4096, 1536)  6144        ['add_15[0][0]']                 
 ncBatchNormalization)                                                                            
                                                                                                  
 tf.nn.gelu_6 (TFOpLambda)      (None, 4096, 1536)   0           ['sync_batch_normalization_6[0][0
                                                                 ]']                              
                                                                                                  
 sync_batch_normalization_7 (Sy  (None, 8192, 1536)  6144        ['conv1d_6[0][0]']               
 ncBatchNormalization)                                                                            
                                                                                                  
 dense_16 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_6[0][0]']           
                                                                                                  
 tf.nn.gelu_7 (TFOpLambda)      (None, 8192, 1536)   0           ['sync_batch_normalization_7[0][0
                                                                 ]']                              
                                                                                                  
 up_sampling1d (UpSampling1D)   (None, 8192, 1536)   0           ['dense_16[0][0]']               
                                                                                                  
 dense_17 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_7[0][0]']           
                                                                                                  
 add_16 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d[0][0]',          
                                                                  'dense_17[0][0]']               
                                                                                                  
 separable_conv1d (SeparableCon  (None, 8192, 1536)  2365440     ['add_16[0][0]']                 
 v1D)                                                                                             
                                                                                                  
 sync_batch_normalization_8 (Sy  (None, 8192, 1536)  6144        ['separable_conv1d[0][0]']       
 ncBatchNormalization)                                                                            
                                                                                                  
 tf.nn.gelu_8 (TFOpLambda)      (None, 8192, 1536)   0           ['sync_batch_normalization_8[0][0
                                                                 ]']                              
                                                                                                  
 sync_batch_normalization_9 (Sy  (None, 16384, 1280)  5120       ['conv1d_5[0][0]']               
 ncBatchNormalization)                                                                            
                                                                                                  
 dense_18 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_8[0][0]']           
                                                                                                  
 tf.nn.gelu_9 (TFOpLambda)      (None, 16384, 1280)  0           ['sync_batch_normalization_9[0][0
                                                                 ]']                              
                                                                                                  
 up_sampling1d_1 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_18[0][0]']               
                                                                                                  
 dense_19 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_9[0][0]']           
                                                                                                  
 add_17 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_1[0][0]',        
                                                                  'dense_19[0][0]']               
                                                                                                  
 separable_conv1d_1 (SeparableC  (None, 16384, 1536)  2365440    ['add_17[0][0]']                 
 onv1D)                                                                                           
                                                                                                  
 cropping1d (Cropping1D)        (None, 16352, 1536)  0           ['separable_conv1d_1[0][0]']     
                                                                                                  
 sync_batch_normalization_10 (S  (None, 16352, 1536)  6144       ['cropping1d[0][0]']             
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_10 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_10[0][
                                                                 0]']                             
                                                                                                  
 conv1d_7 (Conv1D)              (None, 16352, 1920)  2951040     ['tf.nn.gelu_10[0][0]']          
                                                                                                  
 dropout_24 (Dropout)           (None, 16352, 1920)  0           ['conv1d_7[0][0]']               
                                                                                                  
 tf.nn.gelu_11 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_24[0][0]']             
                                                                                                  
 dense_20 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_11[0][0]']          
                                                                                                  
 switch_reverse (SwitchReverse)  (None, 16352, 7611)  0          ['dense_20[0][0]',               
                                                                  'stochastic_reverse_complement[0
                                                                 ][1]']                           
                                                                                                  
==================================================================================================
Total params: 185,917,723
Trainable params: 185,892,699
Non-trainable params: 25,024
__________________________________________________________________________________________________
None
model_strides [32, 32]
target_lengths [16352, 16352]
target_crops [16, 16]
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
Model: "model_6"
__________________________________________________________________________________________________
 Layer (type)                   Output Shape         Param #     Connected to                     
==================================================================================================
 sequence (InputLayer)          [(None, 524288, 4)]  0           []                               
                                                                                                  
 stochastic_reverse_complement_  ((None, 524288, 4),  0          ['sequence[0][0]']               
 1 (StochasticReverseComplement   ())                                                             
 )                                                                                                
                                                                                                  
 stochastic_shift_1 (Stochastic  (None, 524288, 4)   0           ['stochastic_reverse_complement_1
 Shift)                                                          [0][0]']                         
                                                                                                  
 conv1d_8 (Conv1D)              (None, 524288, 512)  31232       ['stochastic_shift_1[0][0]']     
                                                                                                  
 max_pooling1d_7 (MaxPooling1D)  (None, 262144, 512)  0          ['conv1d_8[0][0]']               
                                                                                                  
 sync_batch_normalization_11 (S  (None, 262144, 512)  2048       ['max_pooling1d_7[0][0]']        
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_12 (TFOpLambda)     (None, 262144, 512)  0           ['sync_batch_normalization_11[0][
                                                                 0]']                             
                                                                                                  
 conv1d_9 (Conv1D)              (None, 262144, 608)  1557088     ['tf.nn.gelu_12[0][0]']          
                                                                                                  
 max_pooling1d_8 (MaxPooling1D)  (None, 131072, 608)  0          ['conv1d_9[0][0]']               
                                                                                                  
 sync_batch_normalization_12 (S  (None, 131072, 608)  2432       ['max_pooling1d_8[0][0]']        
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_13 (TFOpLambda)     (None, 131072, 608)  0           ['sync_batch_normalization_12[0][
                                                                 0]']                             
                                                                                                  
 conv1d_10 (Conv1D)             (None, 131072, 736)  2238176     ['tf.nn.gelu_13[0][0]']          
                                                                                                  
 max_pooling1d_9 (MaxPooling1D)  (None, 65536, 736)  0           ['conv1d_10[0][0]']              
                                                                                                  
 sync_batch_normalization_13 (S  (None, 65536, 736)  2944        ['max_pooling1d_9[0][0]']        
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_14 (TFOpLambda)     (None, 65536, 736)   0           ['sync_batch_normalization_13[0][
                                                                 0]']                             
                                                                                                  
 conv1d_11 (Conv1D)             (None, 65536, 896)   3298176     ['tf.nn.gelu_14[0][0]']          
                                                                                                  
 max_pooling1d_10 (MaxPooling1D  (None, 32768, 896)  0           ['conv1d_11[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_14 (S  (None, 32768, 896)  3584        ['max_pooling1d_10[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_15 (TFOpLambda)     (None, 32768, 896)   0           ['sync_batch_normalization_14[0][
                                                                 0]']                             
                                                                                                  
 conv1d_12 (Conv1D)             (None, 32768, 1056)  4731936     ['tf.nn.gelu_15[0][0]']          
                                                                                                  
 max_pooling1d_11 (MaxPooling1D  (None, 16384, 1056)  0          ['conv1d_12[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_15 (S  (None, 16384, 1056)  4224       ['max_pooling1d_11[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_16 (TFOpLambda)     (None, 16384, 1056)  0           ['sync_batch_normalization_15[0][
                                                                 0]']                             
                                                                                                  
 conv1d_13 (Conv1D)             (None, 16384, 1280)  6759680     ['tf.nn.gelu_16[0][0]']          
                                                                                                  
 max_pooling1d_12 (MaxPooling1D  (None, 8192, 1280)  0           ['conv1d_13[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_16 (S  (None, 8192, 1280)  5120        ['max_pooling1d_12[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_17 (TFOpLambda)     (None, 8192, 1280)   0           ['sync_batch_normalization_16[0][
                                                                 0]']                             
                                                                                                  
 conv1d_14 (Conv1D)             (None, 8192, 1536)   9831936     ['tf.nn.gelu_17[0][0]']          
                                                                                                  
 max_pooling1d_13 (MaxPooling1D  (None, 4096, 1536)  0           ['conv1d_14[0][0]']              
 )                                                                                                
                                                                                                  
 layer_normalization_16 (LayerN  (None, 4096, 1536)  3072        ['max_pooling1d_13[0][0]']       
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_8 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_16[0][0]'] 
 adAttention)                                                                                     
                                                                                                  
 dropout_25 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_8[0][0]']  
                                                                                                  
 add_18 (Add)                   (None, 4096, 1536)   0           ['max_pooling1d_13[0][0]',       
                                                                  'dropout_25[0][0]']             
                                                                                                  
 layer_normalization_17 (LayerN  (None, 4096, 1536)  3072        ['add_18[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_22 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_17[0][0]'] 
                                                                                                  
 dropout_26 (Dropout)           (None, 4096, 3072)   0           ['dense_22[0][0]']               
                                                                                                  
 re_lu_8 (ReLU)                 (None, 4096, 3072)   0           ['dropout_26[0][0]']             
                                                                                                  
 dense_23 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_8[0][0]']                
                                                                                                  
 dropout_27 (Dropout)           (None, 4096, 1536)   0           ['dense_23[0][0]']               
                                                                                                  
 add_19 (Add)                   (None, 4096, 1536)   0           ['add_18[0][0]',                 
                                                                  'dropout_27[0][0]']             
                                                                                                  
 layer_normalization_18 (LayerN  (None, 4096, 1536)  3072        ['add_19[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_9 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_18[0][0]'] 
 adAttention)                                                                                     
                                                                                                  
 dropout_28 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_9[0][0]']  
                                                                                                  
 add_20 (Add)                   (None, 4096, 1536)   0           ['add_19[0][0]',                 
                                                                  'dropout_28[0][0]']             
                                                                                                  
 layer_normalization_19 (LayerN  (None, 4096, 1536)  3072        ['add_20[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_24 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_19[0][0]'] 
                                                                                                  
 dropout_29 (Dropout)           (None, 4096, 3072)   0           ['dense_24[0][0]']               
                                                                                                  
 re_lu_9 (ReLU)                 (None, 4096, 3072)   0           ['dropout_29[0][0]']             
                                                                                                  
 dense_25 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_9[0][0]']                
                                                                                                  
 dropout_30 (Dropout)           (None, 4096, 1536)   0           ['dense_25[0][0]']               
                                                                                                  
 add_21 (Add)                   (None, 4096, 1536)   0           ['add_20[0][0]',                 
                                                                  'dropout_30[0][0]']             
                                                                                                  
 layer_normalization_20 (LayerN  (None, 4096, 1536)  3072        ['add_21[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_10 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_20[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_31 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_10[0][0]'] 
                                                                                                  
 add_22 (Add)                   (None, 4096, 1536)   0           ['add_21[0][0]',                 
                                                                  'dropout_31[0][0]']             
                                                                                                  
 layer_normalization_21 (LayerN  (None, 4096, 1536)  3072        ['add_22[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_26 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_21[0][0]'] 
                                                                                                  
 dropout_32 (Dropout)           (None, 4096, 3072)   0           ['dense_26[0][0]']               
                                                                                                  
 re_lu_10 (ReLU)                (None, 4096, 3072)   0           ['dropout_32[0][0]']             
                                                                                                  
 dense_27 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_10[0][0]']               
                                                                                                  
 dropout_33 (Dropout)           (None, 4096, 1536)   0           ['dense_27[0][0]']               
                                                                                                  
 add_23 (Add)                   (None, 4096, 1536)   0           ['add_22[0][0]',                 
                                                                  'dropout_33[0][0]']             
                                                                                                  
 layer_normalization_22 (LayerN  (None, 4096, 1536)  3072        ['add_23[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_11 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_22[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_34 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_11[0][0]'] 
                                                                                                  
 add_24 (Add)                   (None, 4096, 1536)   0           ['add_23[0][0]',                 
                                                                  'dropout_34[0][0]']             
                                                                                                  
 layer_normalization_23 (LayerN  (None, 4096, 1536)  3072        ['add_24[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_28 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_23[0][0]'] 
                                                                                                  
 dropout_35 (Dropout)           (None, 4096, 3072)   0           ['dense_28[0][0]']               
                                                                                                  
 re_lu_11 (ReLU)                (None, 4096, 3072)   0           ['dropout_35[0][0]']             
                                                                                                  
 dense_29 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_11[0][0]']               
                                                                                                  
 dropout_36 (Dropout)           (None, 4096, 1536)   0           ['dense_29[0][0]']               
                                                                                                  
 add_25 (Add)                   (None, 4096, 1536)   0           ['add_24[0][0]',                 
                                                                  'dropout_36[0][0]']             
                                                                                                  
 layer_normalization_24 (LayerN  (None, 4096, 1536)  3072        ['add_25[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_12 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_24[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_37 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_12[0][0]'] 
                                                                                                  
 add_26 (Add)                   (None, 4096, 1536)   0           ['add_25[0][0]',                 
                                                                  'dropout_37[0][0]']             
                                                                                                  
 layer_normalization_25 (LayerN  (None, 4096, 1536)  3072        ['add_26[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_30 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_25[0][0]'] 
                                                                                                  
 dropout_38 (Dropout)           (None, 4096, 3072)   0           ['dense_30[0][0]']               
                                                                                                  
 re_lu_12 (ReLU)                (None, 4096, 3072)   0           ['dropout_38[0][0]']             
                                                                                                  
 dense_31 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_12[0][0]']               
                                                                                                  
 dropout_39 (Dropout)           (None, 4096, 1536)   0           ['dense_31[0][0]']               
                                                                                                  
 add_27 (Add)                   (None, 4096, 1536)   0           ['add_26[0][0]',                 
                                                                  'dropout_39[0][0]']             
                                                                                                  
 layer_normalization_26 (LayerN  (None, 4096, 1536)  3072        ['add_27[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_13 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_26[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_40 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_13[0][0]'] 
                                                                                                  
 add_28 (Add)                   (None, 4096, 1536)   0           ['add_27[0][0]',                 
                                                                  'dropout_40[0][0]']             
                                                                                                  
 layer_normalization_27 (LayerN  (None, 4096, 1536)  3072        ['add_28[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_32 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_27[0][0]'] 
                                                                                                  
 dropout_41 (Dropout)           (None, 4096, 3072)   0           ['dense_32[0][0]']               
                                                                                                  
 re_lu_13 (ReLU)                (None, 4096, 3072)   0           ['dropout_41[0][0]']             
                                                                                                  
 dense_33 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_13[0][0]']               
                                                                                                  
 dropout_42 (Dropout)           (None, 4096, 1536)   0           ['dense_33[0][0]']               
                                                                                                  
 add_29 (Add)                   (None, 4096, 1536)   0           ['add_28[0][0]',                 
                                                                  'dropout_42[0][0]']             
                                                                                                  
 layer_normalization_28 (LayerN  (None, 4096, 1536)  3072        ['add_29[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_14 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_28[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_43 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_14[0][0]'] 
                                                                                                  
 add_30 (Add)                   (None, 4096, 1536)   0           ['add_29[0][0]',                 
                                                                  'dropout_43[0][0]']             
                                                                                                  
 layer_normalization_29 (LayerN  (None, 4096, 1536)  3072        ['add_30[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_34 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_29[0][0]'] 
                                                                                                  
 dropout_44 (Dropout)           (None, 4096, 3072)   0           ['dense_34[0][0]']               
                                                                                                  
 re_lu_14 (ReLU)                (None, 4096, 3072)   0           ['dropout_44[0][0]']             
                                                                                                  
 dense_35 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_14[0][0]']               
                                                                                                  
 dropout_45 (Dropout)           (None, 4096, 1536)   0           ['dense_35[0][0]']               
                                                                                                  
 add_31 (Add)                   (None, 4096, 1536)   0           ['add_30[0][0]',                 
                                                                  'dropout_45[0][0]']             
                                                                                                  
 layer_normalization_30 (LayerN  (None, 4096, 1536)  3072        ['add_31[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_15 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_30[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_46 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_15[0][0]'] 
                                                                                                  
 add_32 (Add)                   (None, 4096, 1536)   0           ['add_31[0][0]',                 
                                                                  'dropout_46[0][0]']             
                                                                                                  
 layer_normalization_31 (LayerN  (None, 4096, 1536)  3072        ['add_32[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_36 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_31[0][0]'] 
                                                                                                  
 dropout_47 (Dropout)           (None, 4096, 3072)   0           ['dense_36[0][0]']               
                                                                                                  
 re_lu_15 (ReLU)                (None, 4096, 3072)   0           ['dropout_47[0][0]']             
                                                                                                  
 dense_37 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_15[0][0]']               
                                                                                                  
 dropout_48 (Dropout)           (None, 4096, 1536)   0           ['dense_37[0][0]']               
                                                                                                  
 add_33 (Add)                   (None, 4096, 1536)   0           ['add_32[0][0]',                 
                                                                  'dropout_48[0][0]']             
                                                                                                  
 sync_batch_normalization_17 (S  (None, 4096, 1536)  6144        ['add_33[0][0]']                 
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_18 (TFOpLambda)     (None, 4096, 1536)   0           ['sync_batch_normalization_17[0][
                                                                 0]']                             
                                                                                                  
 sync_batch_normalization_18 (S  (None, 8192, 1536)  6144        ['conv1d_14[0][0]']              
 yncBatchNormalization)                                                                           
                                                                                                  
 dense_38 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_18[0][0]']          
                                                                                                  
 tf.nn.gelu_19 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_18[0][
                                                                 0]']                             
                                                                                                  
 up_sampling1d_2 (UpSampling1D)  (None, 8192, 1536)  0           ['dense_38[0][0]']               
                                                                                                  
 dense_39 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_19[0][0]']          
                                                                                                  
 add_34 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d_2[0][0]',        
                                                                  'dense_39[0][0]']               
                                                                                                  
 separable_conv1d_2 (SeparableC  (None, 8192, 1536)  2365440     ['add_34[0][0]']                 
 onv1D)                                                                                           
                                                                                                  
 sync_batch_normalization_19 (S  (None, 8192, 1536)  6144        ['separable_conv1d_2[0][0]']     
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_20 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_19[0][
                                                                 0]']                             
                                                                                                  
 sync_batch_normalization_20 (S  (None, 16384, 1280)  5120       ['conv1d_13[0][0]']              
 yncBatchNormalization)                                                                           
                                                                                                  
 dense_40 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_20[0][0]']          
                                                                                                  
 tf.nn.gelu_21 (TFOpLambda)     (None, 16384, 1280)  0           ['sync_batch_normalization_20[0][
                                                                 0]']                             
                                                                                                  
 up_sampling1d_3 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_40[0][0]']               
                                                                                                  
 dense_41 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_21[0][0]']          
                                                                                                  
 add_35 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_3[0][0]',        
                                                                  'dense_41[0][0]']               
                                                                                                  
 separable_conv1d_3 (SeparableC  (None, 16384, 1536)  2365440    ['add_35[0][0]']                 
 onv1D)                                                                                           
                                                                                                  
 cropping1d_1 (Cropping1D)      (None, 16352, 1536)  0           ['separable_conv1d_3[0][0]']     
                                                                                                  
 sync_batch_normalization_21 (S  (None, 16352, 1536)  6144       ['cropping1d_1[0][0]']           
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_22 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_21[0][
                                                                 0]']                             
                                                                                                  
 conv1d_15 (Conv1D)             (None, 16352, 1920)  2951040     ['tf.nn.gelu_22[0][0]']          
                                                                                                  
 dropout_49 (Dropout)           (None, 16352, 1920)  0           ['conv1d_15[0][0]']              
                                                                                                  
 tf.nn.gelu_23 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_49[0][0]']             
                                                                                                  
 dense_42 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_23[0][0]']          
                                                                                                  
 switch_reverse_4 (SwitchRevers  (None, 16352, 7611)  0          ['dense_42[0][0]',               
 e)                                                               'stochastic_reverse_complement_1
                                                                 [0][1]']                         
                                                                                                  
==================================================================================================
Total params: 185,917,723
Trainable params: 185,892,699
Non-trainable params: 25,024
__________________________________________________________________________________________________
None
model_strides [32, 32]
target_lengths [16352, 16352]
target_crops [16, 16]
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
Model: "model_11"
__________________________________________________________________________________________________
 Layer (type)                   Output Shape         Param #     Connected to                     
==================================================================================================
 sequence (InputLayer)          [(None, 524288, 4)]  0           []                               
                                                                                                  
 stochastic_reverse_complement_  ((None, 524288, 4),  0          ['sequence[0][0]']               
 2 (StochasticReverseComplement   ())                                                             
 )                                                                                                
                                                                                                  
 stochastic_shift_2 (Stochastic  (None, 524288, 4)   0           ['stochastic_reverse_complement_2
 Shift)                                                          [0][0]']                         
                                                                                                  
 conv1d_16 (Conv1D)             (None, 524288, 512)  31232       ['stochastic_shift_2[0][0]']     
                                                                                                  
 max_pooling1d_14 (MaxPooling1D  (None, 262144, 512)  0          ['conv1d_16[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_22 (S  (None, 262144, 512)  2048       ['max_pooling1d_14[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_24 (TFOpLambda)     (None, 262144, 512)  0           ['sync_batch_normalization_22[0][
                                                                 0]']                             
                                                                                                  
 conv1d_17 (Conv1D)             (None, 262144, 608)  1557088     ['tf.nn.gelu_24[0][0]']          
                                                                                                  
 max_pooling1d_15 (MaxPooling1D  (None, 131072, 608)  0          ['conv1d_17[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_23 (S  (None, 131072, 608)  2432       ['max_pooling1d_15[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_25 (TFOpLambda)     (None, 131072, 608)  0           ['sync_batch_normalization_23[0][
                                                                 0]']                             
                                                                                                  
 conv1d_18 (Conv1D)             (None, 131072, 736)  2238176     ['tf.nn.gelu_25[0][0]']          
                                                                                                  
 max_pooling1d_16 (MaxPooling1D  (None, 65536, 736)  0           ['conv1d_18[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_24 (S  (None, 65536, 736)  2944        ['max_pooling1d_16[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_26 (TFOpLambda)     (None, 65536, 736)   0           ['sync_batch_normalization_24[0][
                                                                 0]']                             
                                                                                                  
 conv1d_19 (Conv1D)             (None, 65536, 896)   3298176     ['tf.nn.gelu_26[0][0]']          
                                                                                                  
 max_pooling1d_17 (MaxPooling1D  (None, 32768, 896)  0           ['conv1d_19[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_25 (S  (None, 32768, 896)  3584        ['max_pooling1d_17[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_27 (TFOpLambda)     (None, 32768, 896)   0           ['sync_batch_normalization_25[0][
                                                                 0]']                             
                                                                                                  
 conv1d_20 (Conv1D)             (None, 32768, 1056)  4731936     ['tf.nn.gelu_27[0][0]']          
                                                                                                  
 max_pooling1d_18 (MaxPooling1D  (None, 16384, 1056)  0          ['conv1d_20[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_26 (S  (None, 16384, 1056)  4224       ['max_pooling1d_18[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_28 (TFOpLambda)     (None, 16384, 1056)  0           ['sync_batch_normalization_26[0][
                                                                 0]']                             
                                                                                                  
 conv1d_21 (Conv1D)             (None, 16384, 1280)  6759680     ['tf.nn.gelu_28[0][0]']          
                                                                                                  
 max_pooling1d_19 (MaxPooling1D  (None, 8192, 1280)  0           ['conv1d_21[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_27 (S  (None, 8192, 1280)  5120        ['max_pooling1d_19[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_29 (TFOpLambda)     (None, 8192, 1280)   0           ['sync_batch_normalization_27[0][
                                                                 0]']                             
                                                                                                  
 conv1d_22 (Conv1D)             (None, 8192, 1536)   9831936     ['tf.nn.gelu_29[0][0]']          
                                                                                                  
 max_pooling1d_20 (MaxPooling1D  (None, 4096, 1536)  0           ['conv1d_22[0][0]']              
 )                                                                                                
                                                                                                  
 layer_normalization_32 (LayerN  (None, 4096, 1536)  3072        ['max_pooling1d_20[0][0]']       
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_16 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_32[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_50 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_16[0][0]'] 
                                                                                                  
 add_36 (Add)                   (None, 4096, 1536)   0           ['max_pooling1d_20[0][0]',       
                                                                  'dropout_50[0][0]']             
                                                                                                  
 layer_normalization_33 (LayerN  (None, 4096, 1536)  3072        ['add_36[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_44 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_33[0][0]'] 
                                                                                                  
 dropout_51 (Dropout)           (None, 4096, 3072)   0           ['dense_44[0][0]']               
                                                                                                  
 re_lu_16 (ReLU)                (None, 4096, 3072)   0           ['dropout_51[0][0]']             
                                                                                                  
 dense_45 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_16[0][0]']               
                                                                                                  
 dropout_52 (Dropout)           (None, 4096, 1536)   0           ['dense_45[0][0]']               
                                                                                                  
 add_37 (Add)                   (None, 4096, 1536)   0           ['add_36[0][0]',                 
                                                                  'dropout_52[0][0]']             
                                                                                                  
 layer_normalization_34 (LayerN  (None, 4096, 1536)  3072        ['add_37[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_17 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_34[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_53 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_17[0][0]'] 
                                                                                                  
 add_38 (Add)                   (None, 4096, 1536)   0           ['add_37[0][0]',                 
                                                                  'dropout_53[0][0]']             
                                                                                                  
 layer_normalization_35 (LayerN  (None, 4096, 1536)  3072        ['add_38[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_46 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_35[0][0]'] 
                                                                                                  
 dropout_54 (Dropout)           (None, 4096, 3072)   0           ['dense_46[0][0]']               
                                                                                                  
 re_lu_17 (ReLU)                (None, 4096, 3072)   0           ['dropout_54[0][0]']             
                                                                                                  
 dense_47 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_17[0][0]']               
                                                                                                  
 dropout_55 (Dropout)           (None, 4096, 1536)   0           ['dense_47[0][0]']               
                                                                                                  
 add_39 (Add)                   (None, 4096, 1536)   0           ['add_38[0][0]',                 
                                                                  'dropout_55[0][0]']             
                                                                                                  
 layer_normalization_36 (LayerN  (None, 4096, 1536)  3072        ['add_39[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_18 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_36[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_56 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_18[0][0]'] 
                                                                                                  
 add_40 (Add)                   (None, 4096, 1536)   0           ['add_39[0][0]',                 
                                                                  'dropout_56[0][0]']             
                                                                                                  
 layer_normalization_37 (LayerN  (None, 4096, 1536)  3072        ['add_40[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_48 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_37[0][0]'] 
                                                                                                  
 dropout_57 (Dropout)           (None, 4096, 3072)   0           ['dense_48[0][0]']               
                                                                                                  
 re_lu_18 (ReLU)                (None, 4096, 3072)   0           ['dropout_57[0][0]']             
                                                                                                  
 dense_49 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_18[0][0]']               
                                                                                                  
 dropout_58 (Dropout)           (None, 4096, 1536)   0           ['dense_49[0][0]']               
                                                                                                  
 add_41 (Add)                   (None, 4096, 1536)   0           ['add_40[0][0]',                 
                                                                  'dropout_58[0][0]']             
                                                                                                  
 layer_normalization_38 (LayerN  (None, 4096, 1536)  3072        ['add_41[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_19 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_38[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_59 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_19[0][0]'] 
                                                                                                  
 add_42 (Add)                   (None, 4096, 1536)   0           ['add_41[0][0]',                 
                                                                  'dropout_59[0][0]']             
                                                                                                  
 layer_normalization_39 (LayerN  (None, 4096, 1536)  3072        ['add_42[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_50 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_39[0][0]'] 
                                                                                                  
 dropout_60 (Dropout)           (None, 4096, 3072)   0           ['dense_50[0][0]']               
                                                                                                  
 re_lu_19 (ReLU)                (None, 4096, 3072)   0           ['dropout_60[0][0]']             
                                                                                                  
 dense_51 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_19[0][0]']               
                                                                                                  
 dropout_61 (Dropout)           (None, 4096, 1536)   0           ['dense_51[0][0]']               
                                                                                                  
 add_43 (Add)                   (None, 4096, 1536)   0           ['add_42[0][0]',                 
                                                                  'dropout_61[0][0]']             
                                                                                                  
 layer_normalization_40 (LayerN  (None, 4096, 1536)  3072        ['add_43[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_20 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_40[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_62 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_20[0][0]'] 
                                                                                                  
 add_44 (Add)                   (None, 4096, 1536)   0           ['add_43[0][0]',                 
                                                                  'dropout_62[0][0]']             
                                                                                                  
 layer_normalization_41 (LayerN  (None, 4096, 1536)  3072        ['add_44[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_52 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_41[0][0]'] 
                                                                                                  
 dropout_63 (Dropout)           (None, 4096, 3072)   0           ['dense_52[0][0]']               
                                                                                                  
 re_lu_20 (ReLU)                (None, 4096, 3072)   0           ['dropout_63[0][0]']             
                                                                                                  
 dense_53 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_20[0][0]']               
                                                                                                  
 dropout_64 (Dropout)           (None, 4096, 1536)   0           ['dense_53[0][0]']               
                                                                                                  
 add_45 (Add)                   (None, 4096, 1536)   0           ['add_44[0][0]',                 
                                                                  'dropout_64[0][0]']             
                                                                                                  
 layer_normalization_42 (LayerN  (None, 4096, 1536)  3072        ['add_45[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_21 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_42[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_65 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_21[0][0]'] 
                                                                                                  
 add_46 (Add)                   (None, 4096, 1536)   0           ['add_45[0][0]',                 
                                                                  'dropout_65[0][0]']             
                                                                                                  
 layer_normalization_43 (LayerN  (None, 4096, 1536)  3072        ['add_46[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_54 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_43[0][0]'] 
                                                                                                  
 dropout_66 (Dropout)           (None, 4096, 3072)   0           ['dense_54[0][0]']               
                                                                                                  
 re_lu_21 (ReLU)                (None, 4096, 3072)   0           ['dropout_66[0][0]']             
                                                                                                  
 dense_55 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_21[0][0]']               
                                                                                                  
 dropout_67 (Dropout)           (None, 4096, 1536)   0           ['dense_55[0][0]']               
                                                                                                  
 add_47 (Add)                   (None, 4096, 1536)   0           ['add_46[0][0]',                 
                                                                  'dropout_67[0][0]']             
                                                                                                  
 layer_normalization_44 (LayerN  (None, 4096, 1536)  3072        ['add_47[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_22 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_44[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_68 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_22[0][0]'] 
                                                                                                  
 add_48 (Add)                   (None, 4096, 1536)   0           ['add_47[0][0]',                 
                                                                  'dropout_68[0][0]']             
                                                                                                  
 layer_normalization_45 (LayerN  (None, 4096, 1536)  3072        ['add_48[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_56 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_45[0][0]'] 
                                                                                                  
 dropout_69 (Dropout)           (None, 4096, 3072)   0           ['dense_56[0][0]']               
                                                                                                  
 re_lu_22 (ReLU)                (None, 4096, 3072)   0           ['dropout_69[0][0]']             
                                                                                                  
 dense_57 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_22[0][0]']               
                                                                                                  
 dropout_70 (Dropout)           (None, 4096, 1536)   0           ['dense_57[0][0]']               
                                                                                                  
 add_49 (Add)                   (None, 4096, 1536)   0           ['add_48[0][0]',                 
                                                                  'dropout_70[0][0]']             
                                                                                                  
 layer_normalization_46 (LayerN  (None, 4096, 1536)  3072        ['add_49[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_23 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_46[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_71 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_23[0][0]'] 
                                                                                                  
 add_50 (Add)                   (None, 4096, 1536)   0           ['add_49[0][0]',                 
                                                                  'dropout_71[0][0]']             
                                                                                                  
 layer_normalization_47 (LayerN  (None, 4096, 1536)  3072        ['add_50[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_58 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_47[0][0]'] 
                                                                                                  
 dropout_72 (Dropout)           (None, 4096, 3072)   0           ['dense_58[0][0]']               
                                                                                                  
 re_lu_23 (ReLU)                (None, 4096, 3072)   0           ['dropout_72[0][0]']             
                                                                                                  
 dense_59 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_23[0][0]']               
                                                                                                  
 dropout_73 (Dropout)           (None, 4096, 1536)   0           ['dense_59[0][0]']               
                                                                                                  
 add_51 (Add)                   (None, 4096, 1536)   0           ['add_50[0][0]',                 
                                                                  'dropout_73[0][0]']             
                                                                                                  
 sync_batch_normalization_28 (S  (None, 4096, 1536)  6144        ['add_51[0][0]']                 
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_30 (TFOpLambda)     (None, 4096, 1536)   0           ['sync_batch_normalization_28[0][
                                                                 0]']                             
                                                                                                  
 sync_batch_normalization_29 (S  (None, 8192, 1536)  6144        ['conv1d_22[0][0]']              
 yncBatchNormalization)                                                                           
                                                                                                  
 dense_60 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_30[0][0]']          
                                                                                                  
 tf.nn.gelu_31 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_29[0][
                                                                 0]']                             
                                                                                                  
 up_sampling1d_4 (UpSampling1D)  (None, 8192, 1536)  0           ['dense_60[0][0]']               
                                                                                                  
 dense_61 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_31[0][0]']          
                                                                                                  
 add_52 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d_4[0][0]',        
                                                                  'dense_61[0][0]']               
                                                                                                  
 separable_conv1d_4 (SeparableC  (None, 8192, 1536)  2365440     ['add_52[0][0]']                 
 onv1D)                                                                                           
                                                                                                  
 sync_batch_normalization_30 (S  (None, 8192, 1536)  6144        ['separable_conv1d_4[0][0]']     
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_32 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_30[0][
                                                                 0]']                             
                                                                                                  
 sync_batch_normalization_31 (S  (None, 16384, 1280)  5120       ['conv1d_21[0][0]']              
 yncBatchNormalization)                                                                           
                                                                                                  
 dense_62 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_32[0][0]']          
                                                                                                  
 tf.nn.gelu_33 (TFOpLambda)     (None, 16384, 1280)  0           ['sync_batch_normalization_31[0][
                                                                 0]']                             
                                                                                                  
 up_sampling1d_5 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_62[0][0]']               
                                                                                                  
 dense_63 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_33[0][0]']          
                                                                                                  
 add_53 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_5[0][0]',        
                                                                  'dense_63[0][0]']               
                                                                                                  
 separable_conv1d_5 (SeparableC  (None, 16384, 1536)  2365440    ['add_53[0][0]']                 
 onv1D)                                                                                           
                                                                                                  
 cropping1d_2 (Cropping1D)      (None, 16352, 1536)  0           ['separable_conv1d_5[0][0]']     
                                                                                                  
 sync_batch_normalization_32 (S  (None, 16352, 1536)  6144       ['cropping1d_2[0][0]']           
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_34 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_32[0][
                                                                 0]']                             
                                                                                                  
 conv1d_23 (Conv1D)             (None, 16352, 1920)  2951040     ['tf.nn.gelu_34[0][0]']          
                                                                                                  
 dropout_74 (Dropout)           (None, 16352, 1920)  0           ['conv1d_23[0][0]']              
                                                                                                  
 tf.nn.gelu_35 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_74[0][0]']             
                                                                                                  
 dense_64 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_35[0][0]']          
                                                                                                  
 switch_reverse_8 (SwitchRevers  (None, 16352, 7611)  0          ['dense_64[0][0]',               
 e)                                                               'stochastic_reverse_complement_2
                                                                 [0][1]']                         
                                                                                                  
==================================================================================================
Total params: 185,917,723
Trainable params: 185,892,699
Non-trainable params: 25,024
__________________________________________________________________________________________________
None
model_strides [32, 32]
target_lengths [16352, 16352]
target_crops [16, 16]
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
WARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.
Model: "model_16"
__________________________________________________________________________________________________
 Layer (type)                   Output Shape         Param #     Connected to                     
==================================================================================================
 sequence (InputLayer)          [(None, 524288, 4)]  0           []                               
                                                                                                  
 stochastic_reverse_complement_  ((None, 524288, 4),  0          ['sequence[0][0]']               
 3 (StochasticReverseComplement   ())                                                             
 )                                                                                                
                                                                                                  
 stochastic_shift_3 (Stochastic  (None, 524288, 4)   0           ['stochastic_reverse_complement_3
 Shift)                                                          [0][0]']                         
                                                                                                  
 conv1d_24 (Conv1D)             (None, 524288, 512)  31232       ['stochastic_shift_3[0][0]']     
                                                                                                  
 max_pooling1d_21 (MaxPooling1D  (None, 262144, 512)  0          ['conv1d_24[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_33 (S  (None, 262144, 512)  2048       ['max_pooling1d_21[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_36 (TFOpLambda)     (None, 262144, 512)  0           ['sync_batch_normalization_33[0][
                                                                 0]']                             
                                                                                                  
 conv1d_25 (Conv1D)             (None, 262144, 608)  1557088     ['tf.nn.gelu_36[0][0]']          
                                                                                                  
 max_pooling1d_22 (MaxPooling1D  (None, 131072, 608)  0          ['conv1d_25[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_34 (S  (None, 131072, 608)  2432       ['max_pooling1d_22[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_37 (TFOpLambda)     (None, 131072, 608)  0           ['sync_batch_normalization_34[0][
                                                                 0]']                             
                                                                                                  
 conv1d_26 (Conv1D)             (None, 131072, 736)  2238176     ['tf.nn.gelu_37[0][0]']          
                                                                                                  
 max_pooling1d_23 (MaxPooling1D  (None, 65536, 736)  0           ['conv1d_26[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_35 (S  (None, 65536, 736)  2944        ['max_pooling1d_23[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_38 (TFOpLambda)     (None, 65536, 736)   0           ['sync_batch_normalization_35[0][
                                                                 0]']                             
                                                                                                  
 conv1d_27 (Conv1D)             (None, 65536, 896)   3298176     ['tf.nn.gelu_38[0][0]']          
                                                                                                  
 max_pooling1d_24 (MaxPooling1D  (None, 32768, 896)  0           ['conv1d_27[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_36 (S  (None, 32768, 896)  3584        ['max_pooling1d_24[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_39 (TFOpLambda)     (None, 32768, 896)   0           ['sync_batch_normalization_36[0][
                                                                 0]']                             
                                                                                                  
 conv1d_28 (Conv1D)             (None, 32768, 1056)  4731936     ['tf.nn.gelu_39[0][0]']          
                                                                                                  
 max_pooling1d_25 (MaxPooling1D  (None, 16384, 1056)  0          ['conv1d_28[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_37 (S  (None, 16384, 1056)  4224       ['max_pooling1d_25[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_40 (TFOpLambda)     (None, 16384, 1056)  0           ['sync_batch_normalization_37[0][
                                                                 0]']                             
                                                                                                  
 conv1d_29 (Conv1D)             (None, 16384, 1280)  6759680     ['tf.nn.gelu_40[0][0]']          
                                                                                                  
 max_pooling1d_26 (MaxPooling1D  (None, 8192, 1280)  0           ['conv1d_29[0][0]']              
 )                                                                                                
                                                                                                  
 sync_batch_normalization_38 (S  (None, 8192, 1280)  5120        ['max_pooling1d_26[0][0]']       
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_41 (TFOpLambda)     (None, 8192, 1280)   0           ['sync_batch_normalization_38[0][
                                                                 0]']                             
                                                                                                  
 conv1d_30 (Conv1D)             (None, 8192, 1536)   9831936     ['tf.nn.gelu_41[0][0]']          
                                                                                                  
 max_pooling1d_27 (MaxPooling1D  (None, 4096, 1536)  0           ['conv1d_30[0][0]']              
 )                                                                                                
                                                                                                  
 layer_normalization_48 (LayerN  (None, 4096, 1536)  3072        ['max_pooling1d_27[0][0]']       
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_24 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_48[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_75 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_24[0][0]'] 
                                                                                                  
 add_54 (Add)                   (None, 4096, 1536)   0           ['max_pooling1d_27[0][0]',       
                                                                  'dropout_75[0][0]']             
                                                                                                  
 layer_normalization_49 (LayerN  (None, 4096, 1536)  3072        ['add_54[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_66 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_49[0][0]'] 
                                                                                                  
 dropout_76 (Dropout)           (None, 4096, 3072)   0           ['dense_66[0][0]']               
                                                                                                  
 re_lu_24 (ReLU)                (None, 4096, 3072)   0           ['dropout_76[0][0]']             
                                                                                                  
 dense_67 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_24[0][0]']               
                                                                                                  
 dropout_77 (Dropout)           (None, 4096, 1536)   0           ['dense_67[0][0]']               
                                                                                                  
 add_55 (Add)                   (None, 4096, 1536)   0           ['add_54[0][0]',                 
                                                                  'dropout_77[0][0]']             
                                                                                                  
 layer_normalization_50 (LayerN  (None, 4096, 1536)  3072        ['add_55[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_25 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_50[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_78 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_25[0][0]'] 
                                                                                                  
 add_56 (Add)                   (None, 4096, 1536)   0           ['add_55[0][0]',                 
                                                                  'dropout_78[0][0]']             
                                                                                                  
 layer_normalization_51 (LayerN  (None, 4096, 1536)  3072        ['add_56[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_68 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_51[0][0]'] 
                                                                                                  
 dropout_79 (Dropout)           (None, 4096, 3072)   0           ['dense_68[0][0]']               
                                                                                                  
 re_lu_25 (ReLU)                (None, 4096, 3072)   0           ['dropout_79[0][0]']             
                                                                                                  
 dense_69 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_25[0][0]']               
                                                                                                  
 dropout_80 (Dropout)           (None, 4096, 1536)   0           ['dense_69[0][0]']               
                                                                                                  
 add_57 (Add)                   (None, 4096, 1536)   0           ['add_56[0][0]',                 
                                                                  'dropout_80[0][0]']             
                                                                                                  
 layer_normalization_52 (LayerN  (None, 4096, 1536)  3072        ['add_57[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_26 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_52[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_81 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_26[0][0]'] 
                                                                                                  
 add_58 (Add)                   (None, 4096, 1536)   0           ['add_57[0][0]',                 
                                                                  'dropout_81[0][0]']             
                                                                                                  
 layer_normalization_53 (LayerN  (None, 4096, 1536)  3072        ['add_58[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_70 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_53[0][0]'] 
                                                                                                  
 dropout_82 (Dropout)           (None, 4096, 3072)   0           ['dense_70[0][0]']               
                                                                                                  
 re_lu_26 (ReLU)                (None, 4096, 3072)   0           ['dropout_82[0][0]']             
                                                                                                  
 dense_71 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_26[0][0]']               
                                                                                                  
 dropout_83 (Dropout)           (None, 4096, 1536)   0           ['dense_71[0][0]']               
                                                                                                  
 add_59 (Add)                   (None, 4096, 1536)   0           ['add_58[0][0]',                 
                                                                  'dropout_83[0][0]']             
                                                                                                  
 layer_normalization_54 (LayerN  (None, 4096, 1536)  3072        ['add_59[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_27 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_54[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_84 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_27[0][0]'] 
                                                                                                  
 add_60 (Add)                   (None, 4096, 1536)   0           ['add_59[0][0]',                 
                                                                  'dropout_84[0][0]']             
                                                                                                  
 layer_normalization_55 (LayerN  (None, 4096, 1536)  3072        ['add_60[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_72 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_55[0][0]'] 
                                                                                                  
 dropout_85 (Dropout)           (None, 4096, 3072)   0           ['dense_72[0][0]']               
                                                                                                  
 re_lu_27 (ReLU)                (None, 4096, 3072)   0           ['dropout_85[0][0]']             
                                                                                                  
 dense_73 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_27[0][0]']               
                                                                                                  
 dropout_86 (Dropout)           (None, 4096, 1536)   0           ['dense_73[0][0]']               
                                                                                                  
 add_61 (Add)                   (None, 4096, 1536)   0           ['add_60[0][0]',                 
                                                                  'dropout_86[0][0]']             
                                                                                                  
 layer_normalization_56 (LayerN  (None, 4096, 1536)  3072        ['add_61[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_28 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_56[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_87 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_28[0][0]'] 
                                                                                                  
 add_62 (Add)                   (None, 4096, 1536)   0           ['add_61[0][0]',                 
                                                                  'dropout_87[0][0]']             
                                                                                                  
 layer_normalization_57 (LayerN  (None, 4096, 1536)  3072        ['add_62[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_74 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_57[0][0]'] 
                                                                                                  
 dropout_88 (Dropout)           (None, 4096, 3072)   0           ['dense_74[0][0]']               
                                                                                                  
 re_lu_28 (ReLU)                (None, 4096, 3072)   0           ['dropout_88[0][0]']             
                                                                                                  
 dense_75 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_28[0][0]']               
                                                                                                  
 dropout_89 (Dropout)           (None, 4096, 1536)   0           ['dense_75[0][0]']               
                                                                                                  
 add_63 (Add)                   (None, 4096, 1536)   0           ['add_62[0][0]',                 
                                                                  'dropout_89[0][0]']             
                                                                                                  
 layer_normalization_58 (LayerN  (None, 4096, 1536)  3072        ['add_63[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_29 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_58[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_90 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_29[0][0]'] 
                                                                                                  
 add_64 (Add)                   (None, 4096, 1536)   0           ['add_63[0][0]',                 
                                                                  'dropout_90[0][0]']             
                                                                                                  
 layer_normalization_59 (LayerN  (None, 4096, 1536)  3072        ['add_64[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_76 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_59[0][0]'] 
                                                                                                  
 dropout_91 (Dropout)           (None, 4096, 3072)   0           ['dense_76[0][0]']               
                                                                                                  
 re_lu_29 (ReLU)                (None, 4096, 3072)   0           ['dropout_91[0][0]']             
                                                                                                  
 dense_77 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_29[0][0]']               
                                                                                                  
 dropout_92 (Dropout)           (None, 4096, 1536)   0           ['dense_77[0][0]']               
                                                                                                  
 add_65 (Add)                   (None, 4096, 1536)   0           ['add_64[0][0]',                 
                                                                  'dropout_92[0][0]']             
                                                                                                  
 layer_normalization_60 (LayerN  (None, 4096, 1536)  3072        ['add_65[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_30 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_60[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_93 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_30[0][0]'] 
                                                                                                  
 add_66 (Add)                   (None, 4096, 1536)   0           ['add_65[0][0]',                 
                                                                  'dropout_93[0][0]']             
                                                                                                  
 layer_normalization_61 (LayerN  (None, 4096, 1536)  3072        ['add_66[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_78 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_61[0][0]'] 
                                                                                                  
 dropout_94 (Dropout)           (None, 4096, 3072)   0           ['dense_78[0][0]']               
                                                                                                  
 re_lu_30 (ReLU)                (None, 4096, 3072)   0           ['dropout_94[0][0]']             
                                                                                                  
 dense_79 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_30[0][0]']               
                                                                                                  
 dropout_95 (Dropout)           (None, 4096, 1536)   0           ['dense_79[0][0]']               
                                                                                                  
 add_67 (Add)                   (None, 4096, 1536)   0           ['add_66[0][0]',                 
                                                                  'dropout_95[0][0]']             
                                                                                                  
 layer_normalization_62 (LayerN  (None, 4096, 1536)  3072        ['add_67[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 multihead_attention_31 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_62[0][0]'] 
 eadAttention)                                                                                    
                                                                                                  
 dropout_96 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_31[0][0]'] 
                                                                                                  
 add_68 (Add)                   (None, 4096, 1536)   0           ['add_67[0][0]',                 
                                                                  'dropout_96[0][0]']             
                                                                                                  
 layer_normalization_63 (LayerN  (None, 4096, 1536)  3072        ['add_68[0][0]']                 
 ormalization)                                                                                    
                                                                                                  
 dense_80 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_63[0][0]'] 
                                                                                                  
 dropout_97 (Dropout)           (None, 4096, 3072)   0           ['dense_80[0][0]']               
                                                                                                  
 re_lu_31 (ReLU)                (None, 4096, 3072)   0           ['dropout_97[0][0]']             
                                                                                                  
 dense_81 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_31[0][0]']               
                                                                                                  
 dropout_98 (Dropout)           (None, 4096, 1536)   0           ['dense_81[0][0]']               
                                                                                                  
 add_69 (Add)                   (None, 4096, 1536)   0           ['add_68[0][0]',                 
                                                                  'dropout_98[0][0]']             
                                                                                                  
 sync_batch_normalization_39 (S  (None, 4096, 1536)  6144        ['add_69[0][0]']                 
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_42 (TFOpLambda)     (None, 4096, 1536)   0           ['sync_batch_normalization_39[0][
                                                                 0]']                             
                                                                                                  
 sync_batch_normalization_40 (S  (None, 8192, 1536)  6144        ['conv1d_30[0][0]']              
 yncBatchNormalization)                                                                           
                                                                                                  
 dense_82 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_42[0][0]']          
                                                                                                  
 tf.nn.gelu_43 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_40[0][
                                                                 0]']                             
                                                                                                  
 up_sampling1d_6 (UpSampling1D)  (None, 8192, 1536)  0           ['dense_82[0][0]']               
                                                                                                  
 dense_83 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_43[0][0]']          
                                                                                                  
 add_70 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d_6[0][0]',        
                                                                  'dense_83[0][0]']               
                                                                                                  
 separable_conv1d_6 (SeparableC  (None, 8192, 1536)  2365440     ['add_70[0][0]']                 
 onv1D)                                                                                           
                                                                                                  
 sync_batch_normalization_41 (S  (None, 8192, 1536)  6144        ['separable_conv1d_6[0][0]']     
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_44 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_41[0][
                                                                 0]']                             
                                                                                                  
 sync_batch_normalization_42 (S  (None, 16384, 1280)  5120       ['conv1d_29[0][0]']              
 yncBatchNormalization)                                                                           
                                                                                                  
 dense_84 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_44[0][0]']          
                                                                                                  
 tf.nn.gelu_45 (TFOpLambda)     (None, 16384, 1280)  0           ['sync_batch_normalization_42[0][
                                                                 0]']                             
                                                                                                  
 up_sampling1d_7 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_84[0][0]']               
                                                                                                  
 dense_85 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_45[0][0]']          
                                                                                                  
 add_71 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_7[0][0]',        
                                                                  'dense_85[0][0]']               
                                                                                                  
 separable_conv1d_7 (SeparableC  (None, 16384, 1536)  2365440    ['add_71[0][0]']                 
 onv1D)                                                                                           
                                                                                                  
 cropping1d_3 (Cropping1D)      (None, 16352, 1536)  0           ['separable_conv1d_7[0][0]']     
                                                                                                  
 sync_batch_normalization_43 (S  (None, 16352, 1536)  6144       ['cropping1d_3[0][0]']           
 yncBatchNormalization)                                                                           
                                                                                                  
 tf.nn.gelu_46 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_43[0][
                                                                 0]']                             
                                                                                                  
 conv1d_31 (Conv1D)             (None, 16352, 1920)  2951040     ['tf.nn.gelu_46[0][0]']          
                                                                                                  
 dropout_99 (Dropout)           (None, 16352, 1920)  0           ['conv1d_31[0][0]']              
                                                                                                  
 tf.nn.gelu_47 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_99[0][0]']             
                                                                                                  
 dense_86 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_47[0][0]']          
                                                                                                  
 switch_reverse_12 (SwitchRever  (None, 16352, 7611)  0          ['dense_86[0][0]',               
 se)                                                              'stochastic_reverse_complement_3
                                                                 [0][1]']                         
                                                                                                  
==================================================================================================
Total params: 185,917,723
Trainable params: 185,892,699
Non-trainable params: 25,024
__________________________________________________________________________________________________
None
model_strides [32, 32]
target_lengths [16352, 16352]
target_crops [16, 16]</code></pre>
</div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="3">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Initialize fasta sequence extractor</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">fasta_open <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pysam.Fastafile(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hg38.fa'</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Load splice site annotation</span></span>
<span id="cb8-6"></span>
<span id="cb8-7">splice_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gencode41_basic_protein_splice.csv.gz'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, compression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gzip'</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"len(splice_df) = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(splice_df)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>len(splice_df) = 404837</code></pre>
</div>
</div>
</section>
<section id="predict-exon-coverage" class="level2">
<h2 class="anchored" data-anchor-id="predict-exon-coverage">Predict Exon Coverage</h2>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Load GTF (optional; needed to compute exon coverage attributions for example gene)</span></span>
<span id="cb10-2"></span>
<span id="cb10-3">transcriptome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bgene.Transcriptome(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gencode41_basic_nort.gtf'</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5">search_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000187164'</span></span>
<span id="cb10-6"></span>
<span id="cb10-7">center_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">116952944</span></span>
<span id="cb10-8"></span>
<span id="cb10-9">chrom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr10'</span></span>
<span id="cb10-10">poses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">116952944</span>]</span>
<span id="cb10-11">alts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>]</span>
<span id="cb10-12"></span>
<span id="cb10-13">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-14">end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Get exon bin range</span></span>
<span id="cb10-17">gene_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [gene_key <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene_key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> transcriptome.genes.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> search_gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_key]</span>
<span id="cb10-18"></span>
<span id="cb10-19">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transcriptome.genes[gene_keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb10-20"></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Determine output sequence start</span></span>
<span id="cb10-22">seq_out_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seqnn_model.model_strides[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>seqnn_model.target_crops[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-23">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seqnn_model.model_strides[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>seqnn_model.target_lengths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-24"></span>
<span id="cb10-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Determine output positions of gene exons</span></span>
<span id="cb10-26">gene_slice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene.output_slice(seq_out_start, seq_out_len, seqnn_model.model_strides[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Print index of GTEx blood and muscle tracks in targets file</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">targets_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'local_index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(targets_df))</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blood tracks = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(targets_df.loc[targets_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RNA:blood'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'local_index'</span>].tolist()))</span>
<span id="cb11-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"muscle tracks = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(targets_df.loc[targets_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RNA:muscle'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'local_index'</span>].tolist()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>blood tracks = [9, 10, 11]
muscle tracks = [47, 48, 49]</code></pre>
</div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="6">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Predict for chr10_116952944_T_C</span></span>
<span id="cb13-2"></span>
<span id="cb13-3">save_figs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb13-4">save_suffix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_chr10_116952944_T_C'</span></span>
<span id="cb13-5"></span>
<span id="cb13-6">sequence_one_hot_wt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_sequence(fasta_open, chrom, start, end)</span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Induce mutation(s)</span></span>
<span id="cb13-9">sequence_one_hot_mut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.copy(sequence_one_hot_wt)</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pos, alt <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(poses, alts) :</span>
<span id="cb13-12">    alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span> :</span>
<span id="cb13-14">        alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span> :</span>
<span id="cb13-16">        alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'G'</span> :</span>
<span id="cb13-18">        alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb13-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T'</span> :</span>
<span id="cb13-20">        alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb13-21"></span>
<span id="cb13-22">    sequence_one_hot_mut[pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb13-23">    sequence_one_hot_mut[pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, alt_ix] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span></span>
<span id="cb13-24"></span>
<span id="cb13-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Make predictions</span></span>
<span id="cb13-26">y_wt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_tracks(models, sequence_one_hot_wt)</span>
<span id="cb13-27">y_mut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_tracks(models, sequence_one_hot_mut)</span>
<span id="cb13-28"></span>
<span id="cb13-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Visualize quantized tracks over SNP</span></span>
<span id="cb13-30"></span>
<span id="cb13-31">plot_window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">131072</span></span>
<span id="cb13-32">bin_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb13-33">pad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb13-34"></span>
<span id="cb13-35">rescale_tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb13-36">normalize_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb13-37"></span>
<span id="cb13-38">anno_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#splice_df</span></span>
<span id="cb13-39"></span>
<span id="cb13-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tracks</span></span>
<span id="cb13-41">track_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb13-42">    np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>).tolist(),</span>
<span id="cb13-43">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>],</span>
<span id="cb13-44">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>],</span>
<span id="cb13-45">]</span>
<span id="cb13-46"></span>
<span id="cb13-47">track_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb13-48">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GTEx Coverage (All tissues)'</span>,</span>
<span id="cb13-49">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GTEx Coverage (Blood)'</span>,</span>
<span id="cb13-50">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GTEx Coverage (Muscle)'</span>,</span>
<span id="cb13-51">]</span>
<span id="cb13-52"></span>
<span id="cb13-53">track_scales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb13-54">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,</span>
<span id="cb13-55">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,</span>
<span id="cb13-56">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,</span>
<span id="cb13-57">]</span>
<span id="cb13-58"></span>
<span id="cb13-59">track_transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb13-60">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>,</span>
<span id="cb13-61">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>,</span>
<span id="cb13-62">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>,</span>
<span id="cb13-63">]</span>
<span id="cb13-64"></span>
<span id="cb13-65">soft_clips <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb13-66">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">384.</span>,</span>
<span id="cb13-67">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">384.</span>,</span>
<span id="cb13-68">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">384.</span>,</span>
<span id="cb13-69">]</span>
<span id="cb13-70"></span>
<span id="cb13-71"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-- Counts --"</span>)</span>
<span id="cb13-72">plot_coverage_track_pair_bins(y_wt, y_mut, chrom, start, center_pos, poses, track_indices, track_names, track_scales, track_transforms, soft_clips, plot_window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plot_window, normalize_window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>plot_window, bin_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bin_size, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pad, rescale_tracks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rescale_tracks, normalize_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>normalize_counts, save_figs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>save_figs, save_suffix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>save_suffix, gene_slice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_slice, anno_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>anno_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-- Counts --
 - sum_wt = 127138.67
 - sum_mut = 126502.67
 - max_y_wt = 809.7634
 - max_y_mut = 810.978
 -- (max_y = 810.978)
 - sum_wt = 43400.95
 - sum_mut = 53960.754
 - max_y_wt = 339.3114
 - max_y_mut = 423.4269
 -- (max_y = 423.4269)
 - sum_wt = 32183.52
 - sum_mut = 33052.13
 - max_y_wt = 296.1789
 - max_y_mut = 302.3407
 -- (max_y = 302.3407)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C_files/figure-html/cell-8-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C_files/figure-html/cell-8-output-4.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Output Shape:"</span>,y_wt.shape)</span>
<span id="cb15-2">y_wt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Output Shape: (1, 4, 16352, 89)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>array([[[[0.02048 , 0.0909  , 0.0631  , ..., 0.03622 , 0.04785 ,
          0.06726 ],
         [0.0208  , 0.0899  , 0.0629  , ..., 0.0378  , 0.04984 ,
          0.06885 ],
         [0.01758 , 0.0778  , 0.05542 , ..., 0.03442 , 0.04456 ,
          0.06064 ],
         ...,
         [0.001438, 0.003803, 0.003777, ..., 0.003843, 0.005497,
          0.004044],
         [0.001427, 0.003862, 0.003742, ..., 0.0039  , 0.005524,
          0.003975],
         [0.001422, 0.004257, 0.00394 , ..., 0.00432 , 0.00611 ,
          0.00428 ]],

        [[0.01269 , 0.0331  , 0.03102 , ..., 0.0242  , 0.03412 ,
          0.02678 ],
         [0.01817 , 0.0427  , 0.0419  , ..., 0.03146 , 0.04327 ,
          0.03528 ],
         [0.02103 , 0.0485  , 0.0469  , ..., 0.03714 , 0.05066 ,
          0.04117 ],
         ...,
         [0.01158 , 0.02269 , 0.02554 , ..., 0.01988 , 0.02858 ,
          0.02545 ],
         [0.00986 , 0.02061 , 0.02254 , ..., 0.01802 , 0.02547 ,
          0.02234 ],
         [0.01179 , 0.02495 , 0.02696 , ..., 0.02235 , 0.03052 ,
          0.02576 ]],

        [[0.03784 , 0.1128  , 0.0934  , ..., 0.0429  , 0.05902 ,
          0.08    ],
         [0.0392  , 0.11163 , 0.0922  , ..., 0.0469  , 0.06168 ,
          0.07825 ],
         [0.03256 , 0.0951  , 0.0787  , ..., 0.0412  , 0.0526  ,
          0.06775 ],
         ...,
         [0.002592, 0.007465, 0.006603, ..., 0.01239 , 0.01337 ,
          0.00563 ],
         [0.002804, 0.00796 , 0.00732 , ..., 0.01216 , 0.01342 ,
          0.00619 ],
         [0.002424, 0.007256, 0.00669 , ..., 0.011765, 0.01341 ,
          0.005768]],

        [[0.02223 , 0.05032 , 0.05585 , ..., 0.03357 , 0.041   ,
          0.04703 ],
         [0.01823 , 0.04477 , 0.04922 , ..., 0.03427 , 0.03983 ,
          0.0434  ],
         [0.01272 , 0.03345 , 0.03644 , ..., 0.0258  , 0.03027 ,
          0.03366 ],
         ...,
         [0.00756 , 0.01692 , 0.02003 , ..., 0.01767 , 0.02272 ,
          0.01932 ],
         [0.0124  , 0.0257  , 0.03023 , ..., 0.02792 , 0.03488 ,
          0.03027 ],
         [0.01491 , 0.0307  , 0.03683 , ..., 0.02843 , 0.03745 ,
          0.03604 ]]]], dtype=float16)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> importlib</span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> borzoi_helpers_sm</span>
<span id="cb18-3">importlib.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reload</span>(borzoi_helpers_sm)</span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## GTEx blood tracks</span></span>
<span id="cb18-5">track_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>]</span>
<span id="cb18-6">y_wt_curr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> borzoi_helpers_sm.inverse_transform(y_wt, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">384.</span>)</span>
<span id="cb18-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sum (Expression Attribution):"</span>, borzoi_helpers_sm.expr_attr(y_wt, track_index, gene_slice))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sum (Expression Attribution): 32183.52</code></pre>
</div>
</div>
</section>
<section id="score-variants" class="level2">
<h2 class="anchored" data-anchor-id="score-variants">Score Variants</h2>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Get contribution scores (gradient) for blood GTEX tracks</span></span>
<span id="cb20-2"></span>
<span id="cb20-3">_, _, [pred_grad_wt, pred_grad_mut] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_prediction_gradient_w_rc(</span>
<span id="cb20-4">    models,</span>
<span id="cb20-5">    [sequence_one_hot_wt, sequence_one_hot_mut],</span>
<span id="cb20-6">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb20-7">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb20-8">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb20-9">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb20-10">    target_index[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>]].tolist(),</span>
<span id="cb20-11">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,</span>
<span id="cb20-12">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>,</span>
<span id="cb20-13">    clip_soft<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">384.</span>,</span>
<span id="cb20-14">    dist_bin_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_slice.tolist(),</span>
<span id="cb20-15">    use_mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb20-16">    use_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb20-17">    use_logodds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb20-18">    subtract_avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb20-19">    fold_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb20-20">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>WARNING:tensorflow:
The following Variables were used a Lambda layer's call (inp_grad), but
are not present in its tracked objects:
  &lt;tf.Variable 'conv1d/kernel:0' shape=(15, 4, 512) dtype=float32&gt;
  &lt;tf.Variable 'conv1d/bias:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization/gamma:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization/beta:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_1/kernel:0' shape=(5, 512, 608) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_1/bias:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_1/gamma:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_1/beta:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_2/kernel:0' shape=(5, 608, 736) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_2/bias:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_2/gamma:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_2/beta:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_3/kernel:0' shape=(5, 736, 896) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_3/bias:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_3/gamma:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_3/beta:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_4/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_4/bias:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_4/gamma:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_4/beta:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_5/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_5/bias:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_5/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_5/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_6/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_6/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_1/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_1/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_1/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_1/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_2/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_2/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_3/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_3/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_2/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_2/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_3/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_3/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_4/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_4/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_5/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_5/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_4/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_4/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_5/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_5/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_6/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_6/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_7/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_7/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_6/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_6/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_7/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_7/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_8/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_8/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_9/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_9/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_8/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_8/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_9/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_9/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_10/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_10/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_11/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_11/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_10/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_10/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_11/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_11/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_12/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_12/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_13/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_13/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_12/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_12/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_13/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_13/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_14/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_14/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_15/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_15/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_14/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_14/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_15/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_15/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_6/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_6/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_7/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_7/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_16/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_16/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_17/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_17/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_8/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_8/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_9/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_9/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'dense_18/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_18/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_19/kernel:0' shape=(1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_19/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_1/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_1/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_1/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_10/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_10/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_7/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_7/bias:0' shape=(1920,) dtype=float32&gt;
  &lt;tf.Variable 'dense_20/kernel:0' shape=(1920, 7611) dtype=float32&gt;
  &lt;tf.Variable 'dense_20/bias:0' shape=(7611,) dtype=float32&gt;
It is possible that this is intended behavior, but it is more likely
an omission. This is a strong indication that this layer should be
formulated as a subclassed Layer rather than a Lambda layer.
1/1 [==============================] - 145s 145s/step
1/1 [==============================] - 48s 48s/step
WARNING:tensorflow:
The following Variables were used a Lambda layer's call (inp_grad), but
are not present in its tracked objects:
  &lt;tf.Variable 'conv1d_8/kernel:0' shape=(15, 4, 512) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_8/bias:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_11/gamma:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_11/beta:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_9/kernel:0' shape=(5, 512, 608) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_9/bias:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_12/gamma:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_12/beta:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_10/kernel:0' shape=(5, 608, 736) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_10/bias:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_13/gamma:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_13/beta:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_11/kernel:0' shape=(5, 736, 896) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_11/bias:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_14/gamma:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_14/beta:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_12/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_12/bias:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_15/gamma:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_15/beta:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_13/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_13/bias:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_16/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_16/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_14/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_14/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_16/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_16/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_17/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_17/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_22/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_22/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_23/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_23/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_18/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_18/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_19/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_19/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_24/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_24/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_25/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_25/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_20/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_20/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_21/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_21/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_26/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_26/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_27/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_27/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_22/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_22/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_23/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_23/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_28/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_28/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_29/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_29/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_24/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_24/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_25/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_25/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_30/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_30/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_31/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_31/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_26/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_26/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_27/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_27/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_32/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_32/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_33/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_33/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_28/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_28/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_29/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_29/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_34/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_34/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_35/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_35/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_30/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_30/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_31/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_31/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_36/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_36/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_37/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_37/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_17/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_17/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_18/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_18/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_38/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_38/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_39/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_39/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_2/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_2/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_2/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_19/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_19/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_20/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_20/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'dense_40/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_40/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_41/kernel:0' shape=(1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_41/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_3/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_3/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_3/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_21/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_21/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_15/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_15/bias:0' shape=(1920,) dtype=float32&gt;
  &lt;tf.Variable 'dense_42/kernel:0' shape=(1920, 7611) dtype=float32&gt;
  &lt;tf.Variable 'dense_42/bias:0' shape=(7611,) dtype=float32&gt;
It is possible that this is intended behavior, but it is more likely
an omission. This is a strong indication that this layer should be
formulated as a subclassed Layer rather than a Lambda layer.
1/1 [==============================] - 144s 144s/step
1/1 [==============================] - 48s 48s/step
WARNING:tensorflow:
The following Variables were used a Lambda layer's call (inp_grad), but
are not present in its tracked objects:
  &lt;tf.Variable 'conv1d_16/kernel:0' shape=(15, 4, 512) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_16/bias:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_22/gamma:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_22/beta:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_17/kernel:0' shape=(5, 512, 608) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_17/bias:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_23/gamma:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_23/beta:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_18/kernel:0' shape=(5, 608, 736) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_18/bias:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_24/gamma:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_24/beta:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_19/kernel:0' shape=(5, 736, 896) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_19/bias:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_25/gamma:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_25/beta:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_20/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_20/bias:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_26/gamma:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_26/beta:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_21/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_21/bias:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_27/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_27/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_22/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_22/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_32/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_32/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_33/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_33/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_44/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_44/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_45/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_45/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_34/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_34/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_35/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_35/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_46/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_46/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_47/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_47/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_36/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_36/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_37/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_37/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_48/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_48/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_49/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_49/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_38/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_38/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_39/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_39/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_50/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_50/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_51/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_51/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_40/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_40/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_41/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_41/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_52/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_52/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_53/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_53/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_42/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_42/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_43/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_43/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_54/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_54/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_55/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_55/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_44/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_44/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_45/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_45/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_56/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_56/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_57/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_57/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_46/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_46/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_47/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_47/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_58/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_58/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_59/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_59/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_28/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_28/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_29/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_29/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_60/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_60/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_61/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_61/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_4/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_4/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_4/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_30/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_30/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_31/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_31/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'dense_62/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_62/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_63/kernel:0' shape=(1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_63/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_5/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_5/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_5/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_32/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_32/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_23/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_23/bias:0' shape=(1920,) dtype=float32&gt;
  &lt;tf.Variable 'dense_64/kernel:0' shape=(1920, 7611) dtype=float32&gt;
  &lt;tf.Variable 'dense_64/bias:0' shape=(7611,) dtype=float32&gt;
It is possible that this is intended behavior, but it is more likely
an omission. This is a strong indication that this layer should be
formulated as a subclassed Layer rather than a Lambda layer.
1/1 [==============================] - 145s 145s/step
1/1 [==============================] - 46s 46s/step
WARNING:tensorflow:
The following Variables were used a Lambda layer's call (inp_grad), but
are not present in its tracked objects:
  &lt;tf.Variable 'conv1d_24/kernel:0' shape=(15, 4, 512) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_24/bias:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_33/gamma:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_33/beta:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_25/kernel:0' shape=(5, 512, 608) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_25/bias:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_34/gamma:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_34/beta:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_26/kernel:0' shape=(5, 608, 736) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_26/bias:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_35/gamma:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_35/beta:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_27/kernel:0' shape=(5, 736, 896) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_27/bias:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_36/gamma:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_36/beta:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_28/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_28/bias:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_37/gamma:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_37/beta:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_29/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_29/bias:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_38/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_38/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_30/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_30/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_48/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_48/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_49/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_49/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_66/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_66/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_67/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_67/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_50/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_50/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_51/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_51/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_68/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_68/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_69/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_69/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_52/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_52/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_53/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_53/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_70/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_70/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_71/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_71/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_54/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_54/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_55/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_55/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_72/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_72/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_73/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_73/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_56/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_56/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_57/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_57/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_74/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_74/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_75/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_75/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_58/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_58/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_59/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_59/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_76/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_76/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_77/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_77/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_60/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_60/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_61/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_61/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_78/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_78/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_79/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_79/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_62/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_62/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_63/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_63/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_80/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_80/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_81/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_81/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_39/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_39/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_40/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_40/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_82/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_82/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_83/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_83/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_6/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_6/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_6/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_41/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_41/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_42/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_42/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'dense_84/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_84/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_85/kernel:0' shape=(1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_85/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_7/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_7/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_7/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_43/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_43/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_31/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_31/bias:0' shape=(1920,) dtype=float32&gt;
  &lt;tf.Variable 'dense_86/kernel:0' shape=(1920, 7611) dtype=float32&gt;
  &lt;tf.Variable 'dense_86/bias:0' shape=(7611,) dtype=float32&gt;
It is possible that this is intended behavior, but it is more likely
an omission. This is a strong indication that this layer should be
formulated as a subclassed Layer rather than a Lambda layer.
1/1 [==============================] - 144s 144s/step
1/1 [==============================] - 46s 46s/step
WARNING:tensorflow:
The following Variables were used a Lambda layer's call (inp_grad), but
are not present in its tracked objects:
  &lt;tf.Variable 'conv1d/kernel:0' shape=(15, 4, 512) dtype=float32&gt;
  &lt;tf.Variable 'conv1d/bias:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization/gamma:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization/beta:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_1/kernel:0' shape=(5, 512, 608) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_1/bias:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_1/gamma:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_1/beta:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_2/kernel:0' shape=(5, 608, 736) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_2/bias:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_2/gamma:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_2/beta:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_3/kernel:0' shape=(5, 736, 896) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_3/bias:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_3/gamma:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_3/beta:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_4/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_4/bias:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_4/gamma:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_4/beta:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_5/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_5/bias:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_5/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_5/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_6/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_6/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_1/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_1/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_1/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_1/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_2/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_2/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_1/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_3/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_3/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_2/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_2/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_3/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_3/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_4/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_4/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_2/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_5/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_5/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_4/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_4/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_5/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_5/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_6/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_6/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_3/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_7/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_7/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_6/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_6/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_7/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_7/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_8/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_8/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_4/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_9/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_9/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_8/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_8/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_9/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_9/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_10/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_10/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_5/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_11/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_11/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_10/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_10/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_11/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_11/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_12/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_12/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_6/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_13/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_13/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_12/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_12/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_13/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_13/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_14/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_14/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_7/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_15/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_15/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_14/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_14/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_15/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_15/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_6/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_6/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_7/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_7/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_16/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_16/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_17/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_17/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_8/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_8/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_9/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_9/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'dense_18/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_18/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_19/kernel:0' shape=(1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_19/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_1/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_1/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_1/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_10/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_10/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_7/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_7/bias:0' shape=(1920,) dtype=float32&gt;
  &lt;tf.Variable 'dense_20/kernel:0' shape=(1920, 7611) dtype=float32&gt;
  &lt;tf.Variable 'dense_20/bias:0' shape=(7611,) dtype=float32&gt;
It is possible that this is intended behavior, but it is more likely
an omission. This is a strong indication that this layer should be
formulated as a subclassed Layer rather than a Lambda layer.
WARNING:tensorflow:5 out of the last 9 calls to &lt;function Model.make_predict_function.&lt;locals&gt;.predict_function at 0x7fefdb03cca0&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
1/1 [==============================] - 147s 147s/step
1/1 [==============================] - 47s 47s/step
WARNING:tensorflow:
The following Variables were used a Lambda layer's call (inp_grad), but
are not present in its tracked objects:
  &lt;tf.Variable 'conv1d_8/kernel:0' shape=(15, 4, 512) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_8/bias:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_11/gamma:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_11/beta:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_9/kernel:0' shape=(5, 512, 608) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_9/bias:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_12/gamma:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_12/beta:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_10/kernel:0' shape=(5, 608, 736) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_10/bias:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_13/gamma:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_13/beta:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_11/kernel:0' shape=(5, 736, 896) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_11/bias:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_14/gamma:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_14/beta:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_12/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_12/bias:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_15/gamma:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_15/beta:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_13/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_13/bias:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_16/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_16/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_14/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_14/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_16/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_16/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_8/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_17/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_17/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_22/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_22/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_23/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_23/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_18/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_18/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_9/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_19/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_19/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_24/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_24/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_25/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_25/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_20/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_20/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_10/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_21/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_21/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_26/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_26/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_27/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_27/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_22/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_22/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_11/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_23/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_23/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_28/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_28/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_29/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_29/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_24/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_24/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_12/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_25/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_25/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_30/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_30/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_31/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_31/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_26/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_26/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_13/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_27/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_27/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_32/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_32/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_33/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_33/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_28/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_28/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_14/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_29/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_29/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_34/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_34/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_35/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_35/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_30/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_30/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_15/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_31/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_31/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_36/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_36/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_37/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_37/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_17/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_17/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_18/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_18/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_38/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_38/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_39/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_39/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_2/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_2/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_2/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_19/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_19/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_20/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_20/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'dense_40/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_40/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_41/kernel:0' shape=(1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_41/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_3/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_3/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_3/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_21/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_21/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_15/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_15/bias:0' shape=(1920,) dtype=float32&gt;
  &lt;tf.Variable 'dense_42/kernel:0' shape=(1920, 7611) dtype=float32&gt;
  &lt;tf.Variable 'dense_42/bias:0' shape=(7611,) dtype=float32&gt;
It is possible that this is intended behavior, but it is more likely
an omission. This is a strong indication that this layer should be
formulated as a subclassed Layer rather than a Lambda layer.
WARNING:tensorflow:6 out of the last 11 calls to &lt;function Model.make_predict_function.&lt;locals&gt;.predict_function at 0x7feea55a7040&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
1/1 [==============================] - 147s 147s/step
1/1 [==============================] - 47s 47s/step
WARNING:tensorflow:
The following Variables were used a Lambda layer's call (inp_grad), but
are not present in its tracked objects:
  &lt;tf.Variable 'conv1d_16/kernel:0' shape=(15, 4, 512) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_16/bias:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_22/gamma:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_22/beta:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_17/kernel:0' shape=(5, 512, 608) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_17/bias:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_23/gamma:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_23/beta:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_18/kernel:0' shape=(5, 608, 736) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_18/bias:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_24/gamma:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_24/beta:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_19/kernel:0' shape=(5, 736, 896) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_19/bias:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_25/gamma:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_25/beta:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_20/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_20/bias:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_26/gamma:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_26/beta:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_21/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_21/bias:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_27/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_27/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_22/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_22/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_32/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_32/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_16/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_33/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_33/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_44/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_44/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_45/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_45/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_34/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_34/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_17/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_35/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_35/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_46/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_46/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_47/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_47/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_36/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_36/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_18/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_37/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_37/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_48/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_48/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_49/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_49/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_38/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_38/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_19/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_39/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_39/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_50/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_50/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_51/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_51/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_40/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_40/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_20/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_41/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_41/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_52/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_52/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_53/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_53/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_42/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_42/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_21/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_43/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_43/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_54/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_54/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_55/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_55/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_44/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_44/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_22/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_45/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_45/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_56/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_56/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_57/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_57/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_46/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_46/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_23/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_47/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_47/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_58/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_58/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_59/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_59/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_28/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_28/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_29/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_29/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_60/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_60/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_61/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_61/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_4/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_4/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_4/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_30/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_30/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_31/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_31/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'dense_62/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_62/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_63/kernel:0' shape=(1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_63/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_5/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_5/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_5/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_32/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_32/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_23/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_23/bias:0' shape=(1920,) dtype=float32&gt;
  &lt;tf.Variable 'dense_64/kernel:0' shape=(1920, 7611) dtype=float32&gt;
  &lt;tf.Variable 'dense_64/bias:0' shape=(7611,) dtype=float32&gt;
It is possible that this is intended behavior, but it is more likely
an omission. This is a strong indication that this layer should be
formulated as a subclassed Layer rather than a Lambda layer.
1/1 [==============================] - 146s 146s/step
1/1 [==============================] - 47s 47s/step
WARNING:tensorflow:
The following Variables were used a Lambda layer's call (inp_grad), but
are not present in its tracked objects:
  &lt;tf.Variable 'conv1d_24/kernel:0' shape=(15, 4, 512) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_24/bias:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_33/gamma:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_33/beta:0' shape=(512,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_25/kernel:0' shape=(5, 512, 608) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_25/bias:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_34/gamma:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_34/beta:0' shape=(608,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_26/kernel:0' shape=(5, 608, 736) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_26/bias:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_35/gamma:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_35/beta:0' shape=(736,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_27/kernel:0' shape=(5, 736, 896) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_27/bias:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_36/gamma:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_36/beta:0' shape=(896,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_28/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_28/bias:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_37/gamma:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_37/beta:0' shape=(1056,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_29/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_29/bias:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_38/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_38/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_30/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_30/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_48/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_48/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_24/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_49/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_49/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_66/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_66/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_67/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_67/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_50/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_50/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_25/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_51/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_51/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_68/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_68/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_69/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_69/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_52/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_52/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_26/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_53/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_53/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_70/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_70/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_71/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_71/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_54/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_54/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_27/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_55/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_55/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_72/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_72/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_73/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_73/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_56/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_56/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_28/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_57/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_57/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_74/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_74/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_75/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_75/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_58/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_58/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_29/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_59/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_59/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_76/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_76/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_77/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_77/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_60/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_60/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_30/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_61/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_61/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_78/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_78/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_79/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_79/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_62/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_62/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'multihead_attention_31/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_63/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'layer_normalization_63/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_80/kernel:0' shape=(1536, 3072) dtype=float32&gt;
  &lt;tf.Variable 'dense_80/bias:0' shape=(3072,) dtype=float32&gt;
  &lt;tf.Variable 'dense_81/kernel:0' shape=(3072, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_81/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_39/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_39/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_40/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_40/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_82/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_82/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_83/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_83/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_6/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_6/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_6/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_41/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_41/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_42/gamma:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_42/beta:0' shape=(1280,) dtype=float32&gt;
  &lt;tf.Variable 'dense_84/kernel:0' shape=(1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_84/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'dense_85/kernel:0' shape=(1280, 1536) dtype=float32&gt;
  &lt;tf.Variable 'dense_85/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_7/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_7/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;
  &lt;tf.Variable 'separable_conv1d_7/bias:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_43/gamma:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'sync_batch_normalization_43/beta:0' shape=(1536,) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_31/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;
  &lt;tf.Variable 'conv1d_31/bias:0' shape=(1920,) dtype=float32&gt;
  &lt;tf.Variable 'dense_86/kernel:0' shape=(1920, 7611) dtype=float32&gt;
  &lt;tf.Variable 'dense_86/bias:0' shape=(7611,) dtype=float32&gt;
It is possible that this is intended behavior, but it is more likely
an omission. This is a strong indication that this layer should be
formulated as a subclassed Layer rather than a Lambda layer.
1/1 [==============================] - 148s 148s/step</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Visualize contribution scores</span></span>
<span id="cb22-2"></span>
<span id="cb22-3">visualize_input_gradient_pair(</span>
<span id="cb22-4">    pred_grad_wt,</span>
<span id="cb22-5">    pred_grad_mut,</span>
<span id="cb22-6">    plot_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb22-7">    plot_end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb22-8">    save_figs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb22-9">    fig_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chrom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_prediction_grad_gtex_snp_4_folds_gtex_blood_cov_undo_clip'</span></span>
<span id="cb22-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--- WT ---
--- Mut ---</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C_files/figure-html/cell-12-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Get contribution scores (ISM) for blood GTEX tracks</span></span>
<span id="cb24-2"></span>
<span id="cb24-3">[pred_ism_wt, pred_ism_mut] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_ism(</span>
<span id="cb24-4">    models,</span>
<span id="cb24-5">    [sequence_one_hot_wt, sequence_one_hot_mut],</span>
<span id="cb24-6">    (poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb24-7">    (poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb24-8">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb24-9">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb24-10">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb24-11">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb24-12">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>],</span>
<span id="cb24-13">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,</span>
<span id="cb24-14">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>,</span>
<span id="cb24-15">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">384.</span>,</span>
<span id="cb24-16">    dist_bin_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_slice.tolist(),</span>
<span id="cb24-17">    use_mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb24-18">    use_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb24-19">    use_logodds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb24-20">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Visualize contribution scores</span></span>
<span id="cb25-2"></span>
<span id="cb25-3">visualize_input_gradient_pair(</span>
<span id="cb25-4">    pred_ism_wt,</span>
<span id="cb25-5">    pred_ism_mut,</span>
<span id="cb25-6">    plot_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb25-7">    plot_end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb25-8">    save_figs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb25-9">    fig_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chrom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_prediction_ism_gtex_snp_4_folds_gtex_blood_cov_undo_clip'</span></span>
<span id="cb25-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--- WT ---
--- Mut ---</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C_files/figure-html/cell-14-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Get contribution scores (ISM shuffle) for blood GTEX tracks</span></span>
<span id="cb27-2"></span>
<span id="cb27-3">[pred_ism_wt, pred_ism_mut] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_ism_shuffle(</span>
<span id="cb27-4">    models,</span>
<span id="cb27-5">    [sequence_one_hot_wt, sequence_one_hot_mut],</span>
<span id="cb27-6">    (poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb27-7">    (poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb27-8">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb27-9">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb27-10">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb27-11">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb27-12">    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>],</span>
<span id="cb27-13">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,</span>
<span id="cb27-14">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>,</span>
<span id="cb27-15">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">384.</span>,</span>
<span id="cb27-16">    window_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb27-17">    n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>,</span>
<span id="cb27-18">    dinuc_shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb27-19">    dist_bin_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_slice.tolist(),</span>
<span id="cb27-20">    use_mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb27-21">    use_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb27-22">    use_logodds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb27-23">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Visualize contribution scores</span></span>
<span id="cb28-2"></span>
<span id="cb28-3">visualize_input_gradient_pair(</span>
<span id="cb28-4">    pred_ism_wt,</span>
<span id="cb28-5">    pred_ism_mut,</span>
<span id="cb28-6">    plot_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb28-7">    plot_end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb28-8">    save_figs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb28-9">    fig_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chrom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(poses[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_prediction_ism_shuffle_gtex_snp_4_folds_gtex_blood_cov_undo_clip'</span></span>
<span id="cb28-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--- WT ---
--- Mut ---</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C_files/figure-html/cell-16-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C_files/figure-html/cell-16-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Load samples with reference- and alternate alleles respectively</span></span>
<span id="cb30-2"></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#These files are protected by dbGaP - email to request access</span></span>
<span id="cb30-4"></span>
<span id="cb30-5">cov_files_wt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gtex_ref_chr10_116952944_T_C.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file'</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file'</span>].values.tolist()</span>
<span id="cb30-6">cov_files_mut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gtex_alt_chr10_116952944_T_C.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file'</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file'</span>].values.tolist()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Visualize measured coverage tracks for chr10_116952944_T_C</span></span>
<span id="cb31-2"></span>
<span id="cb31-3">save_figs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb31-4">save_suffix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_chr10_116952944_T_C_meas_32_subjects'</span></span>
<span id="cb31-5"></span>
<span id="cb31-6">center_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">116952944</span></span>
<span id="cb31-7"></span>
<span id="cb31-8">chrom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr10'</span></span>
<span id="cb31-9">poses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">116952944</span>]</span>
<span id="cb31-10">alts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>]</span>
<span id="cb31-11"></span>
<span id="cb31-12">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb31-13">end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb31-14"></span>
<span id="cb31-15">blacklist_bed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/drk/common/data/genomes/hg38/blacklist/blacklist_hg38_all.bed"</span></span>
<span id="cb31-16"></span>
<span id="cb31-17">read_coverage_func_wt, close_coverage_func_wt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_coverage_reader(cov_files_wt, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16384</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, blacklist_bed)</span>
<span id="cb31-18">read_coverage_func_mut, close_coverage_func_mut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_coverage_reader(cov_files_mut, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16384</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, blacklist_bed)</span>
<span id="cb31-19"></span>
<span id="cb31-20">gtex_targets_wt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_coverage_func_wt(chrom, start, end, clip_soft<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">384.</span>, clip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">768.</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb31-21">gtex_targets_mut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_coverage_func_mut(chrom, start, end, clip_soft<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">384.</span>, clip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">768.</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb31-22"></span>
<span id="cb31-23">close_coverage_func_wt()</span>
<span id="cb31-24">close_coverage_func_mut()</span>
<span id="cb31-25"></span>
<span id="cb31-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gtex_targets_wt.shape = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(gtex_targets_wt.shape))</span>
<span id="cb31-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gtex_targets_mut.shape = "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(gtex_targets_mut.shape))</span>
<span id="cb31-28"></span>
<span id="cb31-29">plot_window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">131072</span></span>
<span id="cb31-30">bin_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb31-31">pad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb31-32"></span>
<span id="cb31-33">anno_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#splice_df</span></span>
<span id="cb31-34"></span>
<span id="cb31-35">rescale_tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb31-36">normalize_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb31-37"></span>
<span id="cb31-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Tracks</span></span>
<span id="cb31-39">track_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb31-40">    np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>).tolist(),</span>
<span id="cb31-41">]</span>
<span id="cb31-42"></span>
<span id="cb31-43">track_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb31-44">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GTEx Blood (32 subjects)'</span>,</span>
<span id="cb31-45">]</span>
<span id="cb31-46"></span>
<span id="cb31-47">track_scales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb31-48">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,</span>
<span id="cb31-49">]</span>
<span id="cb31-50"></span>
<span id="cb31-51">track_transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb31-52">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>,</span>
<span id="cb31-53">]</span>
<span id="cb31-54"></span>
<span id="cb31-55">soft_clips <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb31-56">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">384.</span>,</span>
<span id="cb31-57">]</span>
<span id="cb31-58"></span>
<span id="cb31-59"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-- Counts --"</span>)</span>
<span id="cb31-60">plot_coverage_track_pair_bins(gtex_targets_wt[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...], gtex_targets_mut[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ...], chrom, start, center_pos, poses, track_indices, track_names, track_scales, track_transforms, soft_clips, plot_window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plot_window, normalize_window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>plot_window, bin_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bin_size, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pad, rescale_tracks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rescale_tracks, normalize_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>normalize_counts, save_figs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>save_figs, save_suffix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>save_suffix, gene_slice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_slice, anno_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>anno_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>gtex_targets_wt.shape = (16352, 32)
gtex_targets_mut.shape = (16352, 32)
-- Counts --
 - sum_wt = 27668.607
 - sum_mut = 37653.69
 - max_y_wt = 241.0508
 - max_y_mut = 370.9016
 -- (max_y = 370.9016)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C_files/figure-html/cell-18-output-2.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C.html</guid>
  <pubDate>Wed, 20 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>All R plots of PrediXcan and Enformer results</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index.html</link>
  <description><![CDATA[ 




<section id="qq-plots" class="level2">
<h2 class="anchored" data-anchor-id="qq-plots">QQ Plots</h2>
<p>Import Haky’s QQ plot gists and read Enformer personalized prediction summary results.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_72fa27785a64f50e373be893570e534b">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source_gist</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a925fea01b365a8c605e"</span>)</span>
<span id="cb1-2">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source_gist</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"38431b74c6c0bf90c12f"</span>)</span>
<span id="cb1-3">pearson_corr_human <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_pearson_corr_human.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-4">pearson_corr_mouse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_pearson_corr_mouse.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-5">spearman_corr_human <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_spearman_corr_human.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-6">spearman_corr_mouse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_spearman_corr_mouse.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</details>
</div>
<p>We used Enformer human and mouse head outputs across 340 rats in Br study to predict individual-level gene expression. We recorded pearson and spearman correlations of predicted vs observed expression for each gene. In this post, we evaluate performance of both models against each other as well as PrediXcan.</p>
<section id="enformer-human-head" class="level3">
<h3 class="anchored" data-anchor-id="enformer-human-head">Enformer Human Head</h3>
<p>Plots generated from pearson correlations:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-2_0b36ef10ee02aef3383551531cfafa06">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqR</span>(pearson_corr_human<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pearson.r, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Head Prediction for Br Rats: Pearson R2 vs Expected"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqR2</span>(pearson_corr_human<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pearson.r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Head Prediction for Br Rats: Pearson R2 vs Expected"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-2-2.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqunif</span>(pearson_corr_human<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pvalue, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Head Prediction for Br Rats: Pearson P-values"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in qqunif(pearson_corr_human$pvalue, main = "Human Head Prediction for
Br Rats: Pearson P-values"): thresholding p to 1e-30</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-2-3.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Plots generated from spearman correlations:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-3_829621107e498db6f509dfb439527ccb">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqR</span>(spearman_corr_human<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>spearman.r, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Head Prediction for Br Rats: Spearman R2 vs Expected"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqR2</span>(spearman_corr_human<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>spearman.r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Head Prediction for Br Rats: Spearman R2 vs Expected"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqunif</span>(spearman_corr_human<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pvalue, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Head Prediction for Br Rats: Spearman P-values"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in qqunif(spearman_corr_human$pvalue, main = "Human Head Prediction for
Br Rats: Spearman P-values"): thresholding p to 1e-30</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-3-3.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="enformer-mouse-head" class="level3">
<h3 class="anchored" data-anchor-id="enformer-mouse-head">Enformer Mouse Head</h3>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-4_8cf91ca4122579deaaaa80bf0b681573">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqR</span>(pearson_corr_mouse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pearson.r, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse Head Prediction for Br Rats: Pearson R2 vs Expected"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqR2</span>(pearson_corr_mouse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pearson.r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse Head Prediction for Br Rats: Pearson R2 vs Expected"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-4-2.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqunif</span>(pearson_corr_mouse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pvalue, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse Head Prediction for Br Rats: Pearson P-values"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in qqunif(pearson_corr_mouse$pvalue, main = "Mouse Head Prediction for
Br Rats: Pearson P-values"): thresholding p to 1e-30</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-4-3.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-5_06798af87b8f613de9cd0827031e8e4c">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqR</span>(spearman_corr_mouse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>spearman.r, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse Head Prediction for Br Rats: Spearman R2 vs Expected"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqR2</span>(spearman_corr_mouse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>spearman.r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">340</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse Head Prediction for Br Rats: Spearman R2 vs Expected"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-5-2.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqunif</span>(spearman_corr_mouse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pvalue, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse Head Prediction for Br Rats: Spearman P-values"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in qqunif(spearman_corr_mouse$pvalue, main = "Mouse Head Prediction for
Br Rats: Spearman P-values"): thresholding p to 1e-30</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-5-3.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="scatter-plot-with-predixcan-elastic-net-performance" class="level2">
<h2 class="anchored" data-anchor-id="scatter-plot-with-predixcan-elastic-net-performance">Scatter Plot with PrediXcan Elastic Net Performance</h2>
<p>399 genes out of the 867 genes used in the Enformer runs have prediction performance results in the Br elastic net PrediXcan model. The missing genes were likely filtered out during training because there were no snps found to have effect on their expression.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-6_6c26415b73fe5c83e6e9eb71c16aec2f">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">enet_Br_perf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/misc/highestR2genes.csv"</span>)[,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)]</span>
<span id="cb18-2">enet_Br_merged <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(enet_Br_perf, spearman_corr_human, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by.x =</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by.y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row.names"</span>)</span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(enet_Br_merged<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cor, enet_Br_merged<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>spearman.r, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cross-Individual Correlations for 399 Genes"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PrediXcan"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer Human Head"</span>)</span>
<span id="cb18-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(enet_Br_merged<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cor, enet_Br_merged<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>spearman.r)</span>
<span id="cb18-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb18-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">v=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-15-PrediXcan-and-Enformer-plots/index.html</guid>
  <pubDate>Fri, 15 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Summary plots of Enformer performance across genes</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index.html</link>
  <description><![CDATA[ 




<p>All rat reference predictions were calculated from Enformer runs with human output along rat reference genome.</p>
<section id="human-predicted-vs-human-observed" class="level2">
<h2 class="anchored" data-anchor-id="human-predicted-vs-human-observed">Human Predicted vs Human Observed</h2>
<div class="cell" data-execution_count="22">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="124">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">human_brain_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_all_GTEx_brain_tissues.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).dropna()</span>
<span id="cb2-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_brain_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cortex"</span>].values</span>
<span id="cb2-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_brain_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer"</span>].values</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="125">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(x, y)</span>
<span id="cb3-2">plt.scatter(x, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed Expression in GTEx'</span>)</span>
<span id="cb3-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted Expression'</span>)</span>
<span id="cb3-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Reference Gene Expression in Brain Tissue"</span>)</span>
<span id="cb3-6">plt.legend()</span>
<span id="cb3-7">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="92">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(x, y)</span>
<span id="cb4-2">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank of Observed Expression in GTEx'</span>)</span>
<span id="cb4-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank of Predicted Expression'</span>)</span>
<span id="cb4-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Reference Gene Expression in Brain Tissue"</span>)</span>
<span id="cb4-6">plt.legend()</span>
<span id="cb4-7">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="126">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb5-2">outliers_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.zscore(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threshold</span>
<span id="cb5-3">outliers_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.zscore(y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threshold</span>
<span id="cb5-4">filtered_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_y]</span>
<span id="cb5-5">filtered_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_y]</span>
<span id="cb5-6">plt.scatter(filtered_x, filtered_y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb5-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed in GTEx'</span>)</span>
<span id="cb5-10">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>)</span>
<span id="cb5-11">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Human Reference Gene Expression in LCL Tissue (Outliers Removed)'</span>)</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb5-14">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>For extra confirmation, we replicated Huang et al’s results with GEUVADIS reference gene expression in LCL tissue, and even saw improved results when we compared across all human genes.</p>
<div class="cell" data-execution_count="65">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">human_lcl_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_GEUVADIS.csv"</span>,index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data for x and y (including outliers)</span></span>
<span id="cb6-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_lcl_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geuvadis, mean"</span>].values</span>
<span id="cb6-5">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_lcl_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer, 3 bin"</span>].values</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="66">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(x, y)</span>
<span id="cb7-2">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb7-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank of Observed Expression in GEUVADIS'</span>)</span>
<span id="cb7-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank of Predicted Expression'</span>)</span>
<span id="cb7-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Reference Gene Expression in LCL Tissue"</span>)</span>
<span id="cb7-6">plt.legend()</span>
<span id="cb7-7">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="rat-predicted-vs-rat-observed" class="level2">
<h2 class="anchored" data-anchor-id="rat-predicted-vs-rat-observed">Rat Predicted vs Rat Observed</h2>
<div class="cell" data-execution_count="127">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">rat_brain_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/rn7_reference_predicted_vs_observed_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rat_brain_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>]</span>
<span id="cb8-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rat_brain_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predicted"</span>]</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="128">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(x, y)</span>
<span id="cb9-2">plt.scatter(x, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed Expression in Br Rats'</span>)</span>
<span id="cb9-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted Expression'</span>)</span>
<span id="cb9-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rat Reference Gene Expression in Brain Tissue"</span>)</span>
<span id="cb9-6">plt.legend()</span>
<span id="cb9-7">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="129">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(x, y)</span>
<span id="cb10-2">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank of Observed Expression in Br Rats'</span>)</span>
<span id="cb10-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank of Predicted Expression'</span>)</span>
<span id="cb10-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rat Reference Gene Expression in Brain Tissue"</span>)</span>
<span id="cb10-6">plt.legend()</span>
<span id="cb10-7">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="131">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb11-2">outliers_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.zscore(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threshold</span>
<span id="cb11-3">outliers_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.zscore(y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threshold</span>
<span id="cb11-4">filtered_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_y]</span>
<span id="cb11-5">filtered_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_y]</span>
<span id="cb11-6">plt.scatter(filtered_x, filtered_y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb11-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed Expression in Br Rats'</span>)</span>
<span id="cb11-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted Expression'</span>)</span>
<span id="cb11-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rat Reference Gene Expression in Brain Tissue (Outliers Removed)"</span>)</span>
<span id="cb11-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="human-observed-vs-rat-observed" class="level2">
<h2 class="anchored" data-anchor-id="human-observed-vs-rat-observed">Human Observed vs Rat Observed</h2>
<div class="cell" data-execution_count="107">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## read rat observed gene expression data</span></span>
<span id="cb12-2">rat_tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>)</span>
<span id="cb12-3">rat_mean_tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rat_tpm.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:].mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-4">rat_mean_tpm.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rat mean tpm"</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## read human gene expression data</span></span>
<span id="cb12-6">human_tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/gene_tpm_2017-06-05_v8_brain_cortex.gct.gz"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-7">human_tpm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_tpm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb12-8">human_tpm.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate average gene expression</span></span>
<span id="cb12-10">human_mean_tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_tpm.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Description'</span>]).mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-11">human_mean_tpm.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human mean tpm"</span></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Map to human genes</span></span>
<span id="cb12-13">ortho_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt"</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb12-14">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ortho_genes.join(rat_mean_tpm, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>)</span>
<span id="cb12-15">merged_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hsapiens_homolog_ensembl_gene"</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-16">expr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df.join(human_mean_tpm).dropna()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_232432/2998070687.py:2: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.
  rat_tpm = pd.read_csv("/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed", sep="\t", header=0, index_col='gene_id')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="108">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human mean tpm"</span>].values.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb14-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rat mean tpm"</span>].values.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="122">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(x, y)</span>
<span id="cb15-2">plt.scatter(x, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb15-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed in GTEx'</span>)</span>
<span id="cb15-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed Br Rats'</span>)</span>
<span id="cb15-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human and Rat Reference Gene Expression in Brain Tissue"</span>)</span>
<span id="cb15-6">plt.legend()</span>
<span id="cb15-7">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="132">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(x, y)</span>
<span id="cb16-2">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank of Observed Expression in GTEx'</span>)</span>
<span id="cb16-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rank of Observed Expression in Br Rats'</span>)</span>
<span id="cb16-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human Reference Gene Expression in Brain Tissue"</span>)</span>
<span id="cb16-6">plt.legend()</span>
<span id="cb16-7">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="115">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb17-2">outliers_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.zscore(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threshold</span>
<span id="cb17-3">outliers_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.zscore(y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threshold</span>
<span id="cb17-4">filtered_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_y]</span>
<span id="cb17-5">filtered_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>outliers_y]</span>
<span id="cb17-6">plt.scatter(filtered_x, filtered_y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb17-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed Br Rats'</span>)</span>
<span id="cb17-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed in GTEx'</span>)</span>
<span id="cb17-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human and Rat Reference Gene Expression in Brain Tissue (Outliers Removed)"</span>)</span>
<span id="cb17-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-13-all-correlation-across-genes-plots/index.html</guid>
  <pubDate>Wed, 13 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Preparing HS founder rat genotypes for Enformer pipeline</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-12-processing-HS-founder-rat-genotypes/index.html</link>
  <description><![CDATA[ 




<p>I downloaded the original VCF from TSCC to <code>/home/s1mi/enformer_rat_data/genotypes/Palmer_HS_founders_mRatBN7_2.vcf.gz</code>.</p>
<section id="convert-ncbi-refseq-id-to-chromosome-numbers" class="level3">
<h3 class="anchored" data-anchor-id="convert-ncbi-refseq-id-to-chromosome-numbers">Convert NCBI RefSeq ID to chromosome numbers</h3>
<ol type="1">
<li>Download assembly report for NCBI names to chromosome mapping</li>
</ol>
<pre><code>wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/015/227/675/GCF_015227675.2_mRatBN7.2/GCF_015227675.2_mRatBN7.2_assembly_report.txt -O /Users/sabrinami/Downloads/mRatBN7.2_assembly_report.txt</code></pre>
<ol start="2" type="1">
<li>Write chromosome annotation file for bcftools</li>
</ol>
<pre><code>grep -e '^[^#]' /Users/sabrinami/Downloads/mRatBN7.2_assembly_report.txt | awk '{ print $7, "chr" $1 }' &gt; /Users/sabrinami/Downloads/mRatBN7.2_chromosome_names.txt
</code></pre>
<p>There are extra annotations than needed, later on we will filter to chromosomes 1 through 20 and X.</p>
<ol start="3" type="1">
<li>Annotate VCF</li>
</ol>
<pre><code>cd /Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data
bcftools annotate \
  --rename-chrs /Users/sabrinami/Downloads/mRatBN7.2_chromosome_names.txt \
  --threads 10 \
  -o Palmer_HS_founders_mRatBN7_annot.vcf.gz \
  -Oz Palmer_HS_founders_mRatBN7_2.vcf.gz
</code></pre>
</section>
<section id="replace-missing-genotypes-with-reference-alleles" class="level3">
<h3 class="anchored" data-anchor-id="replace-missing-genotypes-with-reference-alleles">Replace Missing Genotypes with Reference Alleles</h3>
<pre><code>gunzip Palmer_HS_founders_mRatBN7_annot.vcf.gz
sed 's/\.\/\./0\/0/g' Palmer_HS_founders_mRatBN7_annot.vcf &gt; Palmer_HS_founders_mRatBN7_no_missing.vcf
bgzip Palmer_HS_founders_mRatBN7_no_missing.vcf
bcftools index -t Palmer_HS_founders_mRatBN7_no_missing.vcf.gz
</code></pre>
</section>
<section id="filter-out-indels" class="level3">
<h3 class="anchored" data-anchor-id="filter-out-indels">Filter out Indels</h3>
<pre><code>bcftools view --types snps Palmer_HS_founders_mRatBN7_no_missing.vcf.gz -o Palmer_HS_founders_mRatBN7_snps_only.vcf.gz -Oz
bcftools index -t Palmer_HS_founders_mRatBN7_snps_only.vcf.gz</code></pre>
</section>
<section id="split-vcfs" class="level3">
<h3 class="anchored" data-anchor-id="split-vcfs">Split VCFs</h3>
<p>First by chromosome number:</p>
<pre><code>mkdir FounderVCFs
# Split VCF by chromosome
vcf_in=Palmer_HS_founders_mRatBN7_snps_only.vcf.gz

vcf_out_prefix=FounderVCFs/chr

for i in {1..20}
do
    echo "Working on chromosome ${i}..."
    bcftools view --regions chr${i} ${vcf_in} -o ${vcf_out_prefix}${i}.vcf.gz -Oz
done


# Index VCFs
for i in {1..20}
do
    echo "Indexing chromosome ${i}..."
    bcftools index -t FounderVCFs/chr${i}.vcf.gz
done</code></pre>
<p>Then separately for X chromosome:</p>
<pre><code>bcftools view ${vcf_in} --regions chrX -o ${vcf_out_prefix}X.vcf.gz -Oz
bcftools index -t FounderVCFs/chrX.vcf.gz</code></pre>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-12-processing-HS-founder-rat-genotypes/index.html</guid>
  <pubDate>Tue, 12 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Test run of personalized Enformer on HS rats</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-12-test-run-on-HS-founders/index.html</link>
  <description><![CDATA[ 




<section id="write-individuals-list" class="level3">
<h3 class="anchored" data-anchor-id="write-individuals-list">Write Individuals List</h3>
<pre><code>bcftools query -l /Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/Palmer_HS_founders_mRatBN7_2.vcf.gz &gt; metadata/individuals.txt
</code></pre>
</section>
<section id="run-pipeline-locally" class="level3">
<h3 class="anchored" data-anchor-id="run-pipeline-locally">Run Pipeline Locally</h3>
<pre><code>conda activate enformer-predict-tools
python /Users/sabrinami/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /Users/sabrinami/Github/deep-learning-in-genomics/posts/2023-09-12-test-run-on-HS-founders/local_test_personalized.json</code></pre>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-12-test-run-on-HS-founders/index.html</guid>
  <pubDate>Tue, 12 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Validating reference gene expression prediction</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-06-validating-Huang-et-al/index.html</link>
  <description><![CDATA[ 




<p>I replicated the Enformer result’s in <a href="https://www.biorxiv.org/content/10.1101/2023.06.30.547100v1">Personal transcriptome variation is poorly explained by current genomic deep learning models, Huang et al</a>. They reported a 0.57 correlation in reference prediction across all genes. They used median GEUVADIS LCL gene expression data for their comparison and quantified predicted gene expression using the average of 10 bin window around each gene’s TSS on the CAGE:B lymphoblastoid cell line track.</p>
<p>They subsetted to 3,295 genes with a significant cis-QTL, however, when I expanded the analysis to all GEUVADIS genes, I found an even higher correlation of 0.77.</p>
<section id="libraries-and-definitions" class="level3">
<h3 class="anchored" data-anchor-id="libraries-and-definitions">Libraries and Definitions</h3>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.stats</span>
<span id="cb1-6"></span>
<span id="cb1-7">enfref_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/lvairus/reftile_project/enformer-reference-epigenome"</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> query_epigenome(chr_num, center_bp, n_bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, tracks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        path_to_enfref (str): path to the directory containing the concatenated reference enformer files</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        chr_num (int/string): chromosome number</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        center_bp (int): center base pair position (1-indexed)</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        n_bins (int): number of bins to extract centered around center_bp (default: 896) </span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            note: if the number of bins is even, the center bin will be in the second half of the array</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tracks (int list): list of tracks to extract (default: all 5313 tracks)</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        epigen (np.array): enformer predictions centered at center_bp of shape (n_bins, len(tracks))</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-22"></span>
<span id="cb1-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from position choose center bin</span></span>
<span id="cb1-24">    center_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb1-25">    </span>
<span id="cb1-26">    half_bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-27">    start_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> half_bins</span>
<span id="cb1-28">    end_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> half_bins</span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n_bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if n_bins is odd</span></span>
<span id="cb1-30">        end_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-31"></span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>enfref_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>chr_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_cat.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get tracks if list provided</span></span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-35">            epigen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>chr_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>][start_bin:end_bin, :] </span>
<span id="cb1-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-37">            epigen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>chr_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>][start_bin:end_bin, tracks] </span>
<span id="cb1-38"></span>
<span id="cb1-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> epigen</span></code></pre></div>
</div>
</section>
<section id="query-enformer-predicted-gene-expression" class="level3">
<h3 class="anchored" data-anchor-id="query-enformer-predicted-gene-expression">Query Enformer predicted gene expression</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Function to put CAGE predictions in list (in the same order as gene list by chromosome)</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chr_list:</span>
<span id="cb2-3">    gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>]</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb2-5">        bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_epigenome(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, hg38_annot.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>], num_bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, tracks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>])</span>
<span id="cb2-6">        CAGE_predictions[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>].append(np.average(bins))</span></code></pre></div>
</div>
</section>
<section id="calculate-geuvadis-reference-gene-expression" class="level3">
<h3 class="anchored" data-anchor-id="calculate-geuvadis-reference-gene-expression">Calculate GEUVADIS reference gene expression</h3>
<div class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-2">geuvadis_gex.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">TargetID</th>
<th data-quarto-table-cell-role="th">Gene_Symbol</th>
<th data-quarto-table-cell-role="th">Chr</th>
<th data-quarto-table-cell-role="th">Coord</th>
<th data-quarto-table-cell-role="th">HG00096</th>
<th data-quarto-table-cell-role="th">HG00097</th>
<th data-quarto-table-cell-role="th">HG00099</th>
<th data-quarto-table-cell-role="th">HG00100</th>
<th data-quarto-table-cell-role="th">HG00101</th>
<th data-quarto-table-cell-role="th">HG00102</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">NA20810</th>
<th data-quarto-table-cell-role="th">NA20811</th>
<th data-quarto-table-cell-role="th">NA20812</th>
<th data-quarto-table-cell-role="th">NA20813</th>
<th data-quarto-table-cell-role="th">NA20814</th>
<th data-quarto-table-cell-role="th">NA20815</th>
<th data-quarto-table-cell-role="th">NA20816</th>
<th data-quarto-table-cell-role="th">NA20819</th>
<th data-quarto-table-cell-role="th">NA20826</th>
<th data-quarto-table-cell-role="th">NA20828</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>ENSG00000152931.6</td>
<td>ENSG00000152931.6</td>
<td>5</td>
<td>59783540</td>
<td>0.101858</td>
<td>0.078110</td>
<td>0.048981</td>
<td>0.118597</td>
<td>0.004035</td>
<td>0.010925</td>
<td>...</td>
<td>0.088601</td>
<td>0.240010</td>
<td>0.137175</td>
<td>0.148494</td>
<td>0.038643</td>
<td>0.088509</td>
<td>0.029204</td>
<td>0.024423</td>
<td>0.044816</td>
<td>0.139186</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>ENSG00000183696.9</td>
<td>ENSG00000183696.9</td>
<td>7</td>
<td>48128225</td>
<td>8.183805</td>
<td>5.686911</td>
<td>2.434653</td>
<td>3.830894</td>
<td>6.612288</td>
<td>4.709646</td>
<td>...</td>
<td>13.428205</td>
<td>6.094500</td>
<td>12.536000</td>
<td>2.217262</td>
<td>3.573394</td>
<td>7.583364</td>
<td>4.052882</td>
<td>1.570378</td>
<td>4.900372</td>
<td>6.737308</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>ENSG00000139269.2</td>
<td>ENSG00000139269.2</td>
<td>12</td>
<td>57846106</td>
<td>1.199910</td>
<td>1.573572</td>
<td>0.521616</td>
<td>1.447225</td>
<td>3.565791</td>
<td>1.982681</td>
<td>...</td>
<td>3.225880</td>
<td>1.996067</td>
<td>2.854923</td>
<td>2.267343</td>
<td>1.331201</td>
<td>2.187895</td>
<td>1.004250</td>
<td>3.003316</td>
<td>1.984362</td>
<td>1.684954</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>ENSG00000169129.8</td>
<td>ENSG00000169129.8</td>
<td>10</td>
<td>116164515</td>
<td>0.831940</td>
<td>0.069778</td>
<td>0.931086</td>
<td>0.620941</td>
<td>1.660668</td>
<td>0.570481</td>
<td>...</td>
<td>1.023381</td>
<td>1.127852</td>
<td>0.774409</td>
<td>1.495854</td>
<td>0.895342</td>
<td>1.513521</td>
<td>0.826377</td>
<td>1.021201</td>
<td>0.952502</td>
<td>0.740565</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>ENSG00000134602.11</td>
<td>ENSG00000134602.11</td>
<td>X</td>
<td>131157293</td>
<td>27.646422</td>
<td>24.395572</td>
<td>16.445374</td>
<td>24.806650</td>
<td>25.113349</td>
<td>19.233988</td>
<td>...</td>
<td>25.079490</td>
<td>28.725528</td>
<td>24.450520</td>
<td>27.264069</td>
<td>26.912814</td>
<td>29.509210</td>
<td>26.462331</td>
<td>25.624009</td>
<td>25.707741</td>
<td>22.824957</td>
</tr>
</tbody>
</table>

<p>5 rows × 466 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb4-2">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate average gene expression</span></span>
<span id="cb4-4">geuvadis_mean_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gene_Symbol'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chr'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coord'</span>]).mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-5">geuvadis_mean_gex.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geuvadis, mean'</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate median gene expression</span></span>
<span id="cb4-7">geuvadis_median_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gene_Symbol'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chr'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coord'</span>]).median(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-8">geuvadis_median_gex.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geuvadis, median'</span></span></code></pre></div>
</div>
</section>
<section id="split-genes-by-chromosome" class="level2">
<h2 class="anchored" data-anchor-id="split-genes-by-chromosome">Split genes by chromosome</h2>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Subset annotation to GEUVADIS genes</span></span>
<span id="cb5-2">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.protein_coding_TSS.txt"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-3">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot[hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>].isin(geuvadis_gex.index)]</span>
<span id="cb5-4">gene_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensembl_gene_id'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>).to_dict()</span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Initialize CAGE predictions</span></span>
<span id="cb5-6">hg38_annot.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-7">chr_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"11"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"13"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"14"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"16"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"17"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"18"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"19"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"20"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"21"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"22"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>]</span>
<span id="cb5-8">CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {key: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chr_list}</span></code></pre></div>
</div>
</section>
<section id="query-enformer-predicted-gene-expression-1" class="level2">
<h2 class="anchored" data-anchor-id="query-enformer-predicted-gene-expression-1">Query Enformer predicted gene expression</h2>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chr_list:</span>
<span id="cb6-2">    gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>]</span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb6-4">        bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_epigenome(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, hg38_annot.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>], tracks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>])</span>
<span id="cb6-5">        CAGE_predictions[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>].append(np.average(bins))</span>
<span id="cb6-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
</div>
<section id="plot-correlation-across-genes" class="level3">
<h3 class="anchored" data-anchor-id="plot-correlation-across-genes">Plot correlation across genes</h3>
<div class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">merged_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>: pd.DataFrame(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chr_list}</span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chr_list:</span>
<span id="cb7-3">    merged_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer, 3 bin'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CAGE_predictions[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chr_list:</span>
<span id="cb8-2">    merged_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>].merge(geuvadis_mean_gex, left_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inner'</span>).dropna()</span>
<span id="cb8-3">    merged_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>].merge(geuvadis_median_gex, left_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inner'</span>).dropna()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">all_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(merged_dict.values())</span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># #all_genes.to_csv("/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_GEUVADIS.csv")</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#all_genes = pd.read_csv("/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_GEUVADIS.csv", index_col=0)</span></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson Correlation across all GEUVADIS genes, 3 bin"</span>, all_genes.corr(method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pearson"</span>).iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb10-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.stats.spearmanr(all_genes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geuvadis"</span>], all_genes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer, 3 bin"</span>])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman Correlation across all GEUVADIS genes, 3 bin:"</span>, corr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Pearson Correlation across all GEUVADIS genes, 3 bin 0.20215477325106418
Spearman Correlation across all GEUVADIS genes, 3 bin: 0.7688261493752583</code></pre>
</div>
</div>
<div class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">plt.scatter(all_genes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer, 3 bin'</span>], all_genes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geuvadis'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'observed'</span>)</span>
<span id="cb12-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predicted'</span>)</span>
<span id="cb12-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hg38 prediction across genes"</span>)</span>
<span id="cb12-5">plt.legend()</span>
<span id="cb12-6">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-06-validating-Huang-et-al/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="compare-to-10-bin-window-predictions" class="level3">
<h3 class="anchored" data-anchor-id="compare-to-10-bin-window-predictions">Compare to 10 bin window predictions</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb13-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chr_list:</span>
<span id="cb13-3">    tic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb13-4">    gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>].index</span>
<span id="cb13-5">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb13-7">        bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query_epigenome(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, hg38_annot.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>], n_bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, tracks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>])</span>
<span id="cb13-8">        predictions.append(np.average(bins))</span>
<span id="cb13-9">    merged_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer, 10 bin"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions</span>
<span id="cb13-10">    toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb13-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Querying chromosome"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genes...,"</span>, toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tic, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="94">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">all_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(merged_dict.values())</span>
<span id="cb14-2">all_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_genes[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geuvadis, mean"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geuvadis, median"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer, 3 bin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer, 10 bin"</span>]]</span>
<span id="cb14-3">all_genes.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_GEUVADIS.csv"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="90">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson Correlation"</span>)</span>
<span id="cb15-2">all_genes.corr(method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pearson"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Pearson Correlation</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="90">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">geuvadis, mean</th>
<th data-quarto-table-cell-role="th">geuvadis, median</th>
<th data-quarto-table-cell-role="th">enformer, 3 bin</th>
<th data-quarto-table-cell-role="th">enformer, 10 bin</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">geuvadis, mean</td>
<td>1.000000</td>
<td>0.999931</td>
<td>0.202155</td>
<td>0.193256</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">geuvadis, median</td>
<td>0.999931</td>
<td>1.000000</td>
<td>0.201489</td>
<td>0.192641</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">enformer, 3 bin</td>
<td>0.202155</td>
<td>0.201489</td>
<td>1.000000</td>
<td>0.923923</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">enformer, 10 bin</td>
<td>0.193256</td>
<td>0.192641</td>
<td>0.923923</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="89">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman Correlation:"</span>)</span>
<span id="cb17-2">all_genes.corr(method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Spearman Correlation:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="89">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">geuvadis, mean</th>
<th data-quarto-table-cell-role="th">geuvadis, median</th>
<th data-quarto-table-cell-role="th">enformer, 3 bin</th>
<th data-quarto-table-cell-role="th">enformer, 10 bin</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">geuvadis, mean</td>
<td>1.000000</td>
<td>0.999273</td>
<td>0.768826</td>
<td>0.759941</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">geuvadis, median</td>
<td>0.999273</td>
<td>1.000000</td>
<td>0.770554</td>
<td>0.761739</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">enformer, 3 bin</td>
<td>0.768826</td>
<td>0.770554</td>
<td>1.000000</td>
<td>0.963611</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">enformer, 10 bin</td>
<td>0.759941</td>
<td>0.761739</td>
<td>0.963611</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The highest correlation between observed and predicted expression in the 14,585 GEUVADIS genes is 0.77, by using a 3 bin average around the TSS for predicted reference and median gene expression across GEUVADIS individuals as observed reference. This is actually better than the reported 0.57 correlation by Huang et al, but I will run the original code to triple check.</p>
</section>
<section id="original-code" class="level3">
<h3 class="anchored" data-anchor-id="original-code">Original Code</h3>
<p>I cloned <a href="https://github.com/ni-lab/personalized-expression-benchmark.git">personalized-expression-benchmark</a>.</p>
<p>The first difference I noticed in their analysis is that they subset to 3259 genes in the GEUVADIS EUR dataset found to have at least one significant cis-eQTL.</p>
</section>
<section id="original-code-1" class="level3">
<h3 class="anchored" data-anchor-id="original-code-1">Original Code</h3>
<p>My only modification was hard-coding paths and removing the fasta folder argument in <a href="https://github.com/ni-lab/personalized-expression-benchmark/blob/main/enformer/run_enformer_reference.py"><code>personalized-expression-benchmark/enformer/run_enformer_reference.py</code></a></p>
<pre><code>module load conda
conda activate ml-python
cd /home/s1mi/Github/personalized-expression-benchmark

python3 enformer/run_enformer_reference.py . data/gene_list.csv
</code></pre>
<div class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/personalized-expression-benchmark/output/reference_predictions.csv"</span>)</span>
<span id="cb20-2">merged_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.merge(geuvadis_median_gex, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geneId"</span>, right_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="102">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson Correlation:"</span>)</span>
<span id="cb21-2">merged_output.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pearson"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Pearson Correlation:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="102">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">tss3</th>
<th data-quarto-table-cell-role="th">tss10</th>
<th data-quarto-table-cell-role="th">geuvadis, median</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">tss3</td>
<td>1.000000</td>
<td>0.835206</td>
<td>0.197672</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">tss10</td>
<td>0.835206</td>
<td>1.000000</td>
<td>0.218041</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">geuvadis, median</td>
<td>0.197672</td>
<td>0.218041</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="103">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman Correlation:"</span>)</span>
<span id="cb23-2">merged_output.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Spearman Correlation:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="103">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">tss3</th>
<th data-quarto-table-cell-role="th">tss10</th>
<th data-quarto-table-cell-role="th">geuvadis, median</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">tss3</td>
<td>1.000000</td>
<td>0.893283</td>
<td>0.501058</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">tss10</td>
<td>0.893283</td>
<td>1.000000</td>
<td>0.569476</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">geuvadis, median</td>
<td>0.501058</td>
<td>0.569476</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_output.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>).iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb25-2">plt.scatter(all_genes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer, 10 bin'</span>], all_genes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geuvadis, median'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb25-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'observed'</span>)</span>
<span id="cb25-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predicted'</span>)</span>
<span id="cb25-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hg38 prediction across genes"</span>)</span>
<span id="cb25-6">plt.legend()</span>
<span id="cb25-7">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb25-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-06-validating-Huang-et-al/index_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-06-validating-Huang-et-al/index.html</guid>
  <pubDate>Wed, 06 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Rerunning Enformer pipeline on missing individuals, intervals</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/debugging.html</link>
  <description><![CDATA[ 




<section id="split-by-number-missing" class="level3">
<h3 class="anchored" data-anchor-id="split-by-number-missing">Split by Number Missing</h3>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="266">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Br_predictions/predictions_folder/personalized_Br_selected_genes/predictions_2023-09-02/enformer_predictions"</span></span>
<span id="cb2-2">successful_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(predictions_dir):</span>
<span id="cb2-4">    n_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(os.listdir(os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype0"</span>)))</span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">868</span>:</span>
<span id="cb2-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n_intervals <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> successful_predictions.keys():</span>
<span id="cb2-7">            successful_predictions[n_intervals] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [individual]</span>
<span id="cb2-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-9">            successful_predictions[n_intervals].append(individual)</span>
<span id="cb2-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n_intervals <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> successful_predictions.keys():</span>
<span id="cb2-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n individuals with"</span>, n_intervals, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predictions:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(successful_predictions[n_intervals]))</span>
<span id="cb2-12"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="257">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata/intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    all_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span></code></pre></div>
</div>
</section>
<section id="write-metadata" class="level2">
<h2 class="anchored" data-anchor-id="write-metadata">Write Metadata</h2>
<div class="cell" data-execution_count="258">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, n_intervals <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(successful_predictions.keys()):</span>
<span id="cb4-2">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> successful_predictions[n_intervals]</span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"metadata/individuals</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-4">        f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(individuals))</span>
<span id="cb4-5">    individual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-6">    files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.listdir(os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype0"</span>))</span>
<span id="cb4-7">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_predictions.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> files]</span>
<span id="cb4-8">    missing_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [interval <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> interval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> all_intervals <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> interval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> intervals]</span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"metadata/intervals</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-10">        f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(missing_intervals))</span></code></pre></div>
</div>
</section>
<section id="write-config-files" class="level2">
<h2 class="anchored" data-anchor-id="write-config-files">Write Config Files</h2>
<div class="cell" data-execution_count="259">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"personalized_config.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> input_json:</span>
<span id="cb5-4">    parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(input_json)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, n_intervals <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(successful_predictions.keys()):</span>
<span id="cb5-7">    parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/metadata/individuals</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt"</span></span>
<span id="cb5-8">    parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"interval_list_file"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/metadata/intervals</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt"</span></span>
<span id="cb5-9">    parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_individuals"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(successful_predictions[n_intervals])</span>
<span id="cb5-10">    parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"batch_individuals"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb5-11">    parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_regions"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">868</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_intervals</span>
<span id="cb5-12">    parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"batch_regions"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb5-13">    parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-09-02"</span></span>
<span id="cb5-14">    parameters[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parsl_parameters"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"walltime"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"00:30:00"</span></span>
<span id="cb5-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"personalized_config</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output_json:</span>
<span id="cb5-16">        json.dump(parameters, output_json, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
</section>
<section id="run-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="run-pipeline">Run Pipeline</h2>
<pre><code>module load conda
conda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools

for i in {0..2}; do
    python /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/personalized_config${i}.json &amp;
    sleep 20
done</code></pre>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/debugging.html</guid>
  <pubDate>Sat, 02 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Comparing human and rat reference gene expression</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-01-comparing-human-vs-rat-mean-expression-across-genes/index.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## read rat observed gene expression data</span></span>
<span id="cb2-2">rat_tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>)</span>
<span id="cb2-3">rat_mean_tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rat_tpm.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:].mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-4">rat_mean_tpm.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rat mean tpm"</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_145300/1109491104.py:2: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.
  rat_tpm = pd.read_csv("/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed", sep="\t", header=0, index_col='gene_id')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## read human gene expression data</span></span>
<span id="cb4-2">human_tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/gene_tpm_2017-06-05_v8_brain_cortex.gct.gz"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-3">human_tpm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_tpm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb4-4">human_tpm.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate average gene expression</span></span>
<span id="cb4-6">human_mean_tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_tpm.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Description'</span>]).mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-7">human_mean_tpm.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human mean tpm"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ortho_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt"</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb5-2">ortho_genes.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">hsapiens_homolog_ensembl_gene</th>
<th data-quarto-table-cell-role="th">external_gene_name</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">ensembl_gene_id</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000033395</td>
<td>ENSG00000174937</td>
<td>Or5m3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSRNOG00000070901</td>
<td>ENSG00000167378</td>
<td>Irgq</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000031391</td>
<td>ENSG00000213892</td>
<td>Ceacam16</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSRNOG00000050129</td>
<td>ENSG00000164520</td>
<td>AABR07000137.1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000056886</td>
<td>ENSG00000199095</td>
<td>Mir291b</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ortho_genes.join(rat_mean_tpm, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>)</span>
<span id="cb6-2">merged_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hsapiens_homolog_ensembl_gene"</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-3">expr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df.join(human_mean_tpm)</span>
<span id="cb6-4">expr_df.corr()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">rat mean tpm</th>
<th data-quarto-table-cell-role="th">human mean tpm</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">rat mean tpm</td>
<td>1.000000</td>
<td>0.886398</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">human mean tpm</td>
<td>0.886398</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df.corr().iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-2">plt.scatter(expr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rat mean tpm"</span>], expr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human mean tpm"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb7-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rat mean tpm'</span>)</span>
<span id="cb7-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human mean tpm'</span>)</span>
<span id="cb7-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlation between observed human and observed rat reference gene expression'</span>)</span>
<span id="cb7-6">plt.legend()</span>
<span id="cb7-7">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-01-comparing-human-vs-rat-mean-expression-across-genes/index_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-01-comparing-human-vs-rat-mean-expression-across-genes/index.html</guid>
  <pubDate>Fri, 01 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Personalized Prediction Correlations for 868 rn7 genes</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index.html</link>
  <description><![CDATA[ 




<p>We ran the personalized Enformer pipeline 868 genes for high variation in Br rats and number of eQTLs. There are too many predictions to concatenate iteratively, so I wrote <a href="collect_predictions.py">collect_predictions.py</a> to parallelize in a submitted job.</p>
<p>Note: This script appends predictions to the h5 in parallel, I first initialized the h5 file with individuals list to be paired with all gene expression datasets.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Br_predictions/predictions_folder/personalized_Br_selected_genes"</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">obs_gene_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/selected_genes_mouse_and_human_predictions.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.attrs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obs_gene_expr.columns.to_list()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:]</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-10">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span></code></pre></div>
</details>
</div>
<p>After my parsl job was stuck in the queue for two days, I decided to forgo parsl and append the predictions from the login node. This took many interrupted attempts, but was sadly the better option. The non-parallelized code is below:</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#### LIBRARIES AND DEFINITIONS</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb2-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/Br_predictions/predictions_folder/personalized_Br_selected_genes"</span></span>
<span id="cb2-6">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/predictions_2023-09-02/enformer_predictions"</span></span>
<span id="cb2-7">obs_gene_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>)</span>
<span id="cb2-8">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geneId'</span>)</span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#### GET LIST OF GENES</span></span>
<span id="cb2-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"gene_list.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-11">    gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read().splitlines()</span>
<span id="cb2-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genes with enformer predictions"</span>)</span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#### JOIN WITH ENFORMER PREDICTIONS FUNCTION</span></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> collect_predictions(gene):</span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/selected_genes_mouse_and_human_predictions.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output_file:</span>
<span id="cb2-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output_file.keys():</span>
<span id="cb2-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### INITIALIZE EXPRESSION MATRIX WITH OBSERVED DATA</span></span>
<span id="cb2-18">            expr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>: obs_gene_expr.loc[gene][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:].astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"float32"</span>)})    </span>
<span id="cb2-19"></span>
<span id="cb2-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### READ PREDICTIONS</span></span>
<span id="cb2-21">            gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot_df.loc[gene]</span>
<span id="cb2-22">            interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-23">            human_predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-24">            mouse_predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> expr_df.index:</span>
<span id="cb2-26">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>predictions_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>individual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/haplotype0/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> input_file:</span>
<span id="cb2-27">                    human_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_file[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">446</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4980</span>]</span>
<span id="cb2-28">                    mouse_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_file[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">446</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1300</span>]</span>
<span id="cb2-29">                    human_predicted.append(np.average(human_prediction))</span>
<span id="cb2-30">                    mouse_predicted.append(np.average(mouse_prediction))</span>
<span id="cb2-31">            </span>
<span id="cb2-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### JOIN IN DATAFRAME</span></span>
<span id="cb2-33">            expr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human predicted"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_predicted</span>
<span id="cb2-34">            expr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse predicted"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mouse_predicted</span>
<span id="cb2-35">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### WRITE TO h5</span></span>
<span id="cb2-36">            output_file[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df</span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#### JOIN CONCURRENTLY ACROSS GENES</span></span>
<span id="cb2-38"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb2-39">    collect_predictions(gene)</span>
<span id="cb2-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Finished writing expression matrices for"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genes"</span>)</span></code></pre></div>
</details>
</div>
<section id="read-processed-predictions" class="level2">
<h2 class="anchored" data-anchor-id="read-processed-predictions">Read Processed Predictions</h2>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb3-6">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/Br_predictions/predictions_folder/personalized_Br_selected_genes"</span></span>
<span id="cb3-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"gene_list.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb3-8">    gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read().splitlines()</span>
<span id="cb3-9">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/selected_genes_mouse_and_human_predictions.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb3-11">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.attrs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>]</span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.keys():</span>
<span id="cb3-13">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[gene][:]</span>
<span id="cb3-14">        expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(matrix, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human predicted"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse predicted"</span>])</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">pearson_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb4-2">pearson_pval_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb4-4">    human_corr, human_pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human predicted"</span>])</span>
<span id="cb4-5">    mouse_corr, mouse_pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse predicted"</span>])</span>
<span id="cb4-6">    pearson_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [human_corr, mouse_corr]</span>
<span id="cb4-7">    pearson_pval_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [human_pval, mouse_pval]</span>
<span id="cb4-8">    </span>
<span id="cb4-9"></span>
<span id="cb4-10">spearman_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb4-11">spearman_pval_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb4-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb4-13">    human_corr, human_pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human predicted"</span>])</span>
<span id="cb4-14">    mouse_corr, mouse_pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse predicted"</span>])</span>
<span id="cb4-15">    spearman_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [human_corr, mouse_corr]</span>
<span id="cb4-16">    spearman_pval_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [human_pval, mouse_pval]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>/soft/datascience/conda/2022-09-08/mconda3/lib/python3.8/site-packages/scipy/stats/_stats_py.py:4424: ConstantInputWarning: An input array is constant; the correlation coefficient is not defined.
  warnings.warn(stats.ConstantInputWarning(msg))
/soft/datascience/conda/2022-09-08/mconda3/lib/python3.8/site-packages/scipy/stats/_stats_py.py:4878: ConstantInputWarning: An input array is constant; the correlation coefficient is not defined.
  warnings.warn(stats.ConstantInputWarning(warn_msg))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">pearson_corr_human <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pearson r"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pvalue"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb6-2">pearson_corr_mouse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pearson r"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pvalue"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb6-4">    human_corr, human_pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human predicted"</span>])</span>
<span id="cb6-5">    mouse_corr, mouse_pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse predicted"</span>])</span>
<span id="cb6-6">    pearson_corr_human.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [human_corr, human_pval]</span>
<span id="cb6-7">    pearson_corr_mouse.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [mouse_corr, mouse_pval]</span>
<span id="cb6-8">    </span>
<span id="cb6-9">spearman_corr_human <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman r"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pvalue"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb6-10">spearman_corr_mouse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman r"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pvalue"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb6-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb6-12">    human_corr, human_pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human predicted"</span>])</span>
<span id="cb6-13">    mouse_corr, mouse_pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse predicted"</span>])</span>
<span id="cb6-14">    spearman_corr_human.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [human_corr, human_pval]</span>
<span id="cb6-15">    spearman_corr_mouse.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [mouse_corr, mouse_pval]</span>
<span id="cb6-16">pearson_corr_human.dropna().to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_pearson_corr_human.csv"</span>)</span>
<span id="cb6-17">pearson_corr_mouse.dropna().to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_pearson_corr_mouse.csv"</span>)</span>
<span id="cb6-18">spearman_corr_human.dropna().to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_spearman_corr_human.csv"</span>)</span>
<span id="cb6-19">spearman_corr_mouse.dropna().to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_spearman_corr_mouse.csv"</span>)</span>
<span id="cb6-20">    </span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>/soft/datascience/conda/2022-09-08/mconda3/lib/python3.8/site-packages/scipy/stats/_stats_py.py:4424: ConstantInputWarning: An input array is constant; the correlation coefficient is not defined.
  warnings.warn(stats.ConstantInputWarning(msg))
/soft/datascience/conda/2022-09-08/mconda3/lib/python3.8/site-packages/scipy/stats/_stats_py.py:4878: ConstantInputWarning: An input array is constant; the correlation coefficient is not defined.
  warnings.warn(stats.ConstantInputWarning(warn_msg))</code></pre>
</div>
</div>
<p>ENSRNOG00000053502 is the only gene with NaN correlations, so we can still plot results from 867 genes.</p>
<div class="cell" data-execution_count="37">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">pearson_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pearson_corr_by_gene.dropna().astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb8-2">spearman_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene.dropna().astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span></code></pre></div>
</details>
</div>
<section id="plot-genome-wide-correlations" class="level3">
<h3 class="anchored" data-anchor-id="plot-genome-wide-correlations">Plot Genome-wide Correlations</h3>
<div class="cell" data-execution_count="31">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot a histogram</span></span>
<span id="cb9-2">plt.hist(pearson_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb9-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations between Enformer human head predictions and observed expression for 868 genes'</span>)</span>
<span id="cb9-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pearson Correlations'</span>)</span>
<span id="cb9-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb9-6">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(pearson_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>])</span>
<span id="cb9-7">plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-8">plt.legend()</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb9-11">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="32">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot a histogram</span></span>
<span id="cb10-2">plt.hist(pearson_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb10-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations between Enformer mouse head predictions and observed expression for 868 genes'</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pearson Correlations'</span>)</span>
<span id="cb10-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb10-7"></span>
<span id="cb10-8">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(pearson_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>])</span>
<span id="cb10-9">plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-10">plt.legend()</span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb10-13">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="33">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot a histogram</span></span>
<span id="cb11-2">plt.hist(spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb11-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations between Enformer human head predictions and observed expression for 868 genes'</span>)</span>
<span id="cb11-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spearman Correlations'</span>)</span>
<span id="cb11-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb11-6">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>])</span>
<span id="cb11-7">plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-8">plt.legend()</span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb11-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="35">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot a histogram</span></span>
<span id="cb12-2">plt.hist(spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb12-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations between Enformer mouse head predictions and observed expression for 868 genes'</span>)</span>
<span id="cb12-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spearman Correlations'</span>)</span>
<span id="cb12-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb12-6">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>])</span>
<span id="cb12-7">plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-8">plt.legend()</span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb12-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="compare-human-and-mouse-model-correlations" class="level3">
<h3 class="anchored" data-anchor-id="compare-human-and-mouse-model-correlations">Compare Human and Mouse Model Correlations</h3>
<div class="cell" data-execution_count="39">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit a linear regression line to the data (calculate slope)</span></span>
<span id="cb13-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>].values</span>
<span id="cb13-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>].values</span>
<span id="cb13-4">slope, intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.polyfit(x, y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the plot</span></span>
<span id="cb13-6">plt.scatter(x, y, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Genes'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb13-7">plt.plot(x, slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> intercept, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Best Fit Line: y = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slope<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">x + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>intercept<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-8">plt.plot(x, x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'One-to-One Line'</span>)</span>
<span id="cb13-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted vs Observed Spearman Correlations "</span>)</span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and legend</span></span>
<span id="cb13-11">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Human Head'</span>)</span>
<span id="cb13-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mouse Head'</span>)</span>
<span id="cb13-13">plt.legend()</span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb13-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="54">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">human_sign_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_pval_by_gene.index[spearman_pval_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">868</span>]</span>
<span id="cb14-2">mouse_sign_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_pval_by_gene.index[spearman_pval_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">868</span>]</span>
<span id="cb14-3">human_unique <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_sign_genes.difference(mouse_sign_genes)</span>
<span id="cb14-4">mouse_unique <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mouse_sign_genes.difference(human_sign_genes)</span>
<span id="cb14-5">overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> human_sign_genes.intersection(mouse_sign_genes)</span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data for the bar chart</span></span>
<span id="cb14-7">categories <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Overlap'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unique to Human'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unique to mouse'</span>]</span>
<span id="cb14-8">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(overlap), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(human_unique), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mouse_unique)]</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the bar chart</span></span>
<span id="cb14-11">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb14-12">bars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.bar(categories, counts, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb14-13">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model'</span>)</span>
<span id="cb14-14">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Counts'</span>)</span>
<span id="cb14-15">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Genes with Significant Prediction Performance'</span>)</span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add numbers over each bar</span></span>
<span id="cb14-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bar, count <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(bars, counts):</span>
<span id="cb14-19">    plt.text(bar.get_x() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bar.get_width() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, bar.get_height() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(count), ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>)</span>
<span id="cb14-20"></span>
<span id="cb14-21">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="plot-predicted-vs-observed-expression" class="level3">
<h3 class="anchored" data-anchor-id="plot-predicted-vs-observed-expression">Plot Predicted vs Observed Expression</h3>
<p>First, we’ll plot the best and worst genes, and then a random sample.</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_pearson_corr(gene):</span>
<span id="cb15-2">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pearson_corr_by_gene.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>]</span>
<span id="cb15-3">    plt.scatter(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human predicted"</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-4"></span>
<span id="cb15-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb15-6">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>)</span>
<span id="cb15-7">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>)</span>
<span id="cb15-8">    plt.title(gene)</span>
<span id="cb15-9"></span>
<span id="cb15-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb15-11">    plt.legend()</span>
<span id="cb15-12">    plt.show()</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_spearman_corr(gene):</span>
<span id="cb15-15">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>]</span>
<span id="cb15-16">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human predicted"</span>]</span>
<span id="cb15-17">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(x, y)</span>
<span id="cb15-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.scatter(x, y, marker='o', color='blue', label=f"Correlation: {corr:.3f}\nP-value: {pval}")</span></span>
<span id="cb15-19">    plt.scatter(stats.rankdata(x), stats.rankdata(y), marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-20"></span>
<span id="cb15-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb15-22">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed Ranks'</span>)</span>
<span id="cb15-23">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted Ranks'</span>)</span>
<span id="cb15-24">    plt.title(gene)</span>
<span id="cb15-25"></span>
<span id="cb15-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb15-27">    plt.legend()</span>
<span id="cb15-28">    plt.show()</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pearson_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>].idxmax()</span>
<span id="cb16-2">plot_pearson_corr(gene)</span></code></pre></div>
</details>
<div class="cell-output cell-output-error">
<pre><code>NameError: name 'pearson_corr_by_gene' is not defined</code></pre>
</div>
</div>
<div class="cell" data-execution_count="46">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pearson_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>].idxmin()</span>
<span id="cb18-2">plot_pearson_corr(gene)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="51">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>].idxmax()</span>
<span id="cb19-2">plot_spearman_corr(gene)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="52">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>].idxmin()</span>
<span id="cb20-2">plot_spearman_corr(gene)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="53">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">gene_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pearson_corr_by_gene.sample(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).index</span>
<span id="cb21-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_sample:</span>
<span id="cb21-3">    plot_pearson_corr(gene)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-19-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index_files/figure-html/cell-19-output-3.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/index.html</guid>
  <pubDate>Fri, 01 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Investigating the various CAGE brain tissue mouse tracks</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-01-selecting-mouse-track-for-CAGE-brain-prediction/index.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## subset to all brain-specific CAGE targets</span></span>
<span id="cb2-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_mouse.txt"</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-3">CAGE_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets[targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>].isin([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6612</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6613</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6622</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6627</span>])]</span>
<span id="cb2-4">track_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(CAGE_targets.index)</span>
<span id="cb2-5">CAGE_targets.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">genome</th>
<th data-quarto-table-cell-role="th">identifier</th>
<th data-quarto-table-cell-role="th">file</th>
<th data-quarto-table-cell-role="th">clip</th>
<th data-quarto-table-cell-role="th">scale</th>
<th data-quarto-table-cell-role="th">sum_stat</th>
<th data-quarto-table-cell-role="th">description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1299</td>
<td>6612</td>
<td>1</td>
<td>CNhs10477</td>
<td>/home/drk/tillage/datasets/mouse/cage/fantom/C...</td>
<td>384</td>
<td>1</td>
<td>sum</td>
<td>CAGE:medulla oblongata, adult</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1300</td>
<td>6613</td>
<td>1</td>
<td>CNhs10478</td>
<td>/home/drk/tillage/datasets/mouse/cage/fantom/C...</td>
<td>384</td>
<td>1</td>
<td>sum</td>
<td>CAGE:hippocampus, adult</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1309</td>
<td>6622</td>
<td>1</td>
<td>CNhs10489</td>
<td>/home/drk/tillage/datasets/mouse/cage/fantom/C...</td>
<td>384</td>
<td>1</td>
<td>sum</td>
<td>CAGE:olfactory brain, adult</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1314</td>
<td>6627</td>
<td>1</td>
<td>CNhs10494</td>
<td>/home/drk/tillage/datasets/mouse/cage/fantom/C...</td>
<td>384</td>
<td>1</td>
<td>sum</td>
<td>CAGE:cerebellum, adult</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Br_predictions/predictions_folder/personalized_Br_selected_genes/predictions_2023-09-01/enformer_predictions"</span></span>
<span id="cb3-2">gene_expr_bed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed"</span></span>
<span id="cb3-3">obs_gene_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(gene_expr_bed, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>)</span>
<span id="cb3-4">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geneId'</span>)</span>
<span id="cb3-5">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000060185"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000022448"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000006331"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000000435"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000001336"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000016623"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000025324"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000012087"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000021663"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000012333"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_120274/1359220184.py:3: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.
  obs_gene_expr = pd.read_csv(gene_expr_bed, sep="\t", header=0, index_col='gene_id')
/tmp/ipykernel_120274/1359220184.py:4: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.
  annot_df = pd.read_csv("/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt", sep="\t", header= 0, index_col='geneId')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb5-3">    obs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obs_gene_expr.loc[gene][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span>
<span id="cb5-4">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>: obs})</span>
<span id="cb5-5">            </span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb6-3">    gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot_df.loc[gene]</span>
<span id="cb6-4">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-5">    medulla_oblongata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-6">    hippocampus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-7">    olfactory_brain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-8">    cerebellum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> expr_dict[gene].index:</span>
<span id="cb6-10">        haplo0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>predictions_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>individual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/haplotype0/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>)</span>
<span id="cb6-11">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo0[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">446</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, track_indices]</span>
<span id="cb6-12">        medulla_oblongata.append(np.average(predictions[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb6-13">        hippocampus.append(np.average(predictions[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb6-14">        olfactory_brain.append(np.average(predictions[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span>
<span id="cb6-15">        cerebellum.append(np.average(predictions[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]))</span>
<span id="cb6-16">    expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medulla oblongata"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> medulla_oblongata</span>
<span id="cb6-17">    expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hippocampus"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hippocampus</span>
<span id="cb6-18">    expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"olfactory brain"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> olfactory_brain</span>
<span id="cb6-19">    expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cerebellum"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cerebellum</span></code></pre></div>
</div>
<div class="cell" data-execution_count="131">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">corr_by_gene_and_track <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medulla oblongata"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hippocampus"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"olfactory brain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cerebellum"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb7-4">    corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[gene].corr()</span>
<span id="cb7-5">    corr_by_gene_and_track.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(corr_df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb7-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(corr_by_gene_and_track)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   medulla oblongata hippocampus olfactory brain cerebellum
ENSRNOG00000060185          0.340841    0.339026        0.340439   0.338799
ENSRNOG00000022448          0.176105    0.183011        0.179076   0.176374
ENSRNOG00000006331          0.284351    0.326806        0.327064    0.32246
ENSRNOG00000000435          0.212012    0.233529        0.171748   0.097784
ENSRNOG00000001336          0.550703    0.540987         0.54114   0.551966
ENSRNOG00000016623          0.060619    0.170785        0.153715  -0.109455
ENSRNOG00000025324         -0.315003   -0.223645       -0.240727  -0.174633
ENSRNOG00000012087          0.285358    0.309409        0.312098   0.312001
ENSRNOG00000021663         -0.325343   -0.430207       -0.426303  -0.014811
ENSRNOG00000012333         -0.081875    0.098419        0.077553   0.038098</code></pre>
</div>
</div>
<p>Based off a row-wise look at the table, I’ve decided to use the CAGE:hippocampus mouse track as a representative of brain tissue.</p>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-01-selecting-mouse-track-for-CAGE-brain-prediction/index.html</guid>
  <pubDate>Fri, 01 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Running personalized Enformer pipeline on Br rats for many more genes</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/pipeline.html</link>
  <description><![CDATA[ 




<section id="selecting-genes" class="level2">
<h2 class="anchored" data-anchor-id="selecting-genes">Selecting Genes</h2>
<p>We are aiming for ~1,000 genes at the end of the selection process</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed"</span>, header <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,  index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>)</span>
<span id="cb2-2">tpm_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tpm.iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:].var(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-3">tpm_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tpm_var.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## subset of genes with high observed expression variation</span></span>
<span id="cb2-5">high_tpm_var_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tpm[tpm_var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> tpm_threshold].index)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_14438/1587770446.py:1: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.
  tpm = pd.read_csv("/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed", header = 0, sep="\t",  index_col= 'gene_id')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">eqtl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/Brain.rn7.cis_qtl_signif.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-2">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eqtl[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>].value_counts()</span>
<span id="cb4-3">counts.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>count    11238.000000
mean      2312.935398
std       1490.079008
min          1.000000
25%       1160.250000
50%       2236.000000
75%       3277.750000
max      10799.000000
Name: gene_id, dtype: float64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">eqtl_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb6-2">eqtl_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts[counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> eqtl_threshold].index</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> high_tpm_var_genes.intersection(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(eqtl_genes))</span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"candidate genes for enformer prediction experiments"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>868 candidate genes for enformer prediction experiments</code></pre>
</div>
</div>
</section>
<section id="run-the-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="run-the-pipeline">Run the Pipeline</h2>
<section id="write-metadata" class="level3">
<h3 class="anchored" data-anchor-id="write-metadata">Write Metadata</h3>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## write intervals.txt</span></span>
<span id="cb9-2">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,  index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geneId'</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_intervals(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>):</span>
<span id="cb9-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb9-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb9-7">            gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot_df.loc[gene]</span>
<span id="cb9-8">            tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb9-9">            interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-10">            f.write(interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_14438/1105297742.py:2: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.
  annot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\t',  index_col='geneId')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene_list.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb11-2">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(gene_list))</span>
<span id="cb11-3">write_intervals(gene_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata/intervals.txt"</span>)</span></code></pre></div>
</div>
</section>
<section id="submit-jobs" class="level3">
<h3 class="anchored" data-anchor-id="submit-jobs">Submit Jobs</h3>
<pre><code>module load conda
conda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools

python /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/personalized_config.json

</code></pre>
</section>
<section id="submit-jobs-1" class="level3">
<h3 class="anchored" data-anchor-id="submit-jobs-1">Submit Jobs</h3>
<pre><code>module load conda
conda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools

python /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/personalized_config.json
</code></pre>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/pipeline.html</guid>
  <pubDate>Thu, 31 Aug 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Testing the Enformer pipeline option to output both human and mouse head together</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-testing-multiple-heads-in-pipeline/index.html</link>
  <description><![CDATA[ 




<section id="personalized-test" class="level2">
<h2 class="anchored" data-anchor-id="personalized-test">Personalized Test</h2>
<p>We chose <code>ENSRNOG00000054549</code>, centered at the TSS chr20:12118762.</p>
<p>Highthroughput on polaris:</p>
<pre><code>module load conda
conda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools

python /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-testing-multiple-heads-in-pipeline/local_test_personalized.json
</code></pre>
<p>Local:</p>
<pre><code>conda activate enformer-predict-tools
python /Users/sabrinami/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /Users/sabrinami/Github/deep-learning-in-genomics/posts/2023-08-31-testing-multiple-heads-in-pipeline/local_test_personalized2.json
</code></pre>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-3">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/predictions_folder/personalized_enformer_rat_single_gene/predictions_2023-08-31/enformer_predictions/000789972A/haplotype0/chr20_12118762_12118762_predictions.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>)</span>
<span id="cb3-4">human_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][()]</span>
<span id="cb3-5">mouse_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mouse'</span>][()]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EnformerVCF</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq</span>
<span id="cb4-3">fasta_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/rn7_genome.fasta'</span></span>
<span id="cb4-4">fasta_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerVCF.FastaStringExtractor(fasta_file)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr20"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12118762</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12118762</span>)</span>
<span id="cb5-2">chr20_vcf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerVCF.read_vcf(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/chr20.vcf.gz"</span>)</span>
<span id="cb5-3">haplo1, haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerVCF.vcf_to_seq(target_interval, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000789972A'</span>, chr20_vcf, fasta_extractor)</span>
<span id="cb5-4">haplo1_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerVCF.one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo1))[np.newaxis]</span>
<span id="cb5-5">haplo2_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerVCF.one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo2))[np.newaxis]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">mean_haplo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2_enc) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-2">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerVCF.model.predict_on_batch(mean_haplo)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(human_prediction)</span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[0.23258275 0.2962714  0.52013165 ... 0.19615567 1.1101408  0.25560504]
 [0.15570731 0.20205402 0.3755348  ... 0.04365927 0.24989623 0.08517855]
 [0.1536611  0.21689793 0.4510562  ... 0.05227472 0.2147567  0.08478698]
 ...
 [0.1794057  0.22463816 0.29514343 ... 0.01105995 0.02652512 0.03385386]
 [0.1694869  0.20448665 0.26207498 ... 0.01688805 0.04071837 0.06028533]
 [0.15269741 0.20196484 0.22278813 ... 0.02438667 0.03900523 0.05988767]]
[[0.23258275 0.2962714  0.52013165 ... 0.19615567 1.1101408  0.25560504]
 [0.15570731 0.20205402 0.3755348  ... 0.04365927 0.24989623 0.08517855]
 [0.1536611  0.21689793 0.4510562  ... 0.05227472 0.2147567  0.08478698]
 ...
 [0.1794057  0.22463816 0.29514343 ... 0.01105995 0.02652512 0.03385386]
 [0.1694869  0.20448665 0.26207498 ... 0.01688805 0.04071837 0.06028533]
 [0.15269741 0.20196484 0.22278813 ... 0.02438667 0.03900523 0.05988767]]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"There are"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(human_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"differences between the human heads and"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(mouse_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mouse'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"differences in the mouse heads."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>There are 0 differences between the human heads and 0 differences in the mouse heads.</code></pre>
</div>
</div>
</section>
<section id="reference-test" class="level2">
<h2 class="anchored" data-anchor-id="reference-test">Reference Test</h2>
<pre><code>conda activate enformer-predict-tools

python /Users/sabrinami/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /Users/sabrinami/Github/deep-learning-in-genomics/posts/2023-08-31-testing-multiple-heads-in-pipeline/local_test_reference.json
</code></pre>
<section id="check-predictions" class="level3">
<h3 class="anchored" data-anchor-id="check-predictions">Check Predictions</h3>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb12-2">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/predictions_folder/reference_enformer_rat_single_gene/predictions_2023-08-31/enformer_predictions/reference_enformer_rat/haplotype0/chr20_12118762_12118762_predictions.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>)</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq </span>
<span id="cb12-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kipoiseq <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Interval</span>
<span id="cb12-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EnformerVCF</span>
<span id="cb12-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb12-7">fasta_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/rn7_genome.fasta'</span></span>
<span id="cb12-8">fasta_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerVCF.FastaStringExtractor(fasta_file)</span>
<span id="cb12-9">human_prediction1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][()]</span>
<span id="cb12-10">mouse_prediction1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mouse'</span>][()]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">SEQUENCE_LENGTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">393216</span></span>
<span id="cb13-2">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr20"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12118762</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12118762</span>)</span>
<span id="cb13-3">sequence_one_hot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerVCF.one_hot_encode(fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH)))</span>
<span id="cb13-4">output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerVCF.model.predict_on_batch(sequence_one_hot[np.newaxis])</span>
<span id="cb13-5">mouse_prediction2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mouse'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb13-6">human_prediction2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"There are"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(human_prediction1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> human_prediction2)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"differences between human predictions and"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(human_prediction1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> human_prediction2)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"differences between mouse predictions."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>There are 0 differences between human predictions and 0 differences between mouse predictions.</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-08-31-testing-multiple-heads-in-pipeline/index.html</guid>
  <pubDate>Thu, 31 Aug 2023 07:00:00 GMT</pubDate>
</item>
</channel>
</rss>
