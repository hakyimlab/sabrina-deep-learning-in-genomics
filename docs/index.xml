<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>deep-learning-in-genomics</title>
<link>https://sabrinami.quarto.pub/deep-learning-in-genomics/index.html</link>
<atom:link href="https://sabrinami.quarto.pub/deep-learning-in-genomics/index.xml" rel="self" type="application/rss+xml"/>
<description>Sabrina&#39;s blog for Deep Learning in Genomics course</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Mon, 26 Jun 2023 05:00:00 GMT</lastBuildDate>
<item>
  <title>Getting started on Polaris</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/polaris-intro/index.html</link>
  <description><![CDATA[ 




<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>More info can be found on:</p>
<ul>
<li><a href="https://docs.alcf.anl.gov/polaris/getting-started/">Main Page</a></li>
<li><a href="https://docs.alcf.anl.gov/running-jobs/example-job-scripts/">Example Job Scripts</a></li>
</ul>
</section>
<section id="shortcuts" class="level2">
<h2 class="anchored" data-anchor-id="shortcuts">Shortcuts</h2>
<ul>
<li>Login: <code>ssh s1mi@polaris.alcf.anl.gov</code></li>
<li>Main project storage: <code>/lus/grand/projects/TFXcan</code></li>
<li>Interactive Job: <code>qsub -I -A TFXcan -l select=1 -l filesystems=home:grand -l walltime=1:00:00 -q debug</code></li>
</ul>
</section>
<section id="basic-job-script" class="level2">
<h2 class="anchored" data-anchor-id="basic-job-script">Basic Job Script</h2>
<pre><code>#!/bin/bash
#PBS -A $PROJECT
#PBS -lwalltime=01:00:00
#PBS -lselect=4
#PBS -lsystem=polaris
#PBS -lfilesystems=home:eagle

rpn=4 # assume 1 process per GPU
procs=$((PBS_NODES*rpn))

# job to “run” from your submission directory
cd $PBS_O_WORKDIR

module load &lt;something&gt;

set +x # report all commands to stderr
env
mpiexec -n $procs -ppn $rpn --cpu-bind core -genvall ./bin &lt;opts&gt;
</code></pre>
</section>
<section id="conda-environments" class="level2">
<h2 class="anchored" data-anchor-id="conda-environments">Conda Environments</h2>
<p>Before activating and deactivating environments, we need to run <code>module load conda</code>.</p>
<p>To create an environment:</p>
<pre><code>module load conda

export http_proxy=http://proxy.alcf.anl.gov:3128
export https_proxy=$http_proxy

conda create -n ml-python python=3.10
conda activate ml-python
conda install -y jupyter nb_conda ipykernel mpi
conda install -y pytorch torchvision -c pytorch
conda install -c conda-forge tensorflow
python -m ipykernel install --user --name ml-python</code></pre>
<p>The last line creates a new directory <code>~/.local/share/jupyter/kernels/ml-python</code>. We add a couple lines to <code>kernel.json</code> so that we can use the new environment in the our Jupyter notebooks:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"argv"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/.conda/envs/ml-python/bin/python"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-m"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ipykernel_launcher"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-f"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{connection_file}"</span></span>
<span id="cb3-8">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"display_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ml-python"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"language"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"env"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"CONDA_PREFIX"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/.conda/envs/ml-python"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"PATH"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/.conda/envs/ml-python"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"http_proxy"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://proxy.alcf.anl.gov:3128"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"https_proxy"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://proxy.alcf.anl.gov:3128"</span></span>
<span id="cb3-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metadata"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"debugger"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/polaris-intro/index.html</guid>
  <pubDate>Mon, 26 Jun 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Week 1</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/week-1/index.html</link>
  <description><![CDATA[ 




<p>Here’s my notes from the <a href="https://www.w3schools.com/python/numpy/numpy_intro.asp">w3 NumPy tutorial</a>:</p>
<section id="data-types-in-numpy" class="level2">
<h2 class="anchored" data-anchor-id="data-types-in-numpy">Data Types in Numpy:</h2>
<p>By default, Python has strings, integer, float, boolean, and complex. NumPy has extra data types:</p>
<ul>
<li>i: integer</li>
<li>b: boolean</li>
<li>u: unsigned integer</li>
<li>f: float</li>
<li>c: complex float</li>
<li>m: timedelta</li>
<li>M: datetime</li>
<li>O: object</li>
<li>S: string</li>
<li>U: unicode string</li>
<li>V: void</li>
</ul>
</section>
<section id="pytorch-notes" class="level1">
<h1>PyTorch Notes</h1>
<p>PyTorch is a machine learning framework leveraging two key features:</p>
<ul>
<li>Tensor computing on GPUs</li>
<li>Deep neural networks on an automatic differentiation engine</li>
</ul>
<p>Deep learning softwares including Enformer are built on top of PyTorch.</p>
<p>We covered the basics of the pytorch library in Python, starting with <a href="https://pytorch.org/tutorials/beginner/blitz/tensor_tutorial.html">Tensors</a>. Tensors function very similarly to NumPy arrays, but the operations can be run on GPUs. As a result, the tensor operations have counterparts in the numpy library.</p>
<p>We’ll only write about new concepts:</p>
<section id="tensors" class="level3">
<h3 class="anchored" data-anchor-id="tensors">Tensors</h3>
<p>By default, tensors are intialized on CPU. To move a tensor from CPU to GPU, we run:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]]</span>
<span id="cb1-5">x_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(data)</span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[1, 2],
        [3, 4]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available():</span>
<span id="cb3-2">  tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span>
<span id="cb3-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Device tensor is stored on: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>Tensors on the CPU and NumPy arrays can share their underlying memory locations, and changing one will change the other.</p>
<p>Below we convert a torch tensor to numpy array and add 1 to every element.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"t: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-3">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.numpy()</span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"n: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">t.add_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"t: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"n: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</section>
<section id="neural-networks" class="level3">
<h3 class="anchored" data-anchor-id="neural-networks">Neural Networks</h3>
<p>We use <code>torch.nn</code> and <code>torch.autograd</code> packages to develop neural networks.</p>
<p>We learned how to compute gradients for backward propagation with <code>torch.autograd</code> automatic differentiation.</p>
<p>We can <code>torch.nn</code> to first define a neural network in a <code>forward</code> function. Next, we chose a loss function, <code>nn.MSELoss</code> and run back prop as before. We update the weights with SGD update rule:</p>
<pre><code>weight = weight - learning_rate * gradient
</code></pre>
<p><code>torch.optim</code> includes various update rules that take parameters and learning rate as input.</p>
<p>We summarize the typical training procedure for a neural network:</p>
<ul>
<li>Define the neural network that has some learnable parameters (or weights)</li>
<li>Iterate over a dataset of inputs</li>
<li>Process input through the network</li>
<li>Compute the loss (how far is the output from being correct)</li>
<li>Propagate gradients back into the network’s parameters</li>
<li>Update the weights of the network, typically using a simple update rule: <code>weight = weight - learning_rate * gradient</code></li>
</ul>
<p>Lastly, we looked at training on the CIFAR-10 dataset. The process involved the same steps as before, but with a more complex network and more iterations in the training process. We also tested the model.</p>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/week-1/index.html</guid>
  <pubDate>Fri, 23 Jun 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Overview of LLM in Molecular Biology article by Serafim Batzoglou</title>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/llm-in-molecular-biology-article/index.html</link>
  <description><![CDATA[ 




<p>Read the paper <a href="https://towardsdatascience.com/large-language-models-in-molecular-biology-9eb6b65d8a30">here</a></p>
<section id="introduction-to-large-language-models" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-large-language-models">Introduction to Large Language Models</h2>
<ul>
<li>Large language models like GPT-3 are trained on extensive text data and excel at generating coherent and contextually relevant text.</li>
<li>These models can be adapted for molecular biology tasks by encoding molecular information and training them on relevant datasets.</li>
</ul>
</section>
<section id="protein-structure-prediction" class="level2">
<h2 class="anchored" data-anchor-id="protein-structure-prediction">Protein Structure Prediction</h2>
<ul>
<li>Large language models can assist in predicting protein structures from amino acid sequences.</li>
<li>Language models can generate plausible protein structures, aiding in protein folding predictions and protein engineering.</li>
<li>Challenges include the vast conformational space and the need for high-quality training data to improve accuracy.</li>
</ul>
</section>
<section id="analyzing-dna-sequences" class="level2">
<h2 class="anchored" data-anchor-id="analyzing-dna-sequences">Analyzing DNA Sequences</h2>
<ul>
<li>Language models can be trained to recognize patterns in DNA sequences and identify regulatory elements.</li>
<li>They can predict the effects of genetic mutations, aiding in understanding genetic diseases and personalized medicine.</li>
<li>Large language models have the potential to improve upon existing methods for DNA sequence analysis.</li>
</ul>
</section>
<section id="molecular-design" class="level2">
<h2 class="anchored" data-anchor-id="molecular-design">Molecular Design</h2>
<ul>
<li>Language models can generate novel molecules with desired properties, contributing to drug discovery and material science.</li>
<li>They can suggest potential compounds based on specified criteria, accelerating the search for new drugs.</li>
<li>Large language models in molecular design can assist in exploring the chemical space and generating molecules that were not previously considered.</li>
</ul>
</section>
<section id="limitations-and-challenges" class="level2">
<h2 class="anchored" data-anchor-id="limitations-and-challenges">Limitations and Challenges</h2>
<ul>
<li>Obtaining high-quality training data for molecular biology tasks remains a challenge.</li>
<li>Interpreting the outputs of language models and understanding the underlying biological mechanisms is essential.</li>
<li>Incorporating domain-specific knowledge into language models is crucial for accurate and reliable results.</li>
</ul>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/llm-in-molecular-biology-article/index.html</guid>
  <pubDate>Tue, 20 Jun 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Tristan O&#39;Malley</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>This is the first post in a Quarto blog. Welcome!</p>
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/welcome/thumbnail.jpg" class="img-fluid"></p>
<p>Since this post doesn’t specify an explicit <code>image</code>, the first image in the post will be used in the listing page of posts.</p>



 ]]></description>
  <category>news</category>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/welcome/index.html</guid>
  <pubDate>Sat, 17 Jun 2023 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
