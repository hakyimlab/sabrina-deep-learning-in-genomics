<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>deep-learning-in-genomics</title>
<link>https://sabrinami.quarto.pub/deep-learning-in-genomics/index.html</link>
<atom:link href="https://sabrinami.quarto.pub/deep-learning-in-genomics/index.xml" rel="self" type="application/rss+xml"/>
<description>Sabrina&#39;s blog for Deep Learning in Genomics course</description>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Thu, 20 Jul 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Comparing Enformer Prediction Averages</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/comparing-enformer-prediction-averages/comparing-averages.html</link>
  <description><![CDATA[ 




<section id="import-libraries" class="level2">
<h2 class="anchored" data-anchor-id="import-libraries">Import Libraries</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure the GPU is enabled </span></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> tf.config.list_physical_devices(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPU'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Start the colab kernel with GPU: Runtime -&gt; Change runtime type -&gt; GPU'</span></span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Num GPUs Available: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tf.config.list_physical_devices(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPU'</span>)))</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hub <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for interacting with saved models and tensorflow hub</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for manipulating compressed files</span></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for manipulating fasta files</span></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kipoiseq <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Interval <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same as above, really</span></span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyfaidx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to index our reference genome file</span></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for manipulating dataframes</span></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for numerical computations</span></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for saving large objects</span></span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, sys <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># functions for interacting with the operating system</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retina'</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2023-07-20 17:12:39.435322: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-07-20 17:12:41.055622: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/opt/cray/pe/gcc/11.2.0/snos/lib64:/opt/cray/pe/papi/6.0.0.14/lib64:/opt/cray/libfabric/1.11.0.4.125/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32:/soft/compilers/cudatoolkit/cuda-11.6.2/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.6.2/lib64:/soft/libraries/trt/TensorRT-8.4.3.1.Linux.x86_64-gnu.cuda-11.6.cudnn8.4/lib:/soft/libraries/nccl/nccl_2.14.3-1+cuda11.6_x86_64/lib:/soft/libraries/cudnn/cudnn-11.6-linux-x64-v8.4.1.50/lib:/opt/cray/pe/gcc/11.2.0/snos/lib64:/opt/cray/pe/papi/6.0.0.14/lib64:/opt/cray/libfabric/1.11.0.4.125/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32:/home/s1mi/.conda/envs/ml-python/lib/:/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/nvidia/cudnn/lib:/home/s1mi/.conda/envs/ml-python/lib/:/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/nvidia/cudnn/lib:/home/s1mi/.conda/envs/ml-python/lib/:/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/nvidia/cudnn/lib:/home/s1mi/.conda/envs/ml-python/lib/:/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/nvidia/cudnn/lib:/home/s1mi/.conda/envs/torch/lib/:/home/s1mi/.conda/envs/torch/lib/python3.10/site-packages/nvidia/cudnn/lib:/home/s1mi/.conda/envs/torch/lib/:/home/s1mi/.conda/envs/torch/lib/python3.10/site-packages/nvidia/cudnn/lib
2023-07-20 17:12:41.060031: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/opt/cray/pe/gcc/11.2.0/snos/lib64:/opt/cray/pe/papi/6.0.0.14/lib64:/opt/cray/libfabric/1.11.0.4.125/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32:/soft/compilers/cudatoolkit/cuda-11.6.2/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.6.2/lib64:/soft/libraries/trt/TensorRT-8.4.3.1.Linux.x86_64-gnu.cuda-11.6.cudnn8.4/lib:/soft/libraries/nccl/nccl_2.14.3-1+cuda11.6_x86_64/lib:/soft/libraries/cudnn/cudnn-11.6-linux-x64-v8.4.1.50/lib:/opt/cray/pe/gcc/11.2.0/snos/lib64:/opt/cray/pe/papi/6.0.0.14/lib64:/opt/cray/libfabric/1.11.0.4.125/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32:/home/s1mi/.conda/envs/ml-python/lib/:/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/nvidia/cudnn/lib:/home/s1mi/.conda/envs/ml-python/lib/:/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/nvidia/cudnn/lib:/home/s1mi/.conda/envs/ml-python/lib/:/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/nvidia/cudnn/lib:/home/s1mi/.conda/envs/ml-python/lib/:/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/nvidia/cudnn/lib:/home/s1mi/.conda/envs/torch/lib/:/home/s1mi/.conda/envs/torch/lib/python3.10/site-packages/nvidia/cudnn/lib:/home/s1mi/.conda/envs/torch/lib/:/home/s1mi/.conda/envs/torch/lib/python3.10/site-packages/nvidia/cudnn/lib
2023-07-20 17:12:41.060051: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Num GPUs Available:  1</code></pre>
</div>
</div>
</section>
<section id="define-paths" class="level2">
<h2 class="anchored" data-anchor-id="define-paths">Define Paths</h2>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">transform_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gs://dm-enformer/models/enformer.finetuned.SAD.robustscaler-PCA500-robustscaler.transform.pkl'</span></span>
<span id="cb4-2">model_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://tfhub.dev/deepmind/enformer/1'</span></span>
<span id="cb4-3">fasta_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/genome.fa'</span></span>
<span id="cb4-4">targets_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_human.txt'</span></span>
<span id="cb4-5">df_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(targets_txt, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
</section>
<section id="define-functions" class="level2">
<h2 class="anchored" data-anchor-id="define-functions">Define Functions</h2>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title `Enformer`, `EnformerScoreVariantsNormalized`, `EnformerScoreVariantsPCANormalized`,</span></span>
<span id="cb5-2">SEQUENCE_LENGTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">393216</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Enformer:</span>
<span id="cb5-5"></span>
<span id="cb5-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url):</span>
<span id="cb5-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hub.load(tfhub_url).model</span>
<span id="cb5-8"></span>
<span id="cb5-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb5-10">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs)</span>
<span id="cb5-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {k: v.numpy() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> predictions.items()}</span>
<span id="cb5-12"></span>
<span id="cb5-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@tf.function</span></span>
<span id="cb5-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> contribution_input_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_sequence,</span>
<span id="cb5-15">                              target_mask, output_head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>):</span>
<span id="cb5-16">    input_sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_sequence[tf.newaxis]</span>
<span id="cb5-17"></span>
<span id="cb5-18">    target_mask_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.reduce_sum(target_mask)</span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tf.GradientTape() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tape:</span>
<span id="cb5-20">      tape.watch(input_sequence)</span>
<span id="cb5-21">      prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.reduce_sum(</span>
<span id="cb5-22">          target_mask[tf.newaxis] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb5-23">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(input_sequence)[output_head]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> target_mask_mass</span>
<span id="cb5-24"></span>
<span id="cb5-25">    input_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tape.gradient(prediction, input_sequence) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> input_sequence</span>
<span id="cb5-26">    input_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.squeeze(input_grad, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tf.reduce_sum(input_grad, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-28"></span>
<span id="cb5-29"></span>
<span id="cb5-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EnformerScoreVariantsRaw:</span>
<span id="cb5-31"></span>
<span id="cb5-32">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url, organism<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>):</span>
<span id="cb5-33">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Enformer(tfhub_url)</span>
<span id="cb5-34">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._organism <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> organism</span>
<span id="cb5-35"></span>
<span id="cb5-36">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb5-37">    ref_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ref'</span>])[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._organism]</span>
<span id="cb5-38">    alt_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alt'</span>])[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._organism]</span>
<span id="cb5-39"></span>
<span id="cb5-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> alt_prediction.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ref_prediction.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-41"></span>
<span id="cb5-42"></span>
<span id="cb5-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EnformerScoreVariantsNormalized:</span>
<span id="cb5-44"></span>
<span id="cb5-45">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url, transform_pkl_path,</span>
<span id="cb5-46">               organism<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>):</span>
<span id="cb5-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> organism <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Transforms only compatible with organism=human'</span></span>
<span id="cb5-48">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerScoreVariantsRaw(tfhub_url, organism)</span>
<span id="cb5-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tf.io.gfile.GFile(transform_pkl_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-50">      transform_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(f)</span>
<span id="cb5-51">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transform_pipeline.steps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># StandardScaler.</span></span>
<span id="cb5-52"></span>
<span id="cb5-53">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb5-54">    scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs)</span>
<span id="cb5-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform.transform(scores)</span>
<span id="cb5-56"></span>
<span id="cb5-57"></span>
<span id="cb5-58"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EnformerScoreVariantsPCANormalized:</span>
<span id="cb5-59"></span>
<span id="cb5-60">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url, transform_pkl_path,</span>
<span id="cb5-61">               organism<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>, num_top_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>):</span>
<span id="cb5-62">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerScoreVariantsRaw(tfhub_url, organism)</span>
<span id="cb5-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tf.io.gfile.GFile(transform_pkl_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-64">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(f)</span>
<span id="cb5-65">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._num_top_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_top_features</span>
<span id="cb5-66"></span>
<span id="cb5-67">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb5-68">    scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs)</span>
<span id="cb5-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform.transform(scores)[:, :<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._num_top_features]</span>
<span id="cb5-70"></span>
<span id="cb5-71"></span>
<span id="cb5-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(avsec): Add feature description: Either PCX, or full names.</span></span>
<span id="cb5-73"></span>
<span id="cb5-74"></span>
<span id="cb5-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title `variant_centered_sequences`</span></span>
<span id="cb5-76"></span>
<span id="cb5-77"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FastaStringExtractor:</span>
<span id="cb5-78"></span>
<span id="cb5-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, fasta_file):</span>
<span id="cb5-80">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyfaidx.Fasta(fasta_file)</span>
<span id="cb5-81">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._chromosome_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.items()}</span>
<span id="cb5-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#import pd.Interval as Interval</span></span>
<span id="cb5-83">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, interval: Interval, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb5-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Truncate interval if it extends beyond the chromosome lengths.</span></span>
<span id="cb5-85">        chromosome_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._chromosome_sizes[interval.chrom]</span>
<span id="cb5-86">        trimmed_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Interval(interval.chrom,</span>
<span id="cb5-87">                                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval.start, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb5-88">                                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(interval.end, chromosome_length),</span>
<span id="cb5-89">                                    )</span>
<span id="cb5-90">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyfaidx wants a 1-based interval</span></span>
<span id="cb5-91">        sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.get_seq(trimmed_interval.chrom,</span>
<span id="cb5-92">                                          trimmed_interval.start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-93">                                          trimmed_interval.stop).seq).upper()</span>
<span id="cb5-94">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill truncated values with N's.</span></span>
<span id="cb5-95">        pad_upstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>interval.start, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-96">        pad_downstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval.end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> chromosome_length, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pad_upstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pad_downstream</span>
<span id="cb5-98"></span>
<span id="cb5-99">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> close(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-100">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.close()</span>
<span id="cb5-101"></span>
<span id="cb5-102"></span>
<span id="cb5-103"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_hot_encode(sequence):</span>
<span id="cb5-104">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> kipoiseq.transforms.functional.one_hot_dna(sequence).astype(np.float32)</span>
<span id="cb5-105"></span>
<span id="cb5-106"></span>
<span id="cb5-107"></span>
<span id="cb5-108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title `plot_tracks`</span></span>
<span id="cb5-109"></span>
<span id="cb5-110"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_tracks(tracks, interval, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>):</span>
<span id="cb5-111">  fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tracks), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tracks)), sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-112">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax, (title, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axes, tracks.items()):</span>
<span id="cb5-113">    ax.fill_between(np.linspace(interval.start, interval.end, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)), y)</span>
<span id="cb5-114">    ax.set_title(title)</span>
<span id="cb5-115">    sns.despine(top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-116">  ax.set_xlabel(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(interval))</span>
<span id="cb5-117">  plt.tight_layout()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Bio</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> Bio.Seq <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Seq</span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_rev_complement(dna_string):</span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(Seq(dna_string).reverse_complement()))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> prepare_for_quantify_prediction_per_TSS(predictions, gene, tss_df):</span>
<span id="cb7-2"></span>
<span id="cb7-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters:</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          predicitions (A numpy array): All predictions from the track</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          gene (a gene name, character): a gene</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          tss_df: a list of dataframe of genes and their transcription start sites</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns:</span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          A dictionary of cage experiment predictions and a list of transcription start sites</span></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb7-13"></span>
<span id="cb7-14">  output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tdf <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tss_df:</span>
<span id="cb7-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tdf.genes.values:</span>
<span id="cb7-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb7-18">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tdf[tdf.genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene].txStart_Sites.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>).values</span>
<span id="cb7-19">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [t.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_tss_list]</span>
<span id="cb7-20">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(item) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> nestedlist <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_tss_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nestedlist]</span>
<span id="cb7-21">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(gene_tss_list))</span>
<span id="cb7-22">  output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cage_predictions'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a numpy array</span></span>
<span id="cb7-23">  output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_TSS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_tss_list <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a list</span></span>
<span id="cb7-24"></span>
<span id="cb7-25"></span>
<span id="cb7-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(output) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a dictionary</span></span>
<span id="cb7-27"></span>
<span id="cb7-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> quantify_prediction_per_TSS(low_range, TSS, cage_predictions):</span>
<span id="cb7-29"></span>
<span id="cb7-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb7-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters:</span></span>
<span id="cb7-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          low_range (int): The lower interval</span></span>
<span id="cb7-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          TSS (list of integers): A list of TSS for a gene</span></span>
<span id="cb7-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          cage_predictions: A 1D numpy array or a vector of predictions from enformer corresponding to track 5110 or CAGE predictions</span></span>
<span id="cb7-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns:</span></span>
<span id="cb7-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          A dictionary of gene expression predictions for each TSS for a gene</span></span>
<span id="cb7-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb7-38">  tss_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-39">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> TSS:</span>
<span id="cb7-40">    bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> low_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">320</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb7-41">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tss:</span>
<span id="cb7-43">      bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb7-44">      count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(cage_predictions)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb7-46">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb7-47">    cage_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cage_predictions[count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cage_predictions[count] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cage_predictions[count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-48">    tss_predictions[tss] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cage_preds</span>
<span id="cb7-49"></span>
<span id="cb7-50">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(tss_predictions)</span>
<span id="cb7-51"></span>
<span id="cb7-52"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> collect_intervals(chromosomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"22"</span>], gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb7-53"></span>
<span id="cb7-54">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb7-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters :</span></span>
<span id="cb7-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      chromosomes : a list of chromosome numbers; each element should be a string format</span></span>
<span id="cb7-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      gene_list : a list of genes; the genes should be located on those chromosomes</span></span>
<span id="cb7-58"></span>
<span id="cb7-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns :</span></span>
<span id="cb7-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      A dictionary of genes (from gene_list) and their intervals within their respective chromosomes</span></span>
<span id="cb7-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb7-62"></span>
<span id="cb7-63">  gene_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collect intervals for our genes of interest</span></span>
<span id="cb7-64"></span>
<span id="cb7-65">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> chrom <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chromosomes:</span>
<span id="cb7-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_tutorial/gene_chroms/gene_"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chrom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> chrom_genes:</span>
<span id="cb7-67">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chrom_genes:</span>
<span id="cb7-68">        split_line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.strip().split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-69">        gene_intervals[split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-70">                                          split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb7-71">                                          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]),</span>
<span id="cb7-72">                                          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb7-73">                                        ]</span>
<span id="cb7-74"></span>
<span id="cb7-75">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the user has supplied a list of genes they are interested in</span></span>
<span id="cb7-76">    use_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>((k, gene_intervals[k]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_intervals)</span>
<span id="cb7-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(use_genes)</span>
<span id="cb7-78">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)):</span>
<span id="cb7-79">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(gene_intervals)</span>
<span id="cb7-80"></span>
<span id="cb7-81"></span>
<span id="cb7-82"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(gene_intervals, tss_dataframe, individuals_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb7-83">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb7-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters :</span></span>
<span id="cb7-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    gene_intervals : the results from calling `collect_intervals`</span></span>
<span id="cb7-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tss_dataframe : a list of the TSSs dataframes i.e. the TSS for the genes in the chromosomes</span></span>
<span id="cb7-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    individuals_list : a list of individuals on which we want to make predictions; defaults to None</span></span>
<span id="cb7-88"></span>
<span id="cb7-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns :</span></span>
<span id="cb7-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A list of predictions; the first element is the predictions around the TSS for each gene. The second is the prediction across CAGE tracks</span></span>
<span id="cb7-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb7-92"></span>
<span id="cb7-93">  gene_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-94">  gene_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-95"></span>
<span id="cb7-96">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_intervals.keys():</span>
<span id="cb7-97">    gene_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_intervals[gene]</span>
<span id="cb7-98">    target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb7-99">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb7-100">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creates an interval to select the right sequences</span></span>
<span id="cb7-101">    target_fa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extracts the fasta sequences, and resizes such that it is compatible with the sequence_length</span></span>
<span id="cb7-102">    window_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_interval.resize(SEQUENCE_LENGTH) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we also need information about the start and end locations after resizing</span></span>
<span id="cb7-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb7-104">      cur_gene_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_tutorial/individual_beds/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read in the appropriate bed file for the gene</span></span>
<span id="cb7-105">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>:</span>
<span id="cb7-106">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb7-107">    individual_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-108">    individual_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-109"></span>
<span id="cb7-110">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(np.empty([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))):</span>
<span id="cb7-111">      use_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals_list</span>
<span id="cb7-112">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)):</span>
<span id="cb7-113">      use_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cur_gene_vars.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:]</span>
<span id="cb7-114"></span>
<span id="cb7-115">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> use_individuals:</span>
<span id="cb7-116">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Currently on gene </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, and predicting on individual </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(gene, individual))</span>
<span id="cb7-117">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># two haplotypes per individual</span></span>
<span id="cb7-118">      haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb7-119">      haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb7-120"></span>
<span id="cb7-121">      ref_mismatch_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-122">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur_gene_vars.iterrows():</span>
<span id="cb7-123"></span>
<span id="cb7-124">        geno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[individual].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb7-125">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(haplo_2):</span>
<span id="cb7-126">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb7-127">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-128">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb7-129">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb7-130">          haplo_1[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb7-131">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb7-132">          haplo_2[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb7-133"></span>
<span id="cb7-134">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict on the individual's two haplotypes</span></span>
<span id="cb7-135">      prediction_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_1))[np.newaxis])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-136">      prediction_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_2))[np.newaxis])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-137"></span>
<span id="cb7-138">      temp_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [prediction_1[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>], prediction_2[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CAGE predictions we are interested in</span></span>
<span id="cb7-139">      individual_prediction[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_predictions</span>
<span id="cb7-140"></span>
<span id="cb7-141">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate TSS CAGE expression which correspond to column 5110 of the predictions above</span></span>
<span id="cb7-142">      temp_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb7-143"></span>
<span id="cb7-144">      pred_prepared_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prepare_for_quantify_prediction_per_TSS(predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prediction_1, gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene, tss_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tss_dataframe)</span>
<span id="cb7-145">      tss_predictions_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quantify_prediction_per_TSS(low_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> window_coords.start, TSS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_prepared_1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_TSS'</span>], cage_predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_prepared_1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cage_predictions'</span>])</span>
<span id="cb7-146"></span>
<span id="cb7-147">      pred_prepared_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prepare_for_quantify_prediction_per_TSS(predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prediction_2, gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene, tss_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tss_dataframe)</span>
<span id="cb7-148">      tss_predictions_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quantify_prediction_per_TSS(low_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> window_coords.start, TSS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_prepared_2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_TSS'</span>], cage_predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_prepared_2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cage_predictions'</span>])</span>
<span id="cb7-149"></span>
<span id="cb7-150">      temp_list.append(tss_predictions_1)</span>
<span id="cb7-151">      temp_list.append(tss_predictions_2) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># results here are a dictionary for each TSS for each haplotype</span></span>
<span id="cb7-152"></span>
<span id="cb7-153">      individual_results[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_list <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save for the individual</span></span>
<span id="cb7-154"></span>
<span id="cb7-155">    gene_output[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individual_results</span>
<span id="cb7-156">    gene_predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individual_prediction</span>
<span id="cb7-157"></span>
<span id="cb7-158">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>([gene_output, gene_predictions])</span>
<span id="cb7-159"></span>
<span id="cb7-160"></span>
<span id="cb7-161"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> collect_target_intervals(gene_intervals):</span>
<span id="cb7-162"></span>
<span id="cb7-163">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb7-164"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns a dictionary of Interval objects (from kipoiseq) for each gene corresponding to the locations of the gene</span></span>
<span id="cb7-165"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb7-166"></span>
<span id="cb7-167">  target_intervals_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-168"></span>
<span id="cb7-169">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_intervals.keys():</span>
<span id="cb7-170">    gene_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_intervals[gene]</span>
<span id="cb7-171">    target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb7-172">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb7-173">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb7-174">    target_intervals_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_interval</span>
<span id="cb7-175"></span>
<span id="cb7-176">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(target_intervals_dict)</span>
<span id="cb7-177"></span>
<span id="cb7-178"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> prepare_for_plot_tracks(gene, individual, all_predictions, chromosome<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'22'</span>]):</span>
<span id="cb7-179"></span>
<span id="cb7-180">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb7-181"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  This returns a dictionary of gene tracks and gene intervals, prepared for the function plot_tracks.</span></span>
<span id="cb7-182"></span>
<span id="cb7-183"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters:</span></span>
<span id="cb7-184"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - gene</span></span>
<span id="cb7-185"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - individual</span></span>
<span id="cb7-186"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - all_predictions</span></span>
<span id="cb7-187"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb7-188"></span>
<span id="cb7-189">  haplo_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_predictions[gene][individual]</span>
<span id="cb7-190">  gene_tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> individual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | haplotype 1'</span>: np.log10(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]),</span>
<span id="cb7-191">                gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> individual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | haplotype 2'</span>: np.log10(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])}</span>
<span id="cb7-192"></span>
<span id="cb7-193">  gene_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_intervals(chromosomes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chromosome, gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[gene])</span>
<span id="cb7-194">  gene_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_target_intervals(gene_intervals)</span>
<span id="cb7-195"></span>
<span id="cb7-196">  output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb7-197">  output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_tracks'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_tracks</span>
<span id="cb7-198">  output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_intervals'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_intervals[gene]</span>
<span id="cb7-199"></span>
<span id="cb7-200">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(output)</span>
<span id="cb7-201"></span>
<span id="cb7-202"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_individuals(path_to_bed_file, list_of_individuals):</span>
<span id="cb7-203"></span>
<span id="cb7-204">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb7-205"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Checks if an individual is missing in bed variation files.</span></span>
<span id="cb7-206"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  These individuals should be removed prior to training</span></span>
<span id="cb7-207"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb7-208"></span>
<span id="cb7-209">  myfile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path_to_bed_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb7-210">  myline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> myfile.readline()</span>
<span id="cb7-211">  bed_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> myline.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:]</span>
<span id="cb7-212">  myfile.close()</span>
<span id="cb7-213"></span>
<span id="cb7-214">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(list_of_individuals).issubset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(bed_names)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>:</span>
<span id="cb7-215">    missing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(list_of_individuals).difference(bed_names))</span>
<span id="cb7-216">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This (or these) individual(s) is/are not present: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(missing))</span>
<span id="cb7-217">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-218">    missing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-219">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'All individuals are present in the bed file.'</span>)</span>
<span id="cb7-220"></span>
<span id="cb7-221">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(missing)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> geno_to_seq(gene, individual):</span>
<span id="cb8-2">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># two haplotypes per individual</span></span>
<span id="cb8-3">  haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb8-4">  haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb8-5"></span>
<span id="cb8-6">  ref_mismatch_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur_gene_vars.iterrows():</span>
<span id="cb8-8"></span>
<span id="cb8-9">    geno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[individual].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb8-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(haplo_2):</span>
<span id="cb8-11">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb8-13">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb8-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb8-15">      haplo_1[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb8-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb8-17">      haplo_2[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb8-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> haplo_1, haplo_2</span>
<span id="cb8-19"></span>
<span id="cb8-20">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict on the individual's two haplotypes</span></span></code></pre></div>
</div>
</section>
<section id="prepare-input-data" class="level2">
<h2 class="anchored" data-anchor-id="prepare-input-data">Prepare input data</h2>
<p>We want to predict epigenome around ERAP2 TSS on chromosome 5.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">chr5_tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/tss_by_chr/chr5_tss_by_gene.txt'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-2">erap2_variations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/individual_beds/chr5/chr5_ERAP2.bed'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-3">geuvadis_gene_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://uchicago.box.com/shared/static/5vwc7pjw9qmtv7298c4rc7bcuicoyemt.gz'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb9-4">                                         dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chr'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>})</span>
<span id="cb9-5">geuvadis_gene_expression.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">gene_id</th>
<th data-quarto-table-cell-role="th">gene_name</th>
<th data-quarto-table-cell-role="th">TargetID</th>
<th data-quarto-table-cell-role="th">Chr</th>
<th data-quarto-table-cell-role="th">Coord</th>
<th data-quarto-table-cell-role="th">HG00096</th>
<th data-quarto-table-cell-role="th">HG00097</th>
<th data-quarto-table-cell-role="th">HG00099</th>
<th data-quarto-table-cell-role="th">HG00100</th>
<th data-quarto-table-cell-role="th">HG00101</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">NA20810</th>
<th data-quarto-table-cell-role="th">NA20811</th>
<th data-quarto-table-cell-role="th">NA20812</th>
<th data-quarto-table-cell-role="th">NA20813</th>
<th data-quarto-table-cell-role="th">NA20814</th>
<th data-quarto-table-cell-role="th">NA20815</th>
<th data-quarto-table-cell-role="th">NA20816</th>
<th data-quarto-table-cell-role="th">NA20819</th>
<th data-quarto-table-cell-role="th">NA20826</th>
<th data-quarto-table-cell-role="th">NA20828</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>ENSG00000223972.4</td>
<td>DDX11L1</td>
<td>ENSG00000223972.4</td>
<td>1</td>
<td>11869</td>
<td>0.320818</td>
<td>0.344202</td>
<td>0.354225</td>
<td>0.478064</td>
<td>-0.102815</td>
<td>...</td>
<td>1.008605</td>
<td>0.384489</td>
<td>0.581284</td>
<td>0.513981</td>
<td>0.667449</td>
<td>0.350890</td>
<td>0.186103</td>
<td>-0.037976</td>
<td>0.405439</td>
<td>0.199143</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>ENSG00000227232.3</td>
<td>WASH7P</td>
<td>ENSG00000227232.3</td>
<td>1</td>
<td>29806</td>
<td>33.714457</td>
<td>20.185174</td>
<td>18.095407</td>
<td>24.100871</td>
<td>29.018719</td>
<td>...</td>
<td>30.980194</td>
<td>34.086207</td>
<td>39.678442</td>
<td>29.643513</td>
<td>27.120420</td>
<td>29.121624</td>
<td>31.117198</td>
<td>32.047074</td>
<td>22.798959</td>
<td>23.563874</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>ENSG00000243485.1</td>
<td>MIR1302-11</td>
<td>ENSG00000243485.1</td>
<td>1</td>
<td>29554</td>
<td>0.240408</td>
<td>0.157456</td>
<td>0.218806</td>
<td>0.320878</td>
<td>0.067833</td>
<td>...</td>
<td>0.065940</td>
<td>0.228784</td>
<td>0.140642</td>
<td>0.283905</td>
<td>0.273821</td>
<td>0.286311</td>
<td>0.324060</td>
<td>0.049574</td>
<td>0.255288</td>
<td>0.157440</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>ENSG00000238009.2</td>
<td>RP11-34P13.7</td>
<td>ENSG00000238009.2</td>
<td>1</td>
<td>133566</td>
<td>0.328272</td>
<td>0.327932</td>
<td>0.090064</td>
<td>0.420443</td>
<td>0.220269</td>
<td>...</td>
<td>0.274071</td>
<td>0.384179</td>
<td>0.533693</td>
<td>0.307221</td>
<td>0.307367</td>
<td>0.400278</td>
<td>0.612321</td>
<td>0.666633</td>
<td>0.281138</td>
<td>1.346129</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>ENSG00000239945.1</td>
<td>RP11-34P13.8</td>
<td>ENSG00000239945.1</td>
<td>1</td>
<td>91105</td>
<td>0.332171</td>
<td>-0.032164</td>
<td>0.017323</td>
<td>0.424677</td>
<td>0.214025</td>
<td>...</td>
<td>0.347323</td>
<td>0.346744</td>
<td>0.073580</td>
<td>0.400396</td>
<td>0.470517</td>
<td>0.069749</td>
<td>0.299353</td>
<td>0.090019</td>
<td>0.282554</td>
<td>-0.157170</td>
</tr>
</tbody>
</table>

<p>5 rows × 467 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">gene_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_intervals(chromosomes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5'</span>], gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP2'</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Enformer(model_path) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># here we load the model architecture.</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">fasta_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastaStringExtractor(fasta_file) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we define a class called fasta_extractor to help us extra raw sequence data</span></span></code></pre></div>
</div>
</section>
<section id="run-predictions" class="level2">
<h2 class="anchored" data-anchor-id="run-predictions">Run Predictions</h2>
<p>We’ll pick one individual at random.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">rand_individual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># individuals we are interested in</span></span>
<span id="cb12-2">rand_individual</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>'NA19117'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP2'</span></span>
<span id="cb14-2">gene_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_intervals[gene]</span>
<span id="cb14-3">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb14-4">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb14-5">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb14-6">target_fa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))</span>
<span id="cb14-7">window_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_interval.resize(SEQUENCE_LENGTH)</span>
<span id="cb14-8">cur_gene_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_tutorial/individual_beds/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read in the appropriate bed file for the gene</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">haplo_1, haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geno_to_seq(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP2'</span>, rand_individual)</span>
<span id="cb15-2"></span>
<span id="cb15-3">haplo_1_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_1))[np.newaxis]</span>
<span id="cb15-4">haplo_2_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_2))[np.newaxis]</span>
<span id="cb15-5">average_enc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.add(haplo_1_enc, haplo_2_enc) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">prediction_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(haplo_1_enc)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb16-2">prediction_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(haplo_2_enc)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb16-3"></span>
<span id="cb16-4">pre_average <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(average_enc)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb16-5">post_average <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (prediction_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> prediction_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pre_average)</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(post_average)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[0.0992957  0.09178353 0.07001802 ... 0.00303278 0.00977772 0.01224172]
 [0.05804721 0.05099775 0.03974861 ... 0.00736834 0.02494723 0.02787034]
 [0.00579232 0.00482466 0.00360574 ... 0.00365019 0.0089305  0.01067099]
 ...
 [0.000233   0.00015899 0.00017439 ... 0.00074823 0.00243313 0.00291141]
 [0.00312966 0.00261619 0.00282284 ... 0.00084809 0.00193108 0.0023369 ]
 [0.05106216 0.03932535 0.03704545 ... 0.00823589 0.03163096 0.02946693]]
[[0.09931627 0.0918033  0.07011096 ... 0.00303642 0.00980847 0.01226703]
 [0.05805762 0.05102265 0.03982043 ... 0.00737725 0.0250074  0.02791041]
 [0.00578816 0.00482384 0.00360856 ... 0.00365351 0.00894796 0.01068704]
 ...
 [0.00023958 0.00016424 0.0001784  ... 0.0007466  0.0024361  0.00288245]
 [0.00311816 0.00261521 0.00282086 ... 0.00085048 0.00194088 0.00235308]
 [0.05078962 0.03927209 0.03706702 ... 0.00824777 0.03183598 0.0296373 ]]</code></pre>
</div>
</div>
</section>
<section id="comparing-across-tracks" class="level2">
<h2 class="anchored" data-anchor-id="comparing-across-tracks">Comparing across tracks</h2>
<p>We compute correlation for each track.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">cors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5313</span>):</span>
<span id="cb19-3">    pre_track <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pre_average[:, i]</span>
<span id="cb19-4">    post_track <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post_average[:, i]</span>
<span id="cb19-5">    cor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.corrcoef(pre_track, post_track)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb19-6">    cors.append(cor)</span></code></pre></div>
</div>
<p>The results from both methods are nearly identical.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(cors), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(cors))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.9988489681619513 0.9999999110431649</code></pre>
</div>
</div>
<p>Now we examine the outliers.</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pre_average <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> post_average</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(diff)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[-2.05710530e-05 -1.97738409e-05 -9.29385424e-05 ... -3.63402069e-06
  -3.07550654e-05 -2.53105536e-05]
 [-1.04196370e-05 -2.48961151e-05 -7.18124211e-05 ... -8.90484080e-06
  -6.01727515e-05 -4.00692225e-05]
 [ 4.15556133e-06  8.19098204e-07 -2.82167457e-06 ... -3.32249328e-06
  -1.74604356e-05 -1.60438940e-05]
 ...
 [-6.58220961e-06 -5.24926872e-06 -4.01693978e-06 ...  1.62963988e-06
  -2.97697261e-06  2.89606396e-05]
 [ 1.15022995e-05  9.84640792e-07  1.98441558e-06 ... -2.38948269e-06
  -9.80228651e-06 -1.61810312e-05]
 [ 2.72538513e-04  5.32567501e-05 -2.15731561e-05 ... -1.18780881e-05
  -2.05017626e-04 -1.70366839e-04]]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">mses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb24-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5313</span>):</span>
<span id="cb24-3">    mse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(np.square(diff[:, i]))</span>
<span id="cb24-4">    mses.append(mse)</span>
<span id="cb24-5"></span>
<span id="cb24-6">quartiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.percentile(mses, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>])</span>
<span id="cb24-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(mses))</span>
<span id="cb24-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1: "</span>, quartiles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) </span>
<span id="cb24-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Median: "</span>, quartiles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb24-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q3: "</span>, quartiles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb24-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(mses))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Min:  5.3927547e-06
Q1:  0.006921690888702869
Median:  0.022998593747615814
Q3:  0.09885355085134506
Max:  16.408468</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">plt.boxplot(mses)</span>
<span id="cb26-2">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/comparing-enformer-prediction-averages/comparing-averages_files/figure-html/cell-20-output-1.png" width="579" height="411"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">desc_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(mses), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)]</span>
<span id="cb27-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tracks from highest to lowest MSE:"</span>, desc_index)</span>
<span id="cb27-3"></span>
<span id="cb27-4">mse_outs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mses <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb27-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of tracks with MSE &gt; 1:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mse_outs))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Tracks from highest to lowest MSE: [681, 680, 677, 5216, 879, 5212, 679, 675, 5211, 5084, 683, 5210, 1268, 3744, 5209, 5082, 3478, 907, 5110, 4711, 678, 5219, 4765, 4764, 4695, 3693, 5213, 4760, 2062, 682, 1628, 4759, 3615, 5239, 1520, 5235, 5217, 3248, 5240, 3674, 3200, 5214, 766, 4805, 4692, 2508, 4712, 5236, 5275, 2991, 4324, 4057, 5237, 4134, 4693, 4715, 5215, 3299, 2869, 773, 2833, 4004, 5081, 1081, 2126, 4493, 674, 4093, 2280, 5241, 5218, 3789, 808, 2028, 712, 2386, 1085, 1218, 955, 2389, 1347, 5238, 5138, 4806, 819, 4767, 2440, 1237, 3387, 1629, 4163, 1818, 4246, 2010, 4416, 1211, 1079, 5276, 3889, 5083, 968, 1012, 760, 4568, 1074, 3264, 1668, 2103, 2201, 2502, 713, 859, 3296, 3065, 4192, 790, 963, 2970, 2921, 5108, 1213, 3075, 690, 3855, 3738, 4739, 1966, 791, 1163, 4461, 2492, 2110, 3577, 2778, 2352, 4758, 1630, 3132, 5242, 5144, 4682, 5243, 1172, 691, 1170, 5255, 3234, 4709, 2215, 4428, 1226, 4777, 792, 697, 904, 3358, 1075, 4078, 1208, 5156, 4687, 1882, 1094, 3851, 1843, 1348, 5109, 3979, 2090, 2188, 1067, 2170, 5256, 3690, 4732, 3433, 3194, 5117, 4734, 1535, 1138, 1190, 3069, 1217, 788, 2226, 5244, 2092, 967, 1045, 3947, 1191, 2868, 1139, 4763, 2353, 1324, 3482, 4074, 744, 1797, 688, 1133, 1612, 1119, 2888, 2285, 4018, 2568, 4737, 1292, 4444, 1871, 1082, 1071, 1608, 5029, 767, 789, 1744, 5129, 3392, 1200, 742, 3177, 2618, 3542, 4689, 2844, 1627, 4177, 1135, 1127, 1093, 1886, 5247, 3443, 984, 4266, 4648, 743, 4762, 4649, 2734, 2039, 1137, 1576, 2138, 1201, 4273, 3271, 4675, 700, 5245, 3083, 2823, 772, 4477, 1188, 2832, 2392, 3522, 3700, 3734, 3582, 1493, 2667, 3893, 3436, 1534, 820, 3784, 1103, 1166, 714, 4766, 817, 2880, 2349, 755, 1715, 1463, 4731, 2930, 2061, 1193, 5085, 4697, 850, 878, 5067, 2049, 2119, 2203, 3074, 2640, 1187, 2385, 1084, 3665, 4677, 3713, 1382, 3539, 764, 1083, 2644, 1789, 4707, 1086, 3854, 2300, 1206, 1812, 5277, 2395, 3843, 5246, 2791, 4836, 865, 3062, 1128, 676, 4690, 1174, 1068, 4681, 1092, 1965, 4801, 2548, 1265, 1314, 2155, 1816, 2696, 3261, 1471, 4676, 1981, 961, 2765, 1489, 3363, 2743, 4788, 3040, 1097, 3859, 4694, 3536, 1451, 2436, 882, 1724, 853, 2000, 3072, 2665, 4036, 4089, 4267, 1069, 4013, 4411, 4770, 857, 2735, 1611, 4713, 2282, 1706, 2104, 1734, 1159, 754, 3736, 4200, 3024, 2862, 719, 4708, 2066, 4291, 727, 1371, 3302, 5198, 4431, 707, 1689, 2628, 2175, 4726, 2380, 1973, 846, 1470, 5118, 4792, 5141, 2047, 1849, 1435, 4799, 4685, 3475, 1070, 5049, 3336, 2856, 1528, 1129, 2840, 2074, 687, 4696, 5063, 2785, 848, 2526, 4245, 3462, 1132, 5165, 1478, 3980, 4699, 1561, 3360, 1468, 1879, 4474, 2346, 1408, 4276, 2305, 1455, 3432, 3183, 2060, 4378, 3951, 2827, 4740, 4742, 3664, 3300, 1644, 3213, 1967, 1116, 2056, 4700, 1982, 5143, 989, 3747, 769, 1107, 3630, 684, 1716, 4703, 1310, 1383, 1877, 2923, 1487, 705, 2210, 4196, 2329, 4161, 2448, 4679, 1168, 881, 2602, 1136, 4705, 1555, 706, 864, 4144, 3285, 1112, 1183, 2522, 1809, 3469, 4158, 1962, 3468, 1049, 1242, 5086, 745, 747, 704, 1840, 3148, 4261, 2670, 2571, 4576, 2650, 1322, 1606, 5021, 4704, 1602, 2586, 4912, 2821, 2588, 3936, 735, 1407, 1130, 3869, 2067, 3239, 3773, 1196, 1110, 752, 2150, 710, 1452, 1659, 3110, 1143, 1692, 3389, 1316, 3824, 2614, 801, 2652, 4641, 836, 826, 1321, 4506, 1099, 4745, 2446, 3307, 3708, 1108, 4092, 3457, 1123, 1754, 1664, 4299, 3108, 1215, 821, 4702, 1332, 858, 2535, 1545, 1329, 1114, 3176, 4807, 3042, 1709, 956, 2409, 1101, 4283, 5079, 3967, 1579, 5042, 1443, 2111, 825, 960, 4217, 1214, 1481, 942, 4285, 4727, 1613, 1195, 4640, 4698, 2356, 2684, 810, 4005, 1192, 3530, 1225, 1846, 1414, 3805, 4184, 3987, 4688, 1176, 4198, 4054, 1906, 1406, 4618, 4427, 1835, 822, 3623, 2357, 4385, 2771, 4683, 3254, 132, 3754, 1185, 1758, 3995, 2122, 1591, 763, 880, 1220, 4103, 2230, 3260, 4365, 4029, 5163, 1323, 5066, 1162, 1388, 1262, 3670, 2219, 3764, 2789, 2974, 3572, 3659, 4359, 392, 4787, 1740, 3066, 1907, 4738, 1186, 1072, 695, 4905, 3116, 5128, 3119, 1100, 1866, 3671, 2520, 4425, 804, 1355, 2304, 3331, 4268, 4910, 3725, 3324, 2169, 1029, 4080, 2185, 2988, 4312, 4037, 4839, 5072, 686, 2795, 3394, 2420, 978, 2792, 1311, 2308, 4736, 4008, 2196, 5197, 5139, 875, 4386, 4151, 2928, 1459, 4850, 1134, 3912, 5124, 824, 4398, 2692, 2263, 2514, 5220, 1916, 4834, 1817, 2317, 2866, 1260, 1095, 2493, 2931, 5071, 4761, 5014, 1062, 3836, 4463, 4746, 3127, 1102, 2593, 4784, 1961, 4448, 5126, 5062, 3484, 1699, 958, 4986, 2737, 2407, 4388, 1224, 3552, 701, 4380, 4845, 2927, 3696, 1212, 3266, 4475, 4728, 2454, 2106, 2009, 3547, 1533, 5274, 5080, 1236, 2266, 3984, 1219, 1173, 2162, 3653, 4822, 4811, 4701, 3927, 4410, 3942, 4147, 1305, 4776, 3899, 3686, 994, 1239, 4286, 4344, 4847, 1106, 973, 751, 5016, 1257, 3915, 2732, 508, 3816, 1925, 1194, 1179, 1955, 3660, 3138, 4077, 3438, 891, 2809, 3403, 2322, 1956, 2154, 4510, 3663, 812, 1061, 1412, 2084, 2742, 2091, 2425, 1617, 3874, 1141, 816, 4469, 4563, 4691, 4282, 947, 3246, 3929, 1204, 905, 2452, 2701, 1445, 5111, 2885, 3386, 4706, 1023, 3916, 739, 1308, 1379, 990, 2848, 3091, 1078, 2211, 3982, 2075, 4638, 1450, 692, 1184, 2936, 2694, 4831, 3914, 4488, 4323, 1513, 4678, 4512, 3318, 4140, 3185, 4504, 832, 1113, 3335, 5273, 3242, 2671, 3282, 2194, 2875, 3964, 985, 831, 5202, 1167, 696, 847, 2933, 4575, 1657, 1389, 2661, 1340, 4636, 3648, 2469, 1118, 3485, 698, 4296, 4961, 728, 5040, 2055, 3122, 1456, 1915, 1682, 1679, 2486, 2622, 3429, 3068, 1235, 2464, 1410, 4172, 5041, 1238, 5181, 1370, 2705, 1199, 2221, 5094, 3592, 3930, 4985, 2245, 3549, 4263, 1227, 3999, 722, 1708, 4802, 2412, 3875, 5169, 1905, 3112, 833, 796, 5187, 3508, 4791, 3759, 2980, 4230, 953, 5022, 770, 2311, 3339, 1140, 4086, 1164, 2045, 1126, 4967, 1943, 3991, 3550, 3139, 3333, 4633, 2291, 3095, 2451, 3244, 4786, 3214, 4771, 4642, 1645, 3642, 1416, 3770, 1117, 2504, 1006, 4338, 2360, 2890, 758, 1344, 1762, 2719, 4007, 1361, 2098, 3712, 2758, 3030, 3086, 1169, 2960, 2525, 2287, 717, 2938, 1488, 723, 2457, 4351, 3872, 2654, 3831, 2924, 3233, 702, 1614, 2214, 1921, 2005, 4358, 1207, 976, 4829, 1223, 4741, 4484, 753, 4639, 1320, 1419, 4349, 944, 4557, 2298, 2681, 4354, 1161, 2271, 4637, 3518, 977, 885, 3159, 4491, 5068, 3919, 4370, 4680, 2258, 1165, 1738, 4854, 1516, 3421, 3037, 4756, 4042, 711, 1171, 4804, 3181, 5075, 3028, 3226, 1160, 131, 1267, 4735, 2919, 2467, 787, 889, 1968, 4513, 2375, 3566, 4983, 3944, 2634, 3959, 1109, 3009, 2381, 5015, 3619, 4774, 5140, 4916, 785, 2096, 3971, 815, 729, 3016, 3048, 1115, 3056, 4645, 3657, 3946, 1859, 2574, 1055, 3325, 2725, 4747, 3864, 3676, 4265, 1440, 1350, 2143, 1648, 4391, 4876, 4686, 3844, 5190, 5189, 800, 1988, 5106, 3656, 4647, 3444, 3897, 4269, 1546, 4744, 1926, 535, 4800, 4714, 1553, 5251, 2528, 1356, 4197, 3990, 1334, 1687, 5122, 3162, 3849, 2237, 1563, 4823, 1745, 4934, 3314, 2337, 4750, 1234, 3391, 401, 3439, 2338, 3298, 3502, 5148, 5185, 2619, 1343, 3697, 1887, 4718, 3330, 4373, 3900, 2135, 4820, 3441, 1670, 2500, 1441, 4781, 2163, 4783, 3188, 1891, 5311, 4907, 3647, 1695, 2071, 2140, 3372, 3032, 3793, 1639, 1868, 771, 2202, 2626, 2871, 4372, 3850, 5142, 2612, 4234, 4294, 5026, 1773, 2265, 4225, 4906, 3240, 3743, 3172, 5125, 1269, 1202, 5123, 736, 4882, 4394, 4797, 517, 2399, 2604, 2630, 4722, 4858, 4775, 783, 957, 3620, 2906, 3002, 4303, 2354, 4790, 4397, 2017, 3017, 4599, 5312, 3767, 1842, 1610, 2273, 1046, 3090, 1923, 2351, 811, 1760, 3224, 981, 3001, 3925, 5295, 733, 4130, 1052, 2233, 5104, 3228, 750, 1240, 3635, 5061, 4235, 1536, 3501, 1864, 1096, 5033, 2828, 4443, 2575, 900, 741, 725, 2019, 3787, 4883, 4048, 2567, 4914, 2706, 1354, 2077, 814, 5055, 2783, 1577, 4073, 2713, 2553, 4878, 4989, 1122, 3589, 4864, 3025, 3178, 1615, 3320, 4162, 2975, 3419, 1904, 4034, 4466, 5184, 4022, 2902, 4379, 1560, 2777, 3490, 806, 2089, 5186, 4971, 4835, 2819, 2498, 2303, 2744, 2803, 3390, 2863, 1111, 4915, 3909, 2715, 4043, 740, 2437, 4045, 2518, 2487, 995, 1686, 2099, 4194, 4793, 3993, 3968, 4849, 778, 3399, 3479, 1026, 1422, 724, 1457, 3554, 3196, 3599, 1121, 1838, 909, 3557, 1499, 1231, 1717, 5009, 1327, 5191, 3321, 4350, 1531, 4605, 940, 2946, 4071, 3245, 2711, 3440, 746, 4795, 5300, 2854, 2267, 2270, 4949, 1003, 988, 3760, 1547, 2116, 4773, 4238, 1060, 4424, 1229, 761, 3666, 2197, 4207, 2339, 1830, 5168, 1527, 715, 1753, 4717, 1104, 1494, 1996, 1044, 1287, 720, 3175, 1997, 1848, 4901, 4710, 4050, 4026, 1182, 3989, 3668, 176, 2995, 1892, 1253, 3104, 4434, 2659, 2766, 3649, 4011, 2617, 2262, 1929, 3107, 3345, 2418, 1502, 3169, 3994, 2932, 4768, 2598, 2008, 2306, 866, 3328, 4772, 1380, 2971, 4393, 3235, 4485, 1066, 2896, 1248, 1519, 2591, 4830, 1831, 3504, 3149, 1719, 4973, 2835, 3540, 3332, 894, 1056, 4859, 2773, 2582, 1678, 3063, 1030, 3605, 2244, 3998, 4779, 3015, 3954, 2167, 4175, 4212, 2726, 1342, 2033, 1672, 5045, 4885, 4812, 1549, 4047, 3193, 1319, 2145, 1987, 2587, 1175, 1889, 1919, 1041, 2817, 2776, 1409, 737, 1756, 2141, 264, 4318, 1735, 1632, 2564, 3878, 1883, 1747, 2529, 3871, 1822, 4810, 3662, 1782, 2796, 3050, 3748, 4872, 2722, 1731, 4087, 3829, 1746, 3023, 1650, 1154, 1751, 2001, 983, 96, 2478, 3334, 1351, 2369, 3203, 1492, 4242, 3151, 4319, 2228, 4840, 2331, 3280, 2756, 4960, 3943, 3806, 2664, 1601, 4027, 4009, 708, 2152, 3257, 1741, 4331, 2318, 3020, 4231, 1221, 1544, 1995, 1151, 5096, 3828, 3379, 5105, 4930, 4131, 5298, 3739, 2917, 2572, 897, 1256, 2530, 1844, 1636, 3312, 4423, 2429, 2294, 4214, 2745, 1920, 2786, 4292, 4430, 4284, 3171, 3650, 2976, 3860, 1621, 1378, 2132, 2082, 4464, 2847, 3958, 4014, 2886, 5153, 2537, 1276, 4081, 1032, 1938, 1297, 3629, 4010, 4239, 2998, 3145, 3393, 4316, 2296, 3928, 3898, 5053, 1979, 1562, 2417, 3692, 4110, 3814, 3740, 2740, 1325, 1009, 3972, 4024, 1963, 3463, 1908, 1949, 1284, 1210, 4496, 3503, 3797, 4254, 3678, 1432, 5107, 3602, 3931, 2759, 5074, 4363, 3949, 1671, 2286, 2509, 1798, 899, 3687, 1821, 5116, 1951, 3494, 3870, 5188, 4041, 5057, 1677, 2012, 4842, 1337, 4733, 749, 4889, 1335, 3173, 4038, 5257, 730, 3901, 3383, 4035, 3604, 3474, 1557, 2839, 3420, 3295, 4335, 1509, 4945, 1815, 4032, 2430, 3881, 1077, 61, 5301, 964, 2327, 3402, 3638, 1051, 3631, 1038, 1189, 5097, 3810, 2669, 3060, 3838, 4236, 3519, 2220, 1483, 5183, 2128, 2292, 2427, 1243, 4280, 2987, 4851, 1264, 4127, 2240, 2081, 1263, 3934, 2523, 5207, 2782, 3488, 2460, 4406, 3879, 1330, 3603, 1924, 1543, 4610, 4381, 1246, 4053, 3329, 3908, 4290, 2432, 2779, 1405, 3164, 1969, 1439, 2121, 1364, 1245, 5099, 4109, 4552, 4417, 1837, 1976, 3965, 1399, 2345, 5102, 4473, 2235, 395, 908, 3102, 3520, 4126, 3343, 3807, 493, 1153, 2179, 2391, 2117, 3905, 4164, 3241, 1880, 3586, 1477, 5065, 3611, 2925, 2895, 2072, 2539, 4908, 4729, 5090, 4780, 2142, 4075, 3366, 4257, 2533, 1034, 3158, 2234, 1437, 3291, 3920, 2714, 4498, 5069, 4226, 3868, 2940, 4841, 1008, 3006, 4374, 2243, 3966, 1387, 5248, 4778, 2190, 1013, 4937, 2961, 2218, 845, 694, 1638, 2272, 3208, 1474, 2929, 3180, 1803, 4824, 1076, 948, 1400, 2173, 827, 1604, 4467, 3031, 5032, 2899, 4421, 4377, 3818, 1861, 3802, 849, 4343, 3396, 2830, 5112, 2217, 1395, 1554, 2521, 3569, 1359, 4355, 4275, 1752, 3507, 1694, 2229, 1769, 4826, 3922, 1222, 1014, 5279, 999, 689, 2953, 2438, 1964, 2843, 2752, 3763, 4481, 300, 1318, 2596, 1903, 4346, 4348, 4419, 3986, 5023, 4607, 2947, 1512, 2043, 4848, 1787, 2054, 3007, 4321, 969, 4439, 1402, 1272, 1448, 4116, 5127, 3008, 3401, 5098, 3092, 2016, 2052, 2068, 987, 4414, 2892, 1155, 2922, 3724, 4199, 1156, 5101, 893, 2606, 1575, 3407, 1261, 3486, 2994, 3992, 3684, 1403, 3745, 4132, 4888, 3487, 4880, 1254, 2867, 2120, 2963, 1620, 1881, 1945, 1326, 4814, 1693, 2097, 2962, 868, 4392, 890, 3890, 1625, 1386, 315, 4095, 3581, 756, 4716, 1022, 1811, 2307, 1983, 1665, 1404, 2239, 3187, 3109, 4094, 1873, 4146, 2967, 3667, 4969, 5114, 3174, 4297, 4186, 503, 1233, 1054, 4180, 2894, 1300, 4320, 2404, 4471, 3309, 1833, 2997, 330, 3988, 3587, 2570, 220, 929, 374, 2123, 4279, 4415, 1294, 3790, 2475, 5152, 3822, 2484, 4040, 3113, 4156, 1313, 5093, 4871, 793, 4141, 4723, 2299, 1205, 4123, 906, 4838, 4597, 2874, 3281, 5034, 998, 1420, 1131, 5025, 3632, 896, 3126, 2824, 2372, 3311, 1180, 2950, 4413, 2608, 4170, 5103, 2746, 3813, 2064, 2046, 4881, 2423, 3352, 1958, 1444, 3775, 3798, 3026, 1080, 1281, 4202, 4569, 1296, 2538, 4368, 3220, 1725, 284, 4769, 876, 1898, 1019, 4828, 5095, 3613, 2757, 2382, 3515, 5249, 2687, 4237, 2836, 2413, 3273, 1578, 1673, 3858, 5054, 3101, 4105, 971, 2912, 1142, 1230, 2426, 4399, 1941, 3935, 3341, 4468, 4611, 2584, 4412, 1942, 4061, 4145, 2794, 4065, 4894, 3409, 68, 3661, 2697, 3658, 3578, 902, 2515, 1711, 3588, 3315, 380, 2698, 2907, 4460, 2774, 2547, 1569, 2655, 3131, 2639, 1705, 1145, 354, 5133, 2378, 3835, 837, 2648, 914, 3232, 3758, 2647, 4972, 1150, 4183, 2802, 877, 3610, 3506, 2481, 2301, 2057, 4518, 3841, 2166, 4865, 1847, 4526, 4551, 1203, 4903, 3950, 2415, 3218, 4994, 2059, 4190, 4259, 2497, 4628, 779, 887, 709, 1685, 3952, 3019, 3078, 2560, 3625, 3820, 2177, 3058, 1829, 4456, 2578, 5027, 2102, 2030, 3917, 5172, 3229, 69, 2199, 1510, 3425, 4314, 2253, 2333, 5134, 4601, 1867, 4101, 4006, 288, 1475, 2859, 3983, 2834, 2042, 1984, 5100, 950, 2050, 4203, 3000, 4984, 3227, 412, 1911, 2453, 2534, 3749, 3039, 1957, 1025, 3883, 1850, 4869, 4631, 5231, 2623, 3941, 2394, 1158, 1010, 5302, 2788, 1423, 408, 2410, 2496, 1381, 2400, 4174, 1031, 4232, 1736, 2205, 835, 3981, 2527, 4369, 1098, 4165, 4899, 5006, 2858, 2748, 3997, 3637, 4064, 4658, 3601, 2739, 4409, 1917, 4946, 3500, 2462, 2325, 4794, 4382, 2390, 1649, 3093, 3742, 3378, 1972, 4520, 1757, 5304, 3348, 2876, 3796, 4818, 60, 2231, 3027, 455, 867, 5294, 4938, 980, 2730, 1642, 1358, 4754, 5282, 2551, 3945, 883, 2387, 1605, 4897, 924, 1750, 2113, 1011, 4602, 862, 3199, 3236, 3735, 2831, 3243, 5078, 1640, 2408, 3563, 1514, 4270, 3417, 1667, 2951, 3675, 1732, 2646, 3496, 4966, 4357, 3446, 1600, 1662, 2707, 617, 2979, 2366, 4624, 2678, 1277, 2653, 4447, 4210, 5201, 2842, 1626, 917, 1004, 3454, 916, 2903, 2191, 2249, 2702, 1783, 1366, 4472, 2546, 3888, 2129, 3710, 1391, 2256, 4407, 2666, 3699, 1890, 1453, 3866, 5280, 1249, 5179, 2793, 2865, 3698, 5019, 4853, 4025, 1548, 2477, 2070, 2901, 1674, 2845, 2433, 5283, 4932, 3812, 2934, 4255, 786, 1490, 2161, 4333, 2470, 3891, 2717, 2841, 2569, 4743, 1346, 2699, 1567, 2363, 2335, 2261, 1759, 5011, 3718, 3923, 4189, 2768, 1526, 3143, 927, 1472, 1870, 1522, 1913, 2125, 2131, 1764, 1289, 4278, 4627, 4634, 4376, 4452, 4902, 966, 861, 4891, 1790, 3499, 1697, 3884, 2565, 1467, 2683, 1794, 3408, 3472, 1365, 2916, 2461, 2751, 4389, 3059, 3955, 5008, 2549, 2611, 1328, 3593, 3559, 3427, 1795, 1824, 3201, 3035, 1338, 95, 5073, 4060, 3082, 2377, 2474, 4435, 5145, 3005, 1948, 2443, 3783, 3976, 211, 1800, 3655, 2472, 2942, 1392, 1228, 3886, 3184, 3924, 2594, 5196, 2348, 4455, 3622, 4803, 2992, 4033, 1796, 4084, 3643, 3913, 1989, 4608, 3219, 3297, 1506, 3512, 3970, 3464, 5167, 2402, 2566, 4603, 1005, 3268, 5200, 4517, 3956, 1808, 3953, 1124, 1853, 2775, 5010, 3523, 3702, 1016, 3703, 307, 3251, 4833, 3323, 1856, 1857, 4128, 4243, 2383, 1931, 2767, 2078, 3414, 3128, 2026, 1930, 4957, 4117, 3448, 4993, 4502, 2207, 1148, 2259, 2510, 3526, 2108, 1053, 4657, 2729, 1663, 1767, 1476, 3364, 1333, 1825, 3825, 1622, 1375, 1564, 2281, 2449, 4332, 4860, 1641, 2599, 919, 2507, 3680, 1977, 2624, 2086, 1259, 2945, 162, 3051, 3521, 1033, 5195, 2609, 5182, 3215, 3022, 5177, 4626, 5155, 1345, 2100, 2662, 2501, 2941, 3651, 860, 2044, 4595, 3537, 2675, 1700, 1146, 1271, 982, 765, 2720, 1781, 4486, 3514, 2913, 287, 1998, 4204, 3388, 2434, 1250, 5035, 2688, 4623, 4598, 1149, 2724, 3103, 3043, 1059, 2314, 1633, 3862, 3279, 2136, 1990, 4796, 3785, 4615, 2540, 4499, 2829, 2293, 2649, 1841, 2585, 1036, 4215, 3689, 1497, 2428, 1893, 3047, 3270, 3038, 4785, 4001, 3121, 1523, 5121, 2011, 1755, 4958, 2416, 2877, 3853, 3286, 3191, 2379, 4437, 4892, 1050, 1786, 1865, 3535, 3532, 2781, 2189, 920, 4067, 3449, 941, 4121, 3570, 952, 235, 757, 996, 1776, 4720, 2723, 1936, 1144, 2503, 3782, 3071, 159, 1680, 3250, 4604, 2494, 3594, 3100, 970, 4809, 4168, 1105, 3608, 1805, 1684, 4072, 3238, 1944, 4102, 5091, 2708, 2376, 4049, 1589, 1521, 1247, 4264, 1828, 4401, 5146, 3256, 1814, 2727, 4169, 1037, 4545, 1480, 1042, 4287, 1501, 3707, 2818, 2838, 2673, 807, 1007, 3823, 4097, 2250, 5199, 3705, 2700, 177, 5272, 4429, 5115, 4213, 2109, 4887, 2323, 2227, 5174, 233, 4222, 2326, 1770, 4322, 3714, 2396, 2114, 3293, 3385, 2657, 2677, 57, 1434, 3996, 732, 4160, 2797, 5281, 2213, 4553, 3382, 1374, 2134, 5092, 2804, 2260, 1616, 4188, 972, 2130, 4166, 1909, 1647, 4112, 4614, 1855, 4913, 949, 3730, 4152, 4307, 2761, 2095, 3445, 3155, 2577, 1656, 775, 974, 1427, 718, 1593, 3263, 1910, 4621, 3903, 5058, 3061, 2855, 2482, 3471, 1937, 2710, 3867, 721, 5159, 799, 2193, 4271, 979, 155, 5158, 1317, 3681, 1152, 1599, 2808, 59, 2651, 3350, 2127, 3628, 260, 912, 2208, 4148, 935, 4426, 4539, 66, 3627, 1258, 3493, 443, 4205, 1331, 79, 1582, 3737, 3045, 3719, 2361, 3795, 2985, 2458, 2826, 1643, 4671, 2439, 3370, 186, 5296, 2581, 1466, 2490, 168, 3160, 1739, 405, 4052, 4635, 5176, 2048, 3957, 1940, 4137, 3097, 3641, 1784, 3799, 1806, 4336, 2283, 4433, 1306, 931, 1447, 4021, 3459, 4179, 2289, 4952, 2465, 1918, 2952, 2680, 4211, 3349, 2101, 2187, 2489, 3583, 2264, 1978, 1508, 2631, 2312, 4252, 2036, 2763, 3750, 2545, 3677, 2435, 3411, 1730, 4500, 4059, 1120, 2977, 2004, 2973, 699, 3179, 3418, 1802, 2013, 2873, 1959, 4153, 1688, 3347, 4384, 3317, 4176, 4229, 3728, 3741, 2610, 1517, 4347, 3206, 4070, 2445, 1376, 2790, 4367, 2747, 926, 3832, 4988, 4058, 3380, 937, 5287, 3751, 5166, 2561, 693, 275, 4619, 1733, 1932, 1181, 3437, 2023, 4625, 442, 2762, 4342, 2627, 4277, 2172, 3290, 3085, 4069, 3371, 1894, 991, 90, 3288, 2041, 2949, 1511, 3579, 1518, 3921, 1530, 2685, 5203, 4613, 3120, 4995, 2813, 2589, 2812, 2635, 2957, 3130, 3114, 3723, 1278, 1282, 782, 4483, 3511, 1999, 2276, 1373, 2849, 2519, 2749, 5284, 2884, 3357, 1721, 3054, 3548, 2658, 4998, 3368, 427, 1197, 1713, 1500, 1073, 1462, 2704, 4310, 1801, 1710, 4334, 1458, 1428, 3544, 4171, 776, 1401, 829, 2118, 2364, 1473, 3011, 2171, 4821, 2083, 1377, 5303, 1947, 3695, 4432, 1273, 4341, 2022, 1888, 3616, 3344, 4572, 3157, 2674, 2554, 190, 2807, 1666, 3607, 3150, 1421, 1779, 3165, 1397, 3863, 4476, 3821, 2223, 2029, 3561, 2505, 1558, 5038, 895, 1726, 3276, 3096, 3467, 3777, 1960, 3830, 731, 1897, 3452, 2978, 3359, 975, 1552, 1178, 938, 1028, 2999, 774, 4542, 1021, 802, 3434, 3397, 4870, 2860, 3726, 2254, 2373, 2800, 2441, 2911, 2088, 2879, 4023, 3166, 3013, 84, 4090, 4617, 3902, 809, 454, 4789, 1550, 1772, 3451, 1570, 1429, 1583, 2002, 1836, 5205, 2069, 3292, 1087, 1352, 3590, 4489, 2212, 3489, 4651, 2981, 3769, 2153, 100, 3230, 4928, 1542, 3460, 4521, 1718, 2209, 901, 1539, 2182, 1303, 4495, 4079, 5161, 87, 1914, 4596, 3211, 3633, 3384, 147, 3217, 3255, 3064, 4959, 4827, 1198, 5007, 2621, 4450, 1703, 925, 3278, 4524, 4798, 4875, 2195, 1933, 3442, 3513, 3845, 2972, 3636, 3424, 3313, 1505, 3012, 4362, 2822, 2034, 2051, 2466, 1484, 5290, 3275, 1367, 794, 1482, 4143, 1057, 2600, 4511, 2695, 932, 818, 4015, 1255, 3876, 3624, 127, 4944, 2421, 1635, 4115, 2878, 3562, 884, 2721, 3010, 3362, 3977, 1048, 2984, 340, 3634, 3525, 1232, 946, 930, 2558, 4673, 1091, 2384, 851, 2556, 2754, 1216, 4167, 2583, 1000, 4360, 4051, 1027, 2115, 2463, 2770, 716, 4012, 2524, 869, 4943, 516, 1807, 3585, 1496, 1712, 3305, 1363, 1580, 2025, 4584, 2367, 3480, 4529, 3716, 2543, 3727, 1810, 4852, 3679, 5120, 4482, 160, 734, 3534, 2160, 4122, 1702, 1089, 2037, 5254, 1251, 3711, 1090, 2772, 2405, 3701, 898, 1157, 1418, 1540, 1559, 2148, 939, 4402, 1394, 3186, 3374, 2542, 2857, 4782, 3527, 2636, 1804, 3146, 2320, 726, 4879, 3306, 2532, 4630, 2637, 1778, 915, 5173, 2020, 4819, 3819, 3170, 1043, 2183, 3212, 4451, 356, 248, 4593, 3753, 3533, 2996, 2613, 1791, 4068, 3483, 3907, 2645, 4308, 3591, 2058, 4315, 4522, 4352, 2341, 1878, 1777, 3210, 4921, 4055, 1047, 1266, 1525, 2371, 3111, 1820, 2806, 797, 3937, 654, 1415, 4904, 3672, 2897, 4909, 3541, 1884, 3289, 3154, 1336, 4107, 1651, 1015, 4420, 3135, 2085, 2422, 3778, 519, 1491, 3498, 1573, 1714, 1766, 5271, 5162, 943, 1763, 1017, 58, 4403, 146, 5150, 1424, 4591, 922, 3465, 3652, 933, 2406, 762, 4813, 3044, 1993, 4588, 1503, 5222, 1565, 4133, 5223, 3840, 1653, 2512, 780, 1765, 1288, 4585, 3412, 1498, 4063, 910, 3746, 4817, 3682, 2255, 738, 498, 2592, 1952, 1241, 1430, 2476, 5151, 3509, 1845, 2459, 2107, 2852, 514, 4383, 1431, 4182, 3492, 842, 5135, 5037, 3398, 4749, 1660, 2965, 2516, 4028, 4594, 5056, 323, 2686, 4100, 2343, 65, 1298, 2444, 871, 3571, 1341, 3161, 3134, 4494, 4150, 1556, 4990, 768, 3978, 588, 1654, 4193, 3645, 4258, 4632, 863, 3406, 2295, 1939, 1594, 4856, 1125, 2753, 870, 3809, 2328, 2269, 1696, 5050, 4260, 1862, 3207, 4873, 3381, 4653, 4111, 3125, 2736, 229, 4191, 2798, 1691, 3565, 3428, 759, 3458, 3258, 2447, 2419, 2801, 2555, 4606, 5036, 4453, 91, 4248, 2668, 1486, 2690, 1775, 1946, 1631, 1252, 1504, 2908, 3080, 4339, 5171, 3761, 4550, 3087, 1658, 3225, 3639, 4755, 4159, 2590, 3837, 2769, 3426, 1827, 1280, 5113, 3455, 3098, 2485, 2340, 4950, 3933, 3969, 2898, 1357, 4306, 3327, 2456, 888, 1585, 4149, 4091, 2491, 1874, 3575, 466, 3057, 75, 4220, 2411, 4978, 4000, 3198, 98, 3882, 4240, 3400, 4395, 3960, 4201, 1681, 965, 4509, 5234, 4684, 4206, 1385, 892, 841, 2784, 135, 353, 2814, 2731, 2355, 3129, 2442, 4418, 1479, 4118, 2080, 4224, 4670, 2550, 4968, 777, 3721, 3456, 4515, 3516, 4519, 4442, 2397, 2147, 1704, 4725, 3338, 1869, 951, 3505, 3453, 2511, 4083, 1065, 1646, 2799, 3939, 1020, 2499, 3147, 2689, 1147, 2616, 4387, 4616, 4371, 2124, 923, 4364, 1852, 1896, 2948, 2342, 4375, 1985, 2820, 4251, 3195, 795, 1339, 2063, 2279, 156, 2133, 632, 4302, 4345, 1417, 1018, 4991, 1588, 3597, 4002, 2184, 2703, 1992, 2225, 934, 4085, 3041, 1209, 1950, 1737, 4863, 3088, 551, 3053, 3644, 1279, 1581, 2414, 2837, 3709, 5064, 4301, 4672, 56, 2350, 3932, 2632, 5192, 3574, 107, 3803, 3531, 2811, 2964, 1742, 3948, 1353, 2181, 3067, 1860, 1425, 5233, 3136, 2370, 3052, 4646, 1793, 4721, 1295, 2716, 4964, 115, 4228, 2870, 3729, 1975, 206, 3755, 2986, 3316, 1994, 4490, 3852, 2603, 3618, 2597, 2073, 3846, 4457, 2024, 1369, 928, 784, 5178, 993, 3274, 3105, 440, 4664, 4445, 1515, 1285, 3089, 3865, 872, 1312, 2192, 2003, 2347, 3073, 2241, 5060, 1063, 3553, 2531, 856, 3431, 3252, 3752, 1598, 3265, 805, 1690, 3757, 1854, 4178, 3685, 5005, 843, 2563, 1349, 2891, 3346, 4514, 4936, 5289, 2268, 109, 803, 4573, 2958, 4114, 388, 4030, 1722, 2954, 3961, 3733, 3310, 391, 1302, 3861, 2672, 192, 1398, 4293, 2330, 3308, 2094, 3197, 3249, 823, 3070, 4440, 4454, 2087, 2483, 2887, 3827, 1839, 3528, 4326, 3857, 3369, 1683, 1454, 4289, 4328, 3715, 4549, 483, 1592, 3337, 2284, 3077, 5136, 874, 2517, 2032, 4129, 533, 852, 4492, 1928, 1362, 2990, 3231, 3223, 3546, 4317, 5024, 1301, 4505, 997, 1088, 2488, 4404, 3190, 3856, 4173, 344, 611, 3036, 4528, 3717, 1244, 2424, 1590, 2914, 4216, 3669, 3014, 5175, 1586, 3598, 3842, 2027, 1529, 3262, 1661, 4843, 2552, 1433, 2216, 4219, 1040, 854, 3141, 1902, 4816, 4353, 4487, 1899, 1912, 522, 378, 3140, 3163, 4561, 2712, 3267, 3691, 1309, 4136, 3974, 2178, 1393, 1372, 1286, 1360, 2146, 2164, 1541, 2544, 2334, 3555, 136, 4062, 332, 5164, 645, 839, 1568, 4088, 111, 83, 2236, 1707, 119, 3377, 2031, 3779, 2989, 110, 813, 3811, 4313, 123, 4076, 2158, 2656, 64, 1442, 2238, 4142, 2149, 3826, 1002, 2105, 4955, 1971, 2864, 80, 3573, 2137, 3640, 3205, 2206, 4016, 2247, 1571, 449, 2559, 3216, 301, 2755, 2615, 3287, 3654, 4890, 2065, 2889, 339, 3137, 138, 94, 4099, 3003, 4019, 1584, 3395, 4187, 2562, 3477, 4098, 4667, 4039, 2018, 125, 4567, 112, 4139, 1396, 3034, 3461, 1291, 3567, 489, 1597, 3410, 2186, 4979, 48, 3771, 2815, 273, 855, 2224, 5252, 1485, 4470, 3204, 4361, 4340, 2315, 4503, 2607, 4400, 3720, 3614, 3545, 1465, 4031, 3413, 571, 2966, 2246, 3192, 5119, 2302, 2944, 3938, 3142, 2257, 3808, 2165, 55, 4066, 2738, 1832, 2297, 2682, 4017, 3774, 4300, 3340, 484, 2506, 5132, 3596, 781, 1637, 1743, 2882, 2861, 212, 3094, 4138, 5278, 3447, 4538, 1426, 4223, 3430, 1436, 2881, 103, 53, 4570, 2151, 1634, 3688, 3365, 3568, 3272, 1290, 1368, 544, 3985, 2625, 3885, 2513, 4330, 2982, 497, 2198, 3765, 49, 2319, 4155, 1390, 3326, 3450, 105, 3731, 918, 2825, 1675, 2040, 4479, 3781, 2495, 2601, 3894, 1596, 1275, 4590, 4947, 2629, 3029, 4560, 3277, 3962, 358, 685, 2455, 2935, 4124, 1900, 352, 1607, 2576, 4441, 4449, 1446, 2760, 2741, 3794, 936, 1935, 150, 363, 4669, 2362, 2920, 1785, 2728, 748, 4288, 4120, 1771, 1788, 5020, 85, 1603, 1551, 2321, 4629, 1885, 954, 2014, 2580, 15, 4422, 3404, 1619, 2473, 2733, 2007, 2252, 5286, 2663, 86, 4579, 51, 2053, 3476, 3918, 2139, 4548, 2787, 4537, 4508, 4249, 1304, 2278, 3283, 3376, 4185, 1293, 3780, 1749, 2324, 4218, 3776, 3004, 101, 2900, 3973, 4329, 3046, 62, 1024, 5292, 5299, 149, 2633, 2956, 272, 1875, 4250, 3099, 4644, 3055, 2816, 564, 153, 3560, 451, 1858, 1826, 2365, 3683, 1991, 4356, 2579, 4233, 1058, 4125, 3356, 1728, 2536, 2401, 1384, 1035, 3791, 2937, 3529, 1438, 3284, 2144, 526, 4564, 92, 1595, 3497, 2288, 1669, 2076, 886, 4366, 2388, 1723, 1876, 2358, 2403, 499, 3361, 3646, 334, 3877, 5031, 3800, 144, 314, 3375, 703, 506, 4113, 3435, 4643, 342, 82, 1177, 1283, 3580, 3904, 4253, 2709, 3209, 1780, 668, 431, 4867, 1748, 3524, 587, 2846, 4082, 3495, 425, 3766, 4478, 1623, 2336, 3301, 270, 3152, 2035, 3253, 2557, 3416, 3303, 2168, 3076, 4209, 1934, 3704, 142, 4546, 133, 1834, 106, 3294, 798, 2332, 3551, 1813, 513, 4571, 276, 231, 2159, 3887, 3123, 3584, 2641, 2038, 4668, 2204, 1698, 4544, 2344, 368, 3617, 986, 2242, 913, 5228, 3817, 4096, 222, 324, 3133, 4020, 296, 2180, 539, 4565, 3259, 2222, 834, 3543, 3558, 1974, 5293, 4154, 921, 4861, 3247, 4135, 3415, 1819, 2643, 575, 838, 120, 2955, 4534, 2959, 2943, 2904, 903, 239, 3940, 1469, 4501, 1727, 3473, 3848, 3600, 1274, 444, 4612, 3873, 219, 5204, 3609, 3106, 3322, 1720, 1449, 573, 4886, 2969, 3168, 4622, 2157, 52, 1986, 618, 3319, 637, 2015, 1761, 3756, 5003, 2079, 77, 553, 1970, 1538, 3911, 3906, 1676, 5221, 1307, 2310, 1270, 2910, 911, 461, 1495, 337, 238, 3079, 3786, 16, 3732, 2718, 140, 1507, 4808, 962, 373, 3892, 3081, 228, 4405, 4533, 657, 2573, 1652, 102, 2642, 2750, 178, 1953, 3576, 181, 1064, 2021, 3896, 1701, 2359, 4309, 4929, 2638, 3189, 313, 4003, 959, 4951, 4920, 3156, 2156, 1823, 2480, 2679, 4507, 4480, 1954, 873, 4541, 4999, 2853, 336, 469, 1001, 2918, 1927, 3354, 4304, 1980, 4566, 4586, 460, 2968, 164, 3466, 3834, 359, 3804, 2691, 651, 249, 527, 3351, 1537, 2316, 2676, 2174, 4465, 4281, 2368, 3768, 1729, 3839, 3801, 4652, 3405, 1039, 5309, 2909, 5297, 3626, 4940, 151, 402, 2290, 3510, 531, 4305, 595, 608, 4592, 495, 3124, 3269, 269, 182, 3084, 5194, 2277, 199, 5154, 2620, 426, 4274, 4298, 4956, 4527, 2693, 3788, 3895, 309, 1566, 188, 295, 255, 256, 1413, 5002, 1895, 3422, 5043, 2450, 5028, 104, 1799, 992, 830, 2313, 4046, 584, 3564, 3772, 4666, 4311, 661, 603, 3153, 3021, 389, 4663, 5047, 1587, 1792, 3049, 406, 4208, 4244, 2248, 828, 4157, 3115, 4580, 3673, 2112, 4997, 398, 622, 2926, 3612, 671, 17, 2939, 4917, 3926, 4911, 548, 202, 2200, 3706, 122, 2872, 2605, 350, 4587, 4108, 4724, 945, 183, 385, 50, 161, 4221, 4939, 1315, 2780, 5051, 114, 4558, 2805, 4536, 1901, 4436, 67, 630, 154, 4241, 430, 304, 1574, 5288, 601, 644, 1768, 166, 81, 2393, 2374, 3815, 5089, 463, 1532, 555, 3222, 2471, 467, 4272, 658, 5012, 2851, 4337, 621, 4104, 145, 244, 2468, 4656, 2176, 3353, 2431, 2479, 4525, 550, 361, 4535, 230, 4497, 3355, 417, 3847, 3595, 1922, 152, 393, 169, 390, 4516, 2251, 4195, 844, 840, 4530, 620, 5270, 656, 4933, 1299, 4581, 3367, 457, 158, 482, 18, 2883, 2232, 1863, 4247, 3880, 3118, 5208, 263, 3975, 1851, 3033, 4926, 3621, 562, 377, 210, 447, 1461, 3144, 2893, 1460, 1411, 266, 5225, 310, 4609, 4927, 566, 541, 481, 4044, 605, 4119, 121, 78, 529, 473, 3221, 2541, 4844, 5001, 1572, 253, 4555, 672, 247, 400, 54, 3304, 3202, 2660, 128, 175, 4562, 113, 2309, 532, 474, 438, 511, 4719, 636, 3722, 197, 397, 4868, 184, 351, 488, 581, 4396, 3373, 490, 396, 476, 456, 2905, 241, 254, 257, 12, 650, 5269, 3491, 196, 280, 319, 3963, 297, 4577, 2275, 5253, 404, 5305, 569, 528, 4574, 71, 470, 4056, 3606, 7, 4256, 2810, 311, 302, 4181, 148, 6, 1655, 500, 4227, 4, 4327, 3018, 2915, 591, 5157, 208, 93, 4458, 4900, 218, 163, 4948, 626, 317, 129, 25, 2398, 89, 600, 4446, 366, 343, 648, 320, 629, 3556, 3182, 407, 512, 5229, 627, 292, 203, 547, 424, 4559, 3342, 423, 225, 613, 47, 76, 325, 143, 432, 116, 4752, 4523, 4941, 3792, 357, 5206, 4931, 2274, 215, 2093, 5261, 616, 367, 4532, 491, 652, 580, 5149, 502, 4674, 557, 480, 413, 641, 450, 403, 436, 492, 3481, 5048, 639, 5226, 8, 4815, 2764, 308, 4438, 240, 349, 3694, 1609, 441, 592, 1618, 173, 364, 11, 384, 2993, 4408, 4922, 4390, 4918, 5030, 187, 496, 108, 223, 126, 479, 3237, 631, 281, 5250, 4919, 3167, 289, 329, 510, 118, 5262, 3910, 560, 4462, 585, 321, 375, 670, 1872, 213, 4556, 485, 185, 165, 468, 421, 4459, 501, 348, 338, 221, 4582, 2850, 647, 3538, 459, 237, 518, 568, 204, 1774, 520, 139, 530, 180, 2983, 3762, 4893, 246, 563, 3470, 458, 4295, 157, 271, 1524, 4554, 614, 559, 88, 625, 170, 4751, 5004, 3833, 570, 667, 612, 604, 3517, 217, 509, 4898, 429, 655, 4862, 5306, 623, 420, 74, 5291, 3423, 4262, 322, 5260, 72, 610, 3117, 540, 4106, 1624, 589, 4543, 5147, 290, 5131, 1464, 386, 43, 4547, 286, 5170, 174, 5, 525, 577, 4975, 4837, 63, 226, 387, 227, 189, 141, 24, 582, 291, 4655, 194, 117, 486, 259, 205, 4825, 666, 607, 328, 376, 475, 293, 4953, 70, 419, 13, 477, 5258, 567, 599, 414, 261, 191, 4753, 2595, 4884, 4832, 609, 586, 537, 410, 576, 662, 305, 341, 4962, 2006, 5044, 635, 416, 4325, 5230, 279, 124, 14, 453, 268, 5160, 369, 556, 28, 316, 99, 521, 4748, 633, 5046, 333, 660, 578, 312, 634, 41, 542, 4857, 4531, 663, 590, 434, 267, 5087, 545, 195, 46, 649, 5039, 303, 418, 437, 29, 5180, 465, 179, 274, 318, 515, 619, 615, 299, 277, 538, 549, 507, 30, 628, 97, 4540, 33, 646, 565, 642, 130, 10, 572, 32, 167, 664, 331, 4980, 73, 4992, 5018, 347, 4925, 478, 593, 37, 504, 5263, 505, 638, 27, 5266, 422, 5267, 5285, 5259, 262, 365, 35, 415, 21, 45, 200, 283, 523, 561, 4659, 5077, 4846, 327, 4660, 428, 31, 536, 4578, 452, 4996, 472, 552, 34, 445, 23, 383, 4895, 5232, 298, 4976, 265, 446, 464, 42, 4924, 379, 36, 134, 372, 346, 294, 5264, 659, 4981, 171, 345, 19, 232, 5227, 643, 435, 3, 252, 234, 4866, 4589, 216, 40, 5307, 462, 4877, 0, 574, 433, 5017, 5265, 250, 5052, 282, 209, 137, 4583, 583, 4620, 4665, 44, 624, 546, 4855, 371, 5224, 669, 193, 5013, 487, 4974, 602, 9, 4874, 5070, 22, 381, 4600, 20, 258, 4757, 198, 4965, 524, 5059, 596, 370, 4987, 335, 598, 38, 411, 207, 1, 409, 355, 597, 243, 471, 4650, 5193, 4730, 242, 4923, 326, 214, 606, 4662, 278, 4935, 251, 4896, 2, 448, 172, 5137, 579, 285, 554, 26, 39, 5310, 360, 4982, 5076, 4661, 653, 439, 4942, 5308, 201, 494, 543, 224, 594, 382, 5088, 640, 4654, 673, 306, 4977, 362, 5130, 399, 558, 394, 245, 4954, 4970, 236, 665, 534, 4963, 5268, 5000]
Number of tracks with MSE &gt; 1: 203</code></pre>
</div>
</div>
<p>Let’s take a closer look at the 10 tracks with highest MSE.</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lowest MSEs"</span>)</span>
<span id="cb29-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb29-3">    track <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> desc_index[i]</span>
<span id="cb29-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Track: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>track<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, MSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mses[track]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Description: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_targets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>iloc[track, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Lowest MSEs
Track: 681, MSE: 16.40846824645996, Description: ATAC:BM1137-GMP3-high-ATAC-2 / Bone Marrow CD34+ / GMP-C
Track: 680, MSE: 15.823975563049316, Description: ATAC:BM1137-GMP2-mid-ATAC-1 / Bone Marrow CD34+ / GMP-B
Track: 677, MSE: 10.527182579040527, Description: ATAC:BM1077-MCP / Bone Marrow CD34+ / pDC
Track: 5216, MSE: 10.286799430847168, Description: CAGE:CD4+CD25-CD45RA- memory conventional T cells expanded,
Track: 879, MSE: 10.127237319946289, Description: CHIP:EBF1:GM12878
Track: 5212, MSE: 10.109642028808594, Description: CAGE:CD4+CD25+CD45RA- memory regulatory T cells expanded,
Track: 679, MSE: 8.803466796875, Description: ATAC:BM1137-GMP1-low-ATAC-2 / Bone Marrow CD34+ / GMP-A
Track: 675, MSE: 8.646425247192383, Description: ATAC:BM0106-UNK-ATAC-2 / Bone Marrow CD34+ / UNK
Track: 5211, MSE: 8.455514907836914, Description: CAGE:CD4+CD25+CD45RA+ naive regulatory T cells expanded,
Track: 5084, MSE: 8.035715103149414, Description: CAGE:CD8+ T Cells (pluriselect), , donation2</code></pre>
</div>
</div>
<p>They are all ChIP-Seq tracks.</p>
<p>Next, we look at the distribution of differences for each track.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">df_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(diff))</span>
<span id="cb31-2">sums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_diff.describe()</span></code></pre></div>
</div>
<p>We first sort the tracks by biggest difference (absolute value) across the bins.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">desc_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5313</span>), reverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: sums.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>, x]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># diff</span></span></code></pre></div>
</div>
<p>Now we print summary statistics for tracks with the largest differences.</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">sums.iloc[:, [i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> desc_col[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">680</th>
<th data-quarto-table-cell-role="th">681</th>
<th data-quarto-table-cell-role="th">5216</th>
<th data-quarto-table-cell-role="th">5212</th>
<th data-quarto-table-cell-role="th">5211</th>
<th data-quarto-table-cell-role="th">5084</th>
<th data-quarto-table-cell-role="th">5210</th>
<th data-quarto-table-cell-role="th">675</th>
<th data-quarto-table-cell-role="th">679</th>
<th data-quarto-table-cell-role="th">879</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>896.000000</td>
<td>8.960000e+02</td>
<td>8.960000e+02</td>
<td>896.000000</td>
<td>8.960000e+02</td>
<td>8.960000e+02</td>
<td>8.960000e+02</td>
<td>8.960000e+02</td>
<td>8.960000e+02</td>
<td>896.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>0.011990</td>
<td>1.194256e-02</td>
<td>7.908553e-03</td>
<td>0.008704</td>
<td>6.668654e-03</td>
<td>5.628869e-03</td>
<td>7.143194e-03</td>
<td>8.547849e-03</td>
<td>8.085364e-03</td>
<td>0.008726</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>0.132425</td>
<td>1.348729e-01</td>
<td>1.069159e-01</td>
<td>0.105924</td>
<td>9.696898e-02</td>
<td>9.458717e-02</td>
<td>9.091205e-02</td>
<td>9.791663e-02</td>
<td>9.884752e-02</td>
<td>0.106015</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>0.000004</td>
<td>6.109476e-07</td>
<td>2.235174e-08</td>
<td>0.000003</td>
<td>2.905726e-07</td>
<td>7.599592e-07</td>
<td>6.258488e-07</td>
<td>1.788139e-07</td>
<td>5.960464e-08</td>
<td>0.000002</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>0.000283</td>
<td>1.190659e-04</td>
<td>1.312718e-04</td>
<td>0.000177</td>
<td>1.314357e-04</td>
<td>9.706244e-05</td>
<td>1.075892e-04</td>
<td>3.350973e-04</td>
<td>1.384579e-04</td>
<td>0.000233</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>0.000666</td>
<td>3.719628e-04</td>
<td>8.370727e-04</td>
<td>0.000932</td>
<td>6.040856e-04</td>
<td>2.903268e-04</td>
<td>7.338598e-04</td>
<td>7.790923e-04</td>
<td>4.302710e-04</td>
<td>0.000602</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>0.002077</td>
<td>1.510914e-03</td>
<td>3.206924e-03</td>
<td>0.003851</td>
<td>2.546199e-03</td>
<td>1.022507e-03</td>
<td>3.135756e-03</td>
<td>2.516076e-03</td>
<td>1.392171e-03</td>
<td>0.001985</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>3.384811</td>
<td>3.294062e+00</td>
<td>3.128067e+00</td>
<td>3.103455</td>
<td>2.858849e+00</td>
<td>2.771439e+00</td>
<td>2.667389e+00</td>
<td>2.586663e+00</td>
<td>2.585398e+00</td>
<td>2.500622</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Here we plot distributions for the tracks with largest (absolute) differences. Take note that this plot shows distributions of differences in both directions. This plot confirms the table above, that despite having outliers their mean difference is still very close to 0.</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [diff[:,i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> desc_col[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]]</span>
<span id="cb34-2">plt.boxplot(data)</span>
<span id="cb34-3">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/comparing-enformer-prediction-averages/comparing-averages_files/figure-html/cell-26-output-1.png" width="582" height="411"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/comparing-enformer-prediction-averages/comparing-averages.html</guid>
  <pubDate>Thu, 20 Jul 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Getting started on Polaris</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/polaris-intro/index.html</link>
  <description><![CDATA[ 




<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<p>More info can be found on:</p>
<ul>
<li><a href="https://docs.alcf.anl.gov/polaris/getting-started/">Main Page</a></li>
<li><a href="https://docs.alcf.anl.gov/running-jobs/example-job-scripts/">Example Job Scripts</a></li>
</ul>
</section>
<section id="shortcuts" class="level2">
<h2 class="anchored" data-anchor-id="shortcuts">Shortcuts</h2>
<ul>
<li>Login: <code>ssh s1mi@polaris.alcf.anl.gov</code></li>
<li>Main project storage: <code>/lus/grand/projects/TFXcan</code></li>
<li>Interactive Job: <code>qsub -I -A TFXcan -l select=1 -l filesystems=home:grand -l walltime=1:00:00 -q debug</code></li>
</ul>
</section>
<section id="basic-job-script" class="level2">
<h2 class="anchored" data-anchor-id="basic-job-script">Basic Job Script</h2>
<pre><code>#!/bin/bash
#PBS -A $PROJECT
#PBS -lwalltime=01:00:00
#PBS -lselect=4
#PBS -lsystem=polaris
#PBS -lfilesystems=home:eagle

rpn=4 # assume 1 process per GPU
procs=$((PBS_NODES*rpn))

# job to “run” from your submission directory
cd $PBS_O_WORKDIR

module load &lt;something&gt;

set +x # report all commands to stderr
env
mpiexec -n $procs -ppn $rpn --cpu-bind core -genvall ./bin &lt;opts&gt;
</code></pre>
</section>
<section id="conda-environments" class="level2">
<h2 class="anchored" data-anchor-id="conda-environments">Conda Environments</h2>
<p>Before activating and deactivating environments, we need to run <code>module load conda</code>.</p>
<p>To create an environment:</p>
<pre><code>module load conda

export http_proxy=http://proxy.alcf.anl.gov:3128
export https_proxy=$http_proxy

conda create -n ml-python python=3.10
conda activate ml-python
conda install -y jupyter nb_conda ipykernel mpi
conda install -y pytorch torchvision -c pytorch
conda install -c conda-forge tensorflow
python -m ipykernel install --user --name ml-python</code></pre>
<p>The last line creates a new directory <code>~/.local/share/jupyter/kernels/ml-python</code>. We add a couple lines to <code>kernel.json</code> so that we can use the new environment in the our Jupyter notebooks:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"argv"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/.conda/envs/ml-python/bin/python"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-m"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ipykernel_launcher"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-f"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{connection_file}"</span></span>
<span id="cb3-8">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"display_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ml-python"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"language"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"env"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"CONDA_PREFIX"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/.conda/envs/ml-python"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"PATH"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/.conda/envs/ml-python"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"http_proxy"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://proxy.alcf.anl.gov:3128"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"https_proxy"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://proxy.alcf.anl.gov:3128"</span></span>
<span id="cb3-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metadata"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"debugger"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/polaris-intro/index.html</guid>
  <pubDate>Mon, 26 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Week 1</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/week-1/index.html</link>
  <description><![CDATA[ 




<p>Here’s my notes from the <a href="https://www.w3schools.com/python/numpy/numpy_intro.asp">w3 NumPy tutorial</a>:</p>
<section id="data-types-in-numpy" class="level2">
<h2 class="anchored" data-anchor-id="data-types-in-numpy">Data Types in Numpy:</h2>
<p>By default, Python has strings, integer, float, boolean, and complex. NumPy has extra data types:</p>
<ul>
<li>i: integer</li>
<li>b: boolean</li>
<li>u: unsigned integer</li>
<li>f: float</li>
<li>c: complex float</li>
<li>m: timedelta</li>
<li>M: datetime</li>
<li>O: object</li>
<li>S: string</li>
<li>U: unicode string</li>
<li>V: void</li>
</ul>
</section>
<section id="pytorch-notes" class="level1">
<h1>PyTorch Notes</h1>
<p>PyTorch is a machine learning framework leveraging two key features:</p>
<ul>
<li>Tensor computing on GPUs</li>
<li>Deep neural networks on an automatic differentiation engine</li>
</ul>
<p>Deep learning softwares including Enformer are built on top of PyTorch.</p>
<p>We covered the basics of the pytorch library in Python, starting with <a href="https://pytorch.org/tutorials/beginner/blitz/tensor_tutorial.html">Tensors</a>. Tensors function very similarly to NumPy arrays, but the operations can be run on GPUs. As a result, the tensor operations have counterparts in the numpy library.</p>
<p>We’ll only write about new concepts:</p>
<section id="tensors" class="level3">
<h3 class="anchored" data-anchor-id="tensors">Tensors</h3>
<p>By default, tensors are intialized on CPU. To move a tensor from CPU to GPU, we run:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]]</span>
<span id="cb1-5">x_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(data)</span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[1, 2],
        [3, 4]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available():</span>
<span id="cb3-2">  tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor.to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span>
<span id="cb3-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Device tensor is stored on: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tensor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<p>Tensors on the CPU and NumPy arrays can share their underlying memory locations, and changing one will change the other.</p>
<p>Below we convert a torch tensor to numpy array and add 1 to every element.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"t: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-3">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.numpy()</span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"n: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">t.add_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"t: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"n: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</section>
<section id="neural-networks" class="level3">
<h3 class="anchored" data-anchor-id="neural-networks">Neural Networks</h3>
<p>We use <code>torch.nn</code> and <code>torch.autograd</code> packages to develop neural networks.</p>
<p>We learned how to compute gradients for backward propagation with <code>torch.autograd</code> automatic differentiation.</p>
<p>We can <code>torch.nn</code> to first define a neural network in a <code>forward</code> function. Next, we chose a loss function, <code>nn.MSELoss</code> and run back prop as before. We update the weights with SGD update rule:</p>
<pre><code>weight = weight - learning_rate * gradient
</code></pre>
<p><code>torch.optim</code> includes various update rules that take parameters and learning rate as input.</p>
<p>We summarize the typical training procedure for a neural network:</p>
<ul>
<li>Define the neural network that has some learnable parameters (or weights)</li>
<li>Iterate over a dataset of inputs</li>
<li>Process input through the network</li>
<li>Compute the loss (how far is the output from being correct)</li>
<li>Propagate gradients back into the network’s parameters</li>
<li>Update the weights of the network, typically using a simple update rule: <code>weight = weight - learning_rate * gradient</code></li>
</ul>
<p>Lastly, we looked at training on the CIFAR-10 dataset. The process involved the same steps as before, but with a more complex network and more iterations in the training process. We also tested the model.</p>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/week-1/index.html</guid>
  <pubDate>Fri, 23 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Harlow Malloc</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/post-with-code/index.html</link>
  <description><![CDATA[ 




<p>This is a post with executable code.</p>



 ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/post-with-code/index.html</guid>
  <pubDate>Tue, 20 Jun 2023 00:00:00 GMT</pubDate>
  <media:content url="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/post-with-code/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Overview of LLM in Molecular Biology article by Serafim Batzoglou</title>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/llm-in-molecular-biology-article/index.html</link>
  <description><![CDATA[ 




<p>Read the paper <a href="https://towardsdatascience.com/large-language-models-in-molecular-biology-9eb6b65d8a30">here</a></p>
<section id="introduction-to-large-language-models" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-large-language-models">Introduction to Large Language Models</h2>
<ul>
<li>Large language models like GPT-3 are trained on extensive text data and excel at generating coherent and contextually relevant text.</li>
<li>These models can be adapted for molecular biology tasks by encoding molecular information and training them on relevant datasets.</li>
</ul>
</section>
<section id="protein-structure-prediction" class="level2">
<h2 class="anchored" data-anchor-id="protein-structure-prediction">Protein Structure Prediction</h2>
<ul>
<li>Large language models can assist in predicting protein structures from amino acid sequences.</li>
<li>Language models can generate plausible protein structures, aiding in protein folding predictions and protein engineering.</li>
<li>Challenges include the vast conformational space and the need for high-quality training data to improve accuracy.</li>
</ul>
</section>
<section id="analyzing-dna-sequences" class="level2">
<h2 class="anchored" data-anchor-id="analyzing-dna-sequences">Analyzing DNA Sequences</h2>
<ul>
<li>Language models can be trained to recognize patterns in DNA sequences and identify regulatory elements.</li>
<li>They can predict the effects of genetic mutations, aiding in understanding genetic diseases and personalized medicine.</li>
<li>Large language models have the potential to improve upon existing methods for DNA sequence analysis.</li>
</ul>
</section>
<section id="molecular-design" class="level2">
<h2 class="anchored" data-anchor-id="molecular-design">Molecular Design</h2>
<ul>
<li>Language models can generate novel molecules with desired properties, contributing to drug discovery and material science.</li>
<li>They can suggest potential compounds based on specified criteria, accelerating the search for new drugs.</li>
<li>Large language models in molecular design can assist in exploring the chemical space and generating molecules that were not previously considered.</li>
</ul>
</section>
<section id="limitations-and-challenges" class="level2">
<h2 class="anchored" data-anchor-id="limitations-and-challenges">Limitations and Challenges</h2>
<ul>
<li>Obtaining high-quality training data for molecular biology tasks remains a challenge.</li>
<li>Interpreting the outputs of language models and understanding the underlying biological mechanisms is essential.</li>
<li>Incorporating domain-specific knowledge into language models is crucial for accurate and reliable results.</li>
</ul>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/llm-in-molecular-biology-article/index.html</guid>
  <pubDate>Tue, 20 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A test run of the Enformer pipeline on Palmer Lab rat data</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/test-run-of-enformer-pipeline-on-rat-data/index.html</link>
  <description><![CDATA[ 




<p>All of the data is publicly available</p>
<ul>
<li><a href="https://hgdownload.soe.ucsc.edu/goldenPath/rn7/bigZips/rn7.fa.gz%20%7C%20gunzip%20-c%20%3E%20%7Bfasta_file%7D">Reference Genome</a></li>
<li><a href="https://ratgtex.org/data/geno/Brain.rn7.vcf.gz">Genotypes</a></li>
<li><a href="https://ratgtex.org/data/expr/Brain.rn7.expr.tpm.bed.gz">Gene Expression</a></li>
</ul>
<p>First, I checked that enformer could run on the rat data in python using code provided by deepmind.</p>
<ul>
<li><a href="code/000789972A_chr1_1001138_1014540.py">000789972A_chr1_1001138_1014540.py</a>: Personalized enformer run on individual 000789972A on chromosome 1, 1001138 to 1014540.</li>
</ul>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/test-run-of-enformer-pipeline-on-rat-data/index.html</guid>
  <pubDate>Tue, 20 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>GENETIC MEDICINE DEEP LEARNING HACKATHON 2022</title>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html</link>
  <description><![CDATA[ 




<section id="enformer-usage-notebook---participant" class="level3">
<h3 class="anchored" data-anchor-id="enformer-usage-notebook---participant">ENFORMER USAGE NOTEBOOK - PARTICIPANT</h3>
<p><strong>Authors</strong>: Saideep Gona, Temidayo Adeluwa</p>
<p><strong>Acknowledgement</strong>: - Boxiang Liu - Festus Nyasimi (for providing us with Predixcan predictions)</p>
<p><strong>Date</strong>: Saturday April 2, 2022</p>
<p>Copyright 2021 DeepMind Technologies Limited</p>
<p>Licensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p>
<pre><code> https://www.apache.org/licenses/LICENSE-2.0</code></pre>
<p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this notebook, we explore how Enformer can be used to predict the expression of protein-coding genes. We utilized some code from the <a href="https://colab.research.google.com/github/deepmind/deepmind_research/blob/master/enformer/enformer-usage.ipynb">original Enformer usage colab notebook</a>. Here, we showcase how the Enformer model can be used to predict gene expression on a GEUVADIS/1000 genomes dataset, and compare the predictions with true expression.</p>
<p><strong>“Effective gene expression prediction from sequence by integrating long-range interactions”</strong></p>
<p>Žiga Avsec, Vikram Agarwal, Daniel Visentin, Joseph R. Ledsam, Agnieszka Grabska-Barwinska, Kyle R. Taylor, Yannis Assael, John Jumper, Pushmeet Kohli, David R. Kelley</p>
<section id="steps" class="level3">
<h3 class="anchored" data-anchor-id="steps">Steps</h3>
<p>This notebook demonstrates how to - Prepare inputs for Enformer to make predictions - Make predictions with Enformer and produce figures - Compare predictions with true expression</p>
</section>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>Google Colab gives us some GPU access. This limited GPU is available to anyone with a Google account, who has signed up to use Colaboratory. We will begin by changing the runtime type to GPU. Follow the instruction below by clicking on “Runtime -&gt; Change runtime type -&gt; GPU” in the menu bar below the title of this notebook.</p>
<p><strong>Start the colab kernel with GPU</strong>: Runtime -&gt; Change runtime type -&gt; GPU</p>
<p>Below, we import tensorflow as tf, and check that the runtime has been changed to GPU.</p>
<p>kipoiseq is a package that helps us to extract sequences from fasta files given some intervals. We will install the package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure the GPU is enabled </span></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> tf.config.list_physical_devices(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPU'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Start the colab kernel with GPU: Runtime -&gt; Change runtime type -&gt; GPU'</span></span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Num GPUs Available: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tf.config.list_physical_devices(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPU'</span>)))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can ignore the pyYAML error</span></span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>echo $SHELL</span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>echo $PATH</span></code></pre></div>
</div>
<p>Biopython is a python package that helps us do many bioinfomatic analysis in python</p>
<div class="cell" data-outputid="ed234327-29b9-4d20-c68b-f4a290baad9b">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!pip install Biopython</span></span></code></pre></div>
</div>
<section id="setting-up-our-environments" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-our-environments">Setting up our environments</h3>
<p>We need to have some packages imported to help us do cool stuff.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hub <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for interacting with saved models and tensorflow hub</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for manipulating compressed files</span></span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for manipulating fasta files</span></span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kipoiseq <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Interval <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same as above, really</span></span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyfaidx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to index our reference genome file</span></span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for manipulating dataframes</span></span>
<span id="cb5-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for numerical computations</span></span>
<span id="cb5-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb5-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb5-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for plotting</span></span>
<span id="cb5-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for saving large objects</span></span>
<span id="cb5-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, sys <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># functions for interacting with the operating system</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb5-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retina'</span></span></code></pre></div>
</div>
<p><strong>Optional</strong></p>
<p>You may want to store your results. Google Drive gives about 15gb worth of storage space, used for all your files and emails.</p>
<p>Here, you can mount your Google Drive using the next line of code. You will need to provide permission access.</p>
<p>The line after that will automatically create a folder called “Enformer_Hackathon_2022” in your Google Drive.</p>
<div class="cell" data-outputid="4e8c150c-36e1-4ae0-be1f-9acac53236a0">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#from google.colab import drive</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#drive.mount('/content/drive')</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!mkdir -p "/content/drive/MyDrive/Enformer_Hackathon_2022/results/"</span></span></code></pre></div>
</div>
<p>Next,</p>
<p>We want to define some paths to save downloaded files for the duration of this notebook. These will be wiped off by Google as soon as we are done.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">transform_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gs://dm-enformer/models/enformer.finetuned.SAD.robustscaler-PCA500-robustscaler.transform.pkl'</span></span>
<span id="cb8-2">model_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://tfhub.dev/deepmind/enformer/1'</span></span>
<span id="cb8-3">fasta_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/genome.fa'</span></span></code></pre></div>
</div>
<p>We may inspect the tracks used to train the model. The CAGE prediction corresponding to B lymphoblastoid cell line is index 5110. We use B lymphoblastoid cell line predictions here because that is the cell line used to generate GEUVADIS gene expression data. You can copy the https link, paste in another tab in your browser and look through the large txt file for other tracks.</p>
<div class="cell" data-outputid="1c912c07-7a2e-46c4-fa8d-33ba698f030d">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download targets from Basenji2 dataset</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cite: Kelley et al Cross-species regulatory sequence activity prediction. PLoS Comput. Biol. 16, e1008050 (2020).</span></span>
<span id="cb9-3">targets_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_human.txt'</span></span>
<span id="cb9-4">df_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(targets_txt, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-5">df_targets[df_targets.index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>]</span></code></pre></div>
</div>
</section>
<section id="download-files" class="level3">
<h3 class="anchored" data-anchor-id="download-files">Download files</h3>
<p>We need to download some files. Give it a moment. We will download the following files: - The reference genome fasta file (we will also index this file in the process) - A text file for the transcription start sites for each chromosome - Per chromosome files that has annotation for the genes - A compressed file that contains the variant bed files for the genes and their locations.</p>
<p>Credit to Genome Reference Consortium: https://www.ncbi.nlm.nih.gov/grc</p>
<p>Schneider et al 2017 http://dx.doi.org/10.1101/gr.213611.116: Evaluation of GRCh38 and de novo haploid genome assemblies demonstrates the enduring quality of the reference assembly</p>
<p>Make a data directory, and download the necessary bed files and chromosome annotation files</p>
<p><strong>NB:</strong> You may decide to download these files into your “/content/drive/MyDrive/Enformer_Hackathon_2022/” directory. <strong>You don’t need to do this</strong>. But if you want permanent access to the files we use in this notebook, you can change the path from “/home/s1mi/enformer_tutorial/” to “/content/drive/MyDrive/Enformer_Hackathon_2022/”, and modify what you need accordingly.</p>
<p>The next line of code will download the reference genome fasta file and index this file.</p>
<div class="cell" data-outputid="09b1c79a-2b86-4555-f16b-36313b4d5dd9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reference genome and indexed</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!wget -O - https://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/hg19.fa.gz | gunzip -c &gt; {fasta_file}</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#pyfaidx.Faidx(fasta_file)</span></span></code></pre></div>
</div>
<p>The next lines of code will download the variation bed files, and we have created links to help us download the variation bed files for each chromosome, for each gene.</p>
<div class="cell" data-outputid="9de5f0ba-973b-441a-a498-618066bdd40f">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">chrom_bed_downloads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://uchicago.box.com/shared/static/du77wf31li38tciv8imivwu57svae03p.csv"</span>)</span>
<span id="cb11-2">chrom_bed_downloads.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chrom_bed_downloads[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chroms"</span>]</span>
<span id="cb11-3"></span>
<span id="cb11-4">chrom_bed_downloads.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>We will define a function to help us download bed variation files for a given gene or list of genes</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> download_chrom_beds(chromosome, genes, downloads_table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chrom_bed_downloads):</span>
<span id="cb12-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Downloads bed/variation files for a chromosome and list of genes</span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb12-5"></span>
<span id="cb12-6">  link <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> downloads_table.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(chromosome), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"link"</span>]</span>
<span id="cb12-7">  chr_which <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chromosome</span>
<span id="cb12-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes:</span>
<span id="cb12-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/individual_beds/chr'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chromosome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/chr'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chromosome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.bed'</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the file is in the folder, no need to download again</span></span>
<span id="cb12-10">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb12-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>curl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>L {link} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>home<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>s1mi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>enformer_tutorial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>chr_{chromosome}_bed.tar.gz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> cd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>home<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>s1mi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>enformer_tutorial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> tar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>zxf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>home<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>s1mi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>enformer_tutorial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>chr_{chromosome}_bed.tar.gz .<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>individual_beds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>{chr_which}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>{chr_which}_{gene}.bed</span>
<span id="cb12-12"></span>
<span id="cb12-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove the download tar.gz file</span></span>
<span id="cb12-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>home<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>s1mi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>enformer_tutorial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>chr_{chromosome}_bed.tar.gz</span></code></pre></div>
</div>
<p>We don’t need this function yet. But we can test out how it works.</p>
<p>Assuming we want to download the variation files for ‘ERAP1’, which is located on chromosome 5…</p>
<p>This will download the bed file into /home/s1mi/enformer_tutorial/individual_beds/chr5/</p>
<div class="cell" data-outputid="fbd87143-2693-44b9-941b-b39d856d99f0">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">download_chrom_beds(chromosome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5'</span>, genes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP2'</span>])</span></code></pre></div>
</div>
<p>And when you need the file, you can read it in like…</p>
<div class="cell" data-outputid="b098aa73-1e39-4410-e165-e28f689c42c5">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">erap1_variations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/individual_beds/chr5/chr5_ERAP1.bed'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-2">erap1_variations.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>You can pass in a list of genes as long as they are all located on that chromosome.</p>
<p>In the next block of code, we download the TSS for each chromosome and the genes in that chromosome, as wells as the per chromosome gene annotations. We need this information to estimate predictions.</p>
<div class="cell" data-outputid="bd64a030-c1c7-4377-f7d9-91834054774b">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!curl -L https://uchicago.box.com/shared/static/perc3uabzzd267cbp8zc0inwgrmur7pu.gz --output /home/s1mi/enformer_tutorial/chr_tss.tar.xz &amp;&amp; cd /home/s1mi/enformer_tutorial/ &amp;&amp; tar -zxf /home/s1mi/enformer_tutorial/chr_tss.tar.xz</span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!mkdir -p /home/s1mi/enformer_tutorial/gene_chroms #creates a folder to hold our files</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!curl -L https://uchicago.box.com/shared/static/e2kiwrjlgqqio0pc37a2iz7l5bqbv57u.gz --output /home/s1mi/enformer_tutorial/gene_chroms/gene_chroms.tar.gz &amp;&amp; cd /home/s1mi/enformer_tutorial/gene_chroms/ &amp;&amp; tar -zxf /home/s1mi/enformer_tutorial/gene_chroms/gene_chroms.tar.gz</span></span></code></pre></div>
</div>
</section>
<section id="how-do-we-want-to-go-about-using-enformer-given-all-these-files-we-just-downloaded" class="level3">
<h3 class="anchored" data-anchor-id="how-do-we-want-to-go-about-using-enformer-given-all-these-files-we-just-downloaded">How do we want to go about using Enformer given all these files we just downloaded?</h3>
<p>As we know, enformer’s input is a single strand genome sequence. Yet, we are interested in predicting on population level data which includes individual-specific variation. To get around this limitation, we will treat each individual as the sum of their haplotypes. Using the phased variant data around each gene (stored in the variant bed files) to modify the reference sequence, we can create two distinct haplotype sequences for each individual. The sum of both of Enformer’s haplotype predictions serves as an individual-specific, additive estimate which we can correlate with true predictions. Together, the files we downloaded give us all the information we need to build these haplotype sequences.</p>
<p>Althought enformer predicts a wide array of functional output, we will focus here on gene expression in lymphoblastoid cells allowing for correlation against ground truth Geuvadis gene expression data.</p>
<p>There are many functions that we have defined in the next code block. You can explore them later, but for now, simply run the block by clicking on the play button.</p>
</section>
<section id="code" class="level3">
<h3 class="anchored" data-anchor-id="code">Code</h3>
<p>Next, we have some functions that will help us along the way. Classes and methods defined in this code block can be found in the <a href="https://colab.research.google.com/github/deepmind/deepmind_research/blob/master/enformer/enformer-usage.ipynb">original Enformer usage colab notebook</a>.</p>
<div class="cell" data-outputid="e6a400e0-0c95-486c-fa53-a59c20ffd1f1">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title `Enformer`, `EnformerScoreVariantsNormalized`, `EnformerScoreVariantsPCANormalized`,</span></span>
<span id="cb16-2">SEQUENCE_LENGTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">393216</span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Enformer:</span>
<span id="cb16-5"></span>
<span id="cb16-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url):</span>
<span id="cb16-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hub.load(tfhub_url).model</span>
<span id="cb16-8"></span>
<span id="cb16-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb16-10">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs)</span>
<span id="cb16-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {k: v.numpy() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> predictions.items()}</span>
<span id="cb16-12"></span>
<span id="cb16-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@tf.function</span></span>
<span id="cb16-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> contribution_input_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_sequence,</span>
<span id="cb16-15">                              target_mask, output_head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>):</span>
<span id="cb16-16">    input_sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_sequence[tf.newaxis]</span>
<span id="cb16-17"></span>
<span id="cb16-18">    target_mask_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.reduce_sum(target_mask)</span>
<span id="cb16-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tf.GradientTape() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tape:</span>
<span id="cb16-20">      tape.watch(input_sequence)</span>
<span id="cb16-21">      prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.reduce_sum(</span>
<span id="cb16-22">          target_mask[tf.newaxis] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb16-23">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(input_sequence)[output_head]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> target_mask_mass</span>
<span id="cb16-24"></span>
<span id="cb16-25">    input_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tape.gradient(prediction, input_sequence) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> input_sequence</span>
<span id="cb16-26">    input_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.squeeze(input_grad, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tf.reduce_sum(input_grad, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-28"></span>
<span id="cb16-29"></span>
<span id="cb16-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EnformerScoreVariantsRaw:</span>
<span id="cb16-31"></span>
<span id="cb16-32">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url, organism<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>):</span>
<span id="cb16-33">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Enformer(tfhub_url)</span>
<span id="cb16-34">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._organism <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> organism</span>
<span id="cb16-35"></span>
<span id="cb16-36">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb16-37">    ref_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ref'</span>])[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._organism]</span>
<span id="cb16-38">    alt_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alt'</span>])[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._organism]</span>
<span id="cb16-39"></span>
<span id="cb16-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> alt_prediction.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ref_prediction.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-41"></span>
<span id="cb16-42"></span>
<span id="cb16-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EnformerScoreVariantsNormalized:</span>
<span id="cb16-44"></span>
<span id="cb16-45">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url, transform_pkl_path,</span>
<span id="cb16-46">               organism<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>):</span>
<span id="cb16-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> organism <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Transforms only compatible with organism=human'</span></span>
<span id="cb16-48">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerScoreVariantsRaw(tfhub_url, organism)</span>
<span id="cb16-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tf.io.gfile.GFile(transform_pkl_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb16-50">      transform_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(f)</span>
<span id="cb16-51">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transform_pipeline.steps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># StandardScaler.</span></span>
<span id="cb16-52"></span>
<span id="cb16-53">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb16-54">    scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs)</span>
<span id="cb16-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform.transform(scores)</span>
<span id="cb16-56"></span>
<span id="cb16-57"></span>
<span id="cb16-58"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EnformerScoreVariantsPCANormalized:</span>
<span id="cb16-59"></span>
<span id="cb16-60">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tfhub_url, transform_pkl_path,</span>
<span id="cb16-61">               organism<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>, num_top_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>):</span>
<span id="cb16-62">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EnformerScoreVariantsRaw(tfhub_url, organism)</span>
<span id="cb16-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tf.io.gfile.GFile(transform_pkl_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb16-64">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(f)</span>
<span id="cb16-65">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._num_top_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_top_features</span>
<span id="cb16-66"></span>
<span id="cb16-67">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_batch(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="cb16-68">    scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._model.predict_on_batch(inputs)</span>
<span id="cb16-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform.transform(scores)[:, :<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._num_top_features]</span>
<span id="cb16-70"></span>
<span id="cb16-71"></span>
<span id="cb16-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(avsec): Add feature description: Either PCX, or full names.</span></span>
<span id="cb16-73"></span>
<span id="cb16-74"></span>
<span id="cb16-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title `variant_centered_sequences`</span></span>
<span id="cb16-76"></span>
<span id="cb16-77"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FastaStringExtractor:</span>
<span id="cb16-78"></span>
<span id="cb16-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, fasta_file):</span>
<span id="cb16-80">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyfaidx.Fasta(fasta_file)</span>
<span id="cb16-81">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._chromosome_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.items()}</span>
<span id="cb16-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#import pd.Interval as Interval</span></span>
<span id="cb16-83">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, interval: Interval, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb16-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Truncate interval if it extends beyond the chromosome lengths.</span></span>
<span id="cb16-85">        chromosome_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._chromosome_sizes[interval.chrom]</span>
<span id="cb16-86">        trimmed_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Interval(interval.chrom,</span>
<span id="cb16-87">                                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval.start, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb16-88">                                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(interval.end, chromosome_length),</span>
<span id="cb16-89">                                    )</span>
<span id="cb16-90">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyfaidx wants a 1-based interval</span></span>
<span id="cb16-91">        sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.get_seq(trimmed_interval.chrom,</span>
<span id="cb16-92">                                          trimmed_interval.start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-93">                                          trimmed_interval.stop).seq).upper()</span>
<span id="cb16-94">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill truncated values with N's.</span></span>
<span id="cb16-95">        pad_upstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>interval.start, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-96">        pad_downstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval.end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> chromosome_length, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pad_upstream <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sequence <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pad_downstream</span>
<span id="cb16-98"></span>
<span id="cb16-99">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> close(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb16-100">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fasta.close()</span>
<span id="cb16-101"></span>
<span id="cb16-102"></span>
<span id="cb16-103"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_hot_encode(sequence):</span>
<span id="cb16-104">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> kipoiseq.transforms.functional.one_hot_dna(sequence).astype(np.float32)</span>
<span id="cb16-105"></span>
<span id="cb16-106"></span>
<span id="cb16-107"></span>
<span id="cb16-108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title `plot_tracks`</span></span>
<span id="cb16-109"></span>
<span id="cb16-110"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_tracks(tracks, interval, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>):</span>
<span id="cb16-111">  fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tracks), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tracks)), sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-112">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax, (title, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axes, tracks.items()):</span>
<span id="cb16-113">    ax.fill_between(np.linspace(interval.start, interval.end, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)), y)</span>
<span id="cb16-114">    ax.set_title(title)</span>
<span id="cb16-115">    sns.despine(top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-116">  ax.set_xlabel(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(interval))</span>
<span id="cb16-117">  plt.tight_layout()</span></code></pre></div>
</div>
<p>Here, we define some utility functions for ourselves, to help us make predictions and analyse our predictions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Bio</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> Bio.Seq <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Seq</span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_rev_complement(dna_string):</span>
<span id="cb17-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(Seq(dna_string).reverse_complement()))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> prepare_for_quantify_prediction_per_TSS(predictions, gene, tss_df):</span>
<span id="cb18-2"></span>
<span id="cb18-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters:</span></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          predicitions (A numpy array): All predictions from the track</span></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          gene (a gene name, character): a gene</span></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          tss_df: a list of dataframe of genes and their transcription start sites</span></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns:</span></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          A dictionary of cage experiment predictions and a list of transcription start sites</span></span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb18-13"></span>
<span id="cb18-14">  output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb18-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tdf <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tss_df:</span>
<span id="cb18-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tdf.genes.values:</span>
<span id="cb18-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb18-18">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tdf[tdf.genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene].txStart_Sites.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>).values</span>
<span id="cb18-19">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [t.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_tss_list]</span>
<span id="cb18-20">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(item) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> nestedlist <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_tss_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nestedlist]</span>
<span id="cb18-21">    gene_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(gene_tss_list))</span>
<span id="cb18-22">  output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cage_predictions'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a numpy array</span></span>
<span id="cb18-23">  output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_TSS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_tss_list <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a list</span></span>
<span id="cb18-24"></span>
<span id="cb18-25"></span>
<span id="cb18-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(output) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a dictionary</span></span>
<span id="cb18-27"></span>
<span id="cb18-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> quantify_prediction_per_TSS(low_range, TSS, cage_predictions):</span>
<span id="cb18-29"></span>
<span id="cb18-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb18-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters:</span></span>
<span id="cb18-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          low_range (int): The lower interval</span></span>
<span id="cb18-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          TSS (list of integers): A list of TSS for a gene</span></span>
<span id="cb18-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          cage_predictions: A 1D numpy array or a vector of predictions from enformer corresponding to track 5110 or CAGE predictions</span></span>
<span id="cb18-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns:</span></span>
<span id="cb18-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          A dictionary of gene expression predictions for each TSS for a gene</span></span>
<span id="cb18-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb18-38">  tss_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb18-39">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> TSS:</span>
<span id="cb18-40">    bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> low_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">320</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb18-41">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tss:</span>
<span id="cb18-43">      bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bin_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb18-44">      count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(cage_predictions)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb18-46">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb18-47">    cage_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cage_predictions[count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cage_predictions[count] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cage_predictions[count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-48">    tss_predictions[tss] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cage_preds</span>
<span id="cb18-49"></span>
<span id="cb18-50">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(tss_predictions)</span>
<span id="cb18-51"></span>
<span id="cb18-52"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> collect_intervals(chromosomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"22"</span>], gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb18-53"></span>
<span id="cb18-54">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb18-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters :</span></span>
<span id="cb18-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      chromosomes : a list of chromosome numbers; each element should be a string format</span></span>
<span id="cb18-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      gene_list : a list of genes; the genes should be located on those chromosomes</span></span>
<span id="cb18-58"></span>
<span id="cb18-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns :</span></span>
<span id="cb18-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      A dictionary of genes (from gene_list) and their intervals within their respective chromosomes</span></span>
<span id="cb18-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb18-62"></span>
<span id="cb18-63">  gene_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collect intervals for our genes of interest</span></span>
<span id="cb18-64"></span>
<span id="cb18-65">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> chrom <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chromosomes:</span>
<span id="cb18-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_tutorial/gene_chroms/gene_"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> chrom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> chrom_genes:</span>
<span id="cb18-67">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chrom_genes:</span>
<span id="cb18-68">        split_line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.strip().split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-69">        gene_intervals[split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb18-70">                                          split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb18-71">                                          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]),</span>
<span id="cb18-72">                                          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_line[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb18-73">                                        ]</span>
<span id="cb18-74"></span>
<span id="cb18-75">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the user has supplied a list of genes they are interested in</span></span>
<span id="cb18-76">    use_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>((k, gene_intervals[k]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_intervals)</span>
<span id="cb18-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(use_genes)</span>
<span id="cb18-78">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)):</span>
<span id="cb18-79">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(gene_intervals)</span>
<span id="cb18-80"></span>
<span id="cb18-81"></span>
<span id="cb18-82"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(gene_intervals, tss_dataframe, individuals_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb18-83">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb18-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters :</span></span>
<span id="cb18-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    gene_intervals : the results from calling `collect_intervals`</span></span>
<span id="cb18-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tss_dataframe : a list of the TSSs dataframes i.e. the TSS for the genes in the chromosomes</span></span>
<span id="cb18-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    individuals_list : a list of individuals on which we want to make predictions; defaults to None</span></span>
<span id="cb18-88"></span>
<span id="cb18-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns :</span></span>
<span id="cb18-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A list of predictions; the first element is the predictions around the TSS for each gene. The second is the prediction across CAGE tracks</span></span>
<span id="cb18-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb18-92"></span>
<span id="cb18-93">  gene_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb18-94">  gene_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb18-95"></span>
<span id="cb18-96">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_intervals.keys():</span>
<span id="cb18-97">    gene_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_intervals[gene]</span>
<span id="cb18-98">    target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb18-99">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb18-100">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creates an interval to select the right sequences</span></span>
<span id="cb18-101">    target_fa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extracts the fasta sequences, and resizes such that it is compatible with the sequence_length</span></span>
<span id="cb18-102">    window_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_interval.resize(SEQUENCE_LENGTH) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we also need information about the start and end locations after resizing</span></span>
<span id="cb18-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb18-104">      cur_gene_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_tutorial/individual_beds/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read in the appropriate bed file for the gene</span></span>
<span id="cb18-105">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>:</span>
<span id="cb18-106">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb18-107">    individual_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb18-108">    individual_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb18-109"></span>
<span id="cb18-110">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(np.empty([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))):</span>
<span id="cb18-111">      use_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals_list</span>
<span id="cb18-112">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(individuals_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)):</span>
<span id="cb18-113">      use_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cur_gene_vars.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:]</span>
<span id="cb18-114"></span>
<span id="cb18-115">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> use_individuals:</span>
<span id="cb18-116">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Currently on gene </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, and predicting on individual </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">...'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(gene, individual))</span>
<span id="cb18-117">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># two haplotypes per individual</span></span>
<span id="cb18-118">      haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb18-119">      haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(target_fa[:])</span>
<span id="cb18-120"></span>
<span id="cb18-121">      ref_mismatch_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-122">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cur_gene_vars.iterrows():</span>
<span id="cb18-123"></span>
<span id="cb18-124">        geno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[individual].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb18-125">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(haplo_2):</span>
<span id="cb18-126">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb18-127">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb18-128">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb18-129">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb18-130">          haplo_1[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb18-131">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> geno[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>:</span>
<span id="cb18-132">          haplo_2[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POS"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>window_coords.start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALT"</span>]</span>
<span id="cb18-133"></span>
<span id="cb18-134">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict on the individual's two haplotypes</span></span>
<span id="cb18-135">      prediction_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_1))[np.newaxis])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-136">      prediction_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_on_batch(one_hot_encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(haplo_2))[np.newaxis])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'human'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-137"></span>
<span id="cb18-138">      temp_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [prediction_1[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>], prediction_2[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span>]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CAGE predictions we are interested in</span></span>
<span id="cb18-139">      individual_prediction[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_predictions</span>
<span id="cb18-140"></span>
<span id="cb18-141">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate TSS CAGE expression which correspond to column 5110 of the predictions above</span></span>
<span id="cb18-142">      temp_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb18-143"></span>
<span id="cb18-144">      pred_prepared_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prepare_for_quantify_prediction_per_TSS(predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prediction_1, gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene, tss_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tss_dataframe)</span>
<span id="cb18-145">      tss_predictions_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quantify_prediction_per_TSS(low_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> window_coords.start, TSS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_prepared_1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_TSS'</span>], cage_predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_prepared_1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cage_predictions'</span>])</span>
<span id="cb18-146"></span>
<span id="cb18-147">      pred_prepared_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prepare_for_quantify_prediction_per_TSS(predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prediction_2, gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene, tss_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tss_dataframe)</span>
<span id="cb18-148">      tss_predictions_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quantify_prediction_per_TSS(low_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> window_coords.start, TSS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_prepared_2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_TSS'</span>], cage_predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_prepared_2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cage_predictions'</span>])</span>
<span id="cb18-149"></span>
<span id="cb18-150">      temp_list.append(tss_predictions_1)</span>
<span id="cb18-151">      temp_list.append(tss_predictions_2) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># results here are a dictionary for each TSS for each haplotype</span></span>
<span id="cb18-152"></span>
<span id="cb18-153">      individual_results[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_list <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save for the individual</span></span>
<span id="cb18-154"></span>
<span id="cb18-155">    gene_output[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individual_results</span>
<span id="cb18-156">    gene_predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individual_prediction</span>
<span id="cb18-157"></span>
<span id="cb18-158">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>([gene_output, gene_predictions])</span>
<span id="cb18-159"></span>
<span id="cb18-160"></span>
<span id="cb18-161"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> collect_target_intervals(gene_intervals):</span>
<span id="cb18-162"></span>
<span id="cb18-163">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb18-164"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Returns a dictionary of Interval objects (from kipoiseq) for each gene corresponding to the locations of the gene</span></span>
<span id="cb18-165"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb18-166"></span>
<span id="cb18-167">  target_intervals_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb18-168"></span>
<span id="cb18-169">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_intervals.keys():</span>
<span id="cb18-170">    gene_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_intervals[gene]</span>
<span id="cb18-171">    target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb18-172">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb18-173">                                        gene_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb18-174">    target_intervals_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_interval</span>
<span id="cb18-175"></span>
<span id="cb18-176">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(target_intervals_dict)</span>
<span id="cb18-177"></span>
<span id="cb18-178"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> prepare_for_plot_tracks(gene, individual, all_predictions, chromosome<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'22'</span>]):</span>
<span id="cb18-179"></span>
<span id="cb18-180">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb18-181"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  This returns a dictionary of gene tracks and gene intervals, prepared for the function plot_tracks.</span></span>
<span id="cb18-182"></span>
<span id="cb18-183"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Parameters:</span></span>
<span id="cb18-184"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - gene</span></span>
<span id="cb18-185"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - individual</span></span>
<span id="cb18-186"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - all_predictions</span></span>
<span id="cb18-187"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb18-188"></span>
<span id="cb18-189">  haplo_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_predictions[gene][individual]</span>
<span id="cb18-190">  gene_tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> individual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | haplotype 1'</span>: np.log10(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]),</span>
<span id="cb18-191">                gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> individual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | haplotype 2'</span>: np.log10(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])}</span>
<span id="cb18-192"></span>
<span id="cb18-193">  gene_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_intervals(chromosomes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chromosome, gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[gene])</span>
<span id="cb18-194">  gene_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_target_intervals(gene_intervals)</span>
<span id="cb18-195"></span>
<span id="cb18-196">  output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb18-197">  output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_tracks'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_tracks</span>
<span id="cb18-198">  output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_intervals'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_intervals[gene]</span>
<span id="cb18-199"></span>
<span id="cb18-200">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(output)</span>
<span id="cb18-201"></span>
<span id="cb18-202"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_individuals(path_to_bed_file, list_of_individuals):</span>
<span id="cb18-203"></span>
<span id="cb18-204">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb18-205"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Checks if an individual is missing in bed variation files.</span></span>
<span id="cb18-206"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  These individuals should be removed prior to training</span></span>
<span id="cb18-207"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb18-208"></span>
<span id="cb18-209">  myfile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(path_to_bed_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb18-210">  myline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> myfile.readline()</span>
<span id="cb18-211">  bed_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> myline.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:]</span>
<span id="cb18-212">  myfile.close()</span>
<span id="cb18-213"></span>
<span id="cb18-214">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(list_of_individuals).issubset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(bed_names)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>:</span>
<span id="cb18-215">    missing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(list_of_individuals).difference(bed_names))</span>
<span id="cb18-216">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This (or these) individual(s) is/are not present: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(missing))</span>
<span id="cb18-217">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb18-218">    missing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-219">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'All individuals are present in the bed file.'</span>)</span>
<span id="cb18-220"></span>
<span id="cb18-221">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(missing)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_predixcan_vs_geuvadis(interested_gene, interested_individuals, geuvadis_expression, predixcan_expression):</span>
<span id="cb19-2"></span>
<span id="cb19-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Show a plot and return correlation coefficient</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb19-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from predixcan expression</span></span>
<span id="cb19-7">  df_predixcan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predixcan_expression[predixcan_expression.gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> interested_gene].loc[:,interested_individuals]</span>
<span id="cb19-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from enformer</span></span>
<span id="cb19-9">  df_geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_expression[geuvadis_expression.gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> interested_gene].loc[:,interested_individuals]</span>
<span id="cb19-10"></span>
<span id="cb19-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate both</span></span>
<span id="cb19-12">  df_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_predixcan, df_geuvadis], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb19-13">  df_all.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predixcan'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GEUVADIS'</span>]</span>
<span id="cb19-14"></span>
<span id="cb19-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plotting</span></span>
<span id="cb19-16">  sns.regplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:], y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,:], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predixcan vs. GEUVADIS predictions on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> individuals for gene </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_all.columns), interested_gene))</span>
<span id="cb19-17"></span>
<span id="cb19-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># correlation coefficient</span></span>
<span id="cb19-19">  corr_coef <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.corrcoef(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:], y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,:])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb19-20"></span>
<span id="cb19-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>([df_all, corr_coef])</span>
<span id="cb19-22"></span>
<span id="cb19-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_enformer_vs_predixcan(prediction_results, interested_gene, interested_individuals, predixcan_expression, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>):</span>
<span id="cb19-24"></span>
<span id="cb19-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb19-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Show a plot and return correlation coefficient</span></span>
<span id="cb19-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb19-28"></span>
<span id="cb19-29">  enformer_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb19-30"></span>
<span id="cb19-31">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, individuals <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> prediction_results[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].items():</span>
<span id="cb19-32">    temp_individual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb19-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual, haplo_predictions <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals.items():</span>
<span id="cb19-34">      temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb19-35">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(haplo_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])):</span>
<span id="cb19-36">        temp.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(haplo_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].values())[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(haplo_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].values())[i])</span>
<span id="cb19-37">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>:</span>
<span id="cb19-38">        temp_individual[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(temp)</span>
<span id="cb19-39">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>:</span>
<span id="cb19-40">        temp_individual[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(temp)</span>
<span id="cb19-41">    enformer_predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_individual</span>
<span id="cb19-42"></span>
<span id="cb19-43">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from predixcan expression</span></span>
<span id="cb19-44">  df_predixcan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predixcan_expression[predixcan_expression.gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> interested_gene].loc[:,interested_individuals]</span>
<span id="cb19-45">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from enformer</span></span>
<span id="cb19-46">  df_enformer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(enformer_predictions[interested_gene], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).loc[:, df_predixcan.columns]</span>
<span id="cb19-47"></span>
<span id="cb19-48">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate both</span></span>
<span id="cb19-49">  df_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_enformer, df_predixcan], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb19-50">  df_all.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predixcan'</span>]</span>
<span id="cb19-51"></span>
<span id="cb19-52">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plotting</span></span>
<span id="cb19-53">  sns.regplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:], y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,:], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predixcan vs. Enformer predictions on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> individuals for gene </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_all.columns), interested_gene))</span>
<span id="cb19-54"></span>
<span id="cb19-55">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># correlation coefficient</span></span>
<span id="cb19-56">  corr_coef_predix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.corrcoef(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:], y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,:])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb19-57"></span>
<span id="cb19-58">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>([df_all, corr_coef_predix])</span>
<span id="cb19-59"></span>
<span id="cb19-60"></span>
<span id="cb19-61"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_enformer_vs_geuvadis(prediction_results, interested_gene, interested_individuals, geuvadis_expression, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>):</span>
<span id="cb19-62"></span>
<span id="cb19-63">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb19-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  Show a plot and return correlation coefficient</span></span>
<span id="cb19-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  '''</span></span>
<span id="cb19-66"></span>
<span id="cb19-67">  enformer_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb19-68"></span>
<span id="cb19-69">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, individuals <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> prediction_results[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].items():</span>
<span id="cb19-70">    temp_individual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb19-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual, haplo_predictions <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals.items():</span>
<span id="cb19-72">      temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb19-73">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(haplo_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])):</span>
<span id="cb19-74">        temp.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(haplo_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].values())[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(haplo_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].values())[i])</span>
<span id="cb19-75">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>:</span>
<span id="cb19-76">        temp_individual[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(temp)</span>
<span id="cb19-77">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>:</span>
<span id="cb19-78">        temp_individual[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(temp)</span>
<span id="cb19-79">    enformer_predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_individual</span>
<span id="cb19-80"></span>
<span id="cb19-81">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from geuvadis expression</span></span>
<span id="cb19-82">  df_geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_expression[geuvadis_expression.gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> interested_gene].loc[:,interested_individuals]</span>
<span id="cb19-83">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#df_enformer = np.transpose(pd.DataFrame(enformer_predictions)).loc[:, df_geuvadis.columns]</span></span>
<span id="cb19-84">  df_enformer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(enformer_predictions[interested_gene], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).loc[:, df_geuvadis.columns]</span>
<span id="cb19-85"></span>
<span id="cb19-86">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate both</span></span>
<span id="cb19-87">  df_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_enformer, df_geuvadis], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb19-88">  df_all.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GEUVADIS'</span>]</span>
<span id="cb19-89"></span>
<span id="cb19-90">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plotting</span></span>
<span id="cb19-91">  sns.regplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:], y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,:], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer vs. Geuvadis predictions on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> individuals for gene </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_all.columns), interested_gene))</span>
<span id="cb19-92"></span>
<span id="cb19-93">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># correlation coefficient</span></span>
<span id="cb19-94">  corr_coef_geu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.corrcoef(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,:], y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_all.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,:])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb19-95"></span>
<span id="cb19-96">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>([df_all, corr_coef_geu])</span></code></pre></div>
</div>
</section>
</section>
<section id="make-predictions-on-the-geuvadis-dataset." class="level2">
<h2 class="anchored" data-anchor-id="make-predictions-on-the-geuvadis-dataset.">Make predictions on the GEUVADIS dataset.</h2>
<p>Here, we will begin to make predictions. Excited?!</p>
<p>We still need the model itself. The model has been graciously hosted on <a href="https://tfhub.dev/deepmind/enformer/1">Tensorflow Hub</a>, which hosts many other models too. You can click on the link and explore. When you click the link, you can see that the model is about 892 Mb large. Quite big. We will use the url to the model to download and use it here.</p>
<p>Earlier, we defined an Enformer class (see the codes section). We will load the model into this class. The model has been trained and the weights are freely available. All we need to do is to load this model and use it. Neat.</p>
<p>We also defined a class FastaStringExtractor, that can help us extract raw sequences from fasta files given the intervals we want. We will make use of this class too.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Enformer(model_path) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># here we load the model architecture.</span></span>
<span id="cb20-2"></span>
<span id="cb20-3">fasta_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastaStringExtractor(fasta_file) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we define a class called fasta_extractor to help us extra raw sequence data</span></span></code></pre></div>
</div>
<section id="exercise-1" class="level3">
<h3 class="anchored" data-anchor-id="exercise-1"><strong>EXERCISE 1:</strong></h3>
<p>For evaluation, we need to <strong>sum the predictions around each unique TSS for a given gene</strong>. We will be using this a lot so it is important that we define what it means. Essentially, for a gene with one TSS, we take the sum of predicitions of the 128 bp output bin containing the TSS and its two immediate neighboring bins. We do this for each haplotype and each TSS to give TSS-level predictions.</p>
<p>To get individual-level estimates for a whole gene, we sum each haplotype TSS estimate to summarize TSS-level predictions per individual, and then take either the sum or max of TSS-level predictions to summarize at the gene level.</p>
<p>There are many genes and many individuals in our datasets. To make illustration simpler, we will use four genes, <em>ERAP1</em>, <em>ERAP2</em>, <em>NUDT2</em>, and <em>PEX6</em>, located on chromosome 5, 5, 9, and 6 respectively. We will use predictions for 10 randomly selected individuals located in the bed files.</p>
<div class="cell" data-outputid="2791e673-9da7-4b9d-8531-7c794185fca7">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">download_chrom_beds(chromosome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span>, genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP2'</span>])</span>
<span id="cb21-2">download_chrom_beds(chromosome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9"</span>, genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NUDT2'</span>])</span>
<span id="cb21-3">download_chrom_beds(chromosome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6"</span>, genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PEX6'</span>])</span></code></pre></div>
</div>
<p>Here, we read into a dataframe the TSS (transcription start sites) per gene for the chromosomes we are interested in. The dataframe has three columns. The first contains the genes, and the second contains the TSS(s) for that gene, and the third contains the strand information. We are interested in genes located on chromosomes 5, 6 and 9.</p>
<div class="cell" data-outputid="d8a76934-e1f0-40ba-8c1c-48f60601cd1a">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">chr5_tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/tss_by_chr/chr5_tss_by_gene.txt'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb22-2">chr6_tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/tss_by_chr/chr6_tss_by_gene.txt'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb22-3">chr9_tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/tss_by_chr/chr9_tss_by_gene.txt'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb22-4"></span>
<span id="cb22-5">chr9_tss.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<section id="preparing-inputs-for-enformer" class="level4">
<h4 class="anchored" data-anchor-id="preparing-inputs-for-enformer">Preparing inputs for Enformer</h4>
<p>Now that we have downloaded the genetic information that we need, we want to prepare the inputs for Enformer.</p>
<p>We need the following - The genes we want to predict for - The genomic interval for these genes - Information about the transcription start sites for these genes - The individuals we want to predict for</p>
<p>We have a utility function that helps to define the intervals of a gene, and resize this interval to make it acceptable for Enformer. Enformer needs a specific, defined sequence length. We use the <strong>collect_intervals</strong> function. The result is a dictionary that contains chromosome and interval information for each gene.</p>
<p>For example, let’s explore ERAP1…</p>
<div class="cell" data-outputid="512f71af-1df8-42d8-8c16-317a030f1bda">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">ERAP1_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_intervals(chromosomes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5'</span>], gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP1'</span>])</span>
<span id="cb23-2">ERAP1_target_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_target_intervals(ERAP1_intervals)</span>
<span id="cb23-3">ERAP1_intervals, ERAP1_target_intervals</span></code></pre></div>
</div>
<p><strong>ERAP1_target_intervals</strong> is an Interval object created using the kipoiseq package we installed earlier. It is used during predictions, and we don’t need to know the methods of this object for the purpose of the next questions.</p>
<p>However, we have similar information in <strong>ERAP1_intervals</strong>, which is a python dictionary of lists. For the questions below, we will use the <strong>ERAP1_intervals</strong> object.</p>
</section>
<section id="question-1a" class="level4">
<h4 class="anchored" data-anchor-id="question-1a"><strong><em>Question 1a</em></strong></h4>
<p>What is the size of this interval? <em>Hint</em>: Look at the <strong>ERAP1_intervals</strong>, and remember that Python is 0-based indexed. You need to access the <strong>key</strong> of this dictionary, which is the gene name, and for the value, which is a list, you can access the first element using 0, the second element using 1, and so on.</p>
<div class="cell" data-outputid="e5072587-661b-4a61-84f7-911e106c9bc4">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">ERAP1_intervals[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP1'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ERAP1_intervals[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP1'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your answers go in the ...</span></span></code></pre></div>
</div>
</section>
<section id="note" class="level4">
<h4 class="anchored" data-anchor-id="note"><strong><em>Note</em></strong></h4>
<p>You can roughly confirm this interval by going to the UCSC genome browser or Ensemble genome browser. We have provided a link for UCSC genome browser’s interval length <a href="https://genome.ucsc.edu/cgi-bin/hgTracks?db=hg19&amp;lastVirtModeType=default&amp;lastVirtModeExtraState=&amp;virtModeType=default&amp;virtMode=0&amp;nonVirtPosition=&amp;position=chr5%3A96096517%2D96143648&amp;hgsid=1316458921_99pz1X7GNzmiEg0WV1q2UmDp9nSB">for ERAP1 here</a>. Click on this link, the answer is right at the top of the browser.</p>
<p>Enformer takes in a defined sequence length. When we provide a gene and collect its intervals, we need to resize this interval to be acceptable for Enformer. Here, we will use the Intervals object define earlier, <strong>ERAP1_target_intervals</strong>.</p>
<div class="cell" data-outputid="3c37002b-46af-42fe-e540-be19b23afee3">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">ERAP1_target_interval_resized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ERAP1_target_intervals[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP1'</span>].resize(SEQUENCE_LENGTH)</span>
<span id="cb25-2">ERAP1_target_interval_resized</span></code></pre></div>
</div>
</section>
<section id="question-1b" class="level4">
<h4 class="anchored" data-anchor-id="question-1b"><strong><em>Question 1b</em></strong></h4>
<p>What is the length of this interval? Simply run the next line of code.</p>
<div class="cell" data-outputid="c0a53c51-4692-4a47-ca57-237d27497a95">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">ERAP1_target_interval_resized.end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ERAP1_target_interval_resized.start</span></code></pre></div>
</div>
<p>Essentially, we resized the length of the gene and pad it with the native sequences to the left and to the right, such that the length of the input sequence is 393216, and we can imagine our gene right at the center of this wider interval. This is the same interval length used to train ENCODE data to build Enformer. Since this value is pre-define, we really cannot change it. This is information that Enformer uses to make very good predictions. Below, we confirm that this is true.</p>
<div class="cell" data-outputid="db229dc2-931e-4e86-8005-87d09104762d">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">(ERAP1_target_interval_resized.end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ERAP1_target_interval_resized.start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> SEQUENCE_LENGTH</span></code></pre></div>
</div>
</section>
<section id="making-predictions-with-enformer" class="level4">
<h4 class="anchored" data-anchor-id="making-predictions-with-enformer">Making predictions with Enformer</h4>
<p>We will select 10 individuals (we have provided 10 randomly sample individuals for ease), and use four genes, <em>ERAP1</em>, <em>ERAP2</em>, <em>NUDT2</em>, and <em>PEX6</em>, located on chromosome 5, 5, 9, and 6 respectively</p>
<p>We will collect the intervals that correspond to these genes, collect the sequences for that interval from the reference fasta file, loop through each individual’s variations in the bed files we provided, switch around the variations for each haplotype and predict expression.</p>
<p>Eventually, for each individual, we should have predictions corresponding to each haplotype. We expect that since the haplotypes are different, the predictions should vary too.</p>
<p>Additionally, we need the TSS for these genes. Remember that we read in the dataframe earlier.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">exercise_1_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NUDT2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PEX6'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our gene of interest</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#exercise_1_gene = ['NUDT2', 'ERAP2'] # our gene of interest</span></span>
<span id="cb28-3"></span>
<span id="cb28-4">exercise_1_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA11992'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA19235'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA20770'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HG00232'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HG00342'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA20502'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA19189'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HG00108'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HG00380'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA12872'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># individuals we are interested in</span></span>
<span id="cb28-5"></span>
<span id="cb28-6">exercise_1_chromosomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'9'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'6'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the gene is on chromosome 5</span></span>
<span id="cb28-7"></span>
<span id="cb28-8">exercise_1_tss_dfs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [chr5_tss, chr9_tss, chr6_tss] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we use the TSS information</span></span></code></pre></div>
</div>
</section>
<section id="question-2" class="level4">
<h4 class="anchored" data-anchor-id="question-2"><strong><em>QUESTION 2</em></strong></h4>
<p>What is the id of the 8th individual? Hint: Python used 0-based indexing</p>
<div class="cell" data-outputid="82dff590-70e8-4b4d-915e-1c01ba9eb60c">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The 8th individual is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(exercise_1_individuals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>])) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your code goes into the ellipsis</span></span></code></pre></div>
</div>
<p>It is possible to have individuals not present in our variation bed files for some reasons. So, we will do some sanity checks.</p>
<p>Using the <strong>check_individuals</strong> functions, we will check if all these individuals are present in the bed file for that gene.</p>
<div class="cell" data-outputid="23d7a637-f302-4080-c820-9570566d6967">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">missing_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_individuals(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_tutorial/individual_beds/chr9/chr9_NUDT2.bed"</span>, list_of_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exercise_1_individuals)</span>
<span id="cb30-2">missing_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_individuals(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_tutorial/individual_beds/chr5/chr5_ERAP2.bed"</span>, list_of_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exercise_1_individuals)</span>
<span id="cb30-3">missing_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_individuals(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_tutorial/individual_beds/chr5/chr5_ERAP1.bed"</span>, list_of_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exercise_1_individuals)</span>
<span id="cb30-4">missing_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_individuals(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_tutorial/individual_beds/chr6/chr6_PEX6.bed"</span>, list_of_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exercise_1_individuals)</span>
<span id="cb30-5">missing_1, missing_2, missing_3, missing_4</span></code></pre></div>
</div>
<p>It looks like all the individuals are present. Very nice! We are good to go.</p>
<p>To make predictions, we first collect the intervals for the genes we want to predict for.</p>
<div class="cell" data-outputid="47f26096-7eb7-4c09-aaeb-76e23e96f50a">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">exercise_1_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_intervals(chromosomes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_chromosomes, gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_genes) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># here, we collect the intervals for that gene</span></span>
<span id="cb31-2">exercise_1_interval</span></code></pre></div>
</div>
<p>Next, we use the <strong>run_predictions</strong> function</p>
<div class="cell" data-outputid="47b8f525-7b44-41df-9bc8-cfa848fd1744">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">exercise_1_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(gene_intervals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_interval, tss_dataframe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_tss_dfs, individuals_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_individuals) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># here we make predictions and save it.</span></span></code></pre></div>
</div>
<p><strong>NB:</strong> If you intend to make predictions across many individuals and genes, it will be faster if you have larger GPU access. For now, we are using limited GPU. So, we have to limit our predictions.</p>
<p>Quite fast right? Very nice.</p>
<p>Our prediction object, <strong>exercise_1_predictions</strong> is a list of length two. - The first item in the list corresponds to the sum of predictions around each unique TSS, for each haplotype, for each individual, for each gene.</p>
<ul>
<li>The second item in the list corresponds to the CAGE:B lymphoblastoid cell line predictions across all 128bp bins for each haplotype, for each individual, for the genes. We will use the second item for plotting the tracks.</li>
</ul>
<p>Let us take a look at the object.</p>
<div class="cell" data-outputid="823cd61e-0778-485c-9fec-e64e401a2e77">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The exercise_1_predictions object is a </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> of length </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(exercise_1_predictions).<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(exercise_1_predictions)))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">exercise_1_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
</section>
<section id="plotting-the-cageb-lymphoblastoid-cell-line-tracks" class="level4">
<h4 class="anchored" data-anchor-id="plotting-the-cageb-lymphoblastoid-cell-line-tracks">Plotting the CAGE:B lymphoblastoid cell line tracks</h4>
<p>Next, we will plot the tracks. We have already defined two helper functions, <strong>prepare_for_plot_tracks</strong> and <strong>plot_tracks</strong> to plot the expression along the TSS for a gene, for an individual and for each haplotype.</p>
<p>For NUDT2…</p>
<div class="cell" data-outputid="cba34a3d-586a-4b86-f738-badedc155d37">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prepare_for_plot_tracks(gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], individual<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_individuals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], all_predictions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], chromosome<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'9'</span>])</span>
<span id="cb35-2">plot_tracks(tracks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_tracks'</span>], interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>temp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_intervals'</span>])</span></code></pre></div>
</div>
<p>Looks nice!</p>
<p>Although it looks like there is no variation in the predictions for the haplotypes, we can take a look at the actual prediction values across the TSS.</p>
<p>The columns are the transcription start sites, and the rows are the haplotypes for the individual. The entries are the sum of the predictions at the <em>TSS</em>, at <em>TSS - 1</em>, and at the <em>TSS + 1</em>.</p>
<p>We will look at the first individual, <strong>NA11992</strong>, for <strong>NUDT2</strong>…</p>
<div class="cell" data-outputid="58d37046-c581-4d26-f662-7284c2320253">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">pd.DataFrame(exercise_1_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][exercise_1_individuals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype_1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype_2'</span>])</span></code></pre></div>
</div>
<p>We will look at the first individual, <strong>NA11992</strong>, for <strong>PEX6</strong>…</p>
<div class="cell" data-outputid="15b8a889-62a0-4a85-a272-ba02ca66a85e">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">pd.DataFrame(exercise_1_predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]][exercise_1_individuals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype_1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype_2'</span>])</span></code></pre></div>
</div>
<p>Merely looking at the values, it looks like there are variations in the predictions across the haplotypes and the TSS. We expected some variations because we are predicting expression for each haplotype, which tend to have variations in them. Very nice!</p>
</section>
</section>
</section>
<section id="comparing-with-true-expression-from-geuvadis-and-with-predixcan" class="level2">
<h2 class="anchored" data-anchor-id="comparing-with-true-expression-from-geuvadis-and-with-predixcan">Comparing with true expression from GEUVADIS and with Predixcan</h2>
<p>We should read in the GEUVADIS and Predixcan predictions.</p>
<div class="cell" data-outputid="4fe9f470-89e2-4935-e4fd-0d49d8f8df03">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">geuvadis_gene_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://uchicago.box.com/shared/static/5vwc7pjw9qmtv7298c4rc7bcuicoyemt.gz'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb38-2">                                         dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chr'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>})</span>
<span id="cb38-3">geuvadis_gene_expression.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="379f904b-a2fb-4184-e4c6-c1177e831f51">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">predixcan_gene_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://uchicago.box.com/shared/static/4k68u7x7rxjpoljfdva6qipjxwzd3l0g.txt'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span>
<span id="cb39-2">predixcan_gene_expression.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<section id="question-3a" class="level4">
<h4 class="anchored" data-anchor-id="question-3a"><strong><em>QUESTION 3a</em></strong></h4>
<p>What is the dimension/size/shape of the <strong>geuvadis_gene_expression</strong> dataframe? Hint: You can use the .shape method on a dataframe.</p>
<div class="cell" data-outputid="39658489-75be-4942-dce8-7840cdccbfe4">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">geuvadis_dimension <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression.shape</span>
<span id="cb40-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print("The geuvadis_gene_expression dataframe has {} rows and {} columns".format(*geuvadis_dimension))</span></span></code></pre></div>
</div>
</section>
<section id="question-4b" class="level4">
<h4 class="anchored" data-anchor-id="question-4b"><strong><em>QUESTION 4b</em></strong></h4>
<p>What is the dimension/size/shape of the <strong>predixcan_gene_expression</strong> dataframe? Hint: You can use the .shape method on a dataframe.</p>
<div class="cell" data-outputid="95c1343b-16e3-4bf6-ad89-d48e213c2077">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">predixcan_dimension <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predixcan_gene_expression.shape</span>
<span id="cb41-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The predixcan_gene_expression dataframe has </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> rows and </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> columns"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>predixcan_dimension))</span></code></pre></div>
</div>
<p>We select the individuals and the gene from the geuvadis_gene_expression dataframe.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">erap1_geuvadis_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression[geuvadis_gene_expression.gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]].loc[:,exercise_1_individuals]</span>
<span id="cb42-2">nudt2_geuvadis_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression[geuvadis_gene_expression.gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]].loc[:,exercise_1_individuals]</span>
<span id="cb42-3">erap2_geuvadis_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression[geuvadis_gene_expression.gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]].loc[:,exercise_1_individuals]</span>
<span id="cb42-4">pex6_geuvadis_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression[geuvadis_gene_expression.gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]].loc[:,exercise_1_individuals]</span></code></pre></div>
</div>
<div class="cell" data-outputid="5f4daab7-3313-4280-dc46-6d189c1e8801">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">nudt2_geuvadis_expression</span></code></pre></div>
</div>
<p>We will sum the prediction for both haplotypes for each TSS, and take the sum of the resulting values. The function used here can also take the max instead of the sums.</p>
<p>We have 3 utility functions to help us - plot_enformer_vs_guevadis - plot_predixcan_vs_geuvadis - plot_enformer_vs_predixcan (if you think this is necessary)</p>
<div class="cell" data-outputid="7739e0d6-0361-4fd6-82e1-7f06eba81cc5">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">erap1_vs_geu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_enformer_vs_geuvadis(prediction_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_predictions, geuvadis_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression,</span>
<span id="cb44-2">                            interested_gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], interested_individuals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_individuals, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span>
<span id="cb44-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlation coefficient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(erap1_vs_geu[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<div class="cell" data-outputid="f86c49af-cc3d-43f8-80ec-062508155318">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">pex6_vs_geu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_enformer_vs_geuvadis(prediction_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_predictions, geuvadis_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression,</span>
<span id="cb45-2">                            interested_gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], interested_individuals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_individuals, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span>
<span id="cb45-3"></span>
<span id="cb45-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlation coefficient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(pex6_vs_geu[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<div class="cell" data-outputid="a7da3825-9b21-4d56-932d-ec635525298a">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">nudt_vs_geu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_enformer_vs_geuvadis(prediction_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_predictions, geuvadis_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression,</span>
<span id="cb46-2">                            interested_gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], interested_individuals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_individuals, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlation coefficient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(nudt_vs_geu[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<div class="cell" data-outputid="82b41343-c295-4b4d-b485-af291495e33f">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">erap2_vs_geu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_enformer_vs_geuvadis(prediction_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_predictions, geuvadis_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression,</span>
<span id="cb47-2">                            interested_gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], interested_individuals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_individuals, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span>
<span id="cb47-3"></span>
<span id="cb47-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlation coefficient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(erap2_vs_geu[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<p>Now, we can see how Predixcan performs on these individuals</p>
<div class="cell" data-outputid="d245f45e-a45c-4c48-f819-95f7dee22ffb">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">erap1_predix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_predixcan_vs_geuvadis(interested_gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], interested_individuals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_individuals, geuvadis_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression, predixcan_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>predixcan_gene_expression)</span>
<span id="cb48-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The correlation coefficient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(erap1_predix[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<div class="cell" data-outputid="50e712e1-702c-4cd2-df84-40edb2e1dcb8">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">pex6_predix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_predixcan_vs_geuvadis(interested_gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], interested_individuals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_individuals, geuvadis_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression, predixcan_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>predixcan_gene_expression)</span>
<span id="cb49-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The correlation coefficient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(pex6_predix[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<div class="cell" data-outputid="a93acdf3-c3d4-40bb-f19e-ad481e9b063d">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">erap2_predix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_predixcan_vs_geuvadis(interested_gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], interested_individuals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_individuals, geuvadis_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression, predixcan_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>predixcan_gene_expression)</span>
<span id="cb50-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The correlation coefficient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(erap2_predix[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<div class="cell" data-outputid="845939e4-e00a-4897-a490-1534f73fc5b6">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">nudt2_predix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_predixcan_vs_geuvadis(interested_gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], interested_individuals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>exercise_1_individuals, geuvadis_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression, predixcan_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>predixcan_gene_expression)</span>
<span id="cb51-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The correlation coefficient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(nudt2_predix[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<p>Quite neat and impressive!</p>
</section>
</section>
<section id="exercise-2" class="level2">
<h2 class="anchored" data-anchor-id="exercise-2"><strong>EXERCISE 2</strong></h2>
<p>In this exercise, you will get your hands dirty, and run Enformer on your gene(s) of interest.</p>
<ol type="1">
<li><p>Select your favorite gene(s). <strong>Note that the more genes you use, the longer it will take to run</strong>.</p></li>
<li><p>Randomly select 10 individuals, just because we don’t have all the computational power.</p></li>
<li><p>Run predictions</p></li>
</ol>
<p>We only have data for a finite set of genes (sorry!). Here is a list of available genes you can use:</p>
<div class="cell" data-outputid="944612e4-f856-4624-e9a6-a025205575a4">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>curl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>L https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>uchicago.box.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>shared<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>static<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>x8d7dx1ykefz49ep6sxot42v44sfvcv5.tsv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>home<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>s1mi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>enformer_tutorial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>all_genes.tsv</span>
<span id="cb52-2"></span>
<span id="cb52-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_tutorial/all_genes.tsv"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ag:</span>
<span id="cb52-4">  all_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ag]</span>
<span id="cb52-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(all_genes))</span>
<span id="cb52-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First 5 genes all_genes:"</span>, all_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<ol type="1">
<li>Select your genes</li>
</ol>
<div class="cell" data-outputid="105b0902-3b12-4878-ddda-8c2d322d2473">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">my_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ATAD3A'</span>]</span>
<span id="cb53-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My gene(s) is/are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>.join(my_genes)))</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Read in the TSS txt files where those chromosome are located. If you have genes located on more than one chromosome, copy the <strong>pd.read_table</strong> line for each chromosome you have, and replace the chromosome number (ellipses) as appropriate.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">my_chromosomes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put in the chromosomes where the genes are located. Just the numbers will do, or you can put them in as a string type</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">my_tss_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb55-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> my_chromosomes:</span>
<span id="cb55-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>)</span>
<span id="cb55-4">  bed_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/tss_by_chr/chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_tss_by_gene.txt'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>)</span>
<span id="cb55-5">  my_tss_list.append(pd.read_table(bed_file, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we read in the TSSs for each chromosome, and put them into a list</span></span></code></pre></div>
</div>
<ol start="3" type="1">
<li>Randomly select 10 individuals</li>
</ol>
<div class="cell" data-outputid="a3e1a0eb-3488-4634-8465-334ba3572e0e">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># let us set a seed to randomly select 10 individuals</span></span>
<span id="cb56-2">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace ... with an integer you want</span></span>
<span id="cb56-3"></span>
<span id="cb56-4">number_of_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb56-5"></span>
<span id="cb56-6">my_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>number_of_individuals, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># individuals we are interested in</span></span>
<span id="cb56-7">my_individuals</span></code></pre></div>
</div>
<ol start="4" type="1">
<li>We want to make sure that we have complete variation information for all 10 individuals.</li>
</ol>
<p>First, we need to download the variation bed files for these individuals</p>
<div class="cell" data-outputid="25de8c34-1e39-499c-bd99-7c2810b38eb3">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">download_chrom_beds(chromosome<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>, genes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my_genes) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remember that the genes should be on that chromosome, and you can use this code for each chromosome you have.</span></span></code></pre></div>
</div>
<p>Read in the variation bed files</p>
<div class="cell" data-outputid="f18fb43a-ca0b-4ad6-e571-f419e19347e0">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb58-2"></span>
<span id="cb58-3">my_missing_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb58-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> my_chromosomes:</span>
<span id="cb58-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> my_genes:</span>
<span id="cb58-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>)</span>
<span id="cb58-7">    file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_tutorial/individual_beds/chr'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/chr'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.bed'</span></span>
<span id="cb58-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(file_path):</span>
<span id="cb58-9">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb58-10">    my_missing_list.append(check_individuals(file_path, my_individuals))</span></code></pre></div>
</div>
<section id="question-4" class="level4">
<h4 class="anchored" data-anchor-id="question-4"><strong><em>QUESTION 4</em></strong></h4>
<p>Are there missing individuals? All answers, based on your results are correct. If there are missing individuals, can you remove them? You can add new code blocks as you like.</p>
<div class="cell" data-outputid="06b151c0-3d6f-4f4a-f59b-d7246fa4c7f1">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">my_missing_list</span></code></pre></div>
</div>
<p>It looks like we are almost set to make predictions.</p>
<ol start="5" type="1">
<li>Make predictions. First, we will collect the intervals for the genes we want, check the object and make sure we are on the right track. Next, we will call our <strong>run_predictions</strong> function.</li>
</ol>
<div class="cell" data-outputid="d651b2b2-d50d-4af3-e9f9-39722bdc7203">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">my_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_intervals(chromosomes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> my_chromosomes, gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> my_genes) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># here, we collect the intervals for that gene; replace ... with the right objects</span></span>
<span id="cb60-2">my_intervals</span></code></pre></div>
</div>
<div class="cell" data-outputid="3c7c3263-c304-4c31-ba57-d74ea116b251">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">my_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(gene_intervals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> my_intervals, tss_dataframe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> my_tss_list, individuals_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my_individuals)</span></code></pre></div>
</div>
<p>At this point, we will leave you to make your own plots…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">atad3a_geuvadis_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression[geuvadis_gene_expression.gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> my_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]].loc[:,my_individuals]</span>
<span id="cb62-2">atad3a_vs_geu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_enformer_vs_geuvadis(prediction_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my_predictions, geuvadis_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression, </span>
<span id="cb62-3">                            interested_gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], interested_individuals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my_individuals, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span>
<span id="cb62-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlation coefficient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(atad3a_vs_geu[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">atad3a_predix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plot_predixcan_vs_geuvadis(interested_gene<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my_genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], interested_individuals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my_individuals, geuvadis_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression, predixcan_expression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>predixcan_gene_expression)</span>
<span id="cb63-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The correlation coefficient: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(atad3a_predix[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
</section>
</section>
<section id="average-haplotype-vs-average-epigenome" class="level2">
<h2 class="anchored" data-anchor-id="average-haplotype-vs-average-epigenome">Average Haplotype vs Average Epigenome</h2>
<p>Get ERAP2 interval:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">ERAP2_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_intervals(chromosomes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5'</span>], gene_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ERAP2'</span>])</span>
<span id="cb64-2">ERAP2_target_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collect_target_intervals(ERAP2_intervals)</span>
<span id="cb64-3">ERAP2_intervals, ERAP2_target_intervals</span></code></pre></div>
</div>
<p>Select random individual</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">rand_individual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>geuvadis_gene_expression.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># individuals we are interested in</span></span>
<span id="cb65-2">rand_individual</span></code></pre></div>
</div>
<p>Run predictions (returns average epigenome):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">my_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(gene_intervals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> my_intervals, tss_dataframe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> my_tss_list, individuals_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my_individuals)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html</guid>
  <pubDate>Thu, 20 Jul 2023 18:45:24 GMT</pubDate>
</item>
</channel>
</rss>
