<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>deep-learning-in-genomics</title>
<link>https://sabrinami.quarto.pub/deep-learning-in-genomics/index.html</link>
<atom:link href="https://sabrinami.quarto.pub/deep-learning-in-genomics/index.xml" rel="self" type="application/rss+xml"/>
<description>Sabrina&#39;s blog for Deep Learning in Genomics course</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Wed, 14 Feb 2024 08:00:00 GMT</lastBuildDate>
<item>
  <title>Low performance genes</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-02-14-low-performance-genes/index.html</link>
  <description><![CDATA[ 




<section id="performance-of-genes-outside-training-set" class="level2">
<h2 class="anchored" data-anchor-id="performance-of-genes-outside-training-set">Performance of genes outside training set</h2>
<div class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-8">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @title `variant_centered_sequences`</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/grand/TFXcan/imlab/data/enformer_training_data/basenji_data_h5/no_groups_popseq_revised_order/test_pop_seq.hdf5'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-2">    training_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'query_regions'</span>][()]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">chroms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.unique(training_intervals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb3-2">chr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>: training_intervals[training_intervals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chroms}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="97">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_prediction_from_founders"</span></span>
<span id="cb4-2">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(output_dir):</span>
<span id="cb4-4">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(os.path.join(output_dir, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>), index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-5">    outputs.append(df)</span>
<span id="cb4-6">haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(outputs, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_prediction_from_founders/Br_haplotype_predicted_genes.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-2">ortho_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt"</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-3">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.protein_coding_TSS.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-4">gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(ortho_genes, hg38_annot, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>, left_on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hsapiens_homolog_ensembl_gene"</span>, right_on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb5-5">gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensembl_gene_id_x'</span>].isin(haplo_expr.columns)]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">training_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-2">excluded_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb6-4">    rn7_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensembl_gene_id_x'</span>]</span>
<span id="cb6-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>])</span>
<span id="cb6-6">    tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>])</span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chr_dict.keys():</span>
<span id="cb6-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> interval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chr_dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>]:</span>
<span id="cb6-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])):</span>
<span id="cb6-10">                training_genes.append(rn7_gene)</span>
<span id="cb6-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb6-12">                excluded_genes.append(rn7_gene)</span>
<span id="cb6-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb6-14">        excluded_genes.append(rn7_gene)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pred_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_human_predicted_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-2">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensembl_gene_id_x'</span>].unique()</span>
<span id="cb7-3">pred_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_expr[gene_list]</span>
<span id="cb7-4">haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr[gene_list]</span></code></pre></div>
</div>
<p>::: {.cell 0=‘c’ 1=‘o’ 2=‘d’ 3=‘e’ 4=‘-’ 5=‘f’ 6=‘o’ 7=‘l’ 8=‘d’ 9=‘:’ 10=‘t’ 11=‘r’ 12=‘u’ 13=‘e’ execution_count=110}</p>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">output_pred_cors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pval"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb8-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> training_genes:</span>
<span id="cb8-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(pred_expr.loc[:, gene].values, haplo_expr.loc[:, gene].values)</span>
<span id="cb8-4">    output_pred_cors.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span>
<span id="cb8-5">plt.hist(output_pred_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb8-6">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Correlation between Fast Enformer and Enformer on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(training_genes)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes from training set'</span>)</span>
<span id="cb8-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pearson Correlations'</span>)</span>
<span id="cb8-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb8-9">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(output_pred_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>])</span>
<span id="cb8-10">plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-11">plt.legend()</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb8-14">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/numpy/lib/histograms.py:824: RuntimeWarning: invalid value encountered in greater_equal
  keep = (tmp_a &gt;= first_edge)
/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/numpy/lib/histograms.py:825: RuntimeWarning: invalid value encountered in less_equal
  keep &amp;= (tmp_a &lt;= last_edge)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-02-14-low-performance-genes/index_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
<p>:::</p>
<p>::: {.cell 0=‘c’ 1=‘o’ 2=‘d’ 3=‘e’ 4=‘-’ 5=‘f’ 6=‘o’ 7=‘l’ 8=‘d’ 9=‘:’ 10=‘t’ 11=‘r’ 12=‘u’ 13=‘e’ execution_count=111}</p>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">output_pred_cors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pval"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> excluded_genes:</span>
<span id="cb10-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(pred_expr.loc[:, gene].values, haplo_expr.loc[:, gene].values)</span>
<span id="cb10-4">    output_pred_cors.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span>
<span id="cb10-5">plt.hist(output_pred_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb10-6">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Correlation between Fast Enformer and Enformer on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(excluded_genes)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes outside training set'</span>)</span>
<span id="cb10-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pearson Correlations'</span>)</span>
<span id="cb10-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb10-9">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(output_pred_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>])</span>
<span id="cb10-10">plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-11">plt.legend()</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb10-14">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/scipy/stats/_stats_py.py:4781: ConstantInputWarning: An input array is constant; the correlation coefficient is not defined.
  warnings.warn(stats.ConstantInputWarning(msg))
/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/numpy/lib/histograms.py:824: RuntimeWarning: invalid value encountered in greater_equal
  keep = (tmp_a &gt;= first_edge)
/home/s1mi/.conda/envs/ml-python/lib/python3.10/site-packages/numpy/lib/histograms.py:825: RuntimeWarning: invalid value encountered in less_equal
  keep &amp;= (tmp_a &lt;= last_edge)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-02-14-low-performance-genes/index_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
<p>:::</p>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-02-14-low-performance-genes/index.html</guid>
  <pubDate>Wed, 14 Feb 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Comparing Uniform Haplotype Enformer gene expression prediction performance</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-23-uniform-haplotype-enformer-analysis/index.html</link>
  <description><![CDATA[ 




<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-7">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2024-02-08 04:28:02.993273: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-02-08 04:28:08.883423: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/opt/cray/libfabric/1.15.2.0/lib64:/opt/cray/pe/papi/7.0.0.1/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/comm_libs/nvshmem/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/comm_libs/nccl/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/math_libs/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/compilers/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/compilers/extras/qd/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/cuda/extras/CUPTI/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/cuda/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32
2024-02-08 04:28:08.884830: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/opt/cray/libfabric/1.15.2.0/lib64:/opt/cray/pe/papi/7.0.0.1/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/comm_libs/nvshmem/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/comm_libs/nccl/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/math_libs/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/compilers/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/compilers/extras/qd/lib:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/cuda/extras/CUPTI/lib64:/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/cuda/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32
2024-02-08 04:28:08.884850: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pred_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_human_predicted_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-2">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(pred_expr.index)</span>
<span id="cb3-3">gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/gene_mapping.txt"</span>)</span>
<span id="cb3-4">genes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].isin(pred_expr.columns)]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">probabilities_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_genotype_probabilities"</span></span>
<span id="cb4-2">reference_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/human"</span></span>
<span id="cb4-3">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_prediction_from_founders_v2"</span></span>
<span id="cb4-4">run_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_sample_predictions(prob, reference_file, gene_annot):</span>
<span id="cb5-2">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb5-4">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb5-5">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb5-6">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb5-7">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb5-8">        indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> end)</span>
<span id="cb5-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if there are no snps within 256 bp of the tss</span></span>
<span id="cb5-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(indices) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb5-11">            end_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> tss).idxmax()</span>
<span id="cb5-12">            pr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prob.iloc[[end_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,end_index],:]</span>
<span id="cb5-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># otherwise average haplotype probabilities in region</span></span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-15">            pr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prob[(prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> end)]</span>
<span id="cb5-16">        pr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>).mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).values</span>
<span id="cb5-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(reference_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb5-18">            ref_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">446</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4980</span>]</span>
<span id="cb5-19">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ref_matrix</span>
<span id="cb5-20">        predictions.append(np.average(output))</span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<section id="compute-haplotype-combination-gene-expression" class="level3">
<h3 class="anchored" data-anchor-id="compute-haplotype-combination-gene-expression">Compute Haplotype-Combination Gene Expression</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split into batches by chromosome</span></span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, group <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome"</span>):</span>
<span id="cb6-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(group)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes"</span>)</span>
<span id="cb6-4">    reference_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>)</span>
<span id="cb6-5">    probabilities_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.h5"</span>)</span>
<span id="cb6-6">    output_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(output_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_selected_genes.csv"</span>)</span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If individual has gene expression data, remove from list</span></span>
<span id="cb6-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(output_file):</span>
<span id="cb6-9">        haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(output_file, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-10">        completed_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr.dropna().index</span>
<span id="cb6-11">        individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_expr.index.difference(completed_individuals)</span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb6-13">        haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>group[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_expr.index)</span>
<span id="cb6-14">        individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr.index</span>
<span id="cb6-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb6-16">        tic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb6-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(individuals):</span>
<span id="cb6-18">            prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[individual][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb6-19">            predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_sample_predictions(prob, reference_file, group)</span>
<span id="cb6-20">            haplo_expr.loc[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions</span>
<span id="cb6-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb6-22">                toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb6-23">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Batch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tic)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> minutes"</span>)</span>
<span id="cb6-24">                haplo_expr.to_csv(output_file)</span>
<span id="cb6-25">    haplo_expr.to_csv(output_file)</span></code></pre></div>
</div>
</section>
</section>
<section id="analysis" class="level2">
<h2 class="anchored" data-anchor-id="analysis">Analysis</h2>
<p><strong>Import Libraries</strong></p>
<div class="cell" data-execution_count="102">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span>
<span id="cb7-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb7-8">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span></code></pre></div>
</div>
<p><strong>Reformat Data</strong></p>
<div class="cell" data-execution_count="103">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read observed, Enformer predicted expression and cross-population correlation by gene</span></span>
<span id="cb8-2">tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>)</span>
<span id="cb8-3">pred_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_human_predicted_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-4">cors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_pearson_corr_human.csv"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_144042/3001682009.py:2: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.
  tpm = pd.read_csv("/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed", sep="\t", header=0, index_col='gene_id')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_prediction_from_founders_v2"</span></span>
<span id="cb10-2">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(output_dir):</span>
<span id="cb10-4">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(os.path.join(output_dir, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>), index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-5">    outputs.append(df)</span>
<span id="cb10-6">haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(outputs, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subset to genes with fast enformer predictions</span></span>
<span id="cb11-2">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr.columns.intersection(cors.index)</span>
<span id="cb11-3">cors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cors.loc[gene_list]</span>
<span id="cb11-4">obs_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tpm.loc[gene_list].drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#chr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>]).transpose()</span>
<span id="cb11-5">pred_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_expr[gene_list]</span>
<span id="cb11-6">haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr[gene_list]</span></code></pre></div>
</div>
</section>
<section id="evaluating-mean-haplotype-probability-enformer-against-enformer" class="level2">
<h2 class="anchored" data-anchor-id="evaluating-mean-haplotype-probability-enformer-against-enformer">Evaluating Mean Haplotype Probability Enformer against Enformer</h2>
<div class="cell" data-execution_count="110">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">output_cors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pval"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb12-3">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr[gene].dropna().index</span>
<span id="cb12-4">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(pred_expr.loc[individuals, gene].values, haplo_expr.loc[individuals, gene].values)</span>
<span id="cb12-5">    output_cors.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot a pearson_corr_by_gene["human"]</span></span>
<span id="cb12-7">plt.hist(output_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb12-8">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Correlation between Fast Enformer and Enformer on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span>
<span id="cb12-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pearson Correlations'</span>)</span>
<span id="cb12-10">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb12-11">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(output_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>])</span>
<span id="cb12-12">plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-13">plt.legend()</span>
<span id="cb12-14"></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb12-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-23-uniform-haplotype-enformer-analysis/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-23-uniform-haplotype-enformer-analysis/index.html</guid>
  <pubDate>Wed, 24 Jan 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Comparing Fast Enformer gene expression prediction performance</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes/index.html</link>
  <description><![CDATA[ 




<p><strong>Takeaways</strong></p>
<ul>
<li>Fast Enformer approximates Enformer pretty well</li>
<li>I definitely need to parallelize if we want to test across 340 samples for larger gene sets
<ul>
<li>1 gene, 340 samples: ~ 30 seconds</li>
<li>114 genes, 272 samples: ~ 55 minutes</li>
<li>Roughly 0.1s per prediction</li>
</ul></li>
<li>Lots of bumps trying to implement parsl</li>
<li>Genes with more significantly correlated Enformer predictions tended to have significantly correlated “Fast Enformer” predictions, although not necessarily in the same direction</li>
</ul>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p><strong>Step 1</strong>: Import libraries</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-7">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span></code></pre></div>
</details>
</div>
<p><strong>Step 2:</strong> Read samples, genes and define paths</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">pred_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_human_predicted_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-2">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(pred_expr.index)</span>
<span id="cb2-3">gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/gene_mapping.txt"</span>)</span>
<span id="cb2-4">genes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].isin(pred_expr.columns)]</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">probabilities_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_genotype_probabilities"</span></span>
<span id="cb3-2">reference_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/human"</span></span>
<span id="cb3-3">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_prediction_from_founders"</span></span>
<span id="cb3-4">run_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes"</span></span></code></pre></div>
</details>
</div>
<p><strong>Step 4:</strong> Define interpolation algorithm, matrix operations, and gene looping</p>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> interpolate(x, xi, y):</span>
<span id="cb4-2">    j   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.argsort(tf.concat((x, xi), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-3">    k   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(j))</span>
<span id="cb4-4">    q   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.scatter_nd(j[:, tf.newaxis], k, k.shape)</span>
<span id="cb4-5"></span>
<span id="cb4-6">    lxi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xi)</span>
<span id="cb4-7"></span>
<span id="cb4-8">    r   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   q[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lxi:]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, lxi)</span>
<span id="cb4-9">    r   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.where(xi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], q[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lxi, r)</span>
<span id="cb4-10"></span>
<span id="cb4-11">    x2  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(x, r)</span>
<span id="cb4-12">    x1  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(x, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-13">    y2  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(y, r)</span>
<span id="cb4-14">    y1  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(y, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-15"></span>
<span id="cb4-16">    u   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   (xi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)</span>
<span id="cb4-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> tf.rank(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tf.rank(y1):</span>
<span id="cb4-18">        u   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.expand_dims(u, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-19"></span>
<span id="cb4-20">    yi  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>u)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y2</span>
<span id="cb4-21"></span>
<span id="cb4-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tf.where(y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y2, y1, yi)</span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(ref_matrix, start, end, prob):</span>
<span id="cb4-25">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>].values)</span>
<span id="cb4-26">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>]).values)</span>
<span id="cb4-27">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb4-28">    pr_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.expand_dims(tf.cast(interpolate(x, bins, y), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.float32), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-29">    ref_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.transpose(ref_matrix, perm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb4-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pr_tensor = tf.cast(pr_tensor, dtype=tf.float16)</span></span>
<span id="cb4-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ref_tensor = tf.cast(ref_tensor, dtype=tf.float16)</span></span>
<span id="cb4-32">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.squeeze(tf.matmul(pr_tensor, ref_tensor), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_sample_predictions(prob, reference_file, gene_annot):</span>
<span id="cb4-36">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(reference_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb4-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb4-39">            gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb4-40">            tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb4-41">            start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb4-42">            end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb4-43">            ref_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb4-44">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> prob.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> prob.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb4-45">                output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(ref_matrix, start, end, prob)</span>
<span id="cb4-46">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb4-47">                predictions.append(np.average(output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">446</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4980</span>]))</span>
<span id="cb4-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</details>
</div>
<section id="compute-haplotype-combination-gene-expression" class="level3">
<h3 class="anchored" data-anchor-id="compute-haplotype-combination-gene-expression">Compute Haplotype-Combination Gene Expression</h3>
<p>I split genes by chromosome for the computations. As it ran for each gene group, I recorded runtimes for batches of 20 individuals.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split into batches by chromosome</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, group <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome"</span>):</span>
<span id="cb5-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(group)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes"</span>)</span>
<span id="cb5-4">    reference_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>)</span>
<span id="cb5-5">    probabilities_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.h5"</span>)</span>
<span id="cb5-6">    output_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(output_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_selected_genes.csv"</span>)</span>
<span id="cb5-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If individual has gene expression data, remove from list</span></span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(output_file):</span>
<span id="cb5-9">        haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(output_file, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-10">        completed_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr.dropna().index</span>
<span id="cb5-11">        individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_expr.index.difference(completed_individuals)</span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-13">        haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>group[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred_expr.index)</span>
<span id="cb5-14">        individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr.index</span>
<span id="cb5-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb5-16">        tic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb5-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(individuals):</span>
<span id="cb5-18">            prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[individual][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb5-19">            predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_sample_predictions(prob, reference_file, group)</span>
<span id="cb5-20">            haplo_expr.loc[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions</span>
<span id="cb5-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb5-22">                toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb5-23">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Batch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tic)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> minutes"</span>)</span>
<span id="cb5-24">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb5-25">                    haplo_expr.to_csv(output_file)</span>
<span id="cb5-26">    haplo_expr.to_csv(output_file)</span></code></pre></div>
</div>
<p>Write partial results if walltime is about to run out.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">haplo_expr.to_csv(output_file)</span></code></pre></div>
</div>
</section>
</section>
<section id="analysis" class="level2">
<h2 class="anchored" data-anchor-id="analysis">Analysis</h2>
<p><strong>Step 1:</strong> Import libraries</p>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span>
<span id="cb7-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb7-8">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span></code></pre></div>
</details>
</div>
<p><strong>Step 2:</strong> Reformat observed, Enformer, and Fast Enformer expression data</p>
<div class="cell" data-execution_count="6">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read observed, Enformer predicted expression and cross-population correlation by gene</span></span>
<span id="cb8-2">tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>)</span>
<span id="cb8-3">pred_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_human_predicted_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-4">cors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_pearson_corr_human.csv"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_216321/3280649170.py:3: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.
  tpm = pd.read_csv("/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed", sep="\t", header=0, index_col='gene_id')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate fast enformer predictions from all chromosomes</span></span>
<span id="cb10-2">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_prediction_from_founders"</span></span>
<span id="cb10-3">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(output_dir):</span>
<span id="cb10-5">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(os.path.join(output_dir, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>), index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-6">    outputs.append(df)</span>
<span id="cb10-7">haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(outputs, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="8">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subset to genes with fast enformer predictions</span></span>
<span id="cb11-2">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr.columns.intersection(cors.index)</span>
<span id="cb11-3">cors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cors.loc[gene_list]</span>
<span id="cb11-4">obs_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tpm.loc[gene_list].drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#chr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>]).transpose()</span>
<span id="cb11-5">pred_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_expr[gene_list]</span>
<span id="cb11-6">haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr[gene_list]</span></code></pre></div>
</details>
</div>
<section id="evaluating-fast-enformer-against-traditional-enformer" class="level3">
<h3 class="anchored" data-anchor-id="evaluating-fast-enformer-against-traditional-enformer">Evaluating Fast Enformer against traditional Enformer</h3>
<p><strong>Histogram of Fast Enformer correlation to Enformer expression</strong></p>
<p>::: {.cell 0=‘c’ 1=‘o’ 2=‘d’ 3=‘e’ 4=‘-’ 5=‘f’ 6=‘o’ 7=‘l’ 8=‘d’ 9=‘:’ 10=‘t’ 11=‘r’ 12=‘u’ 13=‘e’ execution_count=10}</p>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">output_pred_cors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pval"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb12-3">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr[gene].dropna().index</span>
<span id="cb12-4">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(pred_expr.loc[individuals, gene].values, haplo_expr.loc[individuals, gene].values)</span>
<span id="cb12-5">    output_pred_cors.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot a pearson_corr_by_gene["human"]histogram</span></span>
<span id="cb12-7">plt.hist(output_pred_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb12-8">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Correlation between Fast Enformer and Enformer on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span>
<span id="cb12-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pearson Correlations'</span>)</span>
<span id="cb12-10">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb12-11">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(output_pred_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>])</span>
<span id="cb12-12">plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-13">plt.legend()</span>
<span id="cb12-14"></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb12-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
<p>:::</p>
</section>
<section id="scatter-plot-of-fast-enformer-prediction-correlation-vs-enformer-correlation" class="level3">
<h3 class="anchored" data-anchor-id="scatter-plot-of-fast-enformer-prediction-correlation-vs-enformer-correlation">Scatter Plot of Fast Enformer prediction correlation vs Enformer correlation</h3>
<p>I wanted to visualize whether Fast Enformer predicts Enformer output more accurately whenever Enformer predicts observed accurately, but there’s no obvious relationship. I think the “hourglass” shape could mean that when Enformer’s correlation with observed is near 0, so is Fast Enformer’s correlation with Enformer.</p>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit a linear regression line to the data (calculate slope)</span></span>
<span id="cb13-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pearson r"</span>].values.astype(np.float32)</span>
<span id="cb13-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output_pred_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>].values.astype(np.float32)</span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  slope, intercept = np.polyfit(x, y, 1)</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the plot</span></span>
<span id="cb13-6">plt.scatter(x, y, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Genes'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.plot(x, slope * x + intercept, '--', color="black", label=f'Best Fit Line: y = {slope:.3f}x + {intercept:.3f}')</span></span>
<span id="cb13-8">plt.plot(y, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'One-to-One Line'</span>)</span>
<span id="cb13-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson Correlations from Enformer and Fast Enformer methods"</span>)</span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and legend</span></span>
<span id="cb13-11">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb13-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fast Enformer'</span>)</span>
<span id="cb13-13">plt.legend()</span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb13-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="evaluating-fast-enformer-against-ground-truth" class="level3">
<h3 class="anchored" data-anchor-id="evaluating-fast-enformer-against-ground-truth">Evaluating Fast Enformer against ground truth</h3>
<p><strong>Distribution of Pearson R, P-value</strong></p>
<p>To plot the performance of gene expression derived from fast Enformer (haplotype probabilities <img src="https://latex.codecogs.com/png.latex?%5Ctimes"> founder epigenomes) compared to observed expression.</p>
<div class="cell" data-execution_count="9">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">output_cors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pval"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb14-3">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> haplo_expr[gene].dropna().index</span>
<span id="cb14-4">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(obs_expr.loc[individuals, gene].values, haplo_expr.loc[individuals, gene].values)</span>
<span id="cb14-5">    output_cors.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot a pearson_corr_by_gene["human"]histogram</span></span>
<span id="cb14-7">plt.hist(output_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb14-8">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Correlation between Fast Enformer and Observed on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span>
<span id="cb14-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pearson Correlations'</span>)</span>
<span id="cb14-10">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb14-11">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(output_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>])</span>
<span id="cb14-12">plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-13">plt.legend()</span>
<span id="cb14-14"></span>
<span id="cb14-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb14-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes/index_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot a pearson_corr_by_gene["human"]histogram</span></span>
<span id="cb15-2">plt.hist(output_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pval"</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb15-3">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Fast Enformer P-values for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span>
<span id="cb15-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P-value'</span>)</span>
<span id="cb15-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb15-6">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(output_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>])</span>
<span id="cb15-7">plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb15-8">plt.legend()</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb15-11">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes/index_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<p><strong>Comparing Gene Performance between Enformer and Fast Enformer</strong></p>
<div class="cell" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit a linear regression line to the data (calculate slope)</span></span>
<span id="cb16-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pearson r"</span>].values.astype(np.float32)</span>
<span id="cb16-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output_cors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>].values.astype(np.float32)</span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  slope, intercept = np.polyfit(x, y, 1)</span></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the plot</span></span>
<span id="cb16-6">plt.scatter(x, y, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Genes'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.plot(x, slope * x + intercept, '--', color="black", label=f'Best Fit Line: y = {slope:.3f}x + {intercept:.3f}')</span></span>
<span id="cb16-8">plt.plot(y, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'One-to-One Line'</span>)</span>
<span id="cb16-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson Correlations from Enformer and Fast Enformer methods"</span>)</span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and legend</span></span>
<span id="cb16-11">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb16-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fast Enformer'</span>)</span>
<span id="cb16-13">plt.legend()</span>
<span id="cb16-14"></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb16-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="19">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> qqR(corvec, nn, title):</span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nn is the sample size, the number of individuals used to compute correlation</span></span>
<span id="cb17-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># corvec is the correlation vector</span></span>
<span id="cb17-4"></span>
<span id="cb17-5">    mm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(corvec)</span>
<span id="cb17-6">    nullcorvec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.tanh(np.random.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mm) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.sqrt(nn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># null correlation vector</span></span>
<span id="cb17-7"></span>
<span id="cb17-8">    sm.qqplot_2samples(nullcorvec, corvec)</span>
<span id="cb17-9">    plt.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grey'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Diagonal line</span></span>
<span id="cb17-10">    plt.title(title)</span>
<span id="cb17-11">    plt.grid()</span>
<span id="cb17-12">    plt.show()</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="parsl-test" class="level2">
<h2 class="anchored" data-anchor-id="parsl-test">Parsl Test</h2>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> parsl</span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> parsl.configs.htex_local <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> config</span>
<span id="cb18-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> parsl <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> python_app</span>
<span id="cb18-4"></span>
<span id="cb18-5">parsl.load(config)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>&lt;parsl.dataflow.dflow.DataFlowKernel at 0x7ff447dc34f0&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> interpolate(x, xi, y):</span>
<span id="cb20-2">    j   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.argsort(tf.concat((x, xi), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb20-3">    k   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(j))</span>
<span id="cb20-4">    q   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.scatter_nd(j[:, tf.newaxis], k, k.shape)</span>
<span id="cb20-5"></span>
<span id="cb20-6">    lxi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xi)</span>
<span id="cb20-7"></span>
<span id="cb20-8">    r   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   q[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lxi:]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, lxi)</span>
<span id="cb20-9">    r   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.where(xi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], q[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lxi, r)</span>
<span id="cb20-10"></span>
<span id="cb20-11">    x2  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(x, r)</span>
<span id="cb20-12">    x1  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(x, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-13">    y2  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(y, r)</span>
<span id="cb20-14">    y1  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(y, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-15"></span>
<span id="cb20-16">    u   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   (xi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)</span>
<span id="cb20-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> tf.rank(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tf.rank(y1):</span>
<span id="cb20-18">        u   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.expand_dims(u, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-19"></span>
<span id="cb20-20">    yi  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>u)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y2</span>
<span id="cb20-21"></span>
<span id="cb20-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tf.where(y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y2, y1, yi)</span>
<span id="cb20-23"></span>
<span id="cb20-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(reference_file, gene, start, end, prob):</span>
<span id="cb20-25">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>].values)</span>
<span id="cb20-26">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>]).values)</span>
<span id="cb20-27">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb20-28">    pr_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.expand_dims(interpolate(x, bins, y), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(reference_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb20-30">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb20-31">    ref_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.transpose(matrix, perm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb20-32">    pr_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.cast(pr_tensor, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.float16)</span>
<span id="cb20-33">    ref_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.cast(ref_tensor, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.float16)</span>
<span id="cb20-34">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.squeeze(tf.matmul(pr_tensor, ref_tensor), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb20-36"></span>
<span id="cb20-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_sample_predictions(prob, reference_file, gene_annot):</span>
<span id="cb20-38">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb20-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb20-40">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb20-41">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb20-42">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb20-43">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb20-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> prob.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> prob.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb20-45">            output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(reference_file, gene, start, end, prob)</span>
<span id="cb20-46">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb20-47">            predictions.append(np.average(output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">446</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>]))</span>
<span id="cb20-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"></span>
<span id="cb21-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@python_app</span></span>
<span id="cb21-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(probabilities_file, reference_file, group, individuals, output_file, log_file, module_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_dir):</span>
<span id="cb21-4">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb21-5">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb21-6">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb21-7"></span>
<span id="cb21-8">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb21-9">    sys.path.append(module_path)</span>
<span id="cb21-10">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensor_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> run_sample_predictions</span>
<span id="cb21-11">    </span>
<span id="cb21-12">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb21-13">    haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>group[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>individuals)</span>
<span id="cb21-14">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(log_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>)</span>
<span id="cb21-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(probabilities_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb21-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb21-17">            tic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb21-18">            columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span>
<span id="cb21-19">            prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[individual][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb21-20">            predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_sample_predictions(prob, reference_file, group)</span>
<span id="cb21-21">            haplo_expr.loc[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions</span>
<span id="cb21-22">            toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb21-23">            f.write(individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..."</span>, toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tic, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sec</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-24">    end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb21-25">    haplo_expr.to_csv(output_file)</span>
<span id="cb21-26">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Completed job in'</span>, (end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span> ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minutes.'</span>)</span>
<span id="cb21-27">    f.close()</span>
<span id="cb21-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> haplo_expr</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">app_futures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb22-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, group <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome"</span>):</span>
<span id="cb22-3">    reference_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>)</span>
<span id="cb22-4">    probabilities_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.h5"</span>)</span>
<span id="cb22-5">    output_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(output_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_selected_genes.csv"</span>)</span>
<span id="cb22-6">    log_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(output_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_selected_genes.log"</span>)</span>
<span id="cb22-7">    app_futures.append(run_predictions(probabilities_file, reference_file, group, individuals, output_file, log_file, module_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_dir))</span>
<span id="cb22-8"></span>
<span id="cb22-9">exec_futures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [q.result() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> app_futures]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">reference_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>)</span>
<span id="cb23-2">probabilities_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.h5"</span>)</span>
<span id="cb23-3">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred_expr.index</span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb24-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> interpolate(x, xi, y):</span>
<span id="cb24-3">    j   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.argsort(tf.concat((x, xi), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb24-4">    k   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(j))</span>
<span id="cb24-5">    q   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.scatter_nd(j[:, tf.newaxis], k, k.shape)</span>
<span id="cb24-6"></span>
<span id="cb24-7">    lxi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xi)</span>
<span id="cb24-8"></span>
<span id="cb24-9">    r   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   q[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lxi:]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, lxi)</span>
<span id="cb24-10">    r   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.where(xi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], q[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lxi, r)</span>
<span id="cb24-11"></span>
<span id="cb24-12">    x2  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(x, r)</span>
<span id="cb24-13">    x1  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(x, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-14">    y2  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(y, r)</span>
<span id="cb24-15">    y1  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(y, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-16"></span>
<span id="cb24-17">    u   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   (xi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)</span>
<span id="cb24-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> tf.rank(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tf.rank(y1):</span>
<span id="cb24-19">        u   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.expand_dims(u, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-20"></span>
<span id="cb24-21">    yi  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>u)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y2</span>
<span id="cb24-22"></span>
<span id="cb24-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tf.where(y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y2, y1, yi)</span>
<span id="cb24-24"></span>
<span id="cb24-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(reference_file, gene, start, end, prob):</span>
<span id="cb24-26">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>].values)</span>
<span id="cb24-27">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>]).values)</span>
<span id="cb24-28">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb24-29">    pr_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.expand_dims(tf.cast(interpolate(x, bins, y), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.float32), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(reference_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb24-31">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb24-32">    ref_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.transpose(matrix, perm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb24-33">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.squeeze(tf.matmul(pr_tensor, ref_tensor), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb24-35"></span>
<span id="cb24-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_sample_predictions(prob, reference_file, gene_annot):</span>
<span id="cb24-37">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb24-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb24-39">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb24-40">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb24-41">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb24-42">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb24-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> prob.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> prob.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb24-44">            output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(reference_file, gene, start, end, prob)</span>
<span id="cb24-45">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb24-46">            predictions.append(np.average(output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">446</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>]))</span>
<span id="cb24-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">haplo_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>group[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>individuals)</span>
<span id="cb25-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(probabilities_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb25-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb25-4">        tic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb25-5">        columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span>
<span id="cb25-6">        prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[individual][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb25-7">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_sample_predictions(prob, reference_file, group)</span>
<span id="cb25-8">        haplo_expr.loc[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions</span>
<span id="cb25-9">        toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb25-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..."</span>, toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tic, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sec"</span>)</span>
<span id="cb25-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>000789972A ... 13.396942946012132 sec</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-10-epigenomexcan-vs-enformer-significant-genes/index.html</guid>
  <pubDate>Wed, 10 Jan 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Scaling up EpigenomeXcan: execution time, parallelization</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-31-scaling-up-Br-epigenome-predictions/index.html</link>
  <description><![CDATA[ 




<p><strong>Takeaways</strong></p>
<ul>
<li>GPU prediction is slightly faster on test run (3000 predictions), we need to use tensorflow for larger experiments across all 340 individuals</li>
<li>GPU memory is finicky, I had to pare down tensors to float16 and clear memory storing epigenome matrices. In practice, I’ll have to write outputs more frequently.</li>
</ul>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.interpolate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> interp1d</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-7">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/Br_expressed_genes.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-2">    gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/metadata/intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-4">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-5">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>: gene_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"interval"</span>: intervals})</span>
<span id="cb2-6">split_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)</span>
<span id="cb2-7">mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_intervals.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-8">mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_intervals.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-9">mapping.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>]).to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/gene_mapping.txt"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">probabilities_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Br_genotype_probabilities"</span></span>
<span id="cb3-2">reference_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/human"</span></span>
<span id="cb3-3">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/Br_epigenomes"</span></span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/Br_samples.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-5">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb3-6">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/gene_mapping.txt"</span>)</span>
<span id="cb3-7">genes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr1'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_h5(path, predictions):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> predictions.items():</span>
<span id="cb4-4">            hf[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span></code></pre></div>
</div>
</section>
<section id="numpy-test" class="level2">
<h2 class="anchored" data-anchor-id="numpy-test">Numpy Test</h2>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, gene, start, end, prob):</span>
<span id="cb5-2">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb5-3">    interp_prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]: </span>
<span id="cb5-5">        interp_prob.append(np.interp(bins, prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>], prob[column]))</span>
<span id="cb5-6">    pr_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(np.array(interp_prob))</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb5-8">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb5-9">    ref_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(matrix, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb5-10">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(pr_matrix[:, np.newaxis,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ref_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb5-12">    </span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, prob, gene_annot):</span>
<span id="cb5-15">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># interp = interpolate.interp1d(np.array(prob['POS']), np.array(prob.drop(columns=['POS'])), axis = 0)</span></span>
<span id="cb5-17">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb5-19">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb5-20">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb5-21">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb5-22">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb5-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if (start &gt;= prob.iloc[0,0] and end &lt;= prob.iloc[-1,0]):</span></span>
<span id="cb5-24">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>, gene, start, end, prob)</span>
<span id="cb5-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb5-26">        predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output</span>
<span id="cb5-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb5-28">            end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb5-29">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations:"</span>, end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span>
<span id="cb5-30"></span>
<span id="cb5-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb6-2">        output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(project_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0007899884'</span>)</span>
<span id="cb6-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.isdir(output_dir):</span>
<span id="cb6-4">                os.makedirs(output_dir)</span>
<span id="cb6-5">        prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0007899884'</span>][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb6-6">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr1'</span>, prob, genes_df)</span>
<span id="cb6-7">        write_h5(os.path.join(output_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), predictions) </span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"{chr}:", len(group), "genes...", (end_time - start_time) // 60, "minutes")</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>200 iterations: 43.178196704000584 seconds
400 iterations: 85.30787616000089 seconds
600 iterations: 127.37160777700046 seconds
800 iterations: 170.39981612300107 seconds
1000 iterations: 214.97213824600112 seconds
1200 iterations: 258.91626574399925 seconds
1400 iterations: 302.4928128120009 seconds
1600 iterations: 346.4003939719987 seconds
1800 iterations: 389.48382942399985 seconds
2000 iterations: 433.0845548489997 seconds
2200 iterations: 476.6690443709995 seconds
2400 iterations: 546.7537841170015 seconds
2600 iterations: 592.0861903549994 seconds
2800 iterations: 658.7331474230014 seconds
3000 iterations: 718.2645332190004 seconds</code></pre>
</div>
</div>
</section>
<section id="scipy-test" class="level2">
<h2 class="anchored" data-anchor-id="scipy-test">Scipy Test</h2>
<p>Using scipy’s interp1d function to interpolate all 8 columns simultaneously. Generating the interpolation function costs about 20 seconds of runtime</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(gene, start, end, interp):</span>
<span id="cb8-2">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb8-3">    pr_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interp(bins)</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb8-5">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb8-6">    ref_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(matrix, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb8-7">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(pr_matrix[:, np.newaxis,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ref_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb8-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(prob, gene_annot):</span>
<span id="cb8-10">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-11">    interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interp1d(np.array(prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>]), np.array(prob.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>])), axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-12">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb8-14">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb8-15">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb8-16">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb8-17">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb8-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> prob.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> prob.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb8-19">            output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(gene, start, end, interp)</span>
<span id="cb8-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb8-21">            predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output</span>
<span id="cb8-22">            end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb8-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb8-24">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations:"</span>, end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span>
<span id="cb8-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb9-2">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000789972A'</span>][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb9-3">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(prob, genes_df)</span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write_h5(os.path.join(output_dir, f"{chr}_genes.h5"), predictions) </span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>200 iterations: 55.26515249814838 seconds
400 iterations: 105.58576967194676 seconds
600 iterations: 136.04839484021068 seconds
800 iterations: 193.6581759629771 seconds
1000 iterations: 254.47129005938768 seconds
1200 iterations: 305.2362718908116 seconds
1400 iterations: 355.68491036072373 seconds
1600 iterations: 417.03871417138726 seconds
1800 iterations: 469.593163177371 seconds
2000 iterations: 522.8375322008505 seconds
2200 iterations: 576.9442004561424 seconds
2400 iterations: 629.3138183737174 seconds
2600 iterations: 687.7609961153939 seconds
2800 iterations: 739.739781155251 seconds
3000 iterations: 797.2053201990202 seconds</code></pre>
</div>
</div>
</section>
<section id="tensorflow-test-gpu" class="level2">
<h2 class="anchored" data-anchor-id="tensorflow-test-gpu">Tensorflow Test (GPU)</h2>
<p>Neither tensorflow or torch libraries offer interpolation for the purpose I need, so I wrote my interpolation function in order to keep all of the computational steps as tensorflow operations.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tf.config.list_physical_devices(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GPU'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2024-01-18 00:52:06.613129: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:2', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:3', device_type='GPU')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> interpolate(x, xi, y):</span>
<span id="cb14-2">    j   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.argsort(tf.concat((x, xi), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb14-3">    k   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(j))</span>
<span id="cb14-4">    q   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.scatter_nd(j[:, tf.newaxis], k, k.shape)</span>
<span id="cb14-5"></span>
<span id="cb14-6">    lxi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xi)</span>
<span id="cb14-7"></span>
<span id="cb14-8">    r   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   q[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>lxi:]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tf.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, lxi)</span>
<span id="cb14-9">    r   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.where(xi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], q[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lxi, r)</span>
<span id="cb14-10"></span>
<span id="cb14-11">    x2  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(x, r)</span>
<span id="cb14-12">    x1  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(x, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-13">    y2  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(y, r)</span>
<span id="cb14-14">    y1  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.gather(y, r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-15"></span>
<span id="cb14-16">    u   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   (xi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(x2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)</span>
<span id="cb14-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> tf.rank(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tf.rank(y1):</span>
<span id="cb14-18">        u   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   tf.expand_dims(u, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-19"></span>
<span id="cb14-20">    yi  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>u)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y2</span>
<span id="cb14-21"></span>
<span id="cb14-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tf.where(y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y2, y1, yi)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(gene, start, end, prob):</span>
<span id="cb15-2">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>].values)</span>
<span id="cb15-3">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>]).values)</span>
<span id="cb15-4">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb15-5">    pr_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.expand_dims(tf.cast(interpolate(x, bins, y), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.float32), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb15-7">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb15-8">    ref_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.transpose(matrix, perm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb15-9">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.squeeze(tf.matmul(pr_tensor, ref_tensor), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb15-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(prob, gene_annot):</span>
<span id="cb15-12">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb15-13">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb15-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb15-15">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb15-16">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb15-17">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb15-18">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb15-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> prob.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> prob.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb15-20">            output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(gene, start, end, prob)</span>
<span id="cb15-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb15-22">            predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output</span>
<span id="cb15-23">            end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb15-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb15-25">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations:"</span>, end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span>
<span id="cb15-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb16-2">    output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(project_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0007899884'</span>)</span>
<span id="cb16-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.isdir(output_dir):</span>
<span id="cb16-4">        os.makedirs(output_dir)</span>
<span id="cb16-5">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000789FF64'</span>][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb16-6">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(prob, genes_df)</span>
<span id="cb16-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write_h5(os.path.join(output_dir, f"{chr}_genes.h5"), predictions) </span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2024-01-18 00:35:52.561833: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 38167 MB memory:  -&gt; device: 0, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:07:00.0, compute capability: 8.0
2024-01-18 00:35:52.563078: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 38167 MB memory:  -&gt; device: 1, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:46:00.0, compute capability: 8.0
2024-01-18 00:35:52.564128: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:2 with 38167 MB memory:  -&gt; device: 2, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:85:00.0, compute capability: 8.0
2024-01-18 00:35:52.565182: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:3 with 38167 MB memory:  -&gt; device: 3, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:c7:00.0, compute capability: 8.0
2024-01-18 00:43:34.340681: W tensorflow/tsl/framework/bfc_allocator.cc:485] Allocator (GPU_0_bfc) ran out of memory trying to allocate 145.28MiB (rounded to 152334336)requested by op Transpose
If the cause is memory fragmentation maybe the environment variable 'TF_GPU_ALLOCATOR=cuda_malloc_async' will improve the situation. 
Current allocation summary follows.
Current allocation summary follows.
2024-01-18 00:43:34.340731: I tensorflow/tsl/framework/bfc_allocator.cc:1039] BFCAllocator dump for GPU_0_bfc
2024-01-18 00:43:34.340742: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (256):    Total Chunks: 7, Chunks in use: 7. 1.8KiB allocated for chunks. 1.8KiB in use in bin. 33B client-requested in use in bin.
2024-01-18 00:43:34.340749: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (512):    Total Chunks: 1, Chunks in use: 0. 512B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340755: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (1024):   Total Chunks: 2, Chunks in use: 1. 2.5KiB allocated for chunks. 1.2KiB in use in bin. 1.0KiB client-requested in use in bin.
2024-01-18 00:43:34.340761: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (2048):   Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340766: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (4096):   Total Chunks: 2, Chunks in use: 1. 14.0KiB allocated for chunks. 7.0KiB in use in bin. 7.0KiB client-requested in use in bin.
2024-01-18 00:43:34.340772: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (8192):   Total Chunks: 1, Chunks in use: 0. 14.0KiB allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340776: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (16384):  Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340782: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (32768):  Total Chunks: 1, Chunks in use: 1. 48.5KiB allocated for chunks. 48.5KiB in use in bin. 28.0KiB client-requested in use in bin.
2024-01-18 00:43:34.340786: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (65536):  Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340790: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (131072):     Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340795: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (262144):     Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340799: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (524288):     Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340803: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (1048576):    Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340807: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (2097152):    Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340813: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (4194304):    Total Chunks: 1, Chunks in use: 1. 5.50MiB allocated for chunks. 5.50MiB in use in bin. 5.50MiB client-requested in use in bin.
2024-01-18 00:43:34.340817: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (8388608):    Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340823: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (16777216):   Total Chunks: 2084, Chunks in use: 2084. 36.96GiB allocated for chunks. 36.96GiB in use in bin. 36.96GiB client-requested in use in bin.
2024-01-18 00:43:34.340829: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (33554432):   Total Chunks: 1, Chunks in use: 1. 43.98MiB allocated for chunks. 43.98MiB in use in bin. 43.98MiB client-requested in use in bin.
2024-01-18 00:43:34.340834: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (67108864):   Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340843: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (134217728):  Total Chunks: 0, Chunks in use: 0. 0B allocated for chunks. 0B in use in bin. 0B client-requested in use in bin.
2024-01-18 00:43:34.340849: I tensorflow/tsl/framework/bfc_allocator.cc:1046] Bin (268435456):  Total Chunks: 1, Chunks in use: 1. 273.07MiB allocated for chunks. 273.07MiB in use in bin. 145.28MiB client-requested in use in bin.
2024-01-18 00:43:34.340855: I tensorflow/tsl/framework/bfc_allocator.cc:1062] Bin for 145.28MiB was 128.00MiB, Chunk State: 
2024-01-18 00:43:34.340861: I tensorflow/tsl/framework/bfc_allocator.cc:1075] Next region of size 40021393408
2024-01-18 00:43:34.340869: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a42000000 of size 5765120 next 1
2024-01-18 00:43:34.340873: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4257f800 of size 1280 next 2
2024-01-18 00:43:34.340877: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4257fd00 of size 46119424 next 3
2024-01-18 00:43:34.340880: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4517b700 of size 256 next 4
2024-01-18 00:43:34.340884: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4517b800 of size 256 next 5
2024-01-18 00:43:34.340887: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4517b900 of size 256 next 6
2024-01-18 00:43:34.340890: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4517ba00 of size 256 next 7
2024-01-18 00:43:34.340893: I tensorflow/tsl/framework/bfc_allocator.cc:1095] Free  at 148a4517bb00 of size 1280 next 12
2024-01-18 00:43:34.340897: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4517c000 of size 256 next 13
2024-01-18 00:43:34.340900: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4517c100 of size 256 next 14
2024-01-18 00:43:34.340903: I tensorflow/tsl/framework/bfc_allocator.cc:1095] Free  at 148a4517c200 of size 512 next 18
2024-01-18 00:43:34.340906: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4517c400 of size 256 next 19
2024-01-18 00:43:34.340910: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4517c500 of size 49664 next 25
2024-01-18 00:43:34.340913: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a45188700 of size 19041792 next 27
2024-01-18 00:43:34.340916: I tensorflow/tsl/framework/bfc_allocator.cc:1095] Free  at 148a463b1500 of size 14336 next 2103
2024-01-18 00:43:34.340920: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a463b4d00 of size 7168 next 21
2024-01-18 00:43:34.340923: I tensorflow/tsl/framework/bfc_allocator.cc:1095] Free  at 148a463b6900 of size 7168 next 23
2024-01-18 00:43:34.340926: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a463b8500 of size 19041792 next 16
2024-01-18 00:43:34.340930: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a475e1300 of size 19041792 next 9
2024-01-18 00:43:34.340933: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4880a100 of size 19041792 next 17
2024-01-18 00:43:34.340936: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a49a32f00 of size 19041792 next 20
2024-01-18 00:43:34.340939: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4ac5bd00 of size 19041792 next 8
2024-01-18 00:43:34.340942: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4be84b00 of size 19041792 next 15
2024-01-18 00:43:34.340945: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4d0ad900 of size 19041792 next 26
2024-01-18 00:43:34.340948: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4e2d6700 of size 19041792 next 30
2024-01-18 00:43:34.340952: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a4f4ff500 of size 19041792 next 31
2024-01-18 00:43:34.340955: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a50728300 of size 19041792 next 32
2024-01-18 00:43:34.340958: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a51951100 of size 19041792 next 33
2024-01-18 00:43:34.340962: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a52b79f00 of size 19041792 next 34
2024-01-18 00:43:34.340965: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a53da2d00 of size 19041792 next 35
2024-01-18 00:43:34.340968: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a54fcbb00 of size 19041792 next 36
2024-01-18 00:43:34.340971: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a561f4900 of size 19041792 next 37
2024-01-18 00:43:34.340974: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a5741d700 of size 19041792 next 38
2024-01-18 00:43:34.340977: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a58646500 of size 19041792 next 39
2024-01-18 00:43:34.340980: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a5986f300 of size 19041792 next 40
2024-01-18 00:43:34.340984: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a5aa98100 of size 19041792 next 41
2024-01-18 00:43:34.340987: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a5bcc0f00 of size 19041792 next 42
2024-01-18 00:43:34.340990: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a5cee9d00 of size 19041792 next 43
2024-01-18 00:43:34.340993: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a5e112b00 of size 19041792 next 44
2024-01-18 00:43:34.340996: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a5f33b900 of size 19041792 next 45
2024-01-18 00:43:34.340999: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a60564700 of size 19041792 next 46
2024-01-18 00:43:34.341002: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a6178d500 of size 19041792 next 47
2024-01-18 00:43:34.341005: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a629b6300 of size 19041792 next 48
2024-01-18 00:43:34.341009: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a63bdf100 of size 19041792 next 49
2024-01-18 00:43:34.341012: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a64e07f00 of size 19041792 next 50
2024-01-18 00:43:34.341015: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a66030d00 of size 19041792 next 51
2024-01-18 00:43:34.341018: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a67259b00 of size 19041792 next 52
2024-01-18 00:43:34.341021: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a68482900 of size 19041792 next 53
2024-01-18 00:43:34.341024: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a696ab700 of size 19041792 next 54
2024-01-18 00:43:34.341027: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a6a8d4500 of size 19041792 next 55
2024-01-18 00:43:34.341030: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a6bafd300 of size 19041792 next 56
2024-01-18 00:43:34.341034: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a6cd26100 of size 19041792 next 57
2024-01-18 00:43:34.341037: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a6df4ef00 of size 19041792 next 58
2024-01-18 00:43:34.341040: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a6f177d00 of size 19041792 next 59
2024-01-18 00:43:34.341043: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a703a0b00 of size 19041792 next 60
2024-01-18 00:43:34.341046: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a715c9900 of size 19041792 next 61
2024-01-18 00:43:34.341050: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a727f2700 of size 19041792 next 62
2024-01-18 00:43:34.341053: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a73a1b500 of size 19041792 next 63
2024-01-18 00:43:34.341056: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a74c44300 of size 19041792 next 64
2024-01-18 00:43:34.341059: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a75e6d100 of size 19041792 next 65
2024-01-18 00:43:34.341063: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a77095f00 of size 19041792 next 66
2024-01-18 00:43:34.341066: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a782bed00 of size 19041792 next 67
2024-01-18 00:43:34.341069: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a794e7b00 of size 19041792 next 68
2024-01-18 00:43:34.341072: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a7a710900 of size 19041792 next 69
2024-01-18 00:43:34.341075: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a7b939700 of size 19041792 next 70
2024-01-18 00:43:34.341078: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a7cb62500 of size 19041792 next 71
2024-01-18 00:43:34.341082: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a7dd8b300 of size 19041792 next 72
2024-01-18 00:43:34.341085: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a7efb4100 of size 19041792 next 73
2024-01-18 00:43:34.341088: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a801dcf00 of size 19041792 next 74
2024-01-18 00:43:34.341091: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a81405d00 of size 19041792 next 75
2024-01-18 00:43:34.341094: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a8262eb00 of size 19041792 next 76
2024-01-18 00:43:34.341097: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a83857900 of size 19041792 next 77
2024-01-18 00:43:34.341100: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a84a80700 of size 19041792 next 78
2024-01-18 00:43:34.341103: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a85ca9500 of size 19041792 next 79
2024-01-18 00:43:34.341107: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a86ed2300 of size 19041792 next 80
2024-01-18 00:43:34.341110: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a880fb100 of size 19041792 next 81
2024-01-18 00:43:34.341113: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a89323f00 of size 19041792 next 82
2024-01-18 00:43:34.341116: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a8a54cd00 of size 19041792 next 83
2024-01-18 00:43:34.341119: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a8b775b00 of size 19041792 next 84
2024-01-18 00:43:34.341122: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a8c99e900 of size 19041792 next 85
2024-01-18 00:43:34.341125: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a8dbc7700 of size 19041792 next 86
2024-01-18 00:43:34.341129: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a8edf0500 of size 19041792 next 87
2024-01-18 00:43:34.341132: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a90019300 of size 19041792 next 88
2024-01-18 00:43:34.341135: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a91242100 of size 19041792 next 89
2024-01-18 00:43:34.341138: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a9246af00 of size 19041792 next 90
2024-01-18 00:43:34.341141: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a93693d00 of size 19041792 next 91
2024-01-18 00:43:34.341144: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a948bcb00 of size 19041792 next 92
2024-01-18 00:43:34.341148: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a95ae5900 of size 19041792 next 93
2024-01-18 00:43:34.341151: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a96d0e700 of size 19041792 next 94
2024-01-18 00:43:34.341154: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a97f37500 of size 19041792 next 95
2024-01-18 00:43:34.341157: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a99160300 of size 19041792 next 96
2024-01-18 00:43:34.341161: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a9a389100 of size 19041792 next 97
2024-01-18 00:43:34.341164: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a9b5b1f00 of size 19041792 next 98
2024-01-18 00:43:34.341167: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a9c7dad00 of size 19041792 next 99
2024-01-18 00:43:34.341170: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a9da03b00 of size 19041792 next 100
2024-01-18 00:43:34.341173: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a9ec2c900 of size 19041792 next 101
2024-01-18 00:43:34.341177: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148a9fe55700 of size 19041792 next 102
2024-01-18 00:43:34.341180: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aa107e500 of size 19041792 next 103
2024-01-18 00:43:34.341183: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aa22a7300 of size 19041792 next 104
2024-01-18 00:43:34.341186: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aa34d0100 of size 19041792 next 105
2024-01-18 00:43:34.341189: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aa46f8f00 of size 19041792 next 106
2024-01-18 00:43:34.341192: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aa5921d00 of size 19041792 next 107
2024-01-18 00:43:34.341195: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aa6b4ab00 of size 19041792 next 108
2024-01-18 00:43:34.341199: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aa7d73900 of size 19041792 next 109
2024-01-18 00:43:34.341202: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aa8f9c700 of size 19041792 next 110
2024-01-18 00:43:34.341205: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aaa1c5500 of size 19041792 next 111
2024-01-18 00:43:34.341208: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aab3ee300 of size 19041792 next 112
2024-01-18 00:43:34.341211: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aac617100 of size 19041792 next 113
2024-01-18 00:43:34.341214: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aad83ff00 of size 19041792 next 114
2024-01-18 00:43:34.341217: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aaea68d00 of size 19041792 next 115
2024-01-18 00:43:34.341221: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aafc91b00 of size 19041792 next 116
2024-01-18 00:43:34.341224: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ab0eba900 of size 19041792 next 117
2024-01-18 00:43:34.341227: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ab20e3700 of size 19041792 next 118
2024-01-18 00:43:34.341230: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ab330c500 of size 19041792 next 119
2024-01-18 00:43:34.341233: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ab4535300 of size 19041792 next 120
2024-01-18 00:43:34.341236: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ab575e100 of size 19041792 next 121
2024-01-18 00:43:34.341240: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ab6986f00 of size 19041792 next 122
2024-01-18 00:43:34.341243: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ab7bafd00 of size 19041792 next 123
2024-01-18 00:43:34.341246: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ab8dd8b00 of size 19041792 next 124
2024-01-18 00:43:34.341249: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aba001900 of size 19041792 next 125
2024-01-18 00:43:34.341264: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148abb22a700 of size 19041792 next 126
2024-01-18 00:43:34.341267: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148abc453500 of size 19041792 next 127
2024-01-18 00:43:34.341271: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148abd67c300 of size 19041792 next 128
2024-01-18 00:43:34.341274: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148abe8a5100 of size 19041792 next 129
2024-01-18 00:43:34.341277: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148abfacdf00 of size 19041792 next 130
2024-01-18 00:43:34.341280: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ac0cf6d00 of size 19041792 next 131
2024-01-18 00:43:34.341283: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ac1f1fb00 of size 19041792 next 132
2024-01-18 00:43:34.341286: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ac3148900 of size 19041792 next 133
2024-01-18 00:43:34.341290: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ac4371700 of size 19041792 next 134
2024-01-18 00:43:34.341293: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ac559a500 of size 19041792 next 135
2024-01-18 00:43:34.341296: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ac67c3300 of size 19041792 next 136
2024-01-18 00:43:34.341299: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ac79ec100 of size 19041792 next 137
2024-01-18 00:43:34.341302: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ac8c14f00 of size 19041792 next 138
2024-01-18 00:43:34.341305: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ac9e3dd00 of size 19041792 next 139
2024-01-18 00:43:34.341308: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148acb066b00 of size 19041792 next 140
2024-01-18 00:43:34.341312: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148acc28f900 of size 19041792 next 141
2024-01-18 00:43:34.341315: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148acd4b8700 of size 19041792 next 142
2024-01-18 00:43:34.341318: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ace6e1500 of size 19041792 next 143
2024-01-18 00:43:34.341321: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148acf90a300 of size 19041792 next 144
2024-01-18 00:43:34.341325: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ad0b33100 of size 19041792 next 145
2024-01-18 00:43:34.341328: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ad1d5bf00 of size 19041792 next 146
2024-01-18 00:43:34.341331: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ad2f84d00 of size 19041792 next 147
2024-01-18 00:43:34.341334: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ad41adb00 of size 19041792 next 148
2024-01-18 00:43:34.341337: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ad53d6900 of size 19041792 next 149
2024-01-18 00:43:34.341340: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ad65ff700 of size 19041792 next 150
2024-01-18 00:43:34.341343: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ad7828500 of size 19041792 next 151
2024-01-18 00:43:34.341347: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ad8a51300 of size 19041792 next 152
2024-01-18 00:43:34.341350: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ad9c7a100 of size 19041792 next 153
2024-01-18 00:43:34.341353: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148adaea2f00 of size 19041792 next 154
2024-01-18 00:43:34.341356: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148adc0cbd00 of size 19041792 next 155
2024-01-18 00:43:34.341359: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148add2f4b00 of size 19041792 next 156
2024-01-18 00:43:34.341362: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ade51d900 of size 19041792 next 157
2024-01-18 00:43:34.341366: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148adf746700 of size 19041792 next 158
2024-01-18 00:43:34.341369: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ae096f500 of size 19041792 next 159
2024-01-18 00:43:34.341372: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ae1b98300 of size 19041792 next 160
2024-01-18 00:43:34.341375: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ae2dc1100 of size 19041792 next 161
2024-01-18 00:43:34.341378: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ae3fe9f00 of size 19041792 next 162
2024-01-18 00:43:34.341382: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ae5212d00 of size 19041792 next 163
2024-01-18 00:43:34.341385: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ae643bb00 of size 19041792 next 164
2024-01-18 00:43:34.341389: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ae7664900 of size 19041792 next 165
2024-01-18 00:43:34.341392: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ae888d700 of size 19041792 next 166
2024-01-18 00:43:34.341396: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ae9ab6500 of size 19041792 next 167
2024-01-18 00:43:34.341400: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aeacdf300 of size 19041792 next 168
2024-01-18 00:43:34.341404: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aebf08100 of size 19041792 next 169
2024-01-18 00:43:34.341407: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aed130f00 of size 19041792 next 170
2024-01-18 00:43:34.341411: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aee359d00 of size 19041792 next 171
2024-01-18 00:43:34.341415: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aef582b00 of size 19041792 next 172
2024-01-18 00:43:34.341419: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148af07ab900 of size 19041792 next 173
2024-01-18 00:43:34.341422: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148af19d4700 of size 19041792 next 174
2024-01-18 00:43:34.341426: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148af2bfd500 of size 19041792 next 175
2024-01-18 00:43:34.341430: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148af3e26300 of size 19041792 next 176
2024-01-18 00:43:34.341434: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148af504f100 of size 19041792 next 177
2024-01-18 00:43:34.341437: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148af6277f00 of size 19041792 next 178
2024-01-18 00:43:34.341441: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148af74a0d00 of size 19041792 next 179
2024-01-18 00:43:34.341445: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148af86c9b00 of size 19041792 next 180
2024-01-18 00:43:34.341448: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148af98f2900 of size 19041792 next 181
2024-01-18 00:43:34.341452: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148afab1b700 of size 19041792 next 182
2024-01-18 00:43:34.341456: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148afbd44500 of size 19041792 next 183
2024-01-18 00:43:34.341460: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148afcf6d300 of size 19041792 next 184
2024-01-18 00:43:34.341464: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148afe196100 of size 19041792 next 185
2024-01-18 00:43:34.341468: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148aff3bef00 of size 19041792 next 186
2024-01-18 00:43:34.341471: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b005e7d00 of size 19041792 next 187
2024-01-18 00:43:34.341475: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b01810b00 of size 19041792 next 188
2024-01-18 00:43:34.341479: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b02a39900 of size 19041792 next 189
2024-01-18 00:43:34.341483: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b03c62700 of size 19041792 next 190
2024-01-18 00:43:34.341486: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b04e8b500 of size 19041792 next 191
2024-01-18 00:43:34.341490: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b060b4300 of size 19041792 next 192
2024-01-18 00:43:34.341494: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b072dd100 of size 19041792 next 193
2024-01-18 00:43:34.341498: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b08505f00 of size 19041792 next 194
2024-01-18 00:43:34.341501: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b0972ed00 of size 19041792 next 195
2024-01-18 00:43:34.341505: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b0a957b00 of size 19041792 next 196
2024-01-18 00:43:34.341509: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b0bb80900 of size 19041792 next 197
2024-01-18 00:43:34.341513: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b0cda9700 of size 19041792 next 198
2024-01-18 00:43:34.341517: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b0dfd2500 of size 19041792 next 199
2024-01-18 00:43:34.341521: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b0f1fb300 of size 19041792 next 200
2024-01-18 00:43:34.341524: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b10424100 of size 19041792 next 201
2024-01-18 00:43:34.341528: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b1164cf00 of size 19041792 next 202
2024-01-18 00:43:34.341532: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b12875d00 of size 19041792 next 203
2024-01-18 00:43:34.341536: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b13a9eb00 of size 19041792 next 204
2024-01-18 00:43:34.341539: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b14cc7900 of size 19041792 next 205
2024-01-18 00:43:34.341543: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b15ef0700 of size 19041792 next 206
2024-01-18 00:43:34.341547: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b17119500 of size 19041792 next 207
2024-01-18 00:43:34.341551: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b18342300 of size 19041792 next 208
2024-01-18 00:43:34.341554: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b1956b100 of size 19041792 next 209
2024-01-18 00:43:34.341558: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b1a793f00 of size 19041792 next 210
2024-01-18 00:43:34.341562: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b1b9bcd00 of size 19041792 next 211
2024-01-18 00:43:34.341565: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b1cbe5b00 of size 19041792 next 212
2024-01-18 00:43:34.341569: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b1de0e900 of size 19041792 next 213
2024-01-18 00:43:34.341573: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b1f037700 of size 19041792 next 214
2024-01-18 00:43:34.341577: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b20260500 of size 19041792 next 215
2024-01-18 00:43:34.341580: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b21489300 of size 19041792 next 216
2024-01-18 00:43:34.341584: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b226b2100 of size 19041792 next 217
2024-01-18 00:43:34.341588: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b238daf00 of size 19041792 next 218
2024-01-18 00:43:34.341592: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b24b03d00 of size 19041792 next 219
2024-01-18 00:43:34.341595: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b25d2cb00 of size 19041792 next 220
2024-01-18 00:43:34.341600: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b26f55900 of size 19041792 next 221
2024-01-18 00:43:34.341604: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b2817e700 of size 19041792 next 222
2024-01-18 00:43:34.341608: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b293a7500 of size 19041792 next 223
2024-01-18 00:43:34.341612: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b2a5d0300 of size 19041792 next 224
2024-01-18 00:43:34.341615: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b2b7f9100 of size 19041792 next 225
2024-01-18 00:43:34.341619: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b2ca21f00 of size 19041792 next 226
2024-01-18 00:43:34.341623: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b2dc4ad00 of size 19041792 next 227
2024-01-18 00:43:34.341627: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b2ee73b00 of size 19041792 next 228
2024-01-18 00:43:34.341630: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b3009c900 of size 19041792 next 229
2024-01-18 00:43:34.341634: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b312c5700 of size 19041792 next 230
2024-01-18 00:43:34.341638: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b324ee500 of size 19041792 next 231
2024-01-18 00:43:34.341641: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b33717300 of size 19041792 next 232
2024-01-18 00:43:34.341645: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b34940100 of size 19041792 next 233
2024-01-18 00:43:34.341649: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b35b68f00 of size 19041792 next 234
2024-01-18 00:43:34.341653: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b36d91d00 of size 19041792 next 235
2024-01-18 00:43:34.341656: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b37fbab00 of size 19041792 next 236
2024-01-18 00:43:34.341660: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b391e3900 of size 19041792 next 237
2024-01-18 00:43:34.341664: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b3a40c700 of size 19041792 next 238
2024-01-18 00:43:34.341667: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b3b635500 of size 19041792 next 239
2024-01-18 00:43:34.341671: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b3c85e300 of size 19041792 next 240
2024-01-18 00:43:34.341675: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b3da87100 of size 19041792 next 241
2024-01-18 00:43:34.341679: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b3ecaff00 of size 19041792 next 242
2024-01-18 00:43:34.341682: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b3fed8d00 of size 19041792 next 243
2024-01-18 00:43:34.341686: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b41101b00 of size 19041792 next 244
2024-01-18 00:43:34.341690: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b4232a900 of size 19041792 next 245
2024-01-18 00:43:34.341694: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b43553700 of size 19041792 next 246
2024-01-18 00:43:34.341697: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b4477c500 of size 19041792 next 247
2024-01-18 00:43:34.341701: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b459a5300 of size 19041792 next 248
2024-01-18 00:43:34.341705: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b46bce100 of size 19041792 next 249
2024-01-18 00:43:34.341708: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b47df6f00 of size 19041792 next 250
2024-01-18 00:43:34.341712: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b4901fd00 of size 19041792 next 251
2024-01-18 00:43:34.341716: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b4a248b00 of size 19041792 next 252
2024-01-18 00:43:34.341720: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b4b471900 of size 19041792 next 253
2024-01-18 00:43:34.341723: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b4c69a700 of size 19041792 next 254
2024-01-18 00:43:34.341727: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b4d8c3500 of size 19041792 next 255
2024-01-18 00:43:34.341731: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b4eaec300 of size 19041792 next 256
2024-01-18 00:43:34.341735: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b4fd15100 of size 19041792 next 257
2024-01-18 00:43:34.341738: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b50f3df00 of size 19041792 next 258
2024-01-18 00:43:34.341742: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b52166d00 of size 19041792 next 259
2024-01-18 00:43:34.341746: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b5338fb00 of size 19041792 next 260
2024-01-18 00:43:34.341749: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b545b8900 of size 19041792 next 261
2024-01-18 00:43:34.341753: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b557e1700 of size 19041792 next 262
2024-01-18 00:43:34.341757: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b56a0a500 of size 19041792 next 263
2024-01-18 00:43:34.341761: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b57c33300 of size 19041792 next 264
2024-01-18 00:43:34.341764: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b58e5c100 of size 19041792 next 265
2024-01-18 00:43:34.341768: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b5a084f00 of size 19041792 next 266
2024-01-18 00:43:34.341772: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b5b2add00 of size 19041792 next 267
2024-01-18 00:43:34.341776: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b5c4d6b00 of size 19041792 next 268
2024-01-18 00:43:34.341779: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b5d6ff900 of size 19041792 next 269
2024-01-18 00:43:34.341783: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b5e928700 of size 19041792 next 270
2024-01-18 00:43:34.341787: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b5fb51500 of size 19041792 next 271
2024-01-18 00:43:34.341790: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b60d7a300 of size 19041792 next 272
2024-01-18 00:43:34.341794: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b61fa3100 of size 19041792 next 273
2024-01-18 00:43:34.341798: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b631cbf00 of size 19041792 next 274
2024-01-18 00:43:34.341802: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b643f4d00 of size 19041792 next 275
2024-01-18 00:43:34.341805: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b6561db00 of size 19041792 next 276
2024-01-18 00:43:34.341809: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b66846900 of size 19041792 next 277
2024-01-18 00:43:34.341813: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b67a6f700 of size 19041792 next 278
2024-01-18 00:43:34.341817: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b68c98500 of size 19041792 next 279
2024-01-18 00:43:34.341820: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b69ec1300 of size 19041792 next 280
2024-01-18 00:43:34.341824: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b6b0ea100 of size 19041792 next 281
2024-01-18 00:43:34.341828: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b6c312f00 of size 19041792 next 282
2024-01-18 00:43:34.341832: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b6d53bd00 of size 19041792 next 283
2024-01-18 00:43:34.341835: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b6e764b00 of size 19041792 next 284
2024-01-18 00:43:34.341839: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b6f98d900 of size 19041792 next 285
2024-01-18 00:43:34.341843: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b70bb6700 of size 19041792 next 286
2024-01-18 00:43:34.341846: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b71ddf500 of size 19041792 next 287
2024-01-18 00:43:34.341850: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b73008300 of size 19041792 next 288
2024-01-18 00:43:34.341854: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b74231100 of size 19041792 next 289
2024-01-18 00:43:34.341858: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b75459f00 of size 19041792 next 290
2024-01-18 00:43:34.341861: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b76682d00 of size 19041792 next 291
2024-01-18 00:43:34.341865: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b778abb00 of size 19041792 next 292
2024-01-18 00:43:34.341869: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b78ad4900 of size 19041792 next 293
2024-01-18 00:43:34.341873: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b79cfd700 of size 19041792 next 294
2024-01-18 00:43:34.341877: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b7af26500 of size 19041792 next 295
2024-01-18 00:43:34.341880: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b7c14f300 of size 19041792 next 296
2024-01-18 00:43:34.341884: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b7d378100 of size 19041792 next 297
2024-01-18 00:43:34.341888: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b7e5a0f00 of size 19041792 next 298
2024-01-18 00:43:34.341892: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b7f7c9d00 of size 19041792 next 299
2024-01-18 00:43:34.341895: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b809f2b00 of size 19041792 next 300
2024-01-18 00:43:34.341899: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b81c1b900 of size 19041792 next 301
2024-01-18 00:43:34.341903: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b82e44700 of size 19041792 next 302
2024-01-18 00:43:34.341906: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b8406d500 of size 19041792 next 303
2024-01-18 00:43:34.341910: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b85296300 of size 19041792 next 304
2024-01-18 00:43:34.341914: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b864bf100 of size 19041792 next 305
2024-01-18 00:43:34.341918: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b876e7f00 of size 19041792 next 306
2024-01-18 00:43:34.341921: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b88910d00 of size 19041792 next 307
2024-01-18 00:43:34.341925: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b89b39b00 of size 19041792 next 308
2024-01-18 00:43:34.341929: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b8ad62900 of size 19041792 next 309
2024-01-18 00:43:34.341933: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b8bf8b700 of size 19041792 next 310
2024-01-18 00:43:34.341936: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b8d1b4500 of size 19041792 next 311
2024-01-18 00:43:34.341940: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b8e3dd300 of size 19041792 next 312
2024-01-18 00:43:34.341944: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b8f606100 of size 19041792 next 313
2024-01-18 00:43:34.341947: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b9082ef00 of size 19041792 next 314
2024-01-18 00:43:34.341952: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b91a57d00 of size 19041792 next 315
2024-01-18 00:43:34.341956: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b92c80b00 of size 19041792 next 316
2024-01-18 00:43:34.341960: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b93ea9900 of size 19041792 next 317
2024-01-18 00:43:34.341963: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b950d2700 of size 19041792 next 318
2024-01-18 00:43:34.341967: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b962fb500 of size 19041792 next 319
2024-01-18 00:43:34.341971: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b97524300 of size 19041792 next 320
2024-01-18 00:43:34.341974: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b9874d100 of size 19041792 next 321
2024-01-18 00:43:34.341977: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b99975f00 of size 19041792 next 322
2024-01-18 00:43:34.341980: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b9ab9ed00 of size 19041792 next 323
2024-01-18 00:43:34.341982: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b9bdc7b00 of size 19041792 next 324
2024-01-18 00:43:34.341984: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b9cff0900 of size 19041792 next 325
2024-01-18 00:43:34.341986: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b9e219700 of size 19041792 next 326
2024-01-18 00:43:34.341988: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148b9f442500 of size 19041792 next 327
2024-01-18 00:43:34.341990: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ba066b300 of size 19041792 next 328
2024-01-18 00:43:34.341992: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ba1894100 of size 19041792 next 329
2024-01-18 00:43:34.341993: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ba2abcf00 of size 19041792 next 330
2024-01-18 00:43:34.341995: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ba3ce5d00 of size 19041792 next 331
2024-01-18 00:43:34.341997: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ba4f0eb00 of size 19041792 next 332
2024-01-18 00:43:34.341999: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ba6137900 of size 19041792 next 333
2024-01-18 00:43:34.342001: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ba7360700 of size 19041792 next 334
2024-01-18 00:43:34.342003: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ba8589500 of size 19041792 next 335
2024-01-18 00:43:34.342004: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ba97b2300 of size 19041792 next 336
2024-01-18 00:43:34.342006: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148baa9db100 of size 19041792 next 337
2024-01-18 00:43:34.342008: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148babc03f00 of size 19041792 next 338
2024-01-18 00:43:34.342010: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bace2cd00 of size 19041792 next 339
2024-01-18 00:43:34.342012: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bae055b00 of size 19041792 next 340
2024-01-18 00:43:34.342013: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148baf27e900 of size 19041792 next 341
2024-01-18 00:43:34.342015: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bb04a7700 of size 19041792 next 342
2024-01-18 00:43:34.342017: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bb16d0500 of size 19041792 next 343
2024-01-18 00:43:34.342019: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bb28f9300 of size 19041792 next 344
2024-01-18 00:43:34.342021: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bb3b22100 of size 19041792 next 345
2024-01-18 00:43:34.342022: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bb4d4af00 of size 19041792 next 346
2024-01-18 00:43:34.342024: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bb5f73d00 of size 19041792 next 347
2024-01-18 00:43:34.342026: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bb719cb00 of size 19041792 next 348
2024-01-18 00:43:34.342028: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bb83c5900 of size 19041792 next 349
2024-01-18 00:43:34.342030: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bb95ee700 of size 19041792 next 350
2024-01-18 00:43:34.342031: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bba817500 of size 19041792 next 351
2024-01-18 00:43:34.342033: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bbba40300 of size 19041792 next 352
2024-01-18 00:43:34.342035: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bbcc69100 of size 19041792 next 353
2024-01-18 00:43:34.342037: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bbde91f00 of size 19041792 next 354
2024-01-18 00:43:34.342038: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bbf0bad00 of size 19041792 next 355
2024-01-18 00:43:34.342040: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bc02e3b00 of size 19041792 next 356
2024-01-18 00:43:34.342041: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bc150c900 of size 19041792 next 357
2024-01-18 00:43:34.342043: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bc2735700 of size 19041792 next 358
2024-01-18 00:43:34.342044: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bc395e500 of size 19041792 next 359
2024-01-18 00:43:34.342046: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bc4b87300 of size 19041792 next 360
2024-01-18 00:43:34.342047: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bc5db0100 of size 19041792 next 361
2024-01-18 00:43:34.342049: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bc6fd8f00 of size 19041792 next 362
2024-01-18 00:43:34.342050: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bc8201d00 of size 19041792 next 363
2024-01-18 00:43:34.342052: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bc942ab00 of size 19041792 next 364
2024-01-18 00:43:34.342054: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bca653900 of size 19041792 next 365
2024-01-18 00:43:34.342055: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bcb87c700 of size 19041792 next 366
2024-01-18 00:43:34.342057: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bccaa5500 of size 19041792 next 367
2024-01-18 00:43:34.342058: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bcdcce300 of size 19041792 next 368
2024-01-18 00:43:34.342060: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bceef7100 of size 19041792 next 369
2024-01-18 00:43:34.342061: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bd011ff00 of size 19041792 next 370
2024-01-18 00:43:34.342063: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bd1348d00 of size 19041792 next 371
2024-01-18 00:43:34.342064: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bd2571b00 of size 19041792 next 372
2024-01-18 00:43:34.342066: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bd379a900 of size 19041792 next 373
2024-01-18 00:43:34.342067: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bd49c3700 of size 19041792 next 374
2024-01-18 00:43:34.342069: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bd5bec500 of size 19041792 next 375
2024-01-18 00:43:34.342070: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bd6e15300 of size 19041792 next 376
2024-01-18 00:43:34.342072: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bd803e100 of size 19041792 next 377
2024-01-18 00:43:34.342073: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bd9266f00 of size 19041792 next 378
2024-01-18 00:43:34.342075: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bda48fd00 of size 19041792 next 379
2024-01-18 00:43:34.342076: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bdb6b8b00 of size 19041792 next 380
2024-01-18 00:43:34.342078: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bdc8e1900 of size 19041792 next 381
2024-01-18 00:43:34.342079: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bddb0a700 of size 19041792 next 382
2024-01-18 00:43:34.342081: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bded33500 of size 19041792 next 383
2024-01-18 00:43:34.342082: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bdff5c300 of size 19041792 next 384
2024-01-18 00:43:34.342084: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148be1185100 of size 19041792 next 385
2024-01-18 00:43:34.342086: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148be23adf00 of size 19041792 next 386
2024-01-18 00:43:34.342087: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148be35d6d00 of size 19041792 next 387
2024-01-18 00:43:34.342089: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148be47ffb00 of size 19041792 next 388
2024-01-18 00:43:34.342090: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148be5a28900 of size 19041792 next 389
2024-01-18 00:43:34.342092: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148be6c51700 of size 19041792 next 390
2024-01-18 00:43:34.342093: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148be7e7a500 of size 19041792 next 391
2024-01-18 00:43:34.342095: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148be90a3300 of size 19041792 next 392
2024-01-18 00:43:34.342096: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bea2cc100 of size 19041792 next 393
2024-01-18 00:43:34.342098: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148beb4f4f00 of size 19041792 next 394
2024-01-18 00:43:34.342099: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bec71dd00 of size 19041792 next 395
2024-01-18 00:43:34.342101: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bed946b00 of size 19041792 next 396
2024-01-18 00:43:34.342102: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148beeb6f900 of size 19041792 next 397
2024-01-18 00:43:34.342104: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148befd98700 of size 19041792 next 398
2024-01-18 00:43:34.342105: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bf0fc1500 of size 19041792 next 399
2024-01-18 00:43:34.342107: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bf21ea300 of size 19041792 next 400
2024-01-18 00:43:34.342108: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bf3413100 of size 19041792 next 401
2024-01-18 00:43:34.342110: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bf463bf00 of size 19041792 next 402
2024-01-18 00:43:34.342111: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bf5864d00 of size 19041792 next 403
2024-01-18 00:43:34.342113: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bf6a8db00 of size 19041792 next 404
2024-01-18 00:43:34.342115: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bf7cb6900 of size 19041792 next 405
2024-01-18 00:43:34.342116: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bf8edf700 of size 19041792 next 406
2024-01-18 00:43:34.342118: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bfa108500 of size 19041792 next 407
2024-01-18 00:43:34.342119: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bfb331300 of size 19041792 next 408
2024-01-18 00:43:34.342121: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bfc55a100 of size 19041792 next 409
2024-01-18 00:43:34.342122: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bfd782f00 of size 19041792 next 410
2024-01-18 00:43:34.342124: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bfe9abd00 of size 19041792 next 411
2024-01-18 00:43:34.342125: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148bffbd4b00 of size 19041792 next 412
2024-01-18 00:43:34.342127: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c00dfd900 of size 19041792 next 413
2024-01-18 00:43:34.342129: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c02026700 of size 19041792 next 414
2024-01-18 00:43:34.342130: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c0324f500 of size 19041792 next 415
2024-01-18 00:43:34.342132: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c04478300 of size 19041792 next 416
2024-01-18 00:43:34.342133: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c056a1100 of size 19041792 next 417
2024-01-18 00:43:34.342135: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c068c9f00 of size 19041792 next 418
2024-01-18 00:43:34.342136: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c07af2d00 of size 19041792 next 419
2024-01-18 00:43:34.342138: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c08d1bb00 of size 19041792 next 420
2024-01-18 00:43:34.342139: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c09f44900 of size 19041792 next 421
2024-01-18 00:43:34.342141: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c0b16d700 of size 19041792 next 422
2024-01-18 00:43:34.342142: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c0c396500 of size 19041792 next 423
2024-01-18 00:43:34.342144: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c0d5bf300 of size 19041792 next 424
2024-01-18 00:43:34.342145: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c0e7e8100 of size 19041792 next 425
2024-01-18 00:43:34.342147: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c0fa10f00 of size 19041792 next 426
2024-01-18 00:43:34.342148: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c10c39d00 of size 19041792 next 427
2024-01-18 00:43:34.342150: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c11e62b00 of size 19041792 next 428
2024-01-18 00:43:34.342152: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c1308b900 of size 19041792 next 429
2024-01-18 00:43:34.342153: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c142b4700 of size 19041792 next 430
2024-01-18 00:43:34.342155: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c154dd500 of size 19041792 next 431
2024-01-18 00:43:34.342156: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c16706300 of size 19041792 next 432
2024-01-18 00:43:34.342158: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c1792f100 of size 19041792 next 433
2024-01-18 00:43:34.342159: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c18b57f00 of size 19041792 next 434
2024-01-18 00:43:34.342161: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c19d80d00 of size 19041792 next 435
2024-01-18 00:43:34.342162: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c1afa9b00 of size 19041792 next 436
2024-01-18 00:43:34.342164: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c1c1d2900 of size 19041792 next 437
2024-01-18 00:43:34.342165: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c1d3fb700 of size 19041792 next 438
2024-01-18 00:43:34.342167: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c1e624500 of size 19041792 next 439
2024-01-18 00:43:34.342168: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c1f84d300 of size 19041792 next 440
2024-01-18 00:43:34.342170: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c20a76100 of size 19041792 next 441
2024-01-18 00:43:34.342172: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c21c9ef00 of size 19041792 next 442
2024-01-18 00:43:34.342173: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c22ec7d00 of size 19041792 next 443
2024-01-18 00:43:34.342175: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c240f0b00 of size 19041792 next 444
2024-01-18 00:43:34.342176: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c25319900 of size 19041792 next 445
2024-01-18 00:43:34.342178: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c26542700 of size 19041792 next 446
2024-01-18 00:43:34.342179: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c2776b500 of size 19041792 next 447
2024-01-18 00:43:34.342181: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c28994300 of size 19041792 next 448
2024-01-18 00:43:34.342182: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c29bbd100 of size 19041792 next 449
2024-01-18 00:43:34.342184: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c2ade5f00 of size 19041792 next 450
2024-01-18 00:43:34.342185: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c2c00ed00 of size 19041792 next 451
2024-01-18 00:43:34.342187: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c2d237b00 of size 19041792 next 452
2024-01-18 00:43:34.342188: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c2e460900 of size 19041792 next 453
2024-01-18 00:43:34.342190: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c2f689700 of size 19041792 next 454
2024-01-18 00:43:34.342191: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c308b2500 of size 19041792 next 455
2024-01-18 00:43:34.342193: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c31adb300 of size 19041792 next 456
2024-01-18 00:43:34.342195: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c32d04100 of size 19041792 next 457
2024-01-18 00:43:34.342196: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c33f2cf00 of size 19041792 next 458
2024-01-18 00:43:34.342198: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c35155d00 of size 19041792 next 459
2024-01-18 00:43:34.342199: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c3637eb00 of size 19041792 next 460
2024-01-18 00:43:34.342201: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c375a7900 of size 19041792 next 461
2024-01-18 00:43:34.342202: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c387d0700 of size 19041792 next 462
2024-01-18 00:43:34.342204: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c399f9500 of size 19041792 next 463
2024-01-18 00:43:34.342205: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c3ac22300 of size 19041792 next 464
2024-01-18 00:43:34.342207: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c3be4b100 of size 19041792 next 465
2024-01-18 00:43:34.342208: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c3d073f00 of size 19041792 next 466
2024-01-18 00:43:34.342210: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c3e29cd00 of size 19041792 next 467
2024-01-18 00:43:34.342211: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c3f4c5b00 of size 19041792 next 468
2024-01-18 00:43:34.342213: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c406ee900 of size 19041792 next 469
2024-01-18 00:43:34.342214: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c41917700 of size 19041792 next 470
2024-01-18 00:43:34.342216: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c42b40500 of size 19041792 next 471
2024-01-18 00:43:34.342217: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c43d69300 of size 19041792 next 472
2024-01-18 00:43:34.342219: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c44f92100 of size 19041792 next 473
2024-01-18 00:43:34.342220: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c461baf00 of size 19041792 next 474
2024-01-18 00:43:34.342222: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c473e3d00 of size 19041792 next 475
2024-01-18 00:43:34.342223: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c4860cb00 of size 19041792 next 476
2024-01-18 00:43:34.342225: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c49835900 of size 19041792 next 477
2024-01-18 00:43:34.342227: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c4aa5e700 of size 19041792 next 478
2024-01-18 00:43:34.342228: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c4bc87500 of size 19041792 next 479
2024-01-18 00:43:34.342230: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c4ceb0300 of size 19041792 next 480
2024-01-18 00:43:34.342231: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c4e0d9100 of size 19041792 next 481
2024-01-18 00:43:34.342233: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c4f301f00 of size 19041792 next 482
2024-01-18 00:43:34.342234: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c5052ad00 of size 19041792 next 483
2024-01-18 00:43:34.342236: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c51753b00 of size 19041792 next 484
2024-01-18 00:43:34.342238: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c5297c900 of size 19041792 next 485
2024-01-18 00:43:34.342239: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c53ba5700 of size 19041792 next 486
2024-01-18 00:43:34.342241: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c54dce500 of size 19041792 next 487
2024-01-18 00:43:34.342242: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c55ff7300 of size 19041792 next 488
2024-01-18 00:43:34.342244: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c57220100 of size 19041792 next 489
2024-01-18 00:43:34.342245: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c58448f00 of size 19041792 next 490
2024-01-18 00:43:34.342247: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c59671d00 of size 19041792 next 491
2024-01-18 00:43:34.342248: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c5a89ab00 of size 19041792 next 492
2024-01-18 00:43:34.342250: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c5bac3900 of size 19041792 next 493
2024-01-18 00:43:34.342251: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c5ccec700 of size 19041792 next 494
2024-01-18 00:43:34.342253: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c5df15500 of size 19041792 next 495
2024-01-18 00:43:34.342254: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c5f13e300 of size 19041792 next 496
2024-01-18 00:43:34.342256: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c60367100 of size 19041792 next 497
2024-01-18 00:43:34.342257: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c6158ff00 of size 19041792 next 498
2024-01-18 00:43:34.342259: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c627b8d00 of size 19041792 next 499
2024-01-18 00:43:34.342261: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c639e1b00 of size 19041792 next 500
2024-01-18 00:43:34.342262: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c64c0a900 of size 19041792 next 501
2024-01-18 00:43:34.342264: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c65e33700 of size 19041792 next 502
2024-01-18 00:43:34.342265: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c6705c500 of size 19041792 next 503
2024-01-18 00:43:34.342267: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c68285300 of size 19041792 next 504
2024-01-18 00:43:34.342268: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c694ae100 of size 19041792 next 505
2024-01-18 00:43:34.342270: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c6a6d6f00 of size 19041792 next 506
2024-01-18 00:43:34.342271: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c6b8ffd00 of size 19041792 next 507
2024-01-18 00:43:34.342273: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c6cb28b00 of size 19041792 next 508
2024-01-18 00:43:34.342274: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c6dd51900 of size 19041792 next 509
2024-01-18 00:43:34.342276: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c6ef7a700 of size 19041792 next 510
2024-01-18 00:43:34.342277: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c701a3500 of size 19041792 next 511
2024-01-18 00:43:34.342279: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c713cc300 of size 19041792 next 512
2024-01-18 00:43:34.342280: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c725f5100 of size 19041792 next 513
2024-01-18 00:43:34.342282: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c7381df00 of size 19041792 next 514
2024-01-18 00:43:34.342283: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c74a46d00 of size 19041792 next 515
2024-01-18 00:43:34.342286: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c75c6fb00 of size 19041792 next 516
2024-01-18 00:43:34.342287: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c76e98900 of size 19041792 next 517
2024-01-18 00:43:34.342289: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c780c1700 of size 19041792 next 518
2024-01-18 00:43:34.342290: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c792ea500 of size 19041792 next 519
2024-01-18 00:43:34.342292: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c7a513300 of size 19041792 next 520
2024-01-18 00:43:34.342294: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c7b73c100 of size 19041792 next 521
2024-01-18 00:43:34.342295: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c7c964f00 of size 19041792 next 522
2024-01-18 00:43:34.342297: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c7db8dd00 of size 19041792 next 523
2024-01-18 00:43:34.342298: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c7edb6b00 of size 19041792 next 524
2024-01-18 00:43:34.342300: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c7ffdf900 of size 19041792 next 525
2024-01-18 00:43:34.342302: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c81208700 of size 19041792 next 526
2024-01-18 00:43:34.342303: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c82431500 of size 19041792 next 527
2024-01-18 00:43:34.342305: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c8365a300 of size 19041792 next 528
2024-01-18 00:43:34.342306: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c84883100 of size 19041792 next 529
2024-01-18 00:43:34.342308: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c85aabf00 of size 19041792 next 530
2024-01-18 00:43:34.342309: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c86cd4d00 of size 19041792 next 531
2024-01-18 00:43:34.342311: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c87efdb00 of size 19041792 next 532
2024-01-18 00:43:34.342312: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c89126900 of size 19041792 next 533
2024-01-18 00:43:34.342314: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c8a34f700 of size 19041792 next 534
2024-01-18 00:43:34.342315: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c8b578500 of size 19041792 next 535
2024-01-18 00:43:34.342317: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c8c7a1300 of size 19041792 next 536
2024-01-18 00:43:34.342318: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c8d9ca100 of size 19041792 next 537
2024-01-18 00:43:34.342320: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c8ebf2f00 of size 19041792 next 538
2024-01-18 00:43:34.342321: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c8fe1bd00 of size 19041792 next 539
2024-01-18 00:43:34.342323: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c91044b00 of size 19041792 next 540
2024-01-18 00:43:34.342324: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c9226d900 of size 19041792 next 541
2024-01-18 00:43:34.342326: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c93496700 of size 19041792 next 542
2024-01-18 00:43:34.342327: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c946bf500 of size 19041792 next 543
2024-01-18 00:43:34.342329: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c958e8300 of size 19041792 next 544
2024-01-18 00:43:34.342330: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c96b11100 of size 19041792 next 545
2024-01-18 00:43:34.342332: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c97d39f00 of size 19041792 next 546
2024-01-18 00:43:34.342333: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c98f62d00 of size 19041792 next 547
2024-01-18 00:43:34.342335: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c9a18bb00 of size 19041792 next 548
2024-01-18 00:43:34.342336: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c9b3b4900 of size 19041792 next 549
2024-01-18 00:43:34.342338: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c9c5dd700 of size 19041792 next 550
2024-01-18 00:43:34.342340: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c9d806500 of size 19041792 next 551
2024-01-18 00:43:34.342341: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c9ea2f300 of size 19041792 next 552
2024-01-18 00:43:34.342343: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148c9fc58100 of size 19041792 next 553
2024-01-18 00:43:34.342344: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ca0e80f00 of size 19041792 next 554
2024-01-18 00:43:34.342346: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ca20a9d00 of size 19041792 next 555
2024-01-18 00:43:34.342347: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ca32d2b00 of size 19041792 next 556
2024-01-18 00:43:34.342349: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ca44fb900 of size 19041792 next 557
2024-01-18 00:43:34.342350: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ca5724700 of size 19041792 next 558
2024-01-18 00:43:34.342352: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ca694d500 of size 19041792 next 559
2024-01-18 00:43:34.342353: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ca7b76300 of size 19041792 next 560
2024-01-18 00:43:34.342355: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ca8d9f100 of size 19041792 next 561
2024-01-18 00:43:34.342356: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ca9fc7f00 of size 19041792 next 562
2024-01-18 00:43:34.342358: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cab1f0d00 of size 19041792 next 563
2024-01-18 00:43:34.342359: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cac419b00 of size 19041792 next 564
2024-01-18 00:43:34.342361: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cad642900 of size 19041792 next 565
2024-01-18 00:43:34.342362: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cae86b700 of size 19041792 next 566
2024-01-18 00:43:34.342364: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cafa94500 of size 19041792 next 567
2024-01-18 00:43:34.342365: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cb0cbd300 of size 19041792 next 568
2024-01-18 00:43:34.342367: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cb1ee6100 of size 19041792 next 569
2024-01-18 00:43:34.342368: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cb310ef00 of size 19041792 next 570
2024-01-18 00:43:34.342370: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cb4337d00 of size 19041792 next 571
2024-01-18 00:43:34.342371: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cb5560b00 of size 19041792 next 572
2024-01-18 00:43:34.342373: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cb6789900 of size 19041792 next 573
2024-01-18 00:43:34.342375: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cb79b2700 of size 19041792 next 574
2024-01-18 00:43:34.342376: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cb8bdb500 of size 19041792 next 575
2024-01-18 00:43:34.342378: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cb9e04300 of size 19041792 next 576
2024-01-18 00:43:34.342379: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cbb02d100 of size 19041792 next 577
2024-01-18 00:43:34.342381: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cbc255f00 of size 19041792 next 578
2024-01-18 00:43:34.342382: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cbd47ed00 of size 19041792 next 579
2024-01-18 00:43:34.342384: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cbe6a7b00 of size 19041792 next 580
2024-01-18 00:43:34.342385: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cbf8d0900 of size 19041792 next 581
2024-01-18 00:43:34.342387: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cc0af9700 of size 19041792 next 582
2024-01-18 00:43:34.342388: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cc1d22500 of size 19041792 next 583
2024-01-18 00:43:34.342390: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cc2f4b300 of size 19041792 next 584
2024-01-18 00:43:34.342391: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cc4174100 of size 19041792 next 585
2024-01-18 00:43:34.342393: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cc539cf00 of size 19041792 next 586
2024-01-18 00:43:34.342394: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cc65c5d00 of size 19041792 next 587
2024-01-18 00:43:34.342396: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cc77eeb00 of size 19041792 next 588
2024-01-18 00:43:34.342397: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cc8a17900 of size 19041792 next 589
2024-01-18 00:43:34.342399: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cc9c40700 of size 19041792 next 590
2024-01-18 00:43:34.342400: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ccae69500 of size 19041792 next 591
2024-01-18 00:43:34.342402: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ccc092300 of size 19041792 next 592
2024-01-18 00:43:34.342403: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ccd2bb100 of size 19041792 next 593
2024-01-18 00:43:34.342405: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cce4e3f00 of size 19041792 next 594
2024-01-18 00:43:34.342406: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ccf70cd00 of size 19041792 next 595
2024-01-18 00:43:34.342408: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cd0935b00 of size 19041792 next 596
2024-01-18 00:43:34.342410: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cd1b5e900 of size 19041792 next 597
2024-01-18 00:43:34.342411: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cd2d87700 of size 19041792 next 598
2024-01-18 00:43:34.342413: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cd3fb0500 of size 19041792 next 599
2024-01-18 00:43:34.342414: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cd51d9300 of size 19041792 next 600
2024-01-18 00:43:34.342416: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cd6402100 of size 19041792 next 601
2024-01-18 00:43:34.342417: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cd762af00 of size 19041792 next 602
2024-01-18 00:43:34.342419: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cd8853d00 of size 19041792 next 603
2024-01-18 00:43:34.342420: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cd9a7cb00 of size 19041792 next 604
2024-01-18 00:43:34.342422: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cdaca5900 of size 19041792 next 605
2024-01-18 00:43:34.342423: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cdbece700 of size 19041792 next 606
2024-01-18 00:43:34.342425: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cdd0f7500 of size 19041792 next 607
2024-01-18 00:43:34.342426: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cde320300 of size 19041792 next 608
2024-01-18 00:43:34.342428: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cdf549100 of size 19041792 next 609
2024-01-18 00:43:34.342430: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ce0771f00 of size 19041792 next 610
2024-01-18 00:43:34.342431: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ce199ad00 of size 19041792 next 611
2024-01-18 00:43:34.342433: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ce2bc3b00 of size 19041792 next 612
2024-01-18 00:43:34.342434: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ce3dec900 of size 19041792 next 613
2024-01-18 00:43:34.342436: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ce5015700 of size 19041792 next 614
2024-01-18 00:43:34.342437: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ce623e500 of size 19041792 next 615
2024-01-18 00:43:34.342439: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ce7467300 of size 19041792 next 616
2024-01-18 00:43:34.342440: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ce8690100 of size 19041792 next 617
2024-01-18 00:43:34.342442: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ce98b8f00 of size 19041792 next 618
2024-01-18 00:43:34.342443: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ceaae1d00 of size 19041792 next 619
2024-01-18 00:43:34.342445: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cebd0ab00 of size 19041792 next 620
2024-01-18 00:43:34.342446: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cecf33900 of size 19041792 next 621
2024-01-18 00:43:34.342448: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cee15c700 of size 19041792 next 622
2024-01-18 00:43:34.342449: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cef385500 of size 19041792 next 623
2024-01-18 00:43:34.342451: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cf05ae300 of size 19041792 next 624
2024-01-18 00:43:34.342452: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cf17d7100 of size 19041792 next 625
2024-01-18 00:43:34.342454: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cf29fff00 of size 19041792 next 626
2024-01-18 00:43:34.342455: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cf3c28d00 of size 19041792 next 627
2024-01-18 00:43:34.342457: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cf4e51b00 of size 19041792 next 628
2024-01-18 00:43:34.342459: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cf607a900 of size 19041792 next 629
2024-01-18 00:43:34.342460: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cf72a3700 of size 19041792 next 630
2024-01-18 00:43:34.342462: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cf84cc500 of size 19041792 next 631
2024-01-18 00:43:34.342463: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cf96f5300 of size 19041792 next 632
2024-01-18 00:43:34.342465: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cfa91e100 of size 19041792 next 633
2024-01-18 00:43:34.342466: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cfbb46f00 of size 19041792 next 634
2024-01-18 00:43:34.342468: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cfcd6fd00 of size 19041792 next 635
2024-01-18 00:43:34.342469: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cfdf98b00 of size 19041792 next 636
2024-01-18 00:43:34.342471: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148cff1c1900 of size 19041792 next 637
2024-01-18 00:43:34.342472: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d003ea700 of size 19041792 next 638
2024-01-18 00:43:34.342474: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d01613500 of size 19041792 next 639
2024-01-18 00:43:34.342475: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d0283c300 of size 19041792 next 640
2024-01-18 00:43:34.342477: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d03a65100 of size 19041792 next 641
2024-01-18 00:43:34.342478: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d04c8df00 of size 19041792 next 642
2024-01-18 00:43:34.342480: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d05eb6d00 of size 19041792 next 643
2024-01-18 00:43:34.342481: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d070dfb00 of size 19041792 next 644
2024-01-18 00:43:34.342483: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d08308900 of size 19041792 next 645
2024-01-18 00:43:34.342484: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d09531700 of size 19041792 next 646
2024-01-18 00:43:34.342486: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d0a75a500 of size 19041792 next 647
2024-01-18 00:43:34.342487: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d0b983300 of size 19041792 next 648
2024-01-18 00:43:34.342489: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d0cbac100 of size 19041792 next 649
2024-01-18 00:43:34.342490: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d0ddd4f00 of size 19041792 next 650
2024-01-18 00:43:34.342492: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d0effdd00 of size 19041792 next 651
2024-01-18 00:43:34.342494: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d10226b00 of size 19041792 next 652
2024-01-18 00:43:34.342495: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d1144f900 of size 19041792 next 653
2024-01-18 00:43:34.342497: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d12678700 of size 19041792 next 654
2024-01-18 00:43:34.342498: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d138a1500 of size 19041792 next 655
2024-01-18 00:43:34.342500: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d14aca300 of size 19041792 next 656
2024-01-18 00:43:34.342501: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d15cf3100 of size 19041792 next 657
2024-01-18 00:43:34.342503: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d16f1bf00 of size 19041792 next 658
2024-01-18 00:43:34.342504: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d18144d00 of size 19041792 next 659
2024-01-18 00:43:34.342506: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d1936db00 of size 19041792 next 660
2024-01-18 00:43:34.342507: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d1a596900 of size 19041792 next 661
2024-01-18 00:43:34.342509: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d1b7bf700 of size 19041792 next 662
2024-01-18 00:43:34.342510: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d1c9e8500 of size 19041792 next 663
2024-01-18 00:43:34.342512: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d1dc11300 of size 19041792 next 664
2024-01-18 00:43:34.342513: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d1ee3a100 of size 19041792 next 665
2024-01-18 00:43:34.342515: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d20062f00 of size 19041792 next 666
2024-01-18 00:43:34.342516: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d2128bd00 of size 19041792 next 667
2024-01-18 00:43:34.342518: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d224b4b00 of size 19041792 next 668
2024-01-18 00:43:34.342519: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d236dd900 of size 19041792 next 669
2024-01-18 00:43:34.342521: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d24906700 of size 19041792 next 670
2024-01-18 00:43:34.342522: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d25b2f500 of size 19041792 next 671
2024-01-18 00:43:34.342524: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d26d58300 of size 19041792 next 672
2024-01-18 00:43:34.342526: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d27f81100 of size 19041792 next 673
2024-01-18 00:43:34.342527: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d291a9f00 of size 19041792 next 674
2024-01-18 00:43:34.342529: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d2a3d2d00 of size 19041792 next 675
2024-01-18 00:43:34.342530: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d2b5fbb00 of size 19041792 next 676
2024-01-18 00:43:34.342532: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d2c824900 of size 19041792 next 677
2024-01-18 00:43:34.342533: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d2da4d700 of size 19041792 next 678
2024-01-18 00:43:34.342535: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d2ec76500 of size 19041792 next 679
2024-01-18 00:43:34.342536: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d2fe9f300 of size 19041792 next 680
2024-01-18 00:43:34.342538: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d310c8100 of size 19041792 next 681
2024-01-18 00:43:34.342539: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d322f0f00 of size 19041792 next 682
2024-01-18 00:43:34.342541: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d33519d00 of size 19041792 next 683
2024-01-18 00:43:34.342542: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d34742b00 of size 19041792 next 684
2024-01-18 00:43:34.342544: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d3596b900 of size 19041792 next 685
2024-01-18 00:43:34.342545: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d36b94700 of size 19041792 next 686
2024-01-18 00:43:34.342547: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d37dbd500 of size 19041792 next 687
2024-01-18 00:43:34.342548: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d38fe6300 of size 19041792 next 688
2024-01-18 00:43:34.342550: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d3a20f100 of size 19041792 next 689
2024-01-18 00:43:34.342552: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d3b437f00 of size 19041792 next 690
2024-01-18 00:43:34.342553: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d3c660d00 of size 19041792 next 691
2024-01-18 00:43:34.342555: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d3d889b00 of size 19041792 next 692
2024-01-18 00:43:34.342556: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d3eab2900 of size 19041792 next 693
2024-01-18 00:43:34.342558: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d3fcdb700 of size 19041792 next 694
2024-01-18 00:43:34.342559: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d40f04500 of size 19041792 next 695
2024-01-18 00:43:34.342561: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d4212d300 of size 19041792 next 696
2024-01-18 00:43:34.342562: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d43356100 of size 19041792 next 697
2024-01-18 00:43:34.342564: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d4457ef00 of size 19041792 next 698
2024-01-18 00:43:34.342565: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d457a7d00 of size 19041792 next 699
2024-01-18 00:43:34.342567: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d469d0b00 of size 19041792 next 700
2024-01-18 00:43:34.342568: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d47bf9900 of size 19041792 next 701
2024-01-18 00:43:34.342570: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d48e22700 of size 19041792 next 702
2024-01-18 00:43:34.342571: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d4a04b500 of size 19041792 next 703
2024-01-18 00:43:34.342573: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d4b274300 of size 19041792 next 704
2024-01-18 00:43:34.342574: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d4c49d100 of size 19041792 next 705
2024-01-18 00:43:34.342576: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d4d6c5f00 of size 19041792 next 706
2024-01-18 00:43:34.342577: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d4e8eed00 of size 19041792 next 707
2024-01-18 00:43:34.342579: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d4fb17b00 of size 19041792 next 708
2024-01-18 00:43:34.342580: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d50d40900 of size 19041792 next 709
2024-01-18 00:43:34.342582: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d51f69700 of size 19041792 next 710
2024-01-18 00:43:34.342584: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d53192500 of size 19041792 next 711
2024-01-18 00:43:34.342585: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d543bb300 of size 19041792 next 712
2024-01-18 00:43:34.342587: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d555e4100 of size 19041792 next 713
2024-01-18 00:43:34.342588: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d5680cf00 of size 19041792 next 714
2024-01-18 00:43:34.342590: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d57a35d00 of size 19041792 next 715
2024-01-18 00:43:34.342591: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d58c5eb00 of size 19041792 next 716
2024-01-18 00:43:34.342593: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d59e87900 of size 19041792 next 717
2024-01-18 00:43:34.342594: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d5b0b0700 of size 19041792 next 718
2024-01-18 00:43:34.342596: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d5c2d9500 of size 19041792 next 719
2024-01-18 00:43:34.342598: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d5d502300 of size 19041792 next 720
2024-01-18 00:43:34.342599: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d5e72b100 of size 19041792 next 721
2024-01-18 00:43:34.342601: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d5f953f00 of size 19041792 next 722
2024-01-18 00:43:34.342602: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d60b7cd00 of size 19041792 next 723
2024-01-18 00:43:34.342604: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d61da5b00 of size 19041792 next 724
2024-01-18 00:43:34.342605: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d62fce900 of size 19041792 next 725
2024-01-18 00:43:34.342607: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d641f7700 of size 19041792 next 726
2024-01-18 00:43:34.342608: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d65420500 of size 19041792 next 727
2024-01-18 00:43:34.342610: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d66649300 of size 19041792 next 728
2024-01-18 00:43:34.342611: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d67872100 of size 19041792 next 729
2024-01-18 00:43:34.342613: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d68a9af00 of size 19041792 next 730
2024-01-18 00:43:34.342614: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d69cc3d00 of size 19041792 next 731
2024-01-18 00:43:34.342616: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d6aeecb00 of size 19041792 next 732
2024-01-18 00:43:34.342617: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d6c115900 of size 19041792 next 733
2024-01-18 00:43:34.342619: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d6d33e700 of size 19041792 next 734
2024-01-18 00:43:34.342621: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d6e567500 of size 19041792 next 735
2024-01-18 00:43:34.342622: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d6f790300 of size 19041792 next 736
2024-01-18 00:43:34.342624: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d709b9100 of size 19041792 next 737
2024-01-18 00:43:34.342625: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d71be1f00 of size 19041792 next 738
2024-01-18 00:43:34.342627: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d72e0ad00 of size 19041792 next 739
2024-01-18 00:43:34.342628: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d74033b00 of size 19041792 next 740
2024-01-18 00:43:34.342630: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d7525c900 of size 19041792 next 741
2024-01-18 00:43:34.342631: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d76485700 of size 19041792 next 742
2024-01-18 00:43:34.342633: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d776ae500 of size 19041792 next 743
2024-01-18 00:43:34.342634: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d788d7300 of size 19041792 next 744
2024-01-18 00:43:34.342636: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d79b00100 of size 19041792 next 745
2024-01-18 00:43:34.342637: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d7ad28f00 of size 19041792 next 746
2024-01-18 00:43:34.342639: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d7bf51d00 of size 19041792 next 747
2024-01-18 00:43:34.342640: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d7d17ab00 of size 19041792 next 748
2024-01-18 00:43:34.342642: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d7e3a3900 of size 19041792 next 749
2024-01-18 00:43:34.342643: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d7f5cc700 of size 19041792 next 750
2024-01-18 00:43:34.342645: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d807f5500 of size 19041792 next 751
2024-01-18 00:43:34.342646: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d81a1e300 of size 19041792 next 752
2024-01-18 00:43:34.342648: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d82c47100 of size 19041792 next 753
2024-01-18 00:43:34.342649: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d83e6ff00 of size 19041792 next 754
2024-01-18 00:43:34.342651: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d85098d00 of size 19041792 next 755
2024-01-18 00:43:34.342653: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d862c1b00 of size 19041792 next 756
2024-01-18 00:43:34.342654: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d874ea900 of size 19041792 next 757
2024-01-18 00:43:34.342656: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d88713700 of size 19041792 next 758
2024-01-18 00:43:34.342657: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d8993c500 of size 19041792 next 759
2024-01-18 00:43:34.342659: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d8ab65300 of size 19041792 next 760
2024-01-18 00:43:34.342660: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d8bd8e100 of size 19041792 next 761
2024-01-18 00:43:34.342662: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d8cfb6f00 of size 19041792 next 762
2024-01-18 00:43:34.342663: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d8e1dfd00 of size 19041792 next 763
2024-01-18 00:43:34.342665: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d8f408b00 of size 19041792 next 764
2024-01-18 00:43:34.342666: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d90631900 of size 19041792 next 765
2024-01-18 00:43:34.342668: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d9185a700 of size 19041792 next 766
2024-01-18 00:43:34.342669: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d92a83500 of size 19041792 next 767
2024-01-18 00:43:34.342671: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d93cac300 of size 19041792 next 768
2024-01-18 00:43:34.342673: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d94ed5100 of size 19041792 next 769
2024-01-18 00:43:34.342674: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d960fdf00 of size 19041792 next 770
2024-01-18 00:43:34.342676: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d97326d00 of size 19041792 next 771
2024-01-18 00:43:34.342677: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d9854fb00 of size 19041792 next 772
2024-01-18 00:43:34.342679: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d99778900 of size 19041792 next 773
2024-01-18 00:43:34.342680: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d9a9a1700 of size 19041792 next 774
2024-01-18 00:43:34.342682: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d9bbca500 of size 19041792 next 775
2024-01-18 00:43:34.342683: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d9cdf3300 of size 19041792 next 776
2024-01-18 00:43:34.342685: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d9e01c100 of size 19041792 next 777
2024-01-18 00:43:34.342686: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148d9f244f00 of size 19041792 next 778
2024-01-18 00:43:34.342688: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148da046dd00 of size 19041792 next 779
2024-01-18 00:43:34.342689: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148da1696b00 of size 19041792 next 780
2024-01-18 00:43:34.342691: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148da28bf900 of size 19041792 next 781
2024-01-18 00:43:34.342692: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148da3ae8700 of size 19041792 next 782
2024-01-18 00:43:34.342694: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148da4d11500 of size 19041792 next 783
2024-01-18 00:43:34.342695: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148da5f3a300 of size 19041792 next 784
2024-01-18 00:43:34.342697: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148da7163100 of size 19041792 next 785
2024-01-18 00:43:34.342698: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148da838bf00 of size 19041792 next 786
2024-01-18 00:43:34.342700: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148da95b4d00 of size 19041792 next 787
2024-01-18 00:43:34.342702: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148daa7ddb00 of size 19041792 next 788
2024-01-18 00:43:34.342703: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148daba06900 of size 19041792 next 789
2024-01-18 00:43:34.342705: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dacc2f700 of size 19041792 next 790
2024-01-18 00:43:34.342706: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dade58500 of size 19041792 next 791
2024-01-18 00:43:34.342708: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148daf081300 of size 19041792 next 792
2024-01-18 00:43:34.342709: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148db02aa100 of size 19041792 next 793
2024-01-18 00:43:34.342711: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148db14d2f00 of size 19041792 next 794
2024-01-18 00:43:34.342712: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148db26fbd00 of size 19041792 next 795
2024-01-18 00:43:34.342714: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148db3924b00 of size 19041792 next 796
2024-01-18 00:43:34.342715: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148db4b4d900 of size 19041792 next 797
2024-01-18 00:43:34.342717: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148db5d76700 of size 19041792 next 798
2024-01-18 00:43:34.342718: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148db6f9f500 of size 19041792 next 799
2024-01-18 00:43:34.342720: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148db81c8300 of size 19041792 next 800
2024-01-18 00:43:34.342721: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148db93f1100 of size 19041792 next 801
2024-01-18 00:43:34.342723: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dba619f00 of size 19041792 next 802
2024-01-18 00:43:34.342725: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dbb842d00 of size 19041792 next 803
2024-01-18 00:43:34.342726: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dbca6bb00 of size 19041792 next 804
2024-01-18 00:43:34.342728: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dbdc94900 of size 19041792 next 805
2024-01-18 00:43:34.342729: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dbeebd700 of size 19041792 next 806
2024-01-18 00:43:34.342731: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dc00e6500 of size 19041792 next 807
2024-01-18 00:43:34.342732: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dc130f300 of size 19041792 next 808
2024-01-18 00:43:34.342734: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dc2538100 of size 19041792 next 809
2024-01-18 00:43:34.342735: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dc3760f00 of size 19041792 next 810
2024-01-18 00:43:34.342737: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dc4989d00 of size 19041792 next 811
2024-01-18 00:43:34.342738: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dc5bb2b00 of size 19041792 next 812
2024-01-18 00:43:34.342740: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dc6ddb900 of size 19041792 next 813
2024-01-18 00:43:34.342741: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dc8004700 of size 19041792 next 814
2024-01-18 00:43:34.342743: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dc922d500 of size 19041792 next 815
2024-01-18 00:43:34.342744: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dca456300 of size 19041792 next 816
2024-01-18 00:43:34.342746: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dcb67f100 of size 19041792 next 817
2024-01-18 00:43:34.342747: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dcc8a7f00 of size 19041792 next 818
2024-01-18 00:43:34.342749: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dcdad0d00 of size 19041792 next 819
2024-01-18 00:43:34.342751: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dcecf9b00 of size 19041792 next 820
2024-01-18 00:43:34.342752: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dcff22900 of size 19041792 next 821
2024-01-18 00:43:34.342754: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dd114b700 of size 19041792 next 822
2024-01-18 00:43:34.342755: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dd2374500 of size 19041792 next 823
2024-01-18 00:43:34.342757: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dd359d300 of size 19041792 next 824
2024-01-18 00:43:34.342758: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dd47c6100 of size 19041792 next 825
2024-01-18 00:43:34.342760: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dd59eef00 of size 19041792 next 826
2024-01-18 00:43:34.342761: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dd6c17d00 of size 19041792 next 827
2024-01-18 00:43:34.342763: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dd7e40b00 of size 19041792 next 828
2024-01-18 00:43:34.342764: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dd9069900 of size 19041792 next 829
2024-01-18 00:43:34.342766: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dda292700 of size 19041792 next 830
2024-01-18 00:43:34.342768: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ddb4bb500 of size 19041792 next 831
2024-01-18 00:43:34.342769: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ddc6e4300 of size 19041792 next 832
2024-01-18 00:43:34.342771: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ddd90d100 of size 19041792 next 833
2024-01-18 00:43:34.342772: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ddeb35f00 of size 19041792 next 834
2024-01-18 00:43:34.342774: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ddfd5ed00 of size 19041792 next 835
2024-01-18 00:43:34.342775: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148de0f87b00 of size 19041792 next 836
2024-01-18 00:43:34.342777: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148de21b0900 of size 19041792 next 837
2024-01-18 00:43:34.342778: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148de33d9700 of size 19041792 next 838
2024-01-18 00:43:34.342780: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148de4602500 of size 19041792 next 839
2024-01-18 00:43:34.342781: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148de582b300 of size 19041792 next 840
2024-01-18 00:43:34.342783: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148de6a54100 of size 19041792 next 841
2024-01-18 00:43:34.342784: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148de7c7cf00 of size 19041792 next 842
2024-01-18 00:43:34.342786: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148de8ea5d00 of size 19041792 next 843
2024-01-18 00:43:34.342788: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dea0ceb00 of size 19041792 next 844
2024-01-18 00:43:34.342789: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148deb2f7900 of size 19041792 next 845
2024-01-18 00:43:34.342791: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dec520700 of size 19041792 next 846
2024-01-18 00:43:34.342792: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ded749500 of size 19041792 next 847
2024-01-18 00:43:34.342794: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dee972300 of size 19041792 next 848
2024-01-18 00:43:34.342795: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148defb9b100 of size 19041792 next 849
2024-01-18 00:43:34.342797: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148df0dc3f00 of size 19041792 next 850
2024-01-18 00:43:34.342798: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148df1fecd00 of size 19041792 next 851
2024-01-18 00:43:34.342800: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148df3215b00 of size 19041792 next 852
2024-01-18 00:43:34.342801: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148df443e900 of size 19041792 next 853
2024-01-18 00:43:34.342803: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148df5667700 of size 19041792 next 854
2024-01-18 00:43:34.342804: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148df6890500 of size 19041792 next 855
2024-01-18 00:43:34.342806: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148df7ab9300 of size 19041792 next 856
2024-01-18 00:43:34.342807: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148df8ce2100 of size 19041792 next 857
2024-01-18 00:43:34.342809: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148df9f0af00 of size 19041792 next 858
2024-01-18 00:43:34.342811: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dfb133d00 of size 19041792 next 859
2024-01-18 00:43:34.342812: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dfc35cb00 of size 19041792 next 860
2024-01-18 00:43:34.342814: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dfd585900 of size 19041792 next 861
2024-01-18 00:43:34.342815: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dfe7ae700 of size 19041792 next 862
2024-01-18 00:43:34.342817: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148dff9d7500 of size 19041792 next 863
2024-01-18 00:43:34.342818: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e00c00300 of size 19041792 next 864
2024-01-18 00:43:34.342820: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e01e29100 of size 19041792 next 865
2024-01-18 00:43:34.342821: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e03051f00 of size 19041792 next 866
2024-01-18 00:43:34.342823: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e0427ad00 of size 19041792 next 867
2024-01-18 00:43:34.342824: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e054a3b00 of size 19041792 next 868
2024-01-18 00:43:34.342826: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e066cc900 of size 19041792 next 869
2024-01-18 00:43:34.342827: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e078f5700 of size 19041792 next 870
2024-01-18 00:43:34.342829: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e08b1e500 of size 19041792 next 871
2024-01-18 00:43:34.342830: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e09d47300 of size 19041792 next 872
2024-01-18 00:43:34.342832: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e0af70100 of size 19041792 next 873
2024-01-18 00:43:34.342834: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e0c198f00 of size 19041792 next 874
2024-01-18 00:43:34.342835: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e0d3c1d00 of size 19041792 next 875
2024-01-18 00:43:34.342837: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e0e5eab00 of size 19041792 next 876
2024-01-18 00:43:34.342838: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e0f813900 of size 19041792 next 877
2024-01-18 00:43:34.342840: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e10a3c700 of size 19041792 next 878
2024-01-18 00:43:34.342841: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e11c65500 of size 19041792 next 879
2024-01-18 00:43:34.342843: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e12e8e300 of size 19041792 next 880
2024-01-18 00:43:34.342845: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e140b7100 of size 19041792 next 881
2024-01-18 00:43:34.342846: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e152dff00 of size 19041792 next 882
2024-01-18 00:43:34.342848: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e16508d00 of size 19041792 next 883
2024-01-18 00:43:34.342849: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e17731b00 of size 19041792 next 884
2024-01-18 00:43:34.342851: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e1895a900 of size 19041792 next 885
2024-01-18 00:43:34.342852: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e19b83700 of size 19041792 next 886
2024-01-18 00:43:34.342854: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e1adac500 of size 19041792 next 887
2024-01-18 00:43:34.342855: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e1bfd5300 of size 19041792 next 888
2024-01-18 00:43:34.342857: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e1d1fe100 of size 19041792 next 889
2024-01-18 00:43:34.342859: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e1e426f00 of size 19041792 next 890
2024-01-18 00:43:34.342861: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e1f64fd00 of size 19041792 next 891
2024-01-18 00:43:34.342862: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e20878b00 of size 19041792 next 892
2024-01-18 00:43:34.342864: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e21aa1900 of size 19041792 next 893
2024-01-18 00:43:34.342865: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e22cca700 of size 19041792 next 894
2024-01-18 00:43:34.342867: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e23ef3500 of size 19041792 next 895
2024-01-18 00:43:34.342869: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e2511c300 of size 19041792 next 896
2024-01-18 00:43:34.342870: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e26345100 of size 19041792 next 897
2024-01-18 00:43:34.342872: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e2756df00 of size 19041792 next 898
2024-01-18 00:43:34.342873: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e28796d00 of size 19041792 next 899
2024-01-18 00:43:34.342875: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e299bfb00 of size 19041792 next 900
2024-01-18 00:43:34.342877: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e2abe8900 of size 19041792 next 901
2024-01-18 00:43:34.342878: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e2be11700 of size 19041792 next 902
2024-01-18 00:43:34.342880: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e2d03a500 of size 19041792 next 903
2024-01-18 00:43:34.342881: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e2e263300 of size 19041792 next 904
2024-01-18 00:43:34.342883: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e2f48c100 of size 19041792 next 905
2024-01-18 00:43:34.342884: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e306b4f00 of size 19041792 next 906
2024-01-18 00:43:34.342886: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e318ddd00 of size 19041792 next 907
2024-01-18 00:43:34.342887: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e32b06b00 of size 19041792 next 908
2024-01-18 00:43:34.342889: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e33d2f900 of size 19041792 next 909
2024-01-18 00:43:34.342891: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e34f58700 of size 19041792 next 910
2024-01-18 00:43:34.342892: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e36181500 of size 19041792 next 911
2024-01-18 00:43:34.342894: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e373aa300 of size 19041792 next 912
2024-01-18 00:43:34.342895: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e385d3100 of size 19041792 next 913
2024-01-18 00:43:34.342897: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e397fbf00 of size 19041792 next 914
2024-01-18 00:43:34.342898: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e3aa24d00 of size 19041792 next 915
2024-01-18 00:43:34.342900: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e3bc4db00 of size 19041792 next 916
2024-01-18 00:43:34.342901: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e3ce76900 of size 19041792 next 917
2024-01-18 00:43:34.342903: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e3e09f700 of size 19041792 next 918
2024-01-18 00:43:34.342904: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e3f2c8500 of size 19041792 next 919
2024-01-18 00:43:34.342906: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e404f1300 of size 19041792 next 920
2024-01-18 00:43:34.342908: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e4171a100 of size 19041792 next 921
2024-01-18 00:43:34.342909: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e42942f00 of size 19041792 next 922
2024-01-18 00:43:34.342911: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e43b6bd00 of size 19041792 next 923
2024-01-18 00:43:34.342912: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e44d94b00 of size 19041792 next 924
2024-01-18 00:43:34.342914: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e45fbd900 of size 19041792 next 925
2024-01-18 00:43:34.342915: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e471e6700 of size 19041792 next 926
2024-01-18 00:43:34.342917: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e4840f500 of size 19041792 next 927
2024-01-18 00:43:34.342919: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e49638300 of size 19041792 next 928
2024-01-18 00:43:34.342920: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e4a861100 of size 19041792 next 929
2024-01-18 00:43:34.342922: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e4ba89f00 of size 19041792 next 930
2024-01-18 00:43:34.342923: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e4ccb2d00 of size 19041792 next 931
2024-01-18 00:43:34.342925: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e4dedbb00 of size 19041792 next 932
2024-01-18 00:43:34.342926: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e4f104900 of size 19041792 next 933
2024-01-18 00:43:34.342928: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e5032d700 of size 19041792 next 934
2024-01-18 00:43:34.342930: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e51556500 of size 19041792 next 935
2024-01-18 00:43:34.342931: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e5277f300 of size 19041792 next 936
2024-01-18 00:43:34.342933: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e539a8100 of size 19041792 next 937
2024-01-18 00:43:34.342934: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e54bd0f00 of size 19041792 next 938
2024-01-18 00:43:34.342936: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e55df9d00 of size 19041792 next 939
2024-01-18 00:43:34.342937: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e57022b00 of size 19041792 next 940
2024-01-18 00:43:34.342939: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e5824b900 of size 19041792 next 941
2024-01-18 00:43:34.342941: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e59474700 of size 19041792 next 942
2024-01-18 00:43:34.342942: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e5a69d500 of size 19041792 next 943
2024-01-18 00:43:34.342944: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e5b8c6300 of size 19041792 next 944
2024-01-18 00:43:34.342945: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e5caef100 of size 19041792 next 945
2024-01-18 00:43:34.342947: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e5dd17f00 of size 19041792 next 946
2024-01-18 00:43:34.342948: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e5ef40d00 of size 19041792 next 947
2024-01-18 00:43:34.342950: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e60169b00 of size 19041792 next 948
2024-01-18 00:43:34.342951: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e61392900 of size 19041792 next 949
2024-01-18 00:43:34.342953: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e625bb700 of size 19041792 next 950
2024-01-18 00:43:34.342955: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e637e4500 of size 19041792 next 951
2024-01-18 00:43:34.342956: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e64a0d300 of size 19041792 next 952
2024-01-18 00:43:34.342958: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e65c36100 of size 19041792 next 953
2024-01-18 00:43:34.342959: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e66e5ef00 of size 19041792 next 954
2024-01-18 00:43:34.342961: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e68087d00 of size 19041792 next 955
2024-01-18 00:43:34.342962: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e692b0b00 of size 19041792 next 956
2024-01-18 00:43:34.342964: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e6a4d9900 of size 19041792 next 957
2024-01-18 00:43:34.342965: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e6b702700 of size 19041792 next 958
2024-01-18 00:43:34.342967: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e6c92b500 of size 19041792 next 959
2024-01-18 00:43:34.342969: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e6db54300 of size 19041792 next 960
2024-01-18 00:43:34.342970: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e6ed7d100 of size 19041792 next 961
2024-01-18 00:43:34.342972: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e6ffa5f00 of size 19041792 next 962
2024-01-18 00:43:34.342973: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e711ced00 of size 19041792 next 963
2024-01-18 00:43:34.342975: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e723f7b00 of size 19041792 next 964
2024-01-18 00:43:34.342976: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e73620900 of size 19041792 next 965
2024-01-18 00:43:34.342978: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e74849700 of size 19041792 next 966
2024-01-18 00:43:34.342979: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e75a72500 of size 19041792 next 967
2024-01-18 00:43:34.342981: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e76c9b300 of size 19041792 next 968
2024-01-18 00:43:34.342982: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e77ec4100 of size 19041792 next 969
2024-01-18 00:43:34.342984: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e790ecf00 of size 19041792 next 970
2024-01-18 00:43:34.342986: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e7a315d00 of size 19041792 next 971
2024-01-18 00:43:34.342987: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e7b53eb00 of size 19041792 next 972
2024-01-18 00:43:34.342989: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e7c767900 of size 19041792 next 973
2024-01-18 00:43:34.342990: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e7d990700 of size 19041792 next 974
2024-01-18 00:43:34.342992: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e7ebb9500 of size 19041792 next 975
2024-01-18 00:43:34.342993: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e7fde2300 of size 19041792 next 976
2024-01-18 00:43:34.342995: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e8100b100 of size 19041792 next 977
2024-01-18 00:43:34.342997: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e82233f00 of size 19041792 next 978
2024-01-18 00:43:34.342998: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e8345cd00 of size 19041792 next 979
2024-01-18 00:43:34.343000: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e84685b00 of size 19041792 next 980
2024-01-18 00:43:34.343001: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e858ae900 of size 19041792 next 981
2024-01-18 00:43:34.343003: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e86ad7700 of size 19041792 next 982
2024-01-18 00:43:34.343004: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e87d00500 of size 19041792 next 983
2024-01-18 00:43:34.343006: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e88f29300 of size 19041792 next 984
2024-01-18 00:43:34.343007: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e8a152100 of size 19041792 next 985
2024-01-18 00:43:34.343009: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e8b37af00 of size 19041792 next 986
2024-01-18 00:43:34.343010: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e8c5a3d00 of size 19041792 next 987
2024-01-18 00:43:34.343012: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e8d7ccb00 of size 19041792 next 988
2024-01-18 00:43:34.343014: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e8e9f5900 of size 19041792 next 989
2024-01-18 00:43:34.343015: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e8fc1e700 of size 19041792 next 990
2024-01-18 00:43:34.343017: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e90e47500 of size 19041792 next 991
2024-01-18 00:43:34.343019: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e92070300 of size 19041792 next 992
2024-01-18 00:43:34.343020: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e93299100 of size 19041792 next 993
2024-01-18 00:43:34.343022: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e944c1f00 of size 19041792 next 994
2024-01-18 00:43:34.343023: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e956ead00 of size 19041792 next 995
2024-01-18 00:43:34.343025: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e96913b00 of size 19041792 next 996
2024-01-18 00:43:34.343026: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e97b3c900 of size 19041792 next 997
2024-01-18 00:43:34.343028: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e98d65700 of size 19041792 next 998
2024-01-18 00:43:34.343029: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e99f8e500 of size 19041792 next 999
2024-01-18 00:43:34.343031: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e9b1b7300 of size 19041792 next 1000
2024-01-18 00:43:34.343033: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e9c3e0100 of size 19041792 next 1001
2024-01-18 00:43:34.343034: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e9d608f00 of size 19041792 next 1002
2024-01-18 00:43:34.343036: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e9e831d00 of size 19041792 next 1003
2024-01-18 00:43:34.343037: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148e9fa5ab00 of size 19041792 next 1004
2024-01-18 00:43:34.343039: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ea0c83900 of size 19041792 next 1005
2024-01-18 00:43:34.343040: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ea1eac700 of size 19041792 next 1006
2024-01-18 00:43:34.343042: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ea30d5500 of size 19041792 next 1007
2024-01-18 00:43:34.343043: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ea42fe300 of size 19041792 next 1008
2024-01-18 00:43:34.343045: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ea5527100 of size 19041792 next 1009
2024-01-18 00:43:34.343046: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ea674ff00 of size 19041792 next 1010
2024-01-18 00:43:34.343048: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ea7978d00 of size 19041792 next 1011
2024-01-18 00:43:34.343050: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ea8ba1b00 of size 19041792 next 1012
2024-01-18 00:43:34.343051: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ea9dca900 of size 19041792 next 1013
2024-01-18 00:43:34.343053: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eaaff3700 of size 19041792 next 1014
2024-01-18 00:43:34.343054: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eac21c500 of size 19041792 next 1015
2024-01-18 00:43:34.343056: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ead445300 of size 19041792 next 1016
2024-01-18 00:43:34.343057: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eae66e100 of size 19041792 next 1017
2024-01-18 00:43:34.343059: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eaf896f00 of size 19041792 next 1018
2024-01-18 00:43:34.343061: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eb0abfd00 of size 19041792 next 1019
2024-01-18 00:43:34.343062: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eb1ce8b00 of size 19041792 next 1020
2024-01-18 00:43:34.343064: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eb2f11900 of size 19041792 next 1021
2024-01-18 00:43:34.343065: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eb413a700 of size 19041792 next 1022
2024-01-18 00:43:34.343067: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eb5363500 of size 19041792 next 1023
2024-01-18 00:43:34.343068: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eb658c300 of size 19041792 next 1024
2024-01-18 00:43:34.343070: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eb77b5100 of size 19041792 next 1025
2024-01-18 00:43:34.343071: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eb89ddf00 of size 19041792 next 1026
2024-01-18 00:43:34.343073: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eb9c06d00 of size 19041792 next 1027
2024-01-18 00:43:34.343075: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ebae2fb00 of size 19041792 next 1028
2024-01-18 00:43:34.343076: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ebc058900 of size 19041792 next 1029
2024-01-18 00:43:34.343078: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ebd281700 of size 19041792 next 1030
2024-01-18 00:43:34.343079: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ebe4aa500 of size 19041792 next 1031
2024-01-18 00:43:34.343081: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ebf6d3300 of size 19041792 next 1032
2024-01-18 00:43:34.343082: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ec08fc100 of size 19041792 next 1033
2024-01-18 00:43:34.343084: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ec1b24f00 of size 19041792 next 1034
2024-01-18 00:43:34.343085: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ec2d4dd00 of size 19041792 next 1035
2024-01-18 00:43:34.343087: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ec3f76b00 of size 19041792 next 1036
2024-01-18 00:43:34.343089: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ec519f900 of size 19041792 next 1037
2024-01-18 00:43:34.343090: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ec63c8700 of size 19041792 next 1038
2024-01-18 00:43:34.343092: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ec75f1500 of size 19041792 next 1039
2024-01-18 00:43:34.343093: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ec881a300 of size 19041792 next 1040
2024-01-18 00:43:34.343095: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ec9a43100 of size 19041792 next 1041
2024-01-18 00:43:34.343096: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ecac6bf00 of size 19041792 next 1042
2024-01-18 00:43:34.343098: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ecbe94d00 of size 19041792 next 1043
2024-01-18 00:43:34.343099: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ecd0bdb00 of size 19041792 next 1044
2024-01-18 00:43:34.343101: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ece2e6900 of size 19041792 next 1045
2024-01-18 00:43:34.343103: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ecf50f700 of size 19041792 next 1046
2024-01-18 00:43:34.343104: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ed0738500 of size 19041792 next 1047
2024-01-18 00:43:34.343106: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ed1961300 of size 19041792 next 1048
2024-01-18 00:43:34.343107: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ed2b8a100 of size 19041792 next 1049
2024-01-18 00:43:34.343109: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ed3db2f00 of size 19041792 next 1050
2024-01-18 00:43:34.343110: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ed4fdbd00 of size 19041792 next 1051
2024-01-18 00:43:34.343112: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ed6204b00 of size 19041792 next 1052
2024-01-18 00:43:34.343113: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ed742d900 of size 19041792 next 1053
2024-01-18 00:43:34.343115: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ed8656700 of size 19041792 next 1054
2024-01-18 00:43:34.343116: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ed987f500 of size 19041792 next 1055
2024-01-18 00:43:34.343118: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148edaaa8300 of size 19041792 next 1056
2024-01-18 00:43:34.343120: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148edbcd1100 of size 19041792 next 1057
2024-01-18 00:43:34.343121: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148edcef9f00 of size 19041792 next 1058
2024-01-18 00:43:34.343123: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ede122d00 of size 19041792 next 1059
2024-01-18 00:43:34.343124: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148edf34bb00 of size 19041792 next 1060
2024-01-18 00:43:34.343126: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ee0574900 of size 19041792 next 1061
2024-01-18 00:43:34.343127: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ee179d700 of size 19041792 next 1062
2024-01-18 00:43:34.343129: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ee29c6500 of size 19041792 next 1063
2024-01-18 00:43:34.343131: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ee3bef300 of size 19041792 next 1064
2024-01-18 00:43:34.343132: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ee4e18100 of size 19041792 next 1065
2024-01-18 00:43:34.343134: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ee6040f00 of size 19041792 next 1066
2024-01-18 00:43:34.343135: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ee7269d00 of size 19041792 next 1067
2024-01-18 00:43:34.343137: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ee8492b00 of size 19041792 next 1068
2024-01-18 00:43:34.343138: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ee96bb900 of size 19041792 next 1069
2024-01-18 00:43:34.343140: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eea8e4700 of size 19041792 next 1070
2024-01-18 00:43:34.343142: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eebb0d500 of size 19041792 next 1071
2024-01-18 00:43:34.343143: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eecd36300 of size 19041792 next 1072
2024-01-18 00:43:34.343145: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eedf5f100 of size 19041792 next 1073
2024-01-18 00:43:34.343146: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148eef187f00 of size 19041792 next 1074
2024-01-18 00:43:34.343148: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ef03b0d00 of size 19041792 next 1075
2024-01-18 00:43:34.343150: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ef15d9b00 of size 19041792 next 1076
2024-01-18 00:43:34.343151: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ef2802900 of size 19041792 next 1077
2024-01-18 00:43:34.343153: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ef3a2b700 of size 19041792 next 1078
2024-01-18 00:43:34.343154: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ef4c54500 of size 19041792 next 1079
2024-01-18 00:43:34.343156: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ef5e7d300 of size 19041792 next 1080
2024-01-18 00:43:34.343157: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ef70a6100 of size 19041792 next 1081
2024-01-18 00:43:34.343159: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ef82cef00 of size 19041792 next 1082
2024-01-18 00:43:34.343161: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ef94f7d00 of size 19041792 next 1083
2024-01-18 00:43:34.343162: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148efa720b00 of size 19041792 next 1084
2024-01-18 00:43:34.343164: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148efb949900 of size 19041792 next 1085
2024-01-18 00:43:34.343165: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148efcb72700 of size 19041792 next 1086
2024-01-18 00:43:34.343167: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148efdd9b500 of size 19041792 next 1087
2024-01-18 00:43:34.343168: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148efefc4300 of size 19041792 next 1088
2024-01-18 00:43:34.343170: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f001ed100 of size 19041792 next 1089
2024-01-18 00:43:34.343172: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f01415f00 of size 19041792 next 1090
2024-01-18 00:43:34.343173: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f0263ed00 of size 19041792 next 1091
2024-01-18 00:43:34.343175: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f03867b00 of size 19041792 next 1092
2024-01-18 00:43:34.343176: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f04a90900 of size 19041792 next 1093
2024-01-18 00:43:34.343178: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f05cb9700 of size 19041792 next 1094
2024-01-18 00:43:34.343179: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f06ee2500 of size 19041792 next 1095
2024-01-18 00:43:34.343181: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f0810b300 of size 19041792 next 1096
2024-01-18 00:43:34.343182: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f09334100 of size 19041792 next 1097
2024-01-18 00:43:34.343184: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f0a55cf00 of size 19041792 next 1098
2024-01-18 00:43:34.343186: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f0b785d00 of size 19041792 next 1099
2024-01-18 00:43:34.343187: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f0c9aeb00 of size 19041792 next 1100
2024-01-18 00:43:34.343189: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f0dbd7900 of size 19041792 next 1101
2024-01-18 00:43:34.343190: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f0ee00700 of size 19041792 next 1102
2024-01-18 00:43:34.343192: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f10029500 of size 19041792 next 1103
2024-01-18 00:43:34.343193: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f11252300 of size 19041792 next 1104
2024-01-18 00:43:34.343195: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f1247b100 of size 19041792 next 1105
2024-01-18 00:43:34.343196: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f136a3f00 of size 19041792 next 1106
2024-01-18 00:43:34.343198: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f148ccd00 of size 19041792 next 1107
2024-01-18 00:43:34.343199: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f15af5b00 of size 19041792 next 1108
2024-01-18 00:43:34.343201: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f16d1e900 of size 19041792 next 1109
2024-01-18 00:43:34.343203: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f17f47700 of size 19041792 next 1110
2024-01-18 00:43:34.343204: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f19170500 of size 19041792 next 1111
2024-01-18 00:43:34.343206: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f1a399300 of size 19041792 next 1112
2024-01-18 00:43:34.343207: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f1b5c2100 of size 19041792 next 1113
2024-01-18 00:43:34.343209: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f1c7eaf00 of size 19041792 next 1114
2024-01-18 00:43:34.343210: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f1da13d00 of size 19041792 next 1115
2024-01-18 00:43:34.343212: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f1ec3cb00 of size 19041792 next 1116
2024-01-18 00:43:34.343213: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f1fe65900 of size 19041792 next 1117
2024-01-18 00:43:34.343215: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f2108e700 of size 19041792 next 1118
2024-01-18 00:43:34.343217: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f222b7500 of size 19041792 next 1119
2024-01-18 00:43:34.343218: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f234e0300 of size 19041792 next 1120
2024-01-18 00:43:34.343220: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f24709100 of size 19041792 next 1121
2024-01-18 00:43:34.343221: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f25931f00 of size 19041792 next 1122
2024-01-18 00:43:34.343223: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f26b5ad00 of size 19041792 next 1123
2024-01-18 00:43:34.343224: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f27d83b00 of size 19041792 next 1124
2024-01-18 00:43:34.343226: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f28fac900 of size 19041792 next 1125
2024-01-18 00:43:34.343227: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f2a1d5700 of size 19041792 next 1126
2024-01-18 00:43:34.343229: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f2b3fe500 of size 19041792 next 1127
2024-01-18 00:43:34.343231: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f2c627300 of size 19041792 next 1128
2024-01-18 00:43:34.343232: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f2d850100 of size 19041792 next 1129
2024-01-18 00:43:34.343234: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f2ea78f00 of size 19041792 next 1130
2024-01-18 00:43:34.343235: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f2fca1d00 of size 19041792 next 1131
2024-01-18 00:43:34.343237: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f30ecab00 of size 19041792 next 1132
2024-01-18 00:43:34.343238: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f320f3900 of size 19041792 next 1133
2024-01-18 00:43:34.343240: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f3331c700 of size 19041792 next 1134
2024-01-18 00:43:34.343241: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f34545500 of size 19041792 next 1135
2024-01-18 00:43:34.343243: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f3576e300 of size 19041792 next 1136
2024-01-18 00:43:34.343245: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f36997100 of size 19041792 next 1137
2024-01-18 00:43:34.343246: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f37bbff00 of size 19041792 next 1138
2024-01-18 00:43:34.343248: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f38de8d00 of size 19041792 next 1139
2024-01-18 00:43:34.343249: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f3a011b00 of size 19041792 next 1140
2024-01-18 00:43:34.343251: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f3b23a900 of size 19041792 next 1141
2024-01-18 00:43:34.343252: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f3c463700 of size 19041792 next 1142
2024-01-18 00:43:34.343254: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f3d68c500 of size 19041792 next 1143
2024-01-18 00:43:34.343255: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f3e8b5300 of size 19041792 next 1144
2024-01-18 00:43:34.343257: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f3fade100 of size 19041792 next 1145
2024-01-18 00:43:34.343259: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f40d06f00 of size 19041792 next 1146
2024-01-18 00:43:34.343260: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f41f2fd00 of size 19041792 next 1147
2024-01-18 00:43:34.343262: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f43158b00 of size 19041792 next 1148
2024-01-18 00:43:34.343263: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f44381900 of size 19041792 next 1149
2024-01-18 00:43:34.343265: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f455aa700 of size 19041792 next 1150
2024-01-18 00:43:34.343266: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f467d3500 of size 19041792 next 1151
2024-01-18 00:43:34.343268: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f479fc300 of size 19041792 next 1152
2024-01-18 00:43:34.343269: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f48c25100 of size 19041792 next 1153
2024-01-18 00:43:34.343271: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f49e4df00 of size 19041792 next 1154
2024-01-18 00:43:34.343273: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f4b076d00 of size 19041792 next 1155
2024-01-18 00:43:34.343274: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f4c29fb00 of size 19041792 next 1156
2024-01-18 00:43:34.343276: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f4d4c8900 of size 19041792 next 1157
2024-01-18 00:43:34.343277: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f4e6f1700 of size 19041792 next 1158
2024-01-18 00:43:34.343279: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f4f91a500 of size 19041792 next 1159
2024-01-18 00:43:34.343280: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f50b43300 of size 19041792 next 1160
2024-01-18 00:43:34.343282: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f51d6c100 of size 19041792 next 1161
2024-01-18 00:43:34.343283: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f52f94f00 of size 19041792 next 1162
2024-01-18 00:43:34.343285: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f541bdd00 of size 19041792 next 1163
2024-01-18 00:43:34.343287: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f553e6b00 of size 19041792 next 1164
2024-01-18 00:43:34.343288: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f5660f900 of size 19041792 next 1165
2024-01-18 00:43:34.343290: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f57838700 of size 19041792 next 1166
2024-01-18 00:43:34.343291: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f58a61500 of size 19041792 next 1167
2024-01-18 00:43:34.343293: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f59c8a300 of size 19041792 next 1168
2024-01-18 00:43:34.343294: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f5aeb3100 of size 19041792 next 1169
2024-01-18 00:43:34.343296: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f5c0dbf00 of size 19041792 next 1170
2024-01-18 00:43:34.343298: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f5d304d00 of size 19041792 next 1171
2024-01-18 00:43:34.343299: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f5e52db00 of size 19041792 next 1172
2024-01-18 00:43:34.343301: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f5f756900 of size 19041792 next 1173
2024-01-18 00:43:34.343302: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f6097f700 of size 19041792 next 1174
2024-01-18 00:43:34.343304: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f61ba8500 of size 19041792 next 1175
2024-01-18 00:43:34.343305: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f62dd1300 of size 19041792 next 1176
2024-01-18 00:43:34.343307: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f63ffa100 of size 19041792 next 1177
2024-01-18 00:43:34.343309: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f65222f00 of size 19041792 next 1178
2024-01-18 00:43:34.343310: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f6644bd00 of size 19041792 next 1179
2024-01-18 00:43:34.343312: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f67674b00 of size 19041792 next 1180
2024-01-18 00:43:34.343313: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f6889d900 of size 19041792 next 1181
2024-01-18 00:43:34.343315: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f69ac6700 of size 19041792 next 1182
2024-01-18 00:43:34.343316: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f6acef500 of size 19041792 next 1183
2024-01-18 00:43:34.343318: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f6bf18300 of size 19041792 next 1184
2024-01-18 00:43:34.343319: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f6d141100 of size 19041792 next 1185
2024-01-18 00:43:34.343321: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f6e369f00 of size 19041792 next 1186
2024-01-18 00:43:34.343323: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f6f592d00 of size 19041792 next 1187
2024-01-18 00:43:34.343324: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f707bbb00 of size 19041792 next 1188
2024-01-18 00:43:34.343326: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f719e4900 of size 19041792 next 1189
2024-01-18 00:43:34.343327: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f72c0d700 of size 19041792 next 1190
2024-01-18 00:43:34.343329: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f73e36500 of size 19041792 next 1191
2024-01-18 00:43:34.343330: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f7505f300 of size 19041792 next 1192
2024-01-18 00:43:34.343332: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f76288100 of size 19041792 next 1193
2024-01-18 00:43:34.343333: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f774b0f00 of size 19041792 next 1194
2024-01-18 00:43:34.343335: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f786d9d00 of size 19041792 next 1195
2024-01-18 00:43:34.343337: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f79902b00 of size 19041792 next 1196
2024-01-18 00:43:34.343338: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f7ab2b900 of size 19041792 next 1197
2024-01-18 00:43:34.343340: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f7bd54700 of size 19041792 next 1198
2024-01-18 00:43:34.343341: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f7cf7d500 of size 19041792 next 1199
2024-01-18 00:43:34.343343: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f7e1a6300 of size 19041792 next 1200
2024-01-18 00:43:34.343344: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f7f3cf100 of size 19041792 next 1201
2024-01-18 00:43:34.343346: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f805f7f00 of size 19041792 next 1202
2024-01-18 00:43:34.343347: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f81820d00 of size 19041792 next 1203
2024-01-18 00:43:34.343349: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f82a49b00 of size 19041792 next 1204
2024-01-18 00:43:34.343351: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f83c72900 of size 19041792 next 1205
2024-01-18 00:43:34.343352: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f84e9b700 of size 19041792 next 1206
2024-01-18 00:43:34.343354: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f860c4500 of size 19041792 next 1207
2024-01-18 00:43:34.343355: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f872ed300 of size 19041792 next 1208
2024-01-18 00:43:34.343357: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f88516100 of size 19041792 next 1209
2024-01-18 00:43:34.343358: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f8973ef00 of size 19041792 next 1210
2024-01-18 00:43:34.343360: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f8a967d00 of size 19041792 next 1211
2024-01-18 00:43:34.343362: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f8bb90b00 of size 19041792 next 1212
2024-01-18 00:43:34.343363: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f8cdb9900 of size 19041792 next 1213
2024-01-18 00:43:34.343365: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f8dfe2700 of size 19041792 next 1214
2024-01-18 00:43:34.343366: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f8f20b500 of size 19041792 next 1215
2024-01-18 00:43:34.343368: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f90434300 of size 19041792 next 1216
2024-01-18 00:43:34.343369: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f9165d100 of size 19041792 next 1217
2024-01-18 00:43:34.343371: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f92885f00 of size 19041792 next 1218
2024-01-18 00:43:34.343373: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f93aaed00 of size 19041792 next 1219
2024-01-18 00:43:34.343374: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f94cd7b00 of size 19041792 next 1220
2024-01-18 00:43:34.343376: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f95f00900 of size 19041792 next 1221
2024-01-18 00:43:34.343377: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f97129700 of size 19041792 next 1222
2024-01-18 00:43:34.343379: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f98352500 of size 19041792 next 1223
2024-01-18 00:43:34.343380: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f9957b300 of size 19041792 next 1224
2024-01-18 00:43:34.343382: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f9a7a4100 of size 19041792 next 1225
2024-01-18 00:43:34.343383: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f9b9ccf00 of size 19041792 next 1226
2024-01-18 00:43:34.343385: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f9cbf5d00 of size 19041792 next 1227
2024-01-18 00:43:34.343387: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f9de1eb00 of size 19041792 next 1228
2024-01-18 00:43:34.343388: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148f9f047900 of size 19041792 next 1229
2024-01-18 00:43:34.343390: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fa0270700 of size 19041792 next 1230
2024-01-18 00:43:34.343391: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fa1499500 of size 19041792 next 1231
2024-01-18 00:43:34.343393: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fa26c2300 of size 19041792 next 1232
2024-01-18 00:43:34.343394: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fa38eb100 of size 19041792 next 1233
2024-01-18 00:43:34.343396: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fa4b13f00 of size 19041792 next 1234
2024-01-18 00:43:34.343397: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fa5d3cd00 of size 19041792 next 1235
2024-01-18 00:43:34.343399: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fa6f65b00 of size 19041792 next 1236
2024-01-18 00:43:34.343400: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fa818e900 of size 19041792 next 1237
2024-01-18 00:43:34.343402: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fa93b7700 of size 19041792 next 1238
2024-01-18 00:43:34.343404: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148faa5e0500 of size 19041792 next 1239
2024-01-18 00:43:34.343405: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fab809300 of size 19041792 next 1240
2024-01-18 00:43:34.343407: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148faca32100 of size 19041792 next 1241
2024-01-18 00:43:34.343408: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fadc5af00 of size 19041792 next 1242
2024-01-18 00:43:34.343410: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148faee83d00 of size 19041792 next 1243
2024-01-18 00:43:34.343411: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fb00acb00 of size 19041792 next 1244
2024-01-18 00:43:34.343413: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fb12d5900 of size 19041792 next 1245
2024-01-18 00:43:34.343414: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fb24fe700 of size 19041792 next 1246
2024-01-18 00:43:34.343416: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fb3727500 of size 19041792 next 1247
2024-01-18 00:43:34.343417: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fb4950300 of size 19041792 next 1248
2024-01-18 00:43:34.343419: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fb5b79100 of size 19041792 next 1249
2024-01-18 00:43:34.343421: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fb6da1f00 of size 19041792 next 1250
2024-01-18 00:43:34.343422: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fb7fcad00 of size 19041792 next 1251
2024-01-18 00:43:34.343424: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fb91f3b00 of size 19041792 next 1252
2024-01-18 00:43:34.343425: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fba41c900 of size 19041792 next 1253
2024-01-18 00:43:34.343427: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fbb645700 of size 19041792 next 1254
2024-01-18 00:43:34.343428: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fbc86e500 of size 19041792 next 1255
2024-01-18 00:43:34.343430: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fbda97300 of size 19041792 next 1256
2024-01-18 00:43:34.343431: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fbecc0100 of size 19041792 next 1257
2024-01-18 00:43:34.343433: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fbfee8f00 of size 19041792 next 1258
2024-01-18 00:43:34.343435: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fc1111d00 of size 19041792 next 1259
2024-01-18 00:43:34.343436: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fc233ab00 of size 19041792 next 1260
2024-01-18 00:43:34.343438: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fc3563900 of size 19041792 next 1261
2024-01-18 00:43:34.343439: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fc478c700 of size 19041792 next 1262
2024-01-18 00:43:34.343441: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fc59b5500 of size 19041792 next 1263
2024-01-18 00:43:34.343442: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fc6bde300 of size 19041792 next 1264
2024-01-18 00:43:34.343444: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fc7e07100 of size 19041792 next 1265
2024-01-18 00:43:34.343445: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fc902ff00 of size 19041792 next 1266
2024-01-18 00:43:34.343447: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fca258d00 of size 19041792 next 1267
2024-01-18 00:43:34.343448: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fcb481b00 of size 19041792 next 1268
2024-01-18 00:43:34.343450: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fcc6aa900 of size 19041792 next 1269
2024-01-18 00:43:34.343452: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fcd8d3700 of size 19041792 next 1270
2024-01-18 00:43:34.343453: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fceafc500 of size 19041792 next 1271
2024-01-18 00:43:34.343455: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fcfd25300 of size 19041792 next 1272
2024-01-18 00:43:34.343456: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fd0f4e100 of size 19041792 next 1273
2024-01-18 00:43:34.343458: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fd2176f00 of size 19041792 next 1274
2024-01-18 00:43:34.343459: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fd339fd00 of size 19041792 next 1275
2024-01-18 00:43:34.343461: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fd45c8b00 of size 19041792 next 1276
2024-01-18 00:43:34.343462: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fd57f1900 of size 19041792 next 1277
2024-01-18 00:43:34.343464: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fd6a1a700 of size 19041792 next 1278
2024-01-18 00:43:34.343466: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fd7c43500 of size 19041792 next 1279
2024-01-18 00:43:34.343467: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fd8e6c300 of size 19041792 next 1280
2024-01-18 00:43:34.343469: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fda095100 of size 19041792 next 1281
2024-01-18 00:43:34.343470: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fdb2bdf00 of size 19041792 next 1282
2024-01-18 00:43:34.343472: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fdc4e6d00 of size 19041792 next 1283
2024-01-18 00:43:34.343474: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fdd70fb00 of size 19041792 next 1284
2024-01-18 00:43:34.343475: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fde938900 of size 19041792 next 1285
2024-01-18 00:43:34.343477: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fdfb61700 of size 19041792 next 1286
2024-01-18 00:43:34.343478: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fe0d8a500 of size 19041792 next 1287
2024-01-18 00:43:34.343480: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fe1fb3300 of size 19041792 next 1288
2024-01-18 00:43:34.343481: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fe31dc100 of size 19041792 next 1289
2024-01-18 00:43:34.343483: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fe4404f00 of size 19041792 next 1290
2024-01-18 00:43:34.343484: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fe562dd00 of size 19041792 next 1291
2024-01-18 00:43:34.343486: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fe6856b00 of size 19041792 next 1292
2024-01-18 00:43:34.343487: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fe7a7f900 of size 19041792 next 1293
2024-01-18 00:43:34.343489: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fe8ca8700 of size 19041792 next 1294
2024-01-18 00:43:34.343491: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fe9ed1500 of size 19041792 next 1295
2024-01-18 00:43:34.343492: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148feb0fa300 of size 19041792 next 1296
2024-01-18 00:43:34.343494: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fec323100 of size 19041792 next 1297
2024-01-18 00:43:34.343495: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fed54bf00 of size 19041792 next 1298
2024-01-18 00:43:34.343497: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fee774d00 of size 19041792 next 1299
2024-01-18 00:43:34.343499: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fef99db00 of size 19041792 next 1300
2024-01-18 00:43:34.343500: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ff0bc6900 of size 19041792 next 1301
2024-01-18 00:43:34.343502: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ff1def700 of size 19041792 next 1302
2024-01-18 00:43:34.343503: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ff3018500 of size 19041792 next 1303
2024-01-18 00:43:34.343505: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ff4241300 of size 19041792 next 1304
2024-01-18 00:43:34.343506: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ff546a100 of size 19041792 next 1305
2024-01-18 00:43:34.343508: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ff6692f00 of size 19041792 next 1306
2024-01-18 00:43:34.343509: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ff78bbd00 of size 19041792 next 1307
2024-01-18 00:43:34.343511: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ff8ae4b00 of size 19041792 next 1308
2024-01-18 00:43:34.343513: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ff9d0d900 of size 19041792 next 1309
2024-01-18 00:43:34.343514: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ffaf36700 of size 19041792 next 1310
2024-01-18 00:43:34.343516: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ffc15f500 of size 19041792 next 1311
2024-01-18 00:43:34.343517: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ffd388300 of size 19041792 next 1312
2024-01-18 00:43:34.343519: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148ffe5b1100 of size 19041792 next 1313
2024-01-18 00:43:34.343520: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 148fff7d9f00 of size 19041792 next 1314
2024-01-18 00:43:34.343522: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149000a02d00 of size 19041792 next 1315
2024-01-18 00:43:34.343523: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149001c2bb00 of size 19041792 next 1316
2024-01-18 00:43:34.343525: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149002e54900 of size 19041792 next 1317
2024-01-18 00:43:34.343527: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14900407d700 of size 19041792 next 1318
2024-01-18 00:43:34.343528: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490052a6500 of size 19041792 next 1319
2024-01-18 00:43:34.343530: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490064cf300 of size 19041792 next 1320
2024-01-18 00:43:34.343531: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490076f8100 of size 19041792 next 1321
2024-01-18 00:43:34.343533: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149008920f00 of size 19041792 next 1322
2024-01-18 00:43:34.343534: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149009b49d00 of size 19041792 next 1323
2024-01-18 00:43:34.343536: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14900ad72b00 of size 19041792 next 1324
2024-01-18 00:43:34.343537: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14900bf9b900 of size 19041792 next 1325
2024-01-18 00:43:34.343539: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14900d1c4700 of size 19041792 next 1326
2024-01-18 00:43:34.343540: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14900e3ed500 of size 19041792 next 1327
2024-01-18 00:43:34.343542: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14900f616300 of size 19041792 next 1328
2024-01-18 00:43:34.343544: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14901083f100 of size 19041792 next 1329
2024-01-18 00:43:34.343545: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149011a67f00 of size 19041792 next 1330
2024-01-18 00:43:34.343547: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149012c90d00 of size 19041792 next 1331
2024-01-18 00:43:34.343548: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149013eb9b00 of size 19041792 next 1332
2024-01-18 00:43:34.343550: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490150e2900 of size 19041792 next 1333
2024-01-18 00:43:34.343551: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14901630b700 of size 19041792 next 1334
2024-01-18 00:43:34.343553: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149017534500 of size 19041792 next 1335
2024-01-18 00:43:34.343554: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14901875d300 of size 19041792 next 1336
2024-01-18 00:43:34.343556: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149019986100 of size 19041792 next 1337
2024-01-18 00:43:34.343558: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14901abaef00 of size 19041792 next 1338
2024-01-18 00:43:34.343559: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14901bdd7d00 of size 19041792 next 1339
2024-01-18 00:43:34.343561: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14901d000b00 of size 19041792 next 1340
2024-01-18 00:43:34.343562: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14901e229900 of size 19041792 next 1341
2024-01-18 00:43:34.343564: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14901f452700 of size 19041792 next 1342
2024-01-18 00:43:34.343565: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14902067b500 of size 19041792 next 1343
2024-01-18 00:43:34.343567: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490218a4300 of size 19041792 next 1344
2024-01-18 00:43:34.343569: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149022acd100 of size 19041792 next 1345
2024-01-18 00:43:34.343570: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149023cf5f00 of size 19041792 next 1346
2024-01-18 00:43:34.343572: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149024f1ed00 of size 19041792 next 1347
2024-01-18 00:43:34.343573: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149026147b00 of size 19041792 next 1348
2024-01-18 00:43:34.343575: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149027370900 of size 19041792 next 1349
2024-01-18 00:43:34.343576: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149028599700 of size 19041792 next 1350
2024-01-18 00:43:34.343578: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490297c2500 of size 19041792 next 1351
2024-01-18 00:43:34.343580: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14902a9eb300 of size 19041792 next 1352
2024-01-18 00:43:34.343581: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14902bc14100 of size 19041792 next 1353
2024-01-18 00:43:34.343583: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14902ce3cf00 of size 19041792 next 1354
2024-01-18 00:43:34.343584: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14902e065d00 of size 19041792 next 1355
2024-01-18 00:43:34.343586: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14902f28eb00 of size 19041792 next 1356
2024-01-18 00:43:34.343587: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490304b7900 of size 19041792 next 1357
2024-01-18 00:43:34.343589: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490316e0700 of size 19041792 next 1358
2024-01-18 00:43:34.343590: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149032909500 of size 19041792 next 1359
2024-01-18 00:43:34.343592: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149033b32300 of size 19041792 next 1360
2024-01-18 00:43:34.343593: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149034d5b100 of size 19041792 next 1361
2024-01-18 00:43:34.343595: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149035f83f00 of size 19041792 next 1362
2024-01-18 00:43:34.343597: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490371acd00 of size 19041792 next 1363
2024-01-18 00:43:34.343598: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490383d5b00 of size 19041792 next 1364
2024-01-18 00:43:34.343600: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490395fe900 of size 19041792 next 1365
2024-01-18 00:43:34.343601: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14903a827700 of size 19041792 next 1366
2024-01-18 00:43:34.343603: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14903ba50500 of size 19041792 next 1367
2024-01-18 00:43:34.343604: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14903cc79300 of size 19041792 next 1368
2024-01-18 00:43:34.343606: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14903dea2100 of size 19041792 next 1369
2024-01-18 00:43:34.343608: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14903f0caf00 of size 19041792 next 1370
2024-01-18 00:43:34.343609: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490402f3d00 of size 19041792 next 1371
2024-01-18 00:43:34.343611: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14904151cb00 of size 19041792 next 1372
2024-01-18 00:43:34.343612: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149042745900 of size 19041792 next 1373
2024-01-18 00:43:34.343614: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14904396e700 of size 19041792 next 1374
2024-01-18 00:43:34.343615: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149044b97500 of size 19041792 next 1375
2024-01-18 00:43:34.343617: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149045dc0300 of size 19041792 next 1376
2024-01-18 00:43:34.343618: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149046fe9100 of size 19041792 next 1377
2024-01-18 00:43:34.343620: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149048211f00 of size 19041792 next 1378
2024-01-18 00:43:34.343622: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14904943ad00 of size 19041792 next 1379
2024-01-18 00:43:34.343623: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14904a663b00 of size 19041792 next 1380
2024-01-18 00:43:34.343625: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14904b88c900 of size 19041792 next 1381
2024-01-18 00:43:34.343626: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14904cab5700 of size 19041792 next 1382
2024-01-18 00:43:34.343628: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14904dcde500 of size 19041792 next 1383
2024-01-18 00:43:34.343629: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14904ef07300 of size 19041792 next 1384
2024-01-18 00:43:34.343631: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149050130100 of size 19041792 next 1385
2024-01-18 00:43:34.343632: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149051358f00 of size 19041792 next 1386
2024-01-18 00:43:34.343634: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149052581d00 of size 19041792 next 1387
2024-01-18 00:43:34.343636: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490537aab00 of size 19041792 next 1388
2024-01-18 00:43:34.343638: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490549d3900 of size 19041792 next 1389
2024-01-18 00:43:34.343639: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149055bfc700 of size 19041792 next 1390
2024-01-18 00:43:34.343641: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149056e25500 of size 19041792 next 1391
2024-01-18 00:43:34.343642: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14905804e300 of size 19041792 next 1392
2024-01-18 00:43:34.343644: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149059277100 of size 19041792 next 1393
2024-01-18 00:43:34.343646: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14905a49ff00 of size 19041792 next 1394
2024-01-18 00:43:34.343647: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14905b6c8d00 of size 19041792 next 1395
2024-01-18 00:43:34.343649: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14905c8f1b00 of size 19041792 next 1396
2024-01-18 00:43:34.343650: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14905db1a900 of size 19041792 next 1397
2024-01-18 00:43:34.343652: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14905ed43700 of size 19041792 next 1398
2024-01-18 00:43:34.343653: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14905ff6c500 of size 19041792 next 1399
2024-01-18 00:43:34.343655: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149061195300 of size 19041792 next 1400
2024-01-18 00:43:34.343657: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490623be100 of size 19041792 next 1401
2024-01-18 00:43:34.343658: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490635e6f00 of size 19041792 next 1402
2024-01-18 00:43:34.343660: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14906480fd00 of size 19041792 next 1403
2024-01-18 00:43:34.343661: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149065a38b00 of size 19041792 next 1404
2024-01-18 00:43:34.343663: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149066c61900 of size 19041792 next 1405
2024-01-18 00:43:34.343664: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149067e8a700 of size 19041792 next 1406
2024-01-18 00:43:34.343666: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490690b3500 of size 19041792 next 1407
2024-01-18 00:43:34.343667: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14906a2dc300 of size 19041792 next 1408
2024-01-18 00:43:34.343669: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14906b505100 of size 19041792 next 1409
2024-01-18 00:43:34.343671: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14906c72df00 of size 19041792 next 1410
2024-01-18 00:43:34.343672: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14906d956d00 of size 19041792 next 1411
2024-01-18 00:43:34.343674: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14906eb7fb00 of size 19041792 next 1412
2024-01-18 00:43:34.343675: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14906fda8900 of size 19041792 next 1413
2024-01-18 00:43:34.343677: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149070fd1700 of size 19041792 next 1414
2024-01-18 00:43:34.343678: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490721fa500 of size 19041792 next 1415
2024-01-18 00:43:34.343680: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149073423300 of size 19041792 next 1416
2024-01-18 00:43:34.343681: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14907464c100 of size 19041792 next 1417
2024-01-18 00:43:34.343683: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149075874f00 of size 19041792 next 1418
2024-01-18 00:43:34.343685: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149076a9dd00 of size 19041792 next 1419
2024-01-18 00:43:34.343686: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149077cc6b00 of size 19041792 next 1420
2024-01-18 00:43:34.343688: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149078eef900 of size 19041792 next 1421
2024-01-18 00:43:34.343689: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14907a118700 of size 19041792 next 1422
2024-01-18 00:43:34.343691: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14907b341500 of size 19041792 next 1423
2024-01-18 00:43:34.343692: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14907c56a300 of size 19041792 next 1424
2024-01-18 00:43:34.343694: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14907d793100 of size 19041792 next 1425
2024-01-18 00:43:34.343695: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14907e9bbf00 of size 19041792 next 1426
2024-01-18 00:43:34.343697: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14907fbe4d00 of size 19041792 next 1427
2024-01-18 00:43:34.343698: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149080e0db00 of size 19041792 next 1428
2024-01-18 00:43:34.343700: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149082036900 of size 19041792 next 1429
2024-01-18 00:43:34.343702: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14908325f700 of size 19041792 next 1430
2024-01-18 00:43:34.343703: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149084488500 of size 19041792 next 1431
2024-01-18 00:43:34.343705: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490856b1300 of size 19041792 next 1432
2024-01-18 00:43:34.343706: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490868da100 of size 19041792 next 1433
2024-01-18 00:43:34.343708: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149087b02f00 of size 19041792 next 1434
2024-01-18 00:43:34.343709: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149088d2bd00 of size 19041792 next 1435
2024-01-18 00:43:34.343711: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149089f54b00 of size 19041792 next 1436
2024-01-18 00:43:34.343712: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14908b17d900 of size 19041792 next 1437
2024-01-18 00:43:34.343714: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14908c3a6700 of size 19041792 next 1438
2024-01-18 00:43:34.343716: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14908d5cf500 of size 19041792 next 1439
2024-01-18 00:43:34.343717: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14908e7f8300 of size 19041792 next 1440
2024-01-18 00:43:34.343719: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14908fa21100 of size 19041792 next 1441
2024-01-18 00:43:34.343720: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149090c49f00 of size 19041792 next 1442
2024-01-18 00:43:34.343722: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149091e72d00 of size 19041792 next 1443
2024-01-18 00:43:34.343723: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14909309bb00 of size 19041792 next 1444
2024-01-18 00:43:34.343725: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490942c4900 of size 19041792 next 1445
2024-01-18 00:43:34.343726: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490954ed700 of size 19041792 next 1446
2024-01-18 00:43:34.343728: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149096716500 of size 19041792 next 1447
2024-01-18 00:43:34.343729: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14909793f300 of size 19041792 next 1448
2024-01-18 00:43:34.343731: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149098b68100 of size 19041792 next 1449
2024-01-18 00:43:34.343733: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149099d90f00 of size 19041792 next 1450
2024-01-18 00:43:34.343734: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14909afb9d00 of size 19041792 next 1451
2024-01-18 00:43:34.343736: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14909c1e2b00 of size 19041792 next 1452
2024-01-18 00:43:34.343737: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14909d40b900 of size 19041792 next 1453
2024-01-18 00:43:34.343739: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14909e634700 of size 19041792 next 1454
2024-01-18 00:43:34.343740: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14909f85d500 of size 19041792 next 1455
2024-01-18 00:43:34.343742: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490a0a86300 of size 19041792 next 1456
2024-01-18 00:43:34.343744: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490a1caf100 of size 19041792 next 1457
2024-01-18 00:43:34.343745: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490a2ed7f00 of size 19041792 next 1458
2024-01-18 00:43:34.343747: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490a4100d00 of size 19041792 next 1459
2024-01-18 00:43:34.343748: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490a5329b00 of size 19041792 next 1460
2024-01-18 00:43:34.343750: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490a6552900 of size 19041792 next 1461
2024-01-18 00:43:34.343751: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490a777b700 of size 19041792 next 1462
2024-01-18 00:43:34.343753: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490a89a4500 of size 19041792 next 1463
2024-01-18 00:43:34.343754: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490a9bcd300 of size 19041792 next 1464
2024-01-18 00:43:34.343756: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490aadf6100 of size 19041792 next 1465
2024-01-18 00:43:34.343757: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490ac01ef00 of size 19041792 next 1466
2024-01-18 00:43:34.343759: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490ad247d00 of size 19041792 next 1467
2024-01-18 00:43:34.343761: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490ae470b00 of size 19041792 next 1468
2024-01-18 00:43:34.343762: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490af699900 of size 19041792 next 1469
2024-01-18 00:43:34.343764: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490b08c2700 of size 19041792 next 1470
2024-01-18 00:43:34.343765: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490b1aeb500 of size 19041792 next 1471
2024-01-18 00:43:34.343767: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490b2d14300 of size 19041792 next 1472
2024-01-18 00:43:34.343768: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490b3f3d100 of size 19041792 next 1473
2024-01-18 00:43:34.343770: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490b5165f00 of size 19041792 next 1474
2024-01-18 00:43:34.343771: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490b638ed00 of size 19041792 next 1475
2024-01-18 00:43:34.343773: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490b75b7b00 of size 19041792 next 1476
2024-01-18 00:43:34.343774: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490b87e0900 of size 19041792 next 1477
2024-01-18 00:43:34.343776: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490b9a09700 of size 19041792 next 1478
2024-01-18 00:43:34.343778: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490bac32500 of size 19041792 next 1479
2024-01-18 00:43:34.343779: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490bbe5b300 of size 19041792 next 1480
2024-01-18 00:43:34.343781: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490bd084100 of size 19041792 next 1481
2024-01-18 00:43:34.343782: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490be2acf00 of size 19041792 next 1482
2024-01-18 00:43:34.343784: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490bf4d5d00 of size 19041792 next 1483
2024-01-18 00:43:34.343785: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490c06feb00 of size 19041792 next 1484
2024-01-18 00:43:34.343787: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490c1927900 of size 19041792 next 1485
2024-01-18 00:43:34.343789: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490c2b50700 of size 19041792 next 1486
2024-01-18 00:43:34.343790: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490c3d79500 of size 19041792 next 1487
2024-01-18 00:43:34.343792: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490c4fa2300 of size 19041792 next 1488
2024-01-18 00:43:34.343793: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490c61cb100 of size 19041792 next 1489
2024-01-18 00:43:34.343795: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490c73f3f00 of size 19041792 next 1490
2024-01-18 00:43:34.343796: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490c861cd00 of size 19041792 next 1491
2024-01-18 00:43:34.343798: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490c9845b00 of size 19041792 next 1492
2024-01-18 00:43:34.343799: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490caa6e900 of size 19041792 next 1493
2024-01-18 00:43:34.343801: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490cbc97700 of size 19041792 next 1494
2024-01-18 00:43:34.343803: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490ccec0500 of size 19041792 next 1495
2024-01-18 00:43:34.343804: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490ce0e9300 of size 19041792 next 1496
2024-01-18 00:43:34.343806: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490cf312100 of size 19041792 next 1497
2024-01-18 00:43:34.343807: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490d053af00 of size 19041792 next 1498
2024-01-18 00:43:34.343809: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490d1763d00 of size 19041792 next 1499
2024-01-18 00:43:34.343810: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490d298cb00 of size 19041792 next 1500
2024-01-18 00:43:34.343812: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490d3bb5900 of size 19041792 next 1501
2024-01-18 00:43:34.343813: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490d4dde700 of size 19041792 next 1502
2024-01-18 00:43:34.343815: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490d6007500 of size 19041792 next 1503
2024-01-18 00:43:34.343817: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490d7230300 of size 19041792 next 1504
2024-01-18 00:43:34.343818: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490d8459100 of size 19041792 next 1505
2024-01-18 00:43:34.343820: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490d9681f00 of size 19041792 next 1506
2024-01-18 00:43:34.343821: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490da8aad00 of size 19041792 next 1507
2024-01-18 00:43:34.343823: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490dbad3b00 of size 19041792 next 1508
2024-01-18 00:43:34.343825: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490dccfc900 of size 19041792 next 1509
2024-01-18 00:43:34.343826: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490ddf25700 of size 19041792 next 1510
2024-01-18 00:43:34.343828: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490df14e500 of size 19041792 next 1511
2024-01-18 00:43:34.343829: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490e0377300 of size 19041792 next 1512
2024-01-18 00:43:34.343831: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490e15a0100 of size 19041792 next 1513
2024-01-18 00:43:34.343832: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490e27c8f00 of size 19041792 next 1514
2024-01-18 00:43:34.343834: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490e39f1d00 of size 19041792 next 1515
2024-01-18 00:43:34.343835: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490e4c1ab00 of size 19041792 next 1516
2024-01-18 00:43:34.343837: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490e5e43900 of size 19041792 next 1517
2024-01-18 00:43:34.343838: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490e706c700 of size 19041792 next 1518
2024-01-18 00:43:34.343840: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490e8295500 of size 19041792 next 1519
2024-01-18 00:43:34.343842: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490e94be300 of size 19041792 next 1520
2024-01-18 00:43:34.343843: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490ea6e7100 of size 19041792 next 1521
2024-01-18 00:43:34.343845: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490eb90ff00 of size 19041792 next 1522
2024-01-18 00:43:34.343846: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490ecb38d00 of size 19041792 next 1523
2024-01-18 00:43:34.343848: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490edd61b00 of size 19041792 next 1524
2024-01-18 00:43:34.343849: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490eef8a900 of size 19041792 next 1525
2024-01-18 00:43:34.343851: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490f01b3700 of size 19041792 next 1526
2024-01-18 00:43:34.343852: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490f13dc500 of size 19041792 next 1527
2024-01-18 00:43:34.343854: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490f2605300 of size 19041792 next 1528
2024-01-18 00:43:34.343856: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490f382e100 of size 19041792 next 1529
2024-01-18 00:43:34.343857: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490f4a56f00 of size 19041792 next 1530
2024-01-18 00:43:34.343859: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490f5c7fd00 of size 19041792 next 1531
2024-01-18 00:43:34.343860: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490f6ea8b00 of size 19041792 next 1532
2024-01-18 00:43:34.343862: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490f80d1900 of size 19041792 next 1533
2024-01-18 00:43:34.343863: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490f92fa700 of size 19041792 next 1534
2024-01-18 00:43:34.343865: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490fa523500 of size 19041792 next 1535
2024-01-18 00:43:34.343867: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490fb74c300 of size 19041792 next 1536
2024-01-18 00:43:34.343868: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490fc975100 of size 19041792 next 1537
2024-01-18 00:43:34.343870: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490fdb9df00 of size 19041792 next 1538
2024-01-18 00:43:34.343871: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490fedc6d00 of size 19041792 next 1539
2024-01-18 00:43:34.343873: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1490fffefb00 of size 19041792 next 1540
2024-01-18 00:43:34.343874: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149101218900 of size 19041792 next 1541
2024-01-18 00:43:34.343876: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149102441700 of size 19041792 next 1542
2024-01-18 00:43:34.343878: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14910366a500 of size 19041792 next 1543
2024-01-18 00:43:34.343879: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149104893300 of size 19041792 next 1544
2024-01-18 00:43:34.343881: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149105abc100 of size 19041792 next 1545
2024-01-18 00:43:34.343882: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149106ce4f00 of size 19041792 next 1546
2024-01-18 00:43:34.343884: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149107f0dd00 of size 19041792 next 1547
2024-01-18 00:43:34.343885: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149109136b00 of size 19041792 next 1548
2024-01-18 00:43:34.343887: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14910a35f900 of size 19041792 next 1549
2024-01-18 00:43:34.343888: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14910b588700 of size 19041792 next 1550
2024-01-18 00:43:34.343890: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14910c7b1500 of size 19041792 next 1551
2024-01-18 00:43:34.343891: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14910d9da300 of size 19041792 next 1552
2024-01-18 00:43:34.343893: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14910ec03100 of size 19041792 next 1553
2024-01-18 00:43:34.343895: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14910fe2bf00 of size 19041792 next 1554
2024-01-18 00:43:34.343896: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149111054d00 of size 19041792 next 1555
2024-01-18 00:43:34.343898: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14911227db00 of size 19041792 next 1556
2024-01-18 00:43:34.343899: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491134a6900 of size 19041792 next 1557
2024-01-18 00:43:34.343901: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491146cf700 of size 19041792 next 1558
2024-01-18 00:43:34.343902: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491158f8500 of size 19041792 next 1559
2024-01-18 00:43:34.343904: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149116b21300 of size 19041792 next 1560
2024-01-18 00:43:34.343905: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149117d4a100 of size 19041792 next 1561
2024-01-18 00:43:34.343907: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149118f72f00 of size 19041792 next 1562
2024-01-18 00:43:34.343909: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14911a19bd00 of size 19041792 next 1563
2024-01-18 00:43:34.343910: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14911b3c4b00 of size 19041792 next 1564
2024-01-18 00:43:34.343912: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14911c5ed900 of size 19041792 next 1565
2024-01-18 00:43:34.343913: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14911d816700 of size 19041792 next 1566
2024-01-18 00:43:34.343915: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14911ea3f500 of size 19041792 next 1567
2024-01-18 00:43:34.343916: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14911fc68300 of size 19041792 next 1568
2024-01-18 00:43:34.343918: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149120e91100 of size 19041792 next 1569
2024-01-18 00:43:34.343920: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491220b9f00 of size 19041792 next 1570
2024-01-18 00:43:34.343921: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491232e2d00 of size 19041792 next 1571
2024-01-18 00:43:34.343923: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14912450bb00 of size 19041792 next 1572
2024-01-18 00:43:34.343924: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149125734900 of size 19041792 next 1573
2024-01-18 00:43:34.343926: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14912695d700 of size 19041792 next 1574
2024-01-18 00:43:34.343928: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149127b86500 of size 19041792 next 1575
2024-01-18 00:43:34.343929: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149128daf300 of size 19041792 next 1576
2024-01-18 00:43:34.343931: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149129fd8100 of size 19041792 next 1577
2024-01-18 00:43:34.343932: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14912b200f00 of size 19041792 next 1578
2024-01-18 00:43:34.343934: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14912c429d00 of size 19041792 next 1579
2024-01-18 00:43:34.343935: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14912d652b00 of size 19041792 next 1580
2024-01-18 00:43:34.343937: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14912e87b900 of size 19041792 next 1581
2024-01-18 00:43:34.343939: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14912faa4700 of size 19041792 next 1582
2024-01-18 00:43:34.343940: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149130ccd500 of size 19041792 next 1583
2024-01-18 00:43:34.343942: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149131ef6300 of size 19041792 next 1584
2024-01-18 00:43:34.343943: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14913311f100 of size 19041792 next 1585
2024-01-18 00:43:34.343945: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149134347f00 of size 19041792 next 1586
2024-01-18 00:43:34.343946: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149135570d00 of size 19041792 next 1587
2024-01-18 00:43:34.343948: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149136799b00 of size 19041792 next 1588
2024-01-18 00:43:34.343950: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491379c2900 of size 19041792 next 1589
2024-01-18 00:43:34.343951: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149138beb700 of size 19041792 next 1590
2024-01-18 00:43:34.343953: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149139e14500 of size 19041792 next 1591
2024-01-18 00:43:34.343954: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14913b03d300 of size 19041792 next 1592
2024-01-18 00:43:34.343956: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14913c266100 of size 19041792 next 1593
2024-01-18 00:43:34.343957: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14913d48ef00 of size 19041792 next 1594
2024-01-18 00:43:34.343959: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14913e6b7d00 of size 19041792 next 1595
2024-01-18 00:43:34.343960: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14913f8e0b00 of size 19041792 next 1596
2024-01-18 00:43:34.343962: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149140b09900 of size 19041792 next 1597
2024-01-18 00:43:34.343964: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149141d32700 of size 19041792 next 1598
2024-01-18 00:43:34.343965: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149142f5b500 of size 19041792 next 1599
2024-01-18 00:43:34.343967: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149144184300 of size 19041792 next 1600
2024-01-18 00:43:34.343968: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491453ad100 of size 19041792 next 1601
2024-01-18 00:43:34.343970: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491465d5f00 of size 19041792 next 1602
2024-01-18 00:43:34.343971: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491477fed00 of size 19041792 next 1603
2024-01-18 00:43:34.343973: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149148a27b00 of size 19041792 next 1604
2024-01-18 00:43:34.343974: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149149c50900 of size 19041792 next 1605
2024-01-18 00:43:34.343976: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14914ae79700 of size 19041792 next 1606
2024-01-18 00:43:34.343977: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14914c0a2500 of size 19041792 next 1607
2024-01-18 00:43:34.343979: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14914d2cb300 of size 19041792 next 1608
2024-01-18 00:43:34.343981: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14914e4f4100 of size 19041792 next 1609
2024-01-18 00:43:34.343982: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14914f71cf00 of size 19041792 next 1610
2024-01-18 00:43:34.343984: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149150945d00 of size 19041792 next 1611
2024-01-18 00:43:34.343985: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149151b6eb00 of size 19041792 next 1612
2024-01-18 00:43:34.343987: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149152d97900 of size 19041792 next 1613
2024-01-18 00:43:34.343988: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149153fc0700 of size 19041792 next 1614
2024-01-18 00:43:34.343990: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491551e9500 of size 19041792 next 1615
2024-01-18 00:43:34.343991: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149156412300 of size 19041792 next 1616
2024-01-18 00:43:34.343993: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14915763b100 of size 19041792 next 1617
2024-01-18 00:43:34.343995: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149158863f00 of size 19041792 next 1618
2024-01-18 00:43:34.343996: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149159a8cd00 of size 19041792 next 1619
2024-01-18 00:43:34.343998: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14915acb5b00 of size 19041792 next 1620
2024-01-18 00:43:34.343999: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14915bede900 of size 19041792 next 1621
2024-01-18 00:43:34.344001: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14915d107700 of size 19041792 next 1622
2024-01-18 00:43:34.344002: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14915e330500 of size 19041792 next 1623
2024-01-18 00:43:34.344004: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14915f559300 of size 19041792 next 1624
2024-01-18 00:43:34.344005: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149160782100 of size 19041792 next 1625
2024-01-18 00:43:34.344007: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491619aaf00 of size 19041792 next 1626
2024-01-18 00:43:34.344009: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149162bd3d00 of size 19041792 next 1627
2024-01-18 00:43:34.344010: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149163dfcb00 of size 19041792 next 1628
2024-01-18 00:43:34.344012: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149165025900 of size 19041792 next 1629
2024-01-18 00:43:34.344013: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14916624e700 of size 19041792 next 1630
2024-01-18 00:43:34.344015: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149167477500 of size 19041792 next 1631
2024-01-18 00:43:34.344016: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491686a0300 of size 19041792 next 1632
2024-01-18 00:43:34.344018: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491698c9100 of size 19041792 next 1633
2024-01-18 00:43:34.344020: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14916aaf1f00 of size 19041792 next 1634
2024-01-18 00:43:34.344021: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14916bd1ad00 of size 19041792 next 1635
2024-01-18 00:43:34.344023: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14916cf43b00 of size 19041792 next 1636
2024-01-18 00:43:34.344024: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14916e16c900 of size 19041792 next 1637
2024-01-18 00:43:34.344026: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14916f395700 of size 19041792 next 1638
2024-01-18 00:43:34.344027: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491705be500 of size 19041792 next 1639
2024-01-18 00:43:34.344029: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491717e7300 of size 19041792 next 1640
2024-01-18 00:43:34.344030: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149172a10100 of size 19041792 next 1641
2024-01-18 00:43:34.344032: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149173c38f00 of size 19041792 next 1642
2024-01-18 00:43:34.344033: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149174e61d00 of size 19041792 next 1643
2024-01-18 00:43:34.344035: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14917608ab00 of size 19041792 next 1644
2024-01-18 00:43:34.344037: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491772b3900 of size 19041792 next 1645
2024-01-18 00:43:34.344038: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491784dc700 of size 19041792 next 1646
2024-01-18 00:43:34.344040: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149179705500 of size 19041792 next 1647
2024-01-18 00:43:34.344041: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14917a92e300 of size 19041792 next 1648
2024-01-18 00:43:34.344043: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14917bb57100 of size 19041792 next 1649
2024-01-18 00:43:34.344044: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14917cd7ff00 of size 19041792 next 1650
2024-01-18 00:43:34.344046: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14917dfa8d00 of size 19041792 next 1651
2024-01-18 00:43:34.344048: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14917f1d1b00 of size 19041792 next 1652
2024-01-18 00:43:34.344049: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491803fa900 of size 19041792 next 1653
2024-01-18 00:43:34.344051: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149181623700 of size 19041792 next 1654
2024-01-18 00:43:34.344052: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14918284c500 of size 19041792 next 1655
2024-01-18 00:43:34.344054: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149183a75300 of size 19041792 next 1656
2024-01-18 00:43:34.344055: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149184c9e100 of size 19041792 next 1657
2024-01-18 00:43:34.344057: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149185ec6f00 of size 19041792 next 1658
2024-01-18 00:43:34.344059: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491870efd00 of size 19041792 next 1659
2024-01-18 00:43:34.344060: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149188318b00 of size 19041792 next 1660
2024-01-18 00:43:34.344062: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149189541900 of size 19041792 next 1661
2024-01-18 00:43:34.344063: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14918a76a700 of size 19041792 next 1662
2024-01-18 00:43:34.344065: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14918b993500 of size 19041792 next 1663
2024-01-18 00:43:34.344066: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14918cbbc300 of size 19041792 next 1664
2024-01-18 00:43:34.344068: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14918dde5100 of size 19041792 next 1665
2024-01-18 00:43:34.344069: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14918f00df00 of size 19041792 next 1666
2024-01-18 00:43:34.344071: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149190236d00 of size 19041792 next 1667
2024-01-18 00:43:34.344073: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14919145fb00 of size 19041792 next 1668
2024-01-18 00:43:34.344074: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149192688900 of size 19041792 next 1669
2024-01-18 00:43:34.344076: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491938b1700 of size 19041792 next 1670
2024-01-18 00:43:34.344077: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149194ada500 of size 19041792 next 1671
2024-01-18 00:43:34.344079: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149195d03300 of size 19041792 next 1672
2024-01-18 00:43:34.344080: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149196f2c100 of size 19041792 next 1673
2024-01-18 00:43:34.344082: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149198154f00 of size 19041792 next 1674
2024-01-18 00:43:34.344083: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14919937dd00 of size 19041792 next 1675
2024-01-18 00:43:34.344085: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14919a5a6b00 of size 19041792 next 1676
2024-01-18 00:43:34.344087: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14919b7cf900 of size 19041792 next 1677
2024-01-18 00:43:34.344088: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14919c9f8700 of size 19041792 next 1678
2024-01-18 00:43:34.344090: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14919dc21500 of size 19041792 next 1679
2024-01-18 00:43:34.344091: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14919ee4a300 of size 19041792 next 1680
2024-01-18 00:43:34.344093: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491a0073100 of size 19041792 next 1681
2024-01-18 00:43:34.344094: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491a129bf00 of size 19041792 next 1682
2024-01-18 00:43:34.344096: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491a24c4d00 of size 19041792 next 1683
2024-01-18 00:43:34.344097: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491a36edb00 of size 19041792 next 1684
2024-01-18 00:43:34.344099: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491a4916900 of size 19041792 next 1685
2024-01-18 00:43:34.344100: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491a5b3f700 of size 19041792 next 1686
2024-01-18 00:43:34.344102: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491a6d68500 of size 19041792 next 1687
2024-01-18 00:43:34.344104: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491a7f91300 of size 19041792 next 1688
2024-01-18 00:43:34.344105: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491a91ba100 of size 19041792 next 1689
2024-01-18 00:43:34.344107: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491aa3e2f00 of size 19041792 next 1690
2024-01-18 00:43:34.344108: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ab60bd00 of size 19041792 next 1691
2024-01-18 00:43:34.344110: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ac834b00 of size 19041792 next 1692
2024-01-18 00:43:34.344112: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ada5d900 of size 19041792 next 1693
2024-01-18 00:43:34.344113: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491aec86700 of size 19041792 next 1694
2024-01-18 00:43:34.344115: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491afeaf500 of size 19041792 next 1695
2024-01-18 00:43:34.344116: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491b10d8300 of size 19041792 next 1696
2024-01-18 00:43:34.344118: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491b2301100 of size 19041792 next 1697
2024-01-18 00:43:34.344119: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491b3529f00 of size 19041792 next 1698
2024-01-18 00:43:34.344121: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491b4752d00 of size 19041792 next 1699
2024-01-18 00:43:34.344123: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491b597bb00 of size 19041792 next 1700
2024-01-18 00:43:34.344124: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491b6ba4900 of size 19041792 next 1701
2024-01-18 00:43:34.344126: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491b7dcd700 of size 19041792 next 1702
2024-01-18 00:43:34.344127: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491b8ff6500 of size 19041792 next 1703
2024-01-18 00:43:34.344129: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ba21f300 of size 19041792 next 1704
2024-01-18 00:43:34.344130: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491bb448100 of size 19041792 next 1705
2024-01-18 00:43:34.344132: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491bc670f00 of size 19041792 next 1706
2024-01-18 00:43:34.344133: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491bd899d00 of size 19041792 next 1707
2024-01-18 00:43:34.344135: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491beac2b00 of size 19041792 next 1708
2024-01-18 00:43:34.344137: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491bfceb900 of size 19041792 next 1709
2024-01-18 00:43:34.344138: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491c0f14700 of size 19041792 next 1710
2024-01-18 00:43:34.344140: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491c213d500 of size 19041792 next 1711
2024-01-18 00:43:34.344141: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491c3366300 of size 19041792 next 1712
2024-01-18 00:43:34.344143: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491c458f100 of size 19041792 next 1713
2024-01-18 00:43:34.344144: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491c57b7f00 of size 19041792 next 1714
2024-01-18 00:43:34.344146: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491c69e0d00 of size 19041792 next 1715
2024-01-18 00:43:34.344147: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491c7c09b00 of size 19041792 next 1716
2024-01-18 00:43:34.344149: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491c8e32900 of size 19041792 next 1717
2024-01-18 00:43:34.344150: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ca05b700 of size 19041792 next 1718
2024-01-18 00:43:34.344152: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491cb284500 of size 19041792 next 1719
2024-01-18 00:43:34.344154: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491cc4ad300 of size 19041792 next 1720
2024-01-18 00:43:34.344155: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491cd6d6100 of size 19041792 next 1721
2024-01-18 00:43:34.344157: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ce8fef00 of size 19041792 next 1722
2024-01-18 00:43:34.344158: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491cfb27d00 of size 19041792 next 1723
2024-01-18 00:43:34.344160: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491d0d50b00 of size 19041792 next 1724
2024-01-18 00:43:34.344161: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491d1f79900 of size 19041792 next 1725
2024-01-18 00:43:34.344163: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491d31a2700 of size 19041792 next 1726
2024-01-18 00:43:34.344165: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491d43cb500 of size 19041792 next 1727
2024-01-18 00:43:34.344166: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491d55f4300 of size 19041792 next 1728
2024-01-18 00:43:34.344168: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491d681d100 of size 19041792 next 1729
2024-01-18 00:43:34.344169: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491d7a45f00 of size 19041792 next 1730
2024-01-18 00:43:34.344171: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491d8c6ed00 of size 19041792 next 1731
2024-01-18 00:43:34.344172: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491d9e97b00 of size 19041792 next 1732
2024-01-18 00:43:34.344174: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491db0c0900 of size 19041792 next 1733
2024-01-18 00:43:34.344176: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491dc2e9700 of size 19041792 next 1734
2024-01-18 00:43:34.344177: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491dd512500 of size 19041792 next 1735
2024-01-18 00:43:34.344179: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491de73b300 of size 19041792 next 1736
2024-01-18 00:43:34.344180: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491df964100 of size 19041792 next 1737
2024-01-18 00:43:34.344182: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491e0b8cf00 of size 19041792 next 1738
2024-01-18 00:43:34.344183: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491e1db5d00 of size 19041792 next 1739
2024-01-18 00:43:34.344185: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491e2fdeb00 of size 19041792 next 1740
2024-01-18 00:43:34.344187: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491e4207900 of size 19041792 next 1741
2024-01-18 00:43:34.344188: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491e5430700 of size 19041792 next 1742
2024-01-18 00:43:34.344190: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491e6659500 of size 19041792 next 1743
2024-01-18 00:43:34.344191: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491e7882300 of size 19041792 next 1744
2024-01-18 00:43:34.344193: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491e8aab100 of size 19041792 next 1745
2024-01-18 00:43:34.344194: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491e9cd3f00 of size 19041792 next 1746
2024-01-18 00:43:34.344196: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491eaefcd00 of size 19041792 next 1747
2024-01-18 00:43:34.344197: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ec125b00 of size 19041792 next 1748
2024-01-18 00:43:34.344199: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ed34e900 of size 19041792 next 1749
2024-01-18 00:43:34.344201: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ee577700 of size 19041792 next 1750
2024-01-18 00:43:34.344202: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ef7a0500 of size 19041792 next 1751
2024-01-18 00:43:34.344204: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491f09c9300 of size 19041792 next 1752
2024-01-18 00:43:34.344205: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491f1bf2100 of size 19041792 next 1753
2024-01-18 00:43:34.344207: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491f2e1af00 of size 19041792 next 1754
2024-01-18 00:43:34.344208: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491f4043d00 of size 19041792 next 1755
2024-01-18 00:43:34.344210: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491f526cb00 of size 19041792 next 1756
2024-01-18 00:43:34.344211: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491f6495900 of size 19041792 next 1757
2024-01-18 00:43:34.344213: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491f76be700 of size 19041792 next 1758
2024-01-18 00:43:34.344215: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491f88e7500 of size 19041792 next 1759
2024-01-18 00:43:34.344216: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491f9b10300 of size 19041792 next 1760
2024-01-18 00:43:34.344218: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491fad39100 of size 19041792 next 1761
2024-01-18 00:43:34.344219: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491fbf61f00 of size 19041792 next 1762
2024-01-18 00:43:34.344221: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491fd18ad00 of size 19041792 next 1763
2024-01-18 00:43:34.344222: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491fe3b3b00 of size 19041792 next 1764
2024-01-18 00:43:34.344224: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1491ff5dc900 of size 19041792 next 1765
2024-01-18 00:43:34.344226: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149200805700 of size 19041792 next 1766
2024-01-18 00:43:34.344227: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149201a2e500 of size 19041792 next 1767
2024-01-18 00:43:34.344229: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149202c57300 of size 19041792 next 1768
2024-01-18 00:43:34.344230: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149203e80100 of size 19041792 next 1769
2024-01-18 00:43:34.344232: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492050a8f00 of size 19041792 next 1770
2024-01-18 00:43:34.344233: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492062d1d00 of size 19041792 next 1771
2024-01-18 00:43:34.344235: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492074fab00 of size 19041792 next 1772
2024-01-18 00:43:34.344236: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149208723900 of size 19041792 next 1773
2024-01-18 00:43:34.344238: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14920994c700 of size 19041792 next 1774
2024-01-18 00:43:34.344240: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14920ab75500 of size 19041792 next 1775
2024-01-18 00:43:34.344241: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14920bd9e300 of size 19041792 next 1776
2024-01-18 00:43:34.344243: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14920cfc7100 of size 19041792 next 1777
2024-01-18 00:43:34.344244: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14920e1eff00 of size 19041792 next 1778
2024-01-18 00:43:34.344246: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14920f418d00 of size 19041792 next 1779
2024-01-18 00:43:34.344247: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149210641b00 of size 19041792 next 1780
2024-01-18 00:43:34.344249: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14921186a900 of size 19041792 next 1781
2024-01-18 00:43:34.344250: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149212a93700 of size 19041792 next 1782
2024-01-18 00:43:34.344252: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149213cbc500 of size 19041792 next 1783
2024-01-18 00:43:34.344253: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149214ee5300 of size 19041792 next 1784
2024-01-18 00:43:34.344255: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14921610e100 of size 19041792 next 1785
2024-01-18 00:43:34.344257: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149217336f00 of size 19041792 next 1786
2024-01-18 00:43:34.344258: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14921855fd00 of size 19041792 next 1787
2024-01-18 00:43:34.344260: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149219788b00 of size 19041792 next 1788
2024-01-18 00:43:34.344261: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14921a9b1900 of size 19041792 next 1789
2024-01-18 00:43:34.344263: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14921bbda700 of size 19041792 next 1790
2024-01-18 00:43:34.344264: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14921ce03500 of size 19041792 next 1791
2024-01-18 00:43:34.344266: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14921e02c300 of size 19041792 next 1792
2024-01-18 00:43:34.344267: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14921f255100 of size 19041792 next 1793
2024-01-18 00:43:34.344269: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14922047df00 of size 19041792 next 1794
2024-01-18 00:43:34.344271: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492216a6d00 of size 19041792 next 1795
2024-01-18 00:43:34.344272: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492228cfb00 of size 19041792 next 1796
2024-01-18 00:43:34.344274: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149223af8900 of size 19041792 next 1797
2024-01-18 00:43:34.344275: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149224d21700 of size 19041792 next 1798
2024-01-18 00:43:34.344277: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149225f4a500 of size 19041792 next 1799
2024-01-18 00:43:34.344278: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149227173300 of size 19041792 next 1800
2024-01-18 00:43:34.344280: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14922839c100 of size 19041792 next 1801
2024-01-18 00:43:34.344281: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492295c4f00 of size 19041792 next 1802
2024-01-18 00:43:34.344283: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14922a7edd00 of size 19041792 next 1803
2024-01-18 00:43:34.344285: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14922ba16b00 of size 19041792 next 1804
2024-01-18 00:43:34.344286: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14922cc3f900 of size 19041792 next 1805
2024-01-18 00:43:34.344288: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14922de68700 of size 19041792 next 1806
2024-01-18 00:43:34.344289: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14922f091500 of size 19041792 next 1807
2024-01-18 00:43:34.344291: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492302ba300 of size 19041792 next 1808
2024-01-18 00:43:34.344292: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492314e3100 of size 19041792 next 1809
2024-01-18 00:43:34.344294: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14923270bf00 of size 19041792 next 1810
2024-01-18 00:43:34.344295: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149233934d00 of size 19041792 next 1811
2024-01-18 00:43:34.344297: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149234b5db00 of size 19041792 next 1812
2024-01-18 00:43:34.344299: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149235d86900 of size 19041792 next 1813
2024-01-18 00:43:34.344300: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149236faf700 of size 19041792 next 1814
2024-01-18 00:43:34.344302: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492381d8500 of size 19041792 next 1815
2024-01-18 00:43:34.344303: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149239401300 of size 19041792 next 1816
2024-01-18 00:43:34.344305: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14923a62a100 of size 19041792 next 1817
2024-01-18 00:43:34.344306: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14923b852f00 of size 19041792 next 1818
2024-01-18 00:43:34.344308: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14923ca7bd00 of size 19041792 next 1819
2024-01-18 00:43:34.344310: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14923dca4b00 of size 19041792 next 1820
2024-01-18 00:43:34.344311: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14923eecd900 of size 19041792 next 1821
2024-01-18 00:43:34.344313: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492400f6700 of size 19041792 next 1822
2024-01-18 00:43:34.344314: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14924131f500 of size 19041792 next 1823
2024-01-18 00:43:34.344316: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149242548300 of size 19041792 next 1824
2024-01-18 00:43:34.344317: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149243771100 of size 19041792 next 1825
2024-01-18 00:43:34.344319: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149244999f00 of size 19041792 next 1826
2024-01-18 00:43:34.344320: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149245bc2d00 of size 19041792 next 1827
2024-01-18 00:43:34.344322: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149246debb00 of size 19041792 next 1828
2024-01-18 00:43:34.344323: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149248014900 of size 19041792 next 1829
2024-01-18 00:43:34.344325: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14924923d700 of size 19041792 next 1830
2024-01-18 00:43:34.344327: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14924a466500 of size 19041792 next 1831
2024-01-18 00:43:34.344328: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14924b68f300 of size 19041792 next 1832
2024-01-18 00:43:34.344330: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14924c8b8100 of size 19041792 next 1833
2024-01-18 00:43:34.344331: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14924dae0f00 of size 19041792 next 1834
2024-01-18 00:43:34.344333: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14924ed09d00 of size 19041792 next 1835
2024-01-18 00:43:34.344334: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14924ff32b00 of size 19041792 next 1836
2024-01-18 00:43:34.344336: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14925115b900 of size 19041792 next 1837
2024-01-18 00:43:34.344337: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149252384700 of size 19041792 next 1838
2024-01-18 00:43:34.344339: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492535ad500 of size 19041792 next 1839
2024-01-18 00:43:34.344340: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492547d6300 of size 19041792 next 1840
2024-01-18 00:43:34.344342: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492559ff100 of size 19041792 next 1841
2024-01-18 00:43:34.344344: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149256c27f00 of size 19041792 next 1842
2024-01-18 00:43:34.344345: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149257e50d00 of size 19041792 next 1843
2024-01-18 00:43:34.344347: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149259079b00 of size 19041792 next 1844
2024-01-18 00:43:34.344348: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14925a2a2900 of size 19041792 next 1845
2024-01-18 00:43:34.344350: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14925b4cb700 of size 19041792 next 1846
2024-01-18 00:43:34.344351: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14925c6f4500 of size 19041792 next 1847
2024-01-18 00:43:34.344353: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14925d91d300 of size 19041792 next 1848
2024-01-18 00:43:34.344355: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14925eb46100 of size 19041792 next 1849
2024-01-18 00:43:34.344356: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14925fd6ef00 of size 19041792 next 1850
2024-01-18 00:43:34.344358: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149260f97d00 of size 19041792 next 1851
2024-01-18 00:43:34.344359: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492621c0b00 of size 19041792 next 1852
2024-01-18 00:43:34.344361: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492633e9900 of size 19041792 next 1853
2024-01-18 00:43:34.344362: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149264612700 of size 19041792 next 1854
2024-01-18 00:43:34.344364: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14926583b500 of size 19041792 next 1855
2024-01-18 00:43:34.344365: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149266a64300 of size 19041792 next 1856
2024-01-18 00:43:34.344367: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149267c8d100 of size 19041792 next 1857
2024-01-18 00:43:34.344368: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149268eb5f00 of size 19041792 next 1858
2024-01-18 00:43:34.344370: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14926a0ded00 of size 19041792 next 1859
2024-01-18 00:43:34.344371: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14926b307b00 of size 19041792 next 1860
2024-01-18 00:43:34.344373: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14926c530900 of size 19041792 next 1861
2024-01-18 00:43:34.344375: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14926d759700 of size 19041792 next 1862
2024-01-18 00:43:34.344376: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14926e982500 of size 19041792 next 1863
2024-01-18 00:43:34.344378: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14926fbab300 of size 19041792 next 1864
2024-01-18 00:43:34.344379: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149270dd4100 of size 19041792 next 1865
2024-01-18 00:43:34.344381: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149271ffcf00 of size 19041792 next 1866
2024-01-18 00:43:34.344382: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149273225d00 of size 19041792 next 1867
2024-01-18 00:43:34.344384: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14927444eb00 of size 19041792 next 1868
2024-01-18 00:43:34.344386: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149275677900 of size 19041792 next 1869
2024-01-18 00:43:34.344387: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492768a0700 of size 19041792 next 1870
2024-01-18 00:43:34.344389: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149277ac9500 of size 19041792 next 1871
2024-01-18 00:43:34.344390: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149278cf2300 of size 19041792 next 1872
2024-01-18 00:43:34.344392: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149279f1b100 of size 19041792 next 1873
2024-01-18 00:43:34.344393: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14927b143f00 of size 19041792 next 1874
2024-01-18 00:43:34.344395: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14927c36cd00 of size 19041792 next 1875
2024-01-18 00:43:34.344396: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14927d595b00 of size 19041792 next 1876
2024-01-18 00:43:34.344398: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14927e7be900 of size 19041792 next 1877
2024-01-18 00:43:34.344400: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14927f9e7700 of size 19041792 next 1878
2024-01-18 00:43:34.344401: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149280c10500 of size 19041792 next 1879
2024-01-18 00:43:34.344403: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149281e39300 of size 19041792 next 1880
2024-01-18 00:43:34.344404: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149283062100 of size 19041792 next 1881
2024-01-18 00:43:34.344406: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14928428af00 of size 19041792 next 1882
2024-01-18 00:43:34.344407: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492854b3d00 of size 19041792 next 1883
2024-01-18 00:43:34.344409: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492866dcb00 of size 19041792 next 1884
2024-01-18 00:43:34.344410: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149287905900 of size 19041792 next 1885
2024-01-18 00:43:34.344412: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149288b2e700 of size 19041792 next 1886
2024-01-18 00:43:34.344413: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149289d57500 of size 19041792 next 1887
2024-01-18 00:43:34.344415: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14928af80300 of size 19041792 next 1888
2024-01-18 00:43:34.344417: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14928c1a9100 of size 19041792 next 1889
2024-01-18 00:43:34.344418: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14928d3d1f00 of size 19041792 next 1890
2024-01-18 00:43:34.344420: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14928e5fad00 of size 19041792 next 1891
2024-01-18 00:43:34.344421: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14928f823b00 of size 19041792 next 1892
2024-01-18 00:43:34.344423: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149290a4c900 of size 19041792 next 1893
2024-01-18 00:43:34.344424: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149291c75700 of size 19041792 next 1894
2024-01-18 00:43:34.344426: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149292e9e500 of size 19041792 next 1895
2024-01-18 00:43:34.344427: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492940c7300 of size 19041792 next 1896
2024-01-18 00:43:34.344429: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492952f0100 of size 19041792 next 1897
2024-01-18 00:43:34.344431: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149296518f00 of size 19041792 next 1898
2024-01-18 00:43:34.344432: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149297741d00 of size 19041792 next 1899
2024-01-18 00:43:34.344434: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14929896ab00 of size 19041792 next 1900
2024-01-18 00:43:34.344435: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149299b93900 of size 19041792 next 1901
2024-01-18 00:43:34.344437: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14929adbc700 of size 19041792 next 1902
2024-01-18 00:43:34.344439: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14929bfe5500 of size 19041792 next 1903
2024-01-18 00:43:34.344440: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14929d20e300 of size 19041792 next 1904
2024-01-18 00:43:34.344442: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14929e437100 of size 19041792 next 1905
2024-01-18 00:43:34.344443: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14929f65ff00 of size 19041792 next 1906
2024-01-18 00:43:34.344445: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492a0888d00 of size 19041792 next 1907
2024-01-18 00:43:34.344446: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492a1ab1b00 of size 19041792 next 1908
2024-01-18 00:43:34.344448: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492a2cda900 of size 19041792 next 1909
2024-01-18 00:43:34.344449: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492a3f03700 of size 19041792 next 1910
2024-01-18 00:43:34.344451: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492a512c500 of size 19041792 next 1911
2024-01-18 00:43:34.344453: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492a6355300 of size 19041792 next 1912
2024-01-18 00:43:34.344454: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492a757e100 of size 19041792 next 1913
2024-01-18 00:43:34.344456: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492a87a6f00 of size 19041792 next 1914
2024-01-18 00:43:34.344457: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492a99cfd00 of size 19041792 next 1915
2024-01-18 00:43:34.344459: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492aabf8b00 of size 19041792 next 1916
2024-01-18 00:43:34.344460: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492abe21900 of size 19041792 next 1917
2024-01-18 00:43:34.344462: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492ad04a700 of size 19041792 next 1918
2024-01-18 00:43:34.344464: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492ae273500 of size 19041792 next 1919
2024-01-18 00:43:34.344465: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492af49c300 of size 19041792 next 1920
2024-01-18 00:43:34.344467: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492b06c5100 of size 19041792 next 1921
2024-01-18 00:43:34.344468: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492b18edf00 of size 19041792 next 1922
2024-01-18 00:43:34.344470: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492b2b16d00 of size 19041792 next 1923
2024-01-18 00:43:34.344471: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492b3d3fb00 of size 19041792 next 1924
2024-01-18 00:43:34.344473: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492b4f68900 of size 19041792 next 1925
2024-01-18 00:43:34.344474: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492b6191700 of size 19041792 next 1926
2024-01-18 00:43:34.344476: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492b73ba500 of size 19041792 next 1927
2024-01-18 00:43:34.344478: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492b85e3300 of size 19041792 next 1928
2024-01-18 00:43:34.344479: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492b980c100 of size 19041792 next 1929
2024-01-18 00:43:34.344481: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492baa34f00 of size 19041792 next 1930
2024-01-18 00:43:34.344482: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492bbc5dd00 of size 19041792 next 1931
2024-01-18 00:43:34.344484: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492bce86b00 of size 19041792 next 1932
2024-01-18 00:43:34.344485: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492be0af900 of size 19041792 next 1933
2024-01-18 00:43:34.344487: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492bf2d8700 of size 19041792 next 1934
2024-01-18 00:43:34.344489: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492c0501500 of size 19041792 next 1935
2024-01-18 00:43:34.344490: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492c172a300 of size 19041792 next 1936
2024-01-18 00:43:34.344492: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492c2953100 of size 19041792 next 1937
2024-01-18 00:43:34.344493: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492c3b7bf00 of size 19041792 next 1938
2024-01-18 00:43:34.344495: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492c4da4d00 of size 19041792 next 1939
2024-01-18 00:43:34.344496: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492c5fcdb00 of size 19041792 next 1940
2024-01-18 00:43:34.344498: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492c71f6900 of size 19041792 next 1941
2024-01-18 00:43:34.344499: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492c841f700 of size 19041792 next 1942
2024-01-18 00:43:34.344501: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492c9648500 of size 19041792 next 1943
2024-01-18 00:43:34.344502: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492ca871300 of size 19041792 next 1944
2024-01-18 00:43:34.344504: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492cba9a100 of size 19041792 next 1945
2024-01-18 00:43:34.344506: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492cccc2f00 of size 19041792 next 1946
2024-01-18 00:43:34.344507: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492cdeebd00 of size 19041792 next 1947
2024-01-18 00:43:34.344509: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492cf114b00 of size 19041792 next 1948
2024-01-18 00:43:34.344510: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492d033d900 of size 19041792 next 1949
2024-01-18 00:43:34.344512: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492d1566700 of size 19041792 next 1950
2024-01-18 00:43:34.344514: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492d278f500 of size 19041792 next 1951
2024-01-18 00:43:34.344515: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492d39b8300 of size 19041792 next 1952
2024-01-18 00:43:34.344517: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492d4be1100 of size 19041792 next 1953
2024-01-18 00:43:34.344518: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492d5e09f00 of size 19041792 next 1954
2024-01-18 00:43:34.344520: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492d7032d00 of size 19041792 next 1955
2024-01-18 00:43:34.344521: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492d825bb00 of size 19041792 next 1956
2024-01-18 00:43:34.344523: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492d9484900 of size 19041792 next 1957
2024-01-18 00:43:34.344524: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492da6ad700 of size 19041792 next 1958
2024-01-18 00:43:34.344526: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492db8d6500 of size 19041792 next 1959
2024-01-18 00:43:34.344528: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492dcaff300 of size 19041792 next 1960
2024-01-18 00:43:34.344529: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492ddd28100 of size 19041792 next 1961
2024-01-18 00:43:34.344531: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492def50f00 of size 19041792 next 1962
2024-01-18 00:43:34.344532: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492e0179d00 of size 19041792 next 1963
2024-01-18 00:43:34.344534: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492e13a2b00 of size 19041792 next 1964
2024-01-18 00:43:34.344536: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492e25cb900 of size 19041792 next 1965
2024-01-18 00:43:34.344537: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492e37f4700 of size 19041792 next 1966
2024-01-18 00:43:34.344539: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492e4a1d500 of size 19041792 next 1967
2024-01-18 00:43:34.344541: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492e5c46300 of size 19041792 next 1968
2024-01-18 00:43:34.344543: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492e6e6f100 of size 19041792 next 1969
2024-01-18 00:43:34.344544: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492e8097f00 of size 19041792 next 1970
2024-01-18 00:43:34.344546: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492e92c0d00 of size 19041792 next 1971
2024-01-18 00:43:34.344547: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492ea4e9b00 of size 19041792 next 1972
2024-01-18 00:43:34.344549: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492eb712900 of size 19041792 next 1973
2024-01-18 00:43:34.344550: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492ec93b700 of size 19041792 next 1974
2024-01-18 00:43:34.344552: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492edb64500 of size 19041792 next 1975
2024-01-18 00:43:34.344554: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492eed8d300 of size 19041792 next 1976
2024-01-18 00:43:34.344555: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492effb6100 of size 19041792 next 1977
2024-01-18 00:43:34.344557: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492f11def00 of size 19041792 next 1978
2024-01-18 00:43:34.344558: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492f2407d00 of size 19041792 next 1979
2024-01-18 00:43:34.344560: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492f3630b00 of size 19041792 next 1980
2024-01-18 00:43:34.344561: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492f4859900 of size 19041792 next 1981
2024-01-18 00:43:34.344563: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492f5a82700 of size 19041792 next 1982
2024-01-18 00:43:34.344564: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492f6cab500 of size 19041792 next 1983
2024-01-18 00:43:34.344566: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492f7ed4300 of size 19041792 next 1984
2024-01-18 00:43:34.344568: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492f90fd100 of size 19041792 next 1985
2024-01-18 00:43:34.344569: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492fa325f00 of size 19041792 next 1986
2024-01-18 00:43:34.344571: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492fb54ed00 of size 19041792 next 1987
2024-01-18 00:43:34.344572: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492fc777b00 of size 19041792 next 1988
2024-01-18 00:43:34.344574: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492fd9a0900 of size 19041792 next 1989
2024-01-18 00:43:34.344575: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492febc9700 of size 19041792 next 1990
2024-01-18 00:43:34.344577: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1492ffdf2500 of size 19041792 next 1991
2024-01-18 00:43:34.344578: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14930101b300 of size 19041792 next 1992
2024-01-18 00:43:34.344580: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149302244100 of size 19041792 next 1993
2024-01-18 00:43:34.344582: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14930346cf00 of size 19041792 next 1994
2024-01-18 00:43:34.344583: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149304695d00 of size 19041792 next 1995
2024-01-18 00:43:34.344585: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493058beb00 of size 19041792 next 1996
2024-01-18 00:43:34.344586: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149306ae7900 of size 19041792 next 1997
2024-01-18 00:43:34.344588: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149307d10700 of size 19041792 next 1998
2024-01-18 00:43:34.344589: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149308f39500 of size 19041792 next 1999
2024-01-18 00:43:34.344591: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14930a162300 of size 19041792 next 2000
2024-01-18 00:43:34.344592: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14930b38b100 of size 19041792 next 2001
2024-01-18 00:43:34.344594: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14930c5b3f00 of size 19041792 next 2002
2024-01-18 00:43:34.344596: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14930d7dcd00 of size 19041792 next 2003
2024-01-18 00:43:34.344597: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14930ea05b00 of size 19041792 next 2004
2024-01-18 00:43:34.344599: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14930fc2e900 of size 19041792 next 2005
2024-01-18 00:43:34.344600: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149310e57700 of size 19041792 next 2006
2024-01-18 00:43:34.344602: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149312080500 of size 19041792 next 2007
2024-01-18 00:43:34.344603: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493132a9300 of size 19041792 next 2008
2024-01-18 00:43:34.344605: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493144d2100 of size 19041792 next 2009
2024-01-18 00:43:34.344607: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493156faf00 of size 19041792 next 2010
2024-01-18 00:43:34.344608: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149316923d00 of size 19041792 next 2011
2024-01-18 00:43:34.344610: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149317b4cb00 of size 19041792 next 2012
2024-01-18 00:43:34.344611: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149318d75900 of size 19041792 next 2013
2024-01-18 00:43:34.344613: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149319f9e700 of size 19041792 next 2014
2024-01-18 00:43:34.344614: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14931b1c7500 of size 19041792 next 2015
2024-01-18 00:43:34.344616: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14931c3f0300 of size 19041792 next 2016
2024-01-18 00:43:34.344617: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14931d619100 of size 19041792 next 2017
2024-01-18 00:43:34.344619: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14931e841f00 of size 19041792 next 2018
2024-01-18 00:43:34.344621: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14931fa6ad00 of size 19041792 next 2019
2024-01-18 00:43:34.344622: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149320c93b00 of size 19041792 next 2020
2024-01-18 00:43:34.344624: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149321ebc900 of size 19041792 next 2021
2024-01-18 00:43:34.344625: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493230e5700 of size 19041792 next 2022
2024-01-18 00:43:34.344627: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14932430e500 of size 19041792 next 2023
2024-01-18 00:43:34.344628: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149325537300 of size 19041792 next 2024
2024-01-18 00:43:34.344630: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149326760100 of size 19041792 next 2025
2024-01-18 00:43:34.344631: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149327988f00 of size 19041792 next 2026
2024-01-18 00:43:34.344633: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149328bb1d00 of size 19041792 next 2027
2024-01-18 00:43:34.344635: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149329ddab00 of size 19041792 next 2028
2024-01-18 00:43:34.344636: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14932b003900 of size 19041792 next 2029
2024-01-18 00:43:34.344638: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14932c22c700 of size 19041792 next 2030
2024-01-18 00:43:34.344639: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14932d455500 of size 19041792 next 2031
2024-01-18 00:43:34.344641: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14932e67e300 of size 19041792 next 2032
2024-01-18 00:43:34.344642: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14932f8a7100 of size 19041792 next 2033
2024-01-18 00:43:34.344644: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149330acff00 of size 19041792 next 2034
2024-01-18 00:43:34.344646: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149331cf8d00 of size 19041792 next 2035
2024-01-18 00:43:34.344647: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149332f21b00 of size 19041792 next 2036
2024-01-18 00:43:34.344649: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14933414a900 of size 19041792 next 2037
2024-01-18 00:43:34.344650: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149335373700 of size 19041792 next 2038
2024-01-18 00:43:34.344652: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14933659c500 of size 19041792 next 2039
2024-01-18 00:43:34.344653: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493377c5300 of size 19041792 next 2040
2024-01-18 00:43:34.344655: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493389ee100 of size 19041792 next 2041
2024-01-18 00:43:34.344656: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149339c16f00 of size 19041792 next 2042
2024-01-18 00:43:34.344658: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14933ae3fd00 of size 19041792 next 2043
2024-01-18 00:43:34.344660: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14933c068b00 of size 19041792 next 2044
2024-01-18 00:43:34.344661: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14933d291900 of size 19041792 next 2045
2024-01-18 00:43:34.344663: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14933e4ba700 of size 19041792 next 2046
2024-01-18 00:43:34.344664: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14933f6e3500 of size 19041792 next 2047
2024-01-18 00:43:34.344666: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14934090c300 of size 19041792 next 2048
2024-01-18 00:43:34.344667: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149341b35100 of size 19041792 next 2049
2024-01-18 00:43:34.344669: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149342d5df00 of size 19041792 next 2050
2024-01-18 00:43:34.344671: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149343f86d00 of size 19041792 next 2051
2024-01-18 00:43:34.344672: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493451afb00 of size 19041792 next 2052
2024-01-18 00:43:34.344674: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493463d8900 of size 19041792 next 2053
2024-01-18 00:43:34.344675: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149347601700 of size 19041792 next 2054
2024-01-18 00:43:34.344677: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14934882a500 of size 19041792 next 2055
2024-01-18 00:43:34.344678: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149349a53300 of size 19041792 next 2056
2024-01-18 00:43:34.344680: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14934ac7c100 of size 19041792 next 2057
2024-01-18 00:43:34.344681: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14934bea4f00 of size 19041792 next 2058
2024-01-18 00:43:34.344683: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14934d0cdd00 of size 19041792 next 2059
2024-01-18 00:43:34.344685: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14934e2f6b00 of size 19041792 next 2060
2024-01-18 00:43:34.344686: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14934f51f900 of size 19041792 next 2061
2024-01-18 00:43:34.344688: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149350748700 of size 19041792 next 2062
2024-01-18 00:43:34.344689: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149351971500 of size 19041792 next 2063
2024-01-18 00:43:34.344691: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149352b9a300 of size 19041792 next 2064
2024-01-18 00:43:34.344692: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149353dc3100 of size 19041792 next 2065
2024-01-18 00:43:34.344694: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149354febf00 of size 19041792 next 2066
2024-01-18 00:43:34.344695: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149356214d00 of size 19041792 next 2067
2024-01-18 00:43:34.344697: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14935743db00 of size 19041792 next 2068
2024-01-18 00:43:34.344698: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149358666900 of size 19041792 next 2069
2024-01-18 00:43:34.344700: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14935988f700 of size 19041792 next 2070
2024-01-18 00:43:34.344702: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14935aab8500 of size 19041792 next 2071
2024-01-18 00:43:34.344703: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14935bce1300 of size 19041792 next 2072
2024-01-18 00:43:34.344705: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14935cf0a100 of size 19041792 next 2073
2024-01-18 00:43:34.344706: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14935e132f00 of size 19041792 next 2074
2024-01-18 00:43:34.344708: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14935f35bd00 of size 19041792 next 2075
2024-01-18 00:43:34.344709: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149360584b00 of size 19041792 next 2076
2024-01-18 00:43:34.344711: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493617ad900 of size 19041792 next 2077
2024-01-18 00:43:34.344712: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493629d6700 of size 19041792 next 2078
2024-01-18 00:43:34.344714: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149363bff500 of size 19041792 next 2079
2024-01-18 00:43:34.344715: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149364e28300 of size 19041792 next 2080
2024-01-18 00:43:34.344717: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149366051100 of size 19041792 next 2081
2024-01-18 00:43:34.344718: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149367279f00 of size 19041792 next 2082
2024-01-18 00:43:34.344720: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493684a2d00 of size 19041792 next 2083
2024-01-18 00:43:34.344722: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493696cbb00 of size 19041792 next 2084
2024-01-18 00:43:34.344723: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14936a8f4900 of size 19041792 next 2085
2024-01-18 00:43:34.344725: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14936bb1d700 of size 19041792 next 2086
2024-01-18 00:43:34.344726: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14936cd46500 of size 19041792 next 2087
2024-01-18 00:43:34.344728: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14936df6f300 of size 19041792 next 2088
2024-01-18 00:43:34.344729: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14936f198100 of size 19041792 next 2089
2024-01-18 00:43:34.344731: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493703c0f00 of size 19041792 next 2090
2024-01-18 00:43:34.344732: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493715e9d00 of size 19041792 next 2091
2024-01-18 00:43:34.344734: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149372812b00 of size 19041792 next 2092
2024-01-18 00:43:34.344735: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149373a3b900 of size 19041792 next 2093
2024-01-18 00:43:34.344737: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149374c64700 of size 19041792 next 2094
2024-01-18 00:43:34.344739: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149375e8d500 of size 19041792 next 2095
2024-01-18 00:43:34.344740: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493770b6300 of size 19041792 next 2096
2024-01-18 00:43:34.344742: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493782df100 of size 19041792 next 2097
2024-01-18 00:43:34.344743: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149379507f00 of size 19041792 next 2104
2024-01-18 00:43:34.344745: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14937a730d00 of size 19041792 next 2105
2024-01-18 00:43:34.344747: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14937b959b00 of size 19041792 next 2106
2024-01-18 00:43:34.344748: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14937cb82900 of size 19041792 next 2107
2024-01-18 00:43:34.344750: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14937ddab700 of size 19041792 next 2108
2024-01-18 00:43:34.344751: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14937efd4500 of size 19041792 next 2109
2024-01-18 00:43:34.344753: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 1493801fd300 of size 19041792 next 2110
2024-01-18 00:43:34.344754: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 149381426100 of size 19041792 next 2111
2024-01-18 00:43:34.344756: I tensorflow/tsl/framework/bfc_allocator.cc:1095] InUse at 14938264ef00 of size 286331136 next 18446744073709551615
2024-01-18 00:43:34.344760: I tensorflow/tsl/framework/bfc_allocator.cc:1100]      Summary of in-use Chunks by size: 
2024-01-18 00:43:34.344763: I tensorflow/tsl/framework/bfc_allocator.cc:1103] 7 Chunks of size 256 totalling 1.8KiB
2024-01-18 00:43:34.344765: I tensorflow/tsl/framework/bfc_allocator.cc:1103] 1 Chunks of size 1280 totalling 1.2KiB
2024-01-18 00:43:34.344767: I tensorflow/tsl/framework/bfc_allocator.cc:1103] 1 Chunks of size 7168 totalling 7.0KiB
2024-01-18 00:43:34.344769: I tensorflow/tsl/framework/bfc_allocator.cc:1103] 1 Chunks of size 49664 totalling 48.5KiB
2024-01-18 00:43:34.344773: I tensorflow/tsl/framework/bfc_allocator.cc:1103] 1 Chunks of size 5765120 totalling 5.50MiB
2024-01-18 00:43:34.344775: I tensorflow/tsl/framework/bfc_allocator.cc:1103] 2084 Chunks of size 19041792 totalling 36.96GiB
2024-01-18 00:43:34.344777: I tensorflow/tsl/framework/bfc_allocator.cc:1103] 1 Chunks of size 46119424 totalling 43.98MiB
2024-01-18 00:43:34.344779: I tensorflow/tsl/framework/bfc_allocator.cc:1103] 1 Chunks of size 286331136 totalling 273.07MiB
2024-01-18 00:43:34.344781: I tensorflow/tsl/framework/bfc_allocator.cc:1107] Sum Total of in-use chunks: 37.27GiB
2024-01-18 00:43:34.344783: I tensorflow/tsl/framework/bfc_allocator.cc:1109] Total bytes in pool: 40021393408 memory_limit_: 40021393408 available bytes: 0 curr_region_allocation_bytes_: 80042786816
2024-01-18 00:43:34.344790: I tensorflow/tsl/framework/bfc_allocator.cc:1114] Stats: 
Limit:                     40021393408
InUse:                     40021370112
MaxInUse:                  40021370112
NumAllocs:                      120936
MaxAllocSize:                286331136
Reserved:                            0
PeakReserved:                        0
LargestFreeBlock:                    0

2024-01-18 00:43:34.344811: W tensorflow/tsl/framework/bfc_allocator.cc:497] ****************************************************************************************************
2024-01-18 00:43:34.344830: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at transpose_op.cc:183 : RESOURCE_EXHAUSTED: OOM when allocating tensor with shape[896,8,5313] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>200 iterations: 47.01733132800291 seconds
400 iterations: 88.90143480299957 seconds
600 iterations: 129.76665228099955 seconds
800 iterations: 172.2306377370005 seconds
1000 iterations: 216.09265120500277 seconds
1200 iterations: 259.2315747570028 seconds
1400 iterations: 302.6479036160017 seconds
1600 iterations: 350.47071519699966 seconds
1800 iterations: 395.40081796199956 seconds
2000 iterations: 436.0582850840001 seconds</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>ResourceExhaustedError: {{function_node __wrapped__Transpose_device_/job:localhost/replica:0/task:0/device:GPU:0}} OOM when allocating tensor with shape[896,8,5313] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc [Op:Transpose]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_epigenome(gene, start, end, prob):</span>
<span id="cb20-2">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>].values)</span>
<span id="cb20-3">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant(prob.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>]).values)</span>
<span id="cb20-4">    bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.linspace(start, end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>)</span>
<span id="cb20-5">    pr_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.expand_dims(interpolate(x, bins, y), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(reference_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb20-7">        matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span>
<span id="cb20-8">    ref_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.transpose(matrix, perm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb20-9">    pr_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.cast(pr_tensor, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.float16)</span>
<span id="cb20-10">    ref_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.cast(ref_tensor, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.float16)</span>
<span id="cb20-11">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.squeeze(tf.matmul(pr_tensor, ref_tensor), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb20-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_predictions(prob, gene_annot):</span>
<span id="cb20-14">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb20-15">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb20-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_annot.iterrows():</span>
<span id="cb20-17">        gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>]</span>
<span id="cb20-18">        tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb20-19">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb20-20">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb20-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> prob.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> prob.iloc[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb20-22">            output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_epigenome(gene, start, end, prob)</span>
<span id="cb20-23">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process genotype probabilities</span></span>
<span id="cb20-24">            predictions[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output</span>
<span id="cb20-25">            end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb20-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb20-27">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations:"</span>, end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds"</span>)</span>
<span id="cb20-28">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb20-29">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># free up memory</span></span>
<span id="cb20-30">                    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb20-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr1_probabilities.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb21-2">    output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(project_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0007899884'</span>)</span>
<span id="cb21-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.isdir(output_dir):</span>
<span id="cb21-4">        os.makedirs(output_dir)</span>
<span id="cb21-5">    prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'000789FF64'</span>][:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb21-6">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_predictions(prob, genes_df)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2024-01-18 00:52:23.838247: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 38167 MB memory:  -&gt; device: 0, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:07:00.0, compute capability: 8.0
2024-01-18 00:52:23.839500: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 38167 MB memory:  -&gt; device: 1, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:46:00.0, compute capability: 8.0
2024-01-18 00:52:23.840547: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:2 with 38167 MB memory:  -&gt; device: 2, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:85:00.0, compute capability: 8.0
2024-01-18 00:52:23.841603: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1635] Created device /job:localhost/replica:0/task:0/device:GPU:3 with 38167 MB memory:  -&gt; device: 3, name: NVIDIA A100-SXM4-40GB, pci bus id: 0000:c7:00.0, compute capability: 8.0</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>200 iterations: 47.26202517999991 seconds
400 iterations: 88.73585744500087 seconds
600 iterations: 132.8569780329999 seconds
800 iterations: 180.7470046210001 seconds
1000 iterations: 228.1653065870014 seconds
1200 iterations: 271.74169106200134 seconds
1400 iterations: 318.2701013930018 seconds
1600 iterations: 365.416816363002 seconds
1800 iterations: 408.23091432 seconds
2000 iterations: 456.0066568750008 seconds
2200 iterations: 500.70750081000006 seconds
2400 iterations: 544.8922489830002 seconds
2600 iterations: 592.1257908199987 seconds
2800 iterations: 637.4825293079994 seconds
3000 iterations: 684.2177478490012 seconds</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-31-scaling-up-Br-epigenome-predictions/index.html</guid>
  <pubDate>Wed, 03 Jan 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Organizing founder haplotype probabilities to h5 database</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-01-qtl2-probabilities-to-h5-database/index.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd </span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5">probabilities_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/Br_genotype_probabilities'</span></span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-02-Br-personalized-prediction-additional-genes/metadata/individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-7">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to read CSV files and create tables in SQLite database</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_db(N):</span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to SQLite database</span></span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.h5'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb2-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb2-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hf.keys():</span>
<span id="cb2-7">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb2-8">            prob_csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.csv'</span>)</span>
<span id="cb2-9">            df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(prob_csv, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-10">            positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) </span>
<span id="cb2-11">            df.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, positions)</span>
<span id="cb2-12">            hf[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df</span>
<span id="cb2-13"></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> N <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>):</span>
<span id="cb3-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chromosome"</span>, N)</span>
<span id="cb3-3">    create_db(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(N))</span></code></pre></div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2024-01-01-qtl2-probabilities-to-h5-database/index.html</guid>
  <pubDate>Mon, 01 Jan 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>EpigenomeXcan Test</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-21-test-Br-epigenome-predictions/test.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2024-01-02 01:28:35.841177: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE3 SSE4.1 SSE4.2 AVX AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-01-02 01:28:39.354976: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSRNOG00000070168"</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr1"</span></span>
<span id="cb3-3">tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">157231467</span></span>
<span id="cb3-4">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb3-5">end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57344</span></span>
<span id="cb3-6">sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"00078A02B6"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> query(cursor, sample, start, end):</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute SQL query</span></span>
<span id="cb4-4">    cursor.execute(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'SELECT * FROM `</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">` WHERE POS BETWEEN </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> AND </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch all rows</span></span>
<span id="cb4-6">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.fetchall()</span>
<span id="cb4-7">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>columns)</span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> df</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/home/s1mi/Br_genotype_probabilities/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.db"</span>)</span>
<span id="cb5-2">cursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb5-3">prob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query(cursor, sample, start, end)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">pr_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prob.mean()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb6-2">pr_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.tile(pr_mean, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">896</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb6-3">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (prob[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb6-4">pr_matrix[indices, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prob.iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].values</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pr_matrix.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(896, 8)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes/human/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb9-2">    matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[gene][:]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">ref_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(matrix, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">res_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(pr_matrix[:, np.newaxis,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ref_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-21-test-Br-epigenome-predictions/test.html</guid>
  <pubDate>Wed, 27 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Plotting haplotype transitions by gene interval</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/gene_interval_plots.html</link>
  <description><![CDATA[ 




<div class="cell" data-hash="gene_interval_plots_cache/html/libraries_855b786838f56081626540e59c3e37b4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
</div>
<div class="cell" data-hash="gene_interval_plots_cache/html/calc_genoprob to df function_8439cc331fa4a92f6b5394ab28693a71">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">reshape_genoprob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(sample, prob) {</span>
<span id="cb5-2">  sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][sample, , ]))</span>
<span id="cb5-3">  snps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(sample_prob), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(snps) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chrom"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pos"</span>)</span>
<span id="cb5-5">  sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(sample_prob, snps)</span>
<span id="cb5-6">  sample_prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(sample_prob<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pos)</span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(sample_prob)</span>
<span id="cb5-8">}</span></code></pre></div>
</div>
<div class="cell" data-hash="gene_interval_plots_cache/html/gene annot_ac5d6bfe0a0e5620fad29e1bbf190d09">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">intervals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/metadata/intervals.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb6-2">genes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/Br_expressed_genes.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb6-3">split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(intervals<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>V1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb6-4">genes_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">genes =</span> genes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>V1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chrom =</span> split[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tss =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(split[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span></code></pre></div>
</div>
<div class="cell" data-hash="gene_interval_plots_cache/html/unnamed-chunk-1_82b85e205297cc4af9b57edacb6dc2a2">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">filtered_genes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(genes_df, chrom <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr20'</span>)</span>
<span id="cb7-2">prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/qtl2-outputs/chr20-qtl2-outputs/batch0_prob.rds"</span>)</span>
<span id="cb7-3">sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reshape_genoprob</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"000789972A"</span>, prob)</span>
<span id="cb7-4">grouped_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>()</span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(filtered_genes)) {</span>
<span id="cb7-6">  gene <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_genes[i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genes"</span>]</span>
<span id="cb7-7">  chrom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_genes[i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chrom"</span>]</span>
<span id="cb7-8">  tss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_genes[i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tss"</span>]</span>
<span id="cb7-9">  </span>
<span id="cb7-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for matching 'chrom' and 'pos' in sample_prob</span></span>
<span id="cb7-11">  filtered_snps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sample_prob <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">between</span>(pos, tss<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-28672</span>, tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28672</span>))</span>
<span id="cb7-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If a match is found, add a 'gene' column and append to grouped_df</span></span>
<span id="cb7-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(filtered_snps) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb7-14">    filtered_snps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>gene <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gene</span>
<span id="cb7-15">    grouped_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(grouped_df, filtered_snps)</span>
<span id="cb7-16">  }</span>
<span id="cb7-17">}</span></code></pre></div>
</div>
<div class="cell" data-hash="gene_interval_plots_cache/html/unnamed-chunk-2_293adbdca64c7486e1ddeced7c611cda">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot_df &lt;- pivot_longer(grouped_df, cols = -c(chrom, pos, gene), names_to = "Strain", values_to = "prob")</span></span>
<span id="cb8-2">plot_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"000789972A_gene_probs.rds"</span>)</span></code></pre></div>
</div>
<div class="cell" data-hash="gene_interval_plots_cache/html/unnamed-chunk-3_1986b35d4ef7ea29c504874e86080dd4">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">sampled_genes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> plot_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>gene <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb9-2">sampled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> plot_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(gene <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> sampled_genes)</span>
<span id="cb9-4">plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(sampled_data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> pos, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> prob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> Strain)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> gene, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group by 'gene' with 2 columns</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qual"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_discrete</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust x-axis</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust y-axis</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Genes"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimated Proportion"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"000789972A: 25 genes sampled from chr20"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb9-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotate x-axis labels</span></span>
<span id="cb9-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb9-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb9-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span></span>
<span id="cb9-19">  ) </span>
<span id="cb9-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(plot)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/gene_interval_plots_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"000789972A_genes.png"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> plot, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span></code></pre></div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/gene_interval_plots.html</guid>
  <pubDate>Thu, 14 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Plotting Br Rats’ Haplotype Distributions</title>
  <dc:creator>Sabrina Mi, Dan Munro</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index.html</link>
  <description><![CDATA[ 




<div class="cell" data-hash="index_cache/html/libraries_22bb44a289b2f55c57889e4dec72c44a">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/calc_genoprob to df function_7163612ce7af857ca69e441c8c99b402">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">reshape_genoprob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(sample, prob) {</span>
<span id="cb2-2">  sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][sample, , ]))</span>
<span id="cb2-3">  snps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(sample_prob), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(snps) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chrom"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pos"</span>)</span>
<span id="cb2-5">  sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(sample_prob, snps)</span>
<span id="cb2-6">  plot_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(sample_prob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(chrom, pos), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strain"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prob"</span>)</span>
<span id="cb2-7">  plot_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(plot_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pos)</span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(plot_df)</span>
<span id="cb2-9">}</span></code></pre></div>
</div>
<section id="samples-plots" class="level3">
<h3 class="anchored" data-anchor-id="samples-plots">Samples Plots</h3>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_d6ca36b0eb38fc076848616681ebb2cf">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb3-2">chr20_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/chr20-qtl2-outputs/batch0_prob.rds"</span>)</span>
<span id="cb3-3">chr19_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/chr19-qtl2-outputs/batch0_prob.rds"</span>)</span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (sample <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(chr19_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) {</span>
<span id="cb3-5">  chr20_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reshape_genoprob</span>(sample, chr20_prob)</span>
<span id="cb3-6">  chr19_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reshape_genoprob</span>(sample, chr19_prob)</span>
<span id="cb3-7">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(chr19_df, chr20_df)</span>
<span id="cb3-8">  plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> pos, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> prob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> Strain)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> chrom, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qual"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Position (Mb)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimated Proportion"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Br Sample: "</span>, sample)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb3-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb3-19">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-21">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-22">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.line.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>),</span>
<span id="cb3-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.border =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-25">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>,</span>
<span id="cb3-26">    )</span>
<span id="cb3-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(plot)</span>
<span id="cb3-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(sample,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> plot, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb3-29">}</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.
ℹ Please use the `linewidth` argument instead.</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index_files/figure-html/unnamed-chunk-1-2.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index.html</guid>
  <pubDate>Wed, 13 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Concatenating HS Founder Epigenomes</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-07-concatenating-HS-reference-epigenomes/index.html</link>
  <description><![CDATA[ 




<section id="initialize-gene-interval-mapping" class="level2">
<h2 class="anchored" data-anchor-id="initialize-gene-interval-mapping">Initialize Gene-Interval Mapping</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/Br_expressed_genes.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-3">    gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/metadata/intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-5">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-6">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>: gene_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"interval"</span>: intervals})</span>
<span id="cb2-7">mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span></code></pre></div>
</div>
</section>
<section id="concatenate-by-chromosome" class="level2">
<h2 class="anchored" data-anchor-id="concatenate-by-chromosome">Concatenate by Chromosome</h2>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/predictions_folder/HS_founders_genome_wide/predictions_2023-11-27/enformer_predictions"</span></span>
<span id="cb3-2">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes"</span></span>
<span id="cb3-3">gene_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>).to_dict()</span>
<span id="cb3-4">founders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ACI'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BUF'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F344'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M520'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WKY'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WN'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> concatenate_predictions(N, completed_genes):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_dict[N]: </span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> completed_genes:</span>
<span id="cb4-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span>  </span>
<span id="cb4-5">        interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].item()</span>
<span id="cb4-6">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>: [], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>: []}</span>
<span id="cb4-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> founders:</span>
<span id="cb4-8">            input_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype0"</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb4-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(input_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb4-10">                predictions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>][:])</span>
<span id="cb4-11">                predictions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>][:])       </span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(output_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output:</span>
<span id="cb4-13">            output[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(predictions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>])</span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(output_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output:</span>
<span id="cb4-15">            output[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(predictions[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>])</span>
<span id="cb4-16">        completed_genes.append(gene)</span></code></pre></div>
</div>
<p>Writing to a single file case.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> concatenate_model(N, model):</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(output_dir, model, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output:  </span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_dict[N]: </span>
<span id="cb5-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output.keys():</span>
<span id="cb5-5">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span>  </span>
<span id="cb5-6">            interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].item()</span>
<span id="cb5-7">            predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> founders:</span>
<span id="cb5-9">                input_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype0"</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb5-10">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(input_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb5-11">                    predictions.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[model][:])</span>
<span id="cb5-12">            output[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(predictions)    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(output_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human"</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr20_genes.h5"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output:  </span>
<span id="cb6-2">    completed_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(output.keys())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> N <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>):</span>
<span id="cb7-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome"</span>, N)</span>
<span id="cb7-3">    concatenate_model(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(N), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mouse"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>chromosome 1
chromosome 2
chromosome 3
chromosome 4
chromosome 5
chromosome 6
chromosome 7
chromosome 8
chromosome 9
chromosome 10
chromosome 11
chromosome 12
chromosome 13
chromosome 14
chromosome 15
chromosome 16
chromosome 17
chromosome 18
chromosome 19
chromosome 20</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-07-concatenating-HS-reference-epigenomes/index.html</guid>
  <pubDate>Wed, 06 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Organizing founder haplotype probabilities into SQLite database</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-06-qtl2-probabilites-to-sqlite-database/index.html</link>
  <description><![CDATA[ 




<p>We want to store the qtl2 outputs in a database that is easily queryable by sample ID and genomic region.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5">probabilities_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/Br_genotype_probabilities'</span></span>
<span id="cb1-6">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [d <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(probabilities_dir) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.isdir(os.path.join(probabilities_dir, d))]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to read CSV files and create tables in SQLite database</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_sqlite_db(N):</span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to SQLite database</span></span>
<span id="cb2-4">    conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.db'</span>))</span>
<span id="cb2-5">    </span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb2-7">        check_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SELECT name FROM sqlite_master WHERE type='table' AND name='</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>individual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">';"</span></span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the result of the query into a DataFrame</span></span>
<span id="cb2-9">        existing_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(check_query, conn)</span>
<span id="cb2-10"></span>
<span id="cb2-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the table doesn't exist, create table</span></span>
<span id="cb2-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> existing_table.empty:</span>
<span id="cb2-13">            prob_csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.csv'</span>)</span>
<span id="cb2-14">            df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(prob_csv, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-15">            positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) </span>
<span id="cb2-16">            df.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, positions)</span>
<span id="cb2-17">            df.to_sql(individual, conn, if_exists<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'replace'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commit changes and close connection</span></span>
<span id="cb2-19">    conn.commit()</span>
<span id="cb2-20">    conn.close()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> N <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb3-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Working on chromosome"</span>, N)</span>
<span id="cb3-3">    create_sqlite_db(N)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Working on chromosome 14
Working on chromosome 15
Working on chromosome 16
Working on chromosome 17
Working on chromosome 18
Working on chromosome 19</code></pre>
</div>
</div>
<section id="preview-database" class="level2">
<h2 class="anchored" data-anchor-id="preview-database">Preview Database</h2>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to the SQLite database</span></span>
<span id="cb5-2">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/eagle/AIHPC4Edu/sabrina/Br_genotype_probabilities/chr20_probabilities.db'</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a cursor object</span></span>
<span id="cb5-5">cursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb5-6"></span>
<span id="cb5-7">query_tables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT name FROM sqlite_master WHERE type='table';"</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute the query to get table names</span></span>
<span id="cb5-10">cursor.execute(query_tables)</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch all table names</span></span>
<span id="cb5-13">tables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.fetchall()</span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through tables and print their data</span></span>
<span id="cb5-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> table <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tables[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb5-17">    table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Table: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-19">    </span>
<span id="cb5-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Query to fetch all data from the table</span></span>
<span id="cb5-21">    query_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SELECT * FROM `</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">` LIMIT 3;"</span></span>
<span id="cb5-22">    cursor.execute(query_data)</span>
<span id="cb5-23">    </span>
<span id="cb5-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch all data from the table</span></span>
<span id="cb5-25">    table_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.fetchall()</span>
<span id="cb5-26">    </span>
<span id="cb5-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the table's data</span></span>
<span id="cb5-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> table_data:</span>
<span id="cb5-29">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb5-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the database connection</span></span>
<span id="cb5-31">conn.close()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table: 00078A02B6
(3201, 0.499262964281572, 1.88520490019066e-06, 0.162477747051664, 0.0129312367910615, 0.162477747062661, 0.162477747068122, 1.88520490019106e-06, 0.0003687873347151)
(7226, 0.499997674934029, 4.75965339555511e-08, 0.162469115322473, 0.0125925304011694, 0.162469115333482, 0.162469115338949, 4.75965339555847e-08, 2.35347571803293e-06)
(7266, 0.499999935708622, 3.16496421849708e-08, 0.162469769268664, 0.0125905455363656, 0.162469769279672, 0.162469769285139, 3.16496421849787e-08, 1.47622298115919e-07)
Table: 00078A16DB
(3201, 0.499262964281493, 1.88520490019009e-06, 0.162477747051738, 0.0129312367910557, 0.16247774706207, 0.162477747068565, 1.88520490019092e-06, 0.0003687873347151)
(7226, 0.499997674934177, 4.75965339555652e-08, 0.162469115322621, 0.0125925304011694, 0.162469115332964, 0.162469115339466, 4.75965339555987e-08, 2.35347571803365e-06)
(7266, 0.499999935708543, 3.16496421849658e-08, 0.162469769268737, 0.0125905455363599, 0.162469769279081, 0.162469769285583, 3.16496421849737e-08, 1.47622298115918e-07)
Table: 000789FF72
(3201, 0.0003664564160026, 1.85213961479645e-06, 0.324211104988895, 0.0254914257674219, 0.325349456441836, 0.324211105067843, 1.85213961479693e-06, 0.0003667470385653)
(7226, 2.21861272689951e-08, 1.60772193495428e-10, 0.324559451115323, 0.0251804466288168, 0.325700315103997, 0.324559451194463, 1.60772193495378e-10, 3.13450143706256e-07)
(7266, 9.90597147195846e-12, 1.42360488857325e-13, 0.324560774755233, 0.0251764992806042, 0.325701658830483, 0.324560774834422, 1.4236048885734499e-13, 2.92289221332857e-07)
Table: 0007929C19
(3201, 0.0003664564160031, 1.85213961479936e-06, 0.179968257973192, 0.459358312378058, 0.179968263935356, 0.179968257979997, 1.85213961479891e-06, 0.000366747038566)
(7226, 2.21861272690162e-08, 1.60772193495526e-10, 0.179998235542256, 0.460004951434442, 0.179998241517562, 0.179998235549009, 1.60772193495612e-10, 3.13450143706583e-07)
(7266, 9.905971471970129e-12, 1.42360488857486e-13, 0.179997013978896, 0.460008659782977, 0.179997019954297, 0.179997013985643, 1.42360488857615e-13, 2.92289221333234e-07)
Table: 000789FF64
(3201, 0.499262964281413, 1.88520490018993e-06, 0.162477747051369, 0.0129312367910499, 0.162477747062366, 0.162477747068565, 1.88520490019076e-06, 0.0003687873347151)
(7226, 0.499997674934097, 4.75965339555576e-08, 0.162469115322252, 0.0125925304011637, 0.16246911533326, 0.162469115339466, 4.75965339555912e-08, 2.35347571803323e-06)
(7266, 0.49999993570869, 3.16496421849751e-08, 0.162469769268442, 0.0125905455363599, 0.16246976927945, 0.162469769285657, 3.1649642184983e-08, 1.47622298115919e-07)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr20'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7230</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7230</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span>
<span id="cb7-2">probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]:</span>
<span id="cb7-4">    db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.db"</span>)</span>
<span id="cb7-5">    conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(db)</span>
<span id="cb7-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a cursor object</span></span>
<span id="cb7-7">    cursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb7-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameterized query to select rows within the specified interval for the 'POS' column</span></span>
<span id="cb7-9">    query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SELECT * FROM `</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">` WHERE POS BETWEEN </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> AND </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">;"</span></span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute the query with the interval bounds as parameters</span></span>
<span id="cb7-11">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(query, conn)</span>
<span id="cb7-12">    probabilities[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df</span>
<span id="cb7-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(probabilities)</span>
<span id="cb7-14">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'00078A02B6':     POS       ACI            BN       BUF      F344      M520        MR  \
0  7226  0.499998  4.759653e-08  0.162469  0.012593  0.162469  0.162469   
1  7266  0.500000  3.164964e-08  0.162470  0.012591  0.162470  0.162470   
2  7269  0.500000  3.039399e-08  0.162470  0.012590  0.162470  0.162470   
3  7341  0.500000  2.313504e-09  0.162471  0.012587  0.162471  0.162471   
4  7581  0.500000  2.433167e-09  0.162475  0.012575  0.162475  0.162475   

            WKY            WN  
0  4.759653e-08  2.353476e-06  
1  3.164964e-08  1.476223e-07  
2  3.039399e-08  1.459054e-07  
3  2.313504e-09  1.265991e-07  
4  2.433167e-09  6.040197e-08  , '00078A16DB':     POS       ACI            BN       BUF      F344      M520        MR  \
0  7226  0.499998  4.759653e-08  0.162469  0.012593  0.162469  0.162469   
1  7266  0.500000  3.164964e-08  0.162470  0.012591  0.162470  0.162470   
2  7269  0.500000  3.039399e-08  0.162470  0.012590  0.162470  0.162470   
3  7341  0.500000  2.313504e-09  0.162471  0.012587  0.162471  0.162471   
4  7581  0.500000  2.433167e-09  0.162475  0.012575  0.162475  0.162475   

            WKY            WN  
0  4.759653e-08  2.353476e-06  
1  3.164964e-08  1.476223e-07  
2  3.039399e-08  1.459054e-07  
3  2.313504e-09  1.265991e-07  
4  2.433167e-09  6.040197e-08  , '000789FF72':     POS       ACI            BN       BUF      F344      M520        MR  \
0  7226  0.499998  4.759653e-08  0.162469  0.012593  0.162469  0.162469   
1  7266  0.500000  3.164964e-08  0.162470  0.012591  0.162470  0.162470   
2  7269  0.500000  3.039399e-08  0.162470  0.012590  0.162470  0.162470   
3  7341  0.500000  2.313504e-09  0.162471  0.012587  0.162471  0.162471   
4  7581  0.500000  2.433167e-09  0.162475  0.012575  0.162475  0.162475   

            WKY            WN  
0  4.759653e-08  2.353476e-06  
1  3.164964e-08  1.476223e-07  
2  3.039399e-08  1.459054e-07  
3  2.313504e-09  1.265991e-07  
4  2.433167e-09  6.040197e-08  }</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-06-qtl2-probabilites-to-sqlite-database/index.html</guid>
  <pubDate>Wed, 06 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Den’s haplotypes for 88 outbred rats</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-01-Den-outbred-rats-haplotypes/index.html</link>
  <description><![CDATA[ 




<p>Den’s files are all on TSCC:</p>
<ol type="1">
<li>Run qtl2-founder-haps: <code>/projects/ps-palmer/DenghuiChen/1U01DA051234/HS/eQTL/haplotypes_BiSNPs/code/run_qtl2_HaoChen.sh</code></li>
<li>Founder pair haplotypes: <code>/projects/ps-palmer/DenghuiChen/1U01DA051234/HS/eQTL/haplotypes_BiSNPs/qtl2_out/chr*_haplotype.parquet.gz</code></li>
<li>Single founder dosage: <code>/projects/ps-palmer/DenghuiChen/1U01DA051234/HS/eQTL/haplotypes_BiSNPs/qtl2_out/chr*_haplotype_collapsed.parquet.gz</code></li>
</ol>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyarrow.parquet <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pq</span>
<span id="cb1-2">haplo_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/outbred_rats_qtl2_outputs'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">founder_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pq.read_table(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>haplo_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/chr20_haplotype.parquet.gz'</span>)</span>
<span id="cb2-2">single_founder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pq.read_table(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>haplo_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/chr20_haplotype_collapsed.parquet.gz'</span>)</span></code></pre></div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-01-Den-outbred-rats-haplotypes/index.html</guid>
  <pubDate>Fri, 01 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Processing qtl2-founder-haps probabilies</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-26-qtl2-probabilities-to-csv/index.html</link>
  <description><![CDATA[ 




<p>I eventually want to organize these probabilities indexed by position in an h5 file, so that given a genomic region, for each individual, we can query probabilities at all snps in the interval. But for now, I just combine the .rds outputs into csvs for each individual, with snp IDs as row names and the 8 founder rats as the columns.</p>
<p>I created a new folder <code>/home/s1mi/Br_genotype_probabilities</code> with subdirectories for each chromosome to store csvs for each individual.</p>
<section id="concatenate-probabilites-by-chromosome" class="level2">
<h2 class="anchored" data-anchor-id="concatenate-probabilites-by-chromosome">Concatenate Probabilites by Chromosome</h2>
<div class="cell" data-hash="index_cache/html/global variables_3388f019ced2a8f039da434304fbde4f">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">qtl2_output_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/qtl2-outputs/"</span></span>
<span id="cb1-2">batch_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-3">n_batches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span></span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/functions_f5ce2b0bf17a6fa54fcaf88c64657fbe">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&amp;%"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a,b) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(a,b,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-2">split_by_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(chromosome) {</span>
<span id="cb2-3">  chr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(chromosome)</span>
<span id="cb2-4">  prob_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> qtl2_output_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-qtl2-outputs/"</span></span>
<span id="cb2-5">  output_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Br_genotype_probabilities/"</span></span>
<span id="cb2-6">  batches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(prob_dir)</span>
<span id="cb2-7"></span>
<span id="cb2-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (file <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> batches) {</span>
<span id="cb2-9">    pr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(prob_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> file)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb2-10">    samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(pr)</span>
<span id="cb2-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (sample <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples) {</span>
<span id="cb2-12">      sample_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> output_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> sample</span>
<span id="cb2-13">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(sample_dir)) {</span>
<span id="cb2-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(sample_dir)</span>
<span id="cb2-15">      }</span>
<span id="cb2-16">      csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> sample_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/chr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_probabilities.csv"</span></span>
<span id="cb2-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(csv)) {</span>
<span id="cb2-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(pr[sample, ,]), csv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quote=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-19">      }</span>
<span id="cb2-20">    }</span>
<span id="cb2-21">  }</span>
<span id="cb2-22">}</span></code></pre></div>
</div>
</section>
<section id="write-csvs" class="level2">
<h2 class="anchored" data-anchor-id="write-csvs">Write CSVs</h2>
<div class="cell" data-hash="index_cache/html/run_edbad592ddbd8208d6a58794812e013a">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chromosome:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>((i)))</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_by_sample</span>(i)</span>
<span id="cb3-4">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chromosome: 1Chromosome: 2Chromosome: 3Chromosome: 4Chromosome: 5Chromosome: 6Chromosome: 7Chromosome: 8Chromosome: 9Chromosome: 10Chromosome: 11Chromosome: 12Chromosome: 13Chromosome: 14Chromosome: 15Chromosome: 16Chromosome: 17Chromosome: 18Chromosome: 19Chromosome: 20</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-26-qtl2-probabilities-to-csv/index.html</guid>
  <pubDate>Sun, 26 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Br rat haplotype probabilities from HS founders by chromosome</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/index.html</link>
  <description><![CDATA[ 




<section id="prepare-chromosome-inputs" class="level3">
<h3 class="anchored" data-anchor-id="prepare-chromosome-inputs">Prepare Chromosome Inputs</h3>
<p>We first generate chromosome-wide input files with Dan’s original make_qtl2_inputs function locally, because I’m having so much trouble creating a conda environment with both R and python’s pysam libraries on polaris.</p>
<pre><code>conda activate genomics
cd Github/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array
GENO_DIR=/Users/sabrinami/Desktop/Sabrina/2022-23/tutorials/enformer_pipeline_test/rn7_data
DATA_DIR=/Users/sabrinami/Desktop/qtl2_data
for CHR in {1..20}
do
    python make_qtl2_inputs.py $GENO_DIR/BrainVCFs/chr${CHR}.vcf.gz $GENO_DIR/FounderVCFs/chr${CHR}.vcf.gz --working-dir $DATA_DIR/chr${CHR}-qtl2-founder-haps --gmap-dir $DATA_DIR/genetic_map
done

scp -r $DATA_DIR/chr*-qtl2-founder-haps polaris:qtl2-data</code></pre>
<p><a href="https://github.com/hakyimlab/sabrina-deep-learning-in-genomics/blob/main/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/run_qtl2_batches.py"><code>run_qtl2_batches.py</code></a> splits genotype inputs for a given chromsome into batches of 10 samples. I passed in chromosome number as a variables when I submitted <a href="https://github.com/hakyimlab/sabrina-deep-learning-in-genomics/blob/main/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/qtl2-founder-haps-by-chromsome.pbs"><code>qtl2-founder-haps-by-chromsome.pbs</code></a>.</p>
<pre><code>cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array
for i in {1..20}
do
    qsub -v CHR=${i} -N chr${i}-qtl2-founder-haps-by-chromosome qtl2-founder-haps-by-chromsome.pbs
    sleep 5
done
</code></pre>
</section>
<section id="fill-in-gaps" class="level3">
<h3 class="anchored" data-anchor-id="fill-in-gaps">Fill in Gaps</h3>
<pre><code>module load conda
conda activate genomics
GENO_DIR=/home/s1mi/enformer_rat_data/genotypes
DATA_DIR=/home/s1mi/qtl2-data
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array
python run_qtl2_batches.py --data_dir $DATA_DIR/chr1-qtl2-founder-haps --output_dir /home/s1mi/qtl2-outputs/chr1-qtl2-outputs --work_dir $DATA_DIR/tmp-chr1-qtl2-founder-haps
</code></pre>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/index.html</guid>
  <pubDate>Wed, 22 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Splitting chr20 Brain rats into batches for qtl2 analysis</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-19-split-qlt2-inputs-batches/index.html</link>
  <description><![CDATA[ 




<p>We’ll split the 340 Br rats into batches of 10. The goal is to do this without creating a new VCF for each batchThe following code subsets the chr20 input files, specifically geno.csv and covar.csv files, that were generated with <a href="https://sabrina-dl.hakyimlab.org/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/">qtl2-founder-haps code</a>. I set up by copying over the other input files that should stay the same.</p>
<pre><code>mkdir tmp-chr20-qtl2-founder-haps
mkdir chr20-qtl2-outputs
cp chr20-qtl2-founder-haps/control.yaml tmp-chr20-qtl2-founder-haps/control.yaml
cp chr20-qtl2-founder-haps/founder_geno.csv tmp-chr20-qtl2-founder-haps/founder_geno.csv
cp chr20-qtl2-founder-haps/gmap.csv tmp-chr20-qtl2-founder-haps/gmap.csv
cp chr20-qtl2-founder-haps/pmap.csv tmp-chr20-qtl2-founder-haps/pmap.csv</code></pre>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="cb2-4">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/chr20-qtl2-founder-haps'</span></span>
<span id="cb2-5">tmp_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/tmp-chr20-qtl2-founder-haps'</span></span>
<span id="cb2-6">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/chr20-qtl2-outputs'</span></span>
<span id="cb2-7">geno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/geno.csv'</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb2-8">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-9">n_batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(geno.columns) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> batch_size</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> qtl_command(output_file, n_cores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-2">    cmd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'library(qtl2); '</span></span>
<span id="cb3-4">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cross &lt;- read_cross2("</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tmp_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/control.yaml"); '</span></span>
<span id="cb3-5">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_cores<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">); '</span></span>
<span id="cb3-6">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">")'</span></span>
<span id="cb3-7">    )</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cmd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_batches):</span>
<span id="cb4-2">    tic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb4-3">    geno_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geno.iloc[:, i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>batch_size]</span>
<span id="cb4-4">    samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geno_df.columns.to_list()</span>
<span id="cb4-5">    covar_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>: samples, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'generations'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(samples)})</span>
<span id="cb4-6">    geno_df.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tmp_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/geno.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-7">    covar_df.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tmp_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/covar.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-8">    cmd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qtl_command(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/batch</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_prob.rds'</span>, n_cores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-9">    subprocess.run(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"R -e '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cmd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>, shell<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-10">    toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb4-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Batch:"</span>, i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..."</span>, (toc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tic)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minutes"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch0_prob.rds")
&gt; 
&gt; 
Batch: 1 ... 5.516161077900324 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch1_prob.rds")
&gt; 
&gt; 
Batch: 2 ... 5.188156945933588 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch2_prob.rds")
&gt; 
&gt; 
Batch: 3 ... 5.320735947232849 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch3_prob.rds")
&gt; 
&gt; 
Batch: 4 ... 5.9591666307009294 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch4_prob.rds")
&gt; 
&gt; 
Batch: 5 ... 5.304590424666336 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch5_prob.rds")
&gt; 
&gt; 
Batch: 6 ... 5.208924225267643 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch6_prob.rds")
&gt; 
&gt; 
Batch: 7 ... 5.362514834082686 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch7_prob.rds")
&gt; 
&gt; 
Batch: 8 ... 5.318476139800623 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch8_prob.rds")
&gt; 
&gt; 
Batch: 9 ... 5.43069331633354 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch9_prob.rds")
&gt; 
&gt; 
Batch: 10 ... 5.109263749249901 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch10_prob.rds")
&gt; 
&gt; 
Batch: 11 ... 5.2156281993336355 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch11_prob.rds")
&gt; 
&gt; 
Batch: 12 ... 5.699721770366887 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch12_prob.rds")
&gt; 
&gt; 
Batch: 13 ... 5.225824187783291 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch13_prob.rds")
&gt; 
&gt; 
Batch: 14 ... 4.885130250700361 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch14_prob.rds")
&gt; 
&gt; 
Batch: 15 ... 5.367877415949867 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch15_prob.rds")
&gt; 
&gt; 
Batch: 16 ... 5.298072982882149 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch16_prob.rds")
&gt; 
&gt; 
Batch: 17 ... 5.088831246948879 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch17_prob.rds")
&gt; 
&gt; 
Batch: 18 ... 5.172468327915218 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch18_prob.rds")
&gt; 
&gt; 
Batch: 19 ... 5.2715786983006785 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch19_prob.rds")
&gt; 
&gt; 
Batch: 20 ... 4.73374969640087 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch20_prob.rds")
&gt; 
&gt; 
Batch: 21 ... 4.411744385201018 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch21_prob.rds")
&gt; 
&gt; 
Batch: 22 ... 4.215313976900264 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch22_prob.rds")
&gt; 
&gt; 
Batch: 23 ... 4.53186046264988 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch23_prob.rds")
&gt; 
&gt; 
Batch: 24 ... 3.9959222979164526 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch24_prob.rds")
&gt; 
&gt; 
Batch: 25 ... 3.932872584433062 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch25_prob.rds")
&gt; 
&gt; 
Batch: 26 ... 4.306167855666717 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch26_prob.rds")
&gt; 
&gt; 
Batch: 27 ... 4.43262422256715 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch27_prob.rds")
&gt; 
&gt; 
Batch: 28 ... 4.370494974033985 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch28_prob.rds")
&gt; 
&gt; 
Batch: 29 ... 4.498125915382601 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch29_prob.rds")
&gt; 
&gt; 
Batch: 30 ... 5.5711056028997215 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch30_prob.rds")
&gt; 
&gt; 
Batch: 31 ... 5.131772985549954 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch31_prob.rds")
&gt; 
&gt; 
Batch: 32 ... 5.087727682616484 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch32_prob.rds")</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-19-split-qlt2-inputs-batches/index.html</guid>
  <pubDate>Sun, 19 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Debugging qtl2’s calc_genoprob</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-17-debugging-qtl2-founder-haps/index.html</link>
  <description><![CDATA[ 




<section id="subset-individuals" class="level3">
<h3 class="anchored" data-anchor-id="subset-individuals">Subset Individuals</h3>
<p>For debugging, we filter the VCFs to 2 samples:</p>
<pre><code>cd /Users/sabrinami/Desktop/qtl2_data
bcftools view -s '000789972A,0007899884' -Oz -o test/chr20.vcf.gz BrainVCFs/chr20.vcf.gz
bcftools index -t test/chr20.vcf.gz
bcftools view -s '000789972A,0007899884' -Oz -o test/chr19.vcf.gz BrainVCFs/chr19.vcf.gz
bcftools index -t test/chr19.vcf.gz
</code></pre>
<p>Create the input files:</p>
<pre><code>conda activate genomics
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py test/chr20.vcf.gz FounderVCFs/chr20.vcf.gz output/chr20_prob.rds --working-dir chr20-test
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py test/chr19.vcf.gz FounderVCFs/chr19.vcf.gz output/chr19_prob.rds --working-dir chr19-test
</code></pre>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_475932e5ff924ca91e9f463b2bbf0cac">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&amp;%"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a,b) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(a,b,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-2">data_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data/'</span></span>
<span id="cb3-3">chr20_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(data_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output/chr20_prob.rds'</span>)</span>
<span id="cb3-4">chr19_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(data_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output/chr19_prob.rds'</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6">chr20_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][, , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>, , chr20:3201

                    ACI           BN       BUF       F344      M520        MR
000789972A 0.4992629643 1.885205e-06 0.1389550 0.01293124 0.2504721 0.0980062
0007899884 0.0003664564 1.852144e-06 0.3551907 0.02549159 0.3575424 0.2610384
                    WKY           WN
000789972A 1.885205e-06 0.0003687873
0007899884 1.852144e-06 0.0003667471

, , chr20:7226

                    ACI           BN       BUF       F344      M520         MR
000789972A 4.999977e-01 4.759653e-08 0.1388944 0.01259253 0.2506577 0.09785527
0007899884 2.218615e-08 1.648856e-10 0.3556074 0.02518061 0.3579643 0.26124736
                    WKY           WN
000789972A 4.759653e-08 2.353476e-06
0007899884 1.648856e-10 3.134648e-07

, , chr20:7266

                    ACI           BN       BUF       F344      M520         MR
000789972A 4.999999e-01 3.164964e-08 0.1388947 0.01259055 0.2506599 0.09785478
0007899884 9.923816e-12 4.269602e-12 0.3556093 0.02517666 0.3579662 0.26124757
                    WKY           WN
000789972A 3.164964e-08 1.476223e-07
0007899884 4.269602e-12 2.923039e-07

, , chr20:7269

                    ACI           BN       BUF       F344      M520         MR
000789972A 4.999999e-01 3.039399e-08 0.1388947 0.01259039 0.2506600 0.09785475
0007899884 1.107912e-12 4.627740e-12 0.3556094 0.02517635 0.3579663 0.26124758
                    WKY           WN
000789972A 3.039399e-08 1.459054e-07
0007899884 4.627740e-12 2.906267e-07

, , chr20:7341

                    ACI           BN       BUF       F344      M520        MR
000789972A 5.000000e-01 2.313504e-09 0.1388951 0.01258686 0.2506640 0.0978539
0007899884 8.523267e-12 1.790190e-09 0.3556128 0.02516929 0.3579697 0.2612479
                    WKY           WN
000789972A 2.313504e-09 1.265991e-07
0007899884 1.790190e-09 2.523467e-07</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(chr20_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]      2      8 202387</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">chr19_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][, , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>, , chr19:2445

                 ACI           BN       BUF         F344         M520        MR
000789972A 0.2438649 4.366846e-08 0.2844450 0.0006018009 0.0006018009 0.2438649
0007899884 0.2434618 4.366846e-08 0.2848848 0.0006018009 0.0006018009 0.2434618
                    WKY        WN
000789972A 0.0006018009 0.2260199
0007899884 0.0006018009 0.2263861

, , chr19:2531

                 ACI           BN       BUF        F344        M520        MR
000789972A 0.2438709 4.949989e-10 0.2844534 0.000593287 0.000593287 0.2438709
0007899884 0.2434678 4.949989e-10 0.2848934 0.000593287 0.000593287 0.2434678
                   WKY        WN
000789972A 0.000593287 0.2260249
0007899884 0.000593287 0.2263911

, , chr19:2727

                 ACI          BN       BUF         F344         M520        MR
000789972A 0.2438845 2.10961e-13 0.2844724 0.0005741863 0.0005741863 0.2438845
0007899884 0.2434814 2.10961e-13 0.2849124 0.0005741863 0.0005741863 0.2434814
                    WKY        WN
000789972A 0.0005741863 0.2260360
0007899884 0.0005741863 0.2264023

, , chr19:2728

                 ACI           BN       BUF         F344         M520        MR
000789972A 0.2438846 2.351976e-13 0.2844726 0.0005740712 0.0005740712 0.2438846
0007899884 0.2434814 2.351976e-13 0.2849125 0.0005740712 0.0005740712 0.2434814
                    WKY        WN
000789972A 0.0005740712 0.2260361
0007899884 0.0005740712 0.2264024

, , chr19:3021

                 ACI           BN       BUF         F344         M520        MR
000789972A 0.2439049 6.487041e-12 0.2845011 0.0005454151 0.0005454151 0.2439049
0007899884 0.2435017 6.487041e-12 0.2849412 0.0005454151 0.0005454151 0.2435017
                    WKY        WN
000789972A 0.0005454151 0.2260528
0007899884 0.0005454151 0.2264192</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(chr19_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]      2      8 139713</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-17-debugging-qtl2-founder-haps/index.html</guid>
  <pubDate>Fri, 17 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Testing qtl’s founder haplotype probability inferences on a single chromosome</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/index.html</link>
  <description><![CDATA[ 




<p>We are trying to work around memory limitations by splitting the genotype inferences by chromosome. We’ll first try to get working results for chromosome 12.</p>
<section id="convert-dans-code" class="level3">
<h3 class="anchored" data-anchor-id="convert-dans-code">Convert Dan’s Code</h3>
<p>My first attempt was to copy his make_qtl_inputs and take out any loops iterating over each chromosome number. However, I run into an unexplainable <code>negative length vectors are not allowed</code> error, even though I checked that the files (gmap.csv, pmap.csv, geno.csv, founder_geno.csv) generated by the new code are identical to the original when subsetted to lines with “chr20”.</p>
<div class="cell" data-hash="index_cache/html/make_qtl_inputs_be26d11ac927d23705fca74c6b8a7c60">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qtl2_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_qtl_inputs</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-3">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data'</span></span>
<span id="cb1-4">individuals_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BrainVCFs'</span>)</span>
<span id="cb1-5">founders_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FounderVCFs'</span>)</span>
<span id="cb1-6">gmap_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>os.path.join(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'genetic_map'</span>)</span>
<span id="cb1-7">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data/qtl_inputs'</span></span>
<span id="cb1-8">make_qtl_inputs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr20'</span>, individuals_dir, founders_dir, gmap_dir, output_dir,snps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
</div>
<p>Now run the R code:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_9ac05524c49206076a3fab304e9db5ac">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data/qtl_inputs/chr20'</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(qtl2)</span>
<span id="cb2-3">cross <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_cross2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"control.yaml"</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(cross, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cross.rds'</span>)</span>
<span id="cb2-4">pr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calc_genoprob</span>(cross, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error_prob =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(pr, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'genoprob.rds'</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in .calc_genoprob2(cross$crosstype, t(cross$geno[[chr]][group[[i]], : negative length vectors are not allowed</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in saveRDS(pr, "genoprob.rds"): object 'pr' not found</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">pr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">genoprob_to_alleleprob</span>(pr); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(pr, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alleleprob.rds"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in genoprob_to_alleleprob(pr): object 'pr' not found</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in saveRDS(pr, "alleleprob.rds"): object 'pr' not found</code></pre>
</div>
</div>
<p>It’s very puzzling to me why this cross object is causing issues that didn’t appear when we marked the whole genome.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-2_d1a2559addc989cf19e5ac6e795766ce">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cross)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Object of class cross2 (crosstype "hs")

Total individuals               340
No. genotyped individuals       340
No. phenotyped individuals        0
No. with both geno &amp; pheno        0
No. covariates                    1
No. phenotype covariates          0

No. chromosomes                   1
Total markers                202387

No. markers by chr:
    20 
202387 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Github/qtl2-founder-haps/tmp-qtl2-founder-haps/cross.rds"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Object of class cross2 (crosstype "hs")

Total individuals                340
No. genotyped individuals        340
No. phenotyped individuals         0
No. with both geno &amp; pheno         0
No. covariates                     1
No. phenotype covariates           0

No. chromosomes                   20
Total markers                7144158

No. markers by chr:
     1      2      3      4      5      6      7      8      9     10     11 
720616 810342 423788 503477 532683 378129 398571 345747 328200 285406 239651 
    12     13     14     15     16     17     18     19     20 
133178 377791 324143 273548 271191 228981 226616 139713 202387 </code></pre>
</div>
</div>
</section>
<section id="original-code" class="level3">
<h3 class="anchored" data-anchor-id="original-code">Original Code</h3>
<p>I’m going back to Dan’s original code, passing in chromosome 20 VCFs. My inital reasoning for converting Dan’s code to a module was to 1) save memory by not reading in genetic mapping files for every chromosome and 2) have better control over file naming, and 3) break up the task into preparing input files (python) and qtl2 computations (R), but I realized it’s not worth the trouble of debugging.</p>
<pre><code>cd /Users/sabrinami/Desktop/qtl2_data
conda activate genomics
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py BrainVCFs/chr20.vcf.gz FounderVCFs/chr20.vcf.gz output/chr20_prob.rds --working-dir chr20-qtl2-founder-haps
</code></pre>
<p>Since I’m getting the same error as before, I want to check that it’s not an issue with chromosome 20.</p>
<pre><code>cd /Users/sabrinami/Desktop/qtl2_data
conda activate genomics
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py BrainVCFs/chr19.vcf.gz FounderVCFs/chr19.vcf.gz output/chr19_prob.rds --working-dir chr19-qtl2-founder-haps
</code></pre>
<p>It seems to run fine for chromosome 19, although I can’t confirm until I try running it on Polaris or Expanse with sufficient memory. On my local computer (8G memory), the R code ran for just under 2 hours before being killed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/macbook_calc_genoprob_bug.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">R on MacBook</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/index.html</guid>
  <pubDate>Tue, 14 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>All of the bugs encountered when calculating haplotype probabilites from founders</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-08-calculating-Br-genotype-probabilities/index.html</link>
  <description><![CDATA[ 




<p>I am using Dan Munro’s scripts to compute probabilities across the 8 founders per locus per individual. His code uses the R qtl2 package.</p>
<p>Github: <a href="https://github.com/daniel-munro/qtl2-founder-haps/tree/main">https://github.com/daniel-munro/qtl2-founder-haps/tree/main</a></p>
<p>The <code>genetic_map</code> subdirectory contains genetic mapping files from the older build rn6. I downloaded rn7 genetic markers from his preprint, <a href="https://www.biorxiv.org/content/10.1101/2023.04.13.536694v2.article-info">A revamped rat reference genome improves the discovery of genetic diversity in laboratory rats</a>, <a href="https://www.biorxiv.org/content/biorxiv/early/2023/09/29/2023.04.13.536694/DC2/embed/media-2.xlsx?download=true">Supplementary Table S2</a>.</p>
<p>I first saved Table S2 as a CSV, then split it by chromosome.</p>
<section id="write-genetic-mapping-files" class="level2">
<h2 class="anchored" data-anchor-id="write-genetic-mapping-files">Write Genetic Mapping Files</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the original CSV file</span></span>
<span id="cb1-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/MAP.csv'</span>)</span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name, group <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CHR'</span>):</span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> group[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CHR'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cM'</span>]]</span>
<span id="cb1-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/Users/sabrinami/Github/qtl2-founder-haps/rn7_genetic_map/MAP4chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt.gz'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, compression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gzip'</span>)</span></code></pre></div>
</div>
<pre><code>conda activate genomics
cd ~/Github/qtl2-founder-haps
DATA_DIR=~/Desktop/Sabrina/2022-23/tutorials/enformer_pipeline_test/rn7_data
python qtl2-founder-haps.py $DATA_DIR/filtered.Brain.rn7.vcf.gz $DATA_DIR/Palmer_HS_founders_mRatBN7_filtered.vcf.gz probs.rds --gmap-dir rn7_genetic_map
</code></pre>
<p>The <code>make_qtl_inputs</code> function in line 160 of <code>qtl2-founder-haps.py</code> writes input files for the R package qtl2, specifically the <code>calc_genoprob</code> function that computes haplotype probabilities for each individual at each loci. I was able to run through the <code>make_qtl_inputs</code> locally, but the process was killed during the R computations:</p>
<pre><code>&gt; library(qtl2); cross &lt;- read_cross2("tmp-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 1); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "probs.rds")
Error: vector memory exhausted (limit reached?)
Execution halted
</code></pre>
<p>I copied over the input files in <code>~/Github/qtl2-founder-haps/tmp-qtl2-founder-haps</code> to polaris and started an interactive job: <code>qsub -I -A AIHPC4EDU -l select=1:ncpus=64 -l walltime=2:00:00 -l filesystems=home -q preemptable</code></p>
<pre><code>cd ~/Github/qtl2-founder-haps/tmp-qtl2-founder-haps
module load conda
conda activate genomics</code></pre>
<p>Then in R:</p>
<pre><code>library(qtl2)
cross &lt;- read_cross2("control.yaml")
pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 64)
pr &lt;- genoprob_to_alleleprob(pr)
saveRDS(pr, "~/Github/qtl2-founder-haps/probs.rds")
</code></pre>
<p><strong>Debugging:</strong> I am stuck at the step calling <code>calc_genoprob</code>; after 25 minutes of running, the process gets killed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-08-calculating-Br-genotype-probabilities/polaris_calc_genoprob_bug.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">R on Polaris Compute Node with 64 CPUs</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-08-calculating-Br-genotype-probabilities/index.html</guid>
  <pubDate>Wed, 08 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Running Enformer genome-wide on HS founder rats</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/pipeline.html</link>
  <description><![CDATA[ 




<p>After subset to genes that were expressed in rat brain tissue, we end up with 23,867 genomic regions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">rn7_reference_brain_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/rn7_reference_predicted_vs_observed_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-3">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(rn7_reference_brain_gex.index[rn7_reference_brain_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'observed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Br_expressed_genes.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-5">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(gene_list))</span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## write intervals.txt</span></span>
<span id="cb1-7">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,  index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geneId'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_intervals(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>):</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb1-12">            gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot_df.loc[gene]</span>
<span id="cb1-13">            tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb1-14">            interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-15">            f.write(interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">write_intervals(gene_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata/intervals.txt"</span>)</span></code></pre></div>
</div>
<section id="run-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="run-pipeline">Run Pipeline</h3>
<pre><code>module load conda
conda activate enformer-predict-tools

python /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/founder_epigenome_config.json</code></pre>
</section>
<section id="check-predictions" class="level2">
<h2 class="anchored" data-anchor-id="check-predictions">Check Predictions</h2>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb3-2">h5_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/predictions_folder/HS_founders_genome_wide/predictions_2023-11-27/enformer_predictions/BN/haplotype0/chr10_100115821_100115821_predictions.h5"</span></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(h5_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hf.items():</span>
<span id="cb3-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key)</span>
<span id="cb3-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(value[:])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>human
[[0.09566703 0.10165276 0.08404372 ... 0.00587161 0.06136435 0.04359803]
 [0.10662825 0.1139144  0.09694222 ... 0.00824633 0.07404334 0.06823193]
 [0.09993935 0.10983597 0.09347952 ... 0.00431036 0.06122369 0.04992136]
 ...
 [0.06703217 0.06465818 0.05357087 ... 0.01535742 0.05460119 0.04726781]
 [0.03674487 0.03669333 0.02561367 ... 0.00362175 0.01091049 0.00503846]
 [0.06257919 0.07025048 0.06735092 ... 0.00419223 0.00971855 0.00822341]]
mouse
[[0.09508593 0.04494116 0.08364319 ... 0.24798432 0.38567212 0.3783706 ]
 [0.09461962 0.05752731 0.08894978 ... 0.299645   0.44955045 0.44385162]
 [0.10998561 0.07225344 0.09443015 ... 0.2621954  0.35028058 0.3864176 ]
 ...
 [0.04612014 0.0642754  0.07402609 ... 0.4328676  1.1677598  0.7585961 ]
 [0.02304047 0.02882738 0.04057743 ... 0.13793258 0.27883688 0.23426382]
 [0.04535931 0.05920705 0.08596259 ... 0.24028273 0.40435565 0.40454867]]</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/pipeline.html</guid>
  <pubDate>Tue, 07 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Full report on Borzoi performance analysis</title>
  <dc:creator>Sofia Salazar, Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this notebook, we explored the question: <strong>Does borzoi predictions have a better performance compared to Enformer, at predicting cross-population expression for the CAGE LCL tracks?</strong></p>
<p><strong>Sofia’s Analysis</strong> involved comparisons between observed and predicted expression 136 of the top-performing genes for enformer and 140 of the worst-performing genes for enformer (total 276 genes). She sampled 100 individuals from the Geuvadis dataset for both borzoi and enformer predictions</p>
<p><strong>Sabrina’s Analysis</strong> predicted gene expression for 100 randomly-sampled genes across all 455 Geuvadis samples.</p>
<p>For both experiments, we compared the correlation between the predictions using both tools, and the ground truth measurements of the Geuvadis gene expression for the same individuals as the prediction. We examined correlations with the ground truth as a measure of performance.</p>
</section>
<section id="sofias-analysis" class="level1">
<h1>Sofia’s Analysis</h1>
<section id="libraries" class="level2">
<h2 class="anchored" data-anchor-id="libraries">Libraries</h2>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span></code></pre></div>
</details>
</div>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">DATA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/t-9ssal0/data/'</span></span>
<span id="cb2-2">PROJECT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/project2/haky/sofia/borzoiRun/'</span></span>
<span id="cb2-3">geuvadis_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DATA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geuvadis_expression.gz'</span></span>
<span id="cb2-4">geuvadis_gene_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(geuvadis_file, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb2-5">                                         dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chr'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>})</span>
<span id="cb2-6">individuals_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(PROJECT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_individuals.tsv'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-7">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals_file[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Individuals'</span>].to_list()</span></code></pre></div>
</details>
</div>
<p>Loading gene lists for both analysis</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">best_predicted_genes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/project2/haky/sofia/borzoiRun/predicted_genes_20oct.csv'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-2">best_my_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> best_predicted_genes_df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].to_list() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 136 best performing genes</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>):</span>
<span id="cb3-6">    genes_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROJECT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">gene_lists/worst_list</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv'</span>)</span>
<span id="cb3-7">    gene_list.append(genes_file[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>].to_list())</span>
<span id="cb3-8">worst_my_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sublist <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sublist] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 140 worst performing genes</span></span></code></pre></div>
</details>
</div>
</section>
<section id="functions" class="level2">
<h2 class="anchored" data-anchor-id="functions">Functions</h2>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_genes_per_file(num_files, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<span id="cb4-2">    file_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fast_"</span></span>
<span id="cb4-3">    predicted_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4">    all_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb4-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assuming both files have the same genes</span></span>
<span id="cb4-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/scratch/midway3/t-9ssal0/h5_files/'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>file_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer_predictions'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(s)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb4-8">            group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[individuals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb4-9">            predicted_genes.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(group.keys()))</span>
<span id="cb4-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> predicted_genes:</span>
<span id="cb4-11">        all_genes.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([re.sub(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"_haplo\d+"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, s) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l]))))</span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(all_genes)</span>
<span id="cb4-13"></span>
<span id="cb4-14">best_genes_per_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_genes_per_file(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>)</span>
<span id="cb4-15">worst_genes_per_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_genes_per_file(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worst"</span>)</span></code></pre></div>
</details>
</div>
<p>Note: moved all h5 files to /cds/haky/sofia/h5_files/</p>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_expression_dic(number_files, software, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>, genes_per_file):</span>
<span id="cb5-2">    file_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fast_"</span></span>
<span id="cb5-3">    expression_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k:{} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals}</span>
<span id="cb5-4">    start_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-5">    end_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb5-6">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span></span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb5-8">        gene_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> file_num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, number_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/scratch/midway3/t-9ssal0/h5_files/'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>file_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_predictions'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(file_num)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb5-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes_per_file[file_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#iterate through genes in file</span></span>
<span id="cb5-12">                    group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[individual]</span>
<span id="cb5-13">                    expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-14">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through haplotypes</span></span>
<span id="cb5-15">                        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> group[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_haplo</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>][:, index]</span>
<span id="cb5-16">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>:</span>
<span id="cb5-17">                            prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(prediction, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean over track replicates</span></span>
<span id="cb5-18">                        expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> np.mean(prediction[start_bin: end_bin])</span>
<span id="cb5-19">                    gene_expr[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expression</span>
<span id="cb5-20">                    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> prediction</span>
<span id="cb5-21">        expression_dic[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_expr</span>
<span id="cb5-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expression_dic</span>
<span id="cb5-23"></span>
<span id="cb5-24"></span>
<span id="cb5-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_predictions_across_indiv(expression_dic, genes):</span>
<span id="cb5-26">    predictions_across_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene:[] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes}</span>
<span id="cb5-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> expression_dic:</span>
<span id="cb5-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes:</span>
<span id="cb5-29">            predictions_across_ind[gene].append(expression_dic[individual][gene])</span>
<span id="cb5-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions_across_ind</span>
<span id="cb5-31"></span>
<span id="cb5-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_correlations(dic1, dic2):</span>
<span id="cb5-33">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene: np.empty(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(individuals)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dic1.keys()}</span>
<span id="cb5-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dic1.keys():</span>
<span id="cb5-35">        col_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.corrcoef(dic1[gene], dic2[gene])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-36">        corr[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col_corr</span>
<span id="cb5-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(corr)</span></code></pre></div>
</details>
</div>
</section>
<section id="first-analysis-performance-comparison-in-best-performing-genes-with-enformer" class="level2">
<h2 class="anchored" data-anchor-id="first-analysis-performance-comparison-in-best-performing-genes-with-enformer">First analysis: performance comparison in best-performing genes with Enformer</h2>
<section id="get-expression-across-individuals-for-each-gene" class="level4">
<h4 class="anchored" data-anchor-id="get-expression-across-individuals-for-each-gene">Get expression across individuals for each gene</h4>
<div class="cell" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">best_expression_borzoi_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best'</span>, best_genes_per_file)</span>
<span id="cb6-2">best_expression_enformer_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best'</span>, best_genes_per_file)</span>
<span id="cb6-3"></span>
<span id="cb6-4">best_borzoi_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(best_expression_borzoi_dic, best_my_genes)</span>
<span id="cb6-5">best_enformer_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(best_expression_enformer_dic, best_my_genes)</span></code></pre></div>
</details>
</div>
<p>Geuvadis data</p>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression.loc[geuvadis_gene_expression[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>].isin(best_my_genes)]</span>
<span id="cb7-2">geuvadis.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>]</span>
<span id="cb7-3">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[:, individuals]</span>
<span id="cb7-4">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[best_my_genes]</span>
<span id="cb7-5">best_GT_across <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene:val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(best_my_genes, geuvadis.values.tolist())}</span></code></pre></div>
</details>
</div>
</section>
<section id="correlations" class="level4">
<h4 class="anchored" data-anchor-id="correlations">Correlations</h4>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">best_corr_borzoi_enf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(best_borzoi_across_individuals, best_enformer_across_individuals)</span>
<span id="cb8-2">best_corr_enf_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(best_enformer_across_individuals, best_GT_across)</span>
<span id="cb8-3">best_corr_bor_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(best_borzoi_across_individuals, best_GT_across)</span></code></pre></div>
</details>
</div>
</section>
<section id="correlations-between-enformer-and-borzoi-predictions" class="level4">
<h4 class="anchored" data-anchor-id="correlations-between-enformer-and-borzoi-predictions">Correlations between enformer and borzoi predictions</h4>
<div class="cell" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">best_df_enf_bor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>: best_corr_borzoi_enf,</span>
<span id="cb9-2">                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>:best_corr_borzoi_enf})</span>
<span id="cb9-3">best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>])</span>
<span id="cb9-4">best_df_enf_bor.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Correlations</th>
<th data-quarto-table-cell-role="th">abs_Correlations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CDC16</td>
<td>0.824303</td>
<td>0.824303</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DPYSL4</td>
<td>0.725614</td>
<td>0.725614</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFAND2A</td>
<td>-0.945341</td>
<td>0.945341</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DCAF4</td>
<td>0.221603</td>
<td>0.221603</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFYVE19</td>
<td>0.560699</td>
<td>0.560699</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MCOLN2</td>
<td>0.664648</td>
<td>0.664648</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">XRRA1</td>
<td>0.864334</td>
<td>0.864334</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TTLL12</td>
<td>0.821124</td>
<td>0.821124</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">USP40</td>
<td>0.959084</td>
<td>0.959084</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">UGT2B17</td>
<td>0.989967</td>
<td>0.989967</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb10-2"></span>
<span id="cb10-3">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb10-4">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb10-5">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb10-6">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations Enformer - Borzoi'</span>)</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the second histogram in the second subplot</span></span>
<span id="cb10-9">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb10-10">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb10-11">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb10-12">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations Enformer - Borzoi'</span>)</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust layout and display the subplots</span></span>
<span id="cb10-15">plt.tight_layout()</span>
<span id="cb10-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="correlations-against-ground-truth" class="level4">
<h4 class="anchored" data-anchor-id="correlations-against-ground-truth">Correlations against Ground truth</h4>
<div class="cell" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">best_df_against_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>: best_corr_enf_GT,</span>
<span id="cb11-2">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>: best_corr_bor_GT,</span>
<span id="cb11-3">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>: best_corr_enf_GT,</span>
<span id="cb11-4">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>: best_corr_bor_GT})</span>
<span id="cb11-5">best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>])</span>
<span id="cb11-6">best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>])</span>
<span id="cb11-7">best_df_against_GT.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Enformer</th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">abs_Enformer</th>
<th data-quarto-table-cell-role="th">abs_Borzoi</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CDC16</td>
<td>-0.242646</td>
<td>-0.308183</td>
<td>0.242646</td>
<td>0.308183</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DPYSL4</td>
<td>0.318979</td>
<td>0.439701</td>
<td>0.318979</td>
<td>0.439701</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFAND2A</td>
<td>-0.444695</td>
<td>0.386350</td>
<td>0.444695</td>
<td>0.386350</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DCAF4</td>
<td>-0.478554</td>
<td>0.248134</td>
<td>0.478554</td>
<td>0.248134</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFYVE19</td>
<td>-0.017018</td>
<td>0.119285</td>
<td>0.017018</td>
<td>0.119285</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MCOLN2</td>
<td>0.440237</td>
<td>0.086427</td>
<td>0.440237</td>
<td>0.086427</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">XRRA1</td>
<td>0.367341</td>
<td>0.476587</td>
<td>0.367341</td>
<td>0.476587</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TTLL12</td>
<td>0.284871</td>
<td>0.278919</td>
<td>0.284871</td>
<td>0.278919</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">USP40</td>
<td>-0.452123</td>
<td>-0.500160</td>
<td>0.452123</td>
<td>0.500160</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">UGT2B17</td>
<td>0.399678</td>
<td>0.409415</td>
<td>0.399678</td>
<td>0.409415</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="51">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb12-2"></span>
<span id="cb12-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb12-4">ax1.scatter(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb12-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb12-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb12-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb12-8">ax1.legend()</span>
<span id="cb12-9"></span>
<span id="cb12-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb12-11">ax2.scatter(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>], best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb12-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb12-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb12-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb12-15">ax2.legend()</span>
<span id="cb12-16"></span>
<span id="cb12-17">plt.tight_layout()</span>
<span id="cb12-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="qq-plots-of-correlations-against-ground-truth" class="level4">
<h4 class="anchored" data-anchor-id="qq-plots-of-correlations-against-ground-truth">QQ plots of correlations against Ground truth</h4>
<div class="cell" data-execution_count="62">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb13-2"></span>
<span id="cb13-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb13-4">ax1.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb13-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.80</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.80</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb13-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb13-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb13-8">ax1.legend()</span>
<span id="cb13-9"></span>
<span id="cb13-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb13-11">ax2.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb13-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb13-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb13-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb13-15">ax2.legend()</span>
<span id="cb13-16"></span>
<span id="cb13-17">plt.tight_layout()</span>
<span id="cb13-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="comparing-different-bin-ranges-in-borzoi-performances" class="level2">
<h2 class="anchored" data-anchor-id="comparing-different-bin-ranges-in-borzoi-performances">Comparing different bin ranges in borzoi performances</h2>
<div class="cell" data-execution_count="52">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_expression_dic2(number_files, software, bins_around):</span>
<span id="cb14-2">    expression_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k:{} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals}</span>
<span id="cb14-3">    start_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bins_around) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb14-4">    end_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bins_around) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb14-5">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span></span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb14-7">        gene_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb14-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> file_num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, number_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb14-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/scratch/midway3/t-9ssal0/h5_files/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_predictions'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(file_num)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb14-10">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> best_genes_per_file[file_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#iterate through genes in file</span></span>
<span id="cb14-11">                    group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[individual]</span>
<span id="cb14-12">                    expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb14-13">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through haplotypes</span></span>
<span id="cb14-14">                        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> group[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_haplo</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>][:, index]</span>
<span id="cb14-15">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>:</span>
<span id="cb14-16">                            prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(prediction, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean over track replicates</span></span>
<span id="cb14-17">                        expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> np.mean(prediction[start_bin: end_bin])</span>
<span id="cb14-18">                    gene_expr[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expression</span>
<span id="cb14-19">                    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> prediction</span>
<span id="cb14-20">        expression_dic[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_expr</span>
<span id="cb14-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expression_dic</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="53">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">expression_borzoi_8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-2">borzoi_across_individuals_8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(expression_borzoi_8, best_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="56">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">expression_borzoi_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb16-2">borzoi_across_individuals_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(expression_borzoi_4, best_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="57">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">expression_borzoi_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-2">borzoi_across_individuals_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(expression_borzoi_2, best_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="58">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">corr_borzoi_8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(borzoi_across_individuals_8, best_GT_across)</span>
<span id="cb18-2">corr_borzoi_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(borzoi_across_individuals_4, best_GT_across)</span>
<span id="cb18-3">corr_borzoi_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(borzoi_across_individuals_2, best_GT_across)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="59">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">bin_ranges_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 16 bins'</span>: best_corr_bor_GT,</span>
<span id="cb19-2">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 8 bins'</span>: corr_borzoi_8,</span>
<span id="cb19-3">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 4 bins'</span>: corr_borzoi_4,</span>
<span id="cb19-4">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 2 bins'</span>: corr_borzoi_2})</span>
<span id="cb19-5">bin_ranges_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="59">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi 16 bins</th>
<th data-quarto-table-cell-role="th">Borzoi 8 bins</th>
<th data-quarto-table-cell-role="th">Borzoi 4 bins</th>
<th data-quarto-table-cell-role="th">Borzoi 2 bins</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CDC16</td>
<td>-0.308183</td>
<td>-0.173212</td>
<td>-0.097312</td>
<td>0.064835</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DPYSL4</td>
<td>0.439701</td>
<td>0.442904</td>
<td>0.438260</td>
<td>0.057265</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFAND2A</td>
<td>0.386350</td>
<td>0.386898</td>
<td>0.043857</td>
<td>0.544630</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DCAF4</td>
<td>0.248134</td>
<td>0.519006</td>
<td>0.557798</td>
<td>0.529078</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFYVE19</td>
<td>0.119285</td>
<td>0.125048</td>
<td>0.367074</td>
<td>-0.365466</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MCOLN2</td>
<td>0.086427</td>
<td>-0.420791</td>
<td>-0.507746</td>
<td>-0.510637</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">XRRA1</td>
<td>0.476587</td>
<td>0.488511</td>
<td>0.541467</td>
<td>0.566548</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TTLL12</td>
<td>0.278919</td>
<td>0.278045</td>
<td>0.274921</td>
<td>0.302587</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">USP40</td>
<td>-0.500160</td>
<td>-0.493973</td>
<td>-0.475467</td>
<td>-0.469835</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">UGT2B17</td>
<td>0.409415</td>
<td>0.402573</td>
<td>0.391174</td>
<td>0.389104</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="60">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> itertools</span>
<span id="cb20-2">column_combinations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(itertools.combinations(bin_ranges_df.columns, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb20-3">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, (col1, col2) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(column_combinations):</span>
<span id="cb20-6">    row, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">divmod</span>(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the row and column for the current subplot</span></span>
<span id="cb20-7">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[row, col]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the current subplot</span></span>
<span id="cb20-8"></span>
<span id="cb20-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data (customize this part as needed)</span></span>
<span id="cb20-10">    ax.scatter(bin_ranges_df[col1], bin_ranges_df[col2], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'darkorange'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations against GT'</span>)</span>
<span id="cb20-11">    ax.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity Line'</span>)</span>
<span id="cb20-12">    ax.set_xlabel(col1)</span>
<span id="cb20-13">    ax.set_ylabel(col2)</span>
<span id="cb20-14">    ax.legend()</span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust layout and display the plot</span></span>
<span id="cb20-17">plt.tight_layout()</span>
<span id="cb20-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-21-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="second-analysis-performance-comparison-in-worst-performing-genes-with-enformer" class="level2">
<h2 class="anchored" data-anchor-id="second-analysis-performance-comparison-in-worst-performing-genes-with-enformer">Second analysis: performance comparison in worst-performing genes with Enformer</h2>
<section id="get-expression-across-individuals-for-each-gene-1" class="level4">
<h4 class="anchored" data-anchor-id="get-expression-across-individuals-for-each-gene-1">Get expression across individuals for each gene</h4>
<div class="cell" data-execution_count="16">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">worst_expression_borzoi_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'worst'</span>, worst_genes_per_file)</span>
<span id="cb21-2">worst_expression_enformer_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'worst'</span>, worst_genes_per_file)</span>
<span id="cb21-3"></span>
<span id="cb21-4">worst_borzoi_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(worst_expression_borzoi_dic, worst_my_genes)</span>
<span id="cb21-5">worst_enformer_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(worst_expression_enformer_dic, worst_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="19">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression.loc[geuvadis_gene_expression[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>].isin(worst_my_genes)]</span>
<span id="cb22-2">geuvadis.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>]</span>
<span id="cb22-3">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[:, individuals]</span>
<span id="cb22-4">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[worst_my_genes]</span>
<span id="cb22-5">worst_GT_across <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene:val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(worst_my_genes, geuvadis.values.tolist())}</span></code></pre></div>
</details>
</div>
</section>
<section id="correlations-1" class="level3">
<h3 class="anchored" data-anchor-id="correlations-1">Correlations</h3>
<div class="cell" data-execution_count="20">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">worst_corr_borzoi_enf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(worst_borzoi_across_individuals, worst_enformer_across_individuals)</span>
<span id="cb23-2">worst_corr_enf_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(worst_enformer_across_individuals, worst_GT_across)</span>
<span id="cb23-3">worst_corr_bor_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(worst_borzoi_across_individuals, worst_GT_across)</span></code></pre></div>
</details>
</div>
<section id="correlations-between-enformer-and-borzoi-predictions-1" class="level4">
<h4 class="anchored" data-anchor-id="correlations-between-enformer-and-borzoi-predictions-1">Correlations between enformer and borzoi predictions</h4>
<div class="cell" data-execution_count="21">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">worst_df_enf_bor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>: worst_corr_borzoi_enf,</span>
<span id="cb24-2">                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>:worst_corr_borzoi_enf})</span>
<span id="cb24-3">worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>])</span>
<span id="cb24-4">worst_df_enf_bor.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Correlations</th>
<th data-quarto-table-cell-role="th">abs_Correlations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ATP6V1E2</td>
<td>0.052960</td>
<td>0.052960</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ZNF384</td>
<td>0.672741</td>
<td>0.672741</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SART3</td>
<td>0.732671</td>
<td>0.732671</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SLC15A2</td>
<td>-0.523820</td>
<td>0.523820</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AKR7A2</td>
<td>0.075323</td>
<td>0.075323</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">GBP1</td>
<td>0.513649</td>
<td>0.513649</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZNF624</td>
<td>-0.668723</td>
<td>0.668723</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MRTO4</td>
<td>-0.090715</td>
<td>0.090715</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CD84</td>
<td>0.076973</td>
<td>0.076973</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RAB40B</td>
<td>-0.690359</td>
<td>0.690359</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="22">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb25-2"></span>
<span id="cb25-3">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb25-4">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb25-5">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb25-6">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations Enformer - Borzoi'</span>)</span>
<span id="cb25-7"></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the second histogram in the second subplot</span></span>
<span id="cb25-9">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb25-10">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb25-11">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb25-12">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations Enformer - Borzoi'</span>)</span>
<span id="cb25-13"></span>
<span id="cb25-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust layout and display the subplots</span></span>
<span id="cb25-15">plt.tight_layout()</span>
<span id="cb25-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-26-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="correlations-against-ground-truth-1" class="level4">
<h4 class="anchored" data-anchor-id="correlations-against-ground-truth-1">Correlations against Ground truth</h4>
<div class="cell" data-execution_count="23">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">worst_df_against_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>: worst_corr_enf_GT,</span>
<span id="cb26-2">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>: worst_corr_bor_GT,</span>
<span id="cb26-3">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>: worst_corr_enf_GT,</span>
<span id="cb26-4">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>: worst_corr_bor_GT})</span>
<span id="cb26-5">worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>])</span>
<span id="cb26-6">worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>])</span>
<span id="cb26-7">worst_df_against_GT.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Enformer</th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">abs_Enformer</th>
<th data-quarto-table-cell-role="th">abs_Borzoi</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ATP6V1E2</td>
<td>0.164837</td>
<td>0.322586</td>
<td>0.164837</td>
<td>0.322586</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ZNF384</td>
<td>0.079999</td>
<td>0.129734</td>
<td>0.079999</td>
<td>0.129734</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SART3</td>
<td>-0.031612</td>
<td>-0.124788</td>
<td>0.031612</td>
<td>0.124788</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SLC15A2</td>
<td>-0.078513</td>
<td>0.076483</td>
<td>0.078513</td>
<td>0.076483</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AKR7A2</td>
<td>-0.107319</td>
<td>0.280086</td>
<td>0.107319</td>
<td>0.280086</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">GBP1</td>
<td>-0.167450</td>
<td>-0.006239</td>
<td>0.167450</td>
<td>0.006239</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZNF624</td>
<td>0.037769</td>
<td>0.005369</td>
<td>0.037769</td>
<td>0.005369</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MRTO4</td>
<td>-0.255579</td>
<td>0.036356</td>
<td>0.255579</td>
<td>0.036356</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CD84</td>
<td>0.096425</td>
<td>0.063115</td>
<td>0.096425</td>
<td>0.063115</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RAB40B</td>
<td>-0.045073</td>
<td>0.052897</td>
<td>0.045073</td>
<td>0.052897</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="47">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb27-2"></span>
<span id="cb27-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb27-4">ax1.scatter(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb27-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb27-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb27-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb27-8">ax1.legend()</span>
<span id="cb27-9"></span>
<span id="cb27-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb27-11">ax2.scatter(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>], worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb27-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb27-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb27-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb27-15">ax2.legend()</span>
<span id="cb27-16"></span>
<span id="cb27-17">plt.tight_layout()</span>
<span id="cb27-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-28-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="qq-plots-of-correlations-against-ground-truth-1" class="level4">
<h4 class="anchored" data-anchor-id="qq-plots-of-correlations-against-ground-truth-1">QQ plots of correlations against ground truth</h4>
<div class="cell" data-execution_count="49">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb28-2"></span>
<span id="cb28-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb28-4">ax1.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb28-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.70</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.70</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb28-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb28-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb28-8">ax1.legend()</span>
<span id="cb28-9"></span>
<span id="cb28-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb28-11">ax2.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb28-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb28-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb28-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb28-15">ax2.legend()</span>
<span id="cb28-16"></span>
<span id="cb28-17">plt.tight_layout()</span>
<span id="cb28-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-29-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
</section>
</section>
<section id="sabrinas-analysis" class="level1">
<h1>Sabrina’s Analysis</h1>
<section id="collecting-results" class="level2">
<h2 class="anchored" data-anchor-id="collecting-results">Collecting Results</h2>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb29-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb29-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb29-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb29-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb29-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb29-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb29-8"></span>
<span id="cb29-9">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb29-10">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb29-11">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb29-12">prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction"</span></span>
<span id="cb29-13">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions"</span></span>
<span id="cb29-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb29-15">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb29-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/completed_intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb29-17">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb29-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with open("intervals.txt", "r") as f:</span></span>
<span id="cb29-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     intervals.extend(f.read().splitlines()[:5]) # test on first few genes</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb30-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> interval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> intervals:</span>
<span id="cb30-3">    split_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb30-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span>
<span id="cb30-5">    tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb30-6">    gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.index[(hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tss)]</span>
<span id="cb30-7">    gene_list.append(gene.item())</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">CAGE_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list}</span>
<span id="cb31-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb31-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb31-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb31-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb31-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb31-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb31-8">                haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, :])</span>
<span id="cb31-9">                haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, :])</span>
<span id="cb31-10">                prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb31-11">            CAGE_dict[gene].append(prediction)</span>
<span id="cb31-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb31-13">            CAGE_dict[gene].append(np.nan)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb32-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb33-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb33-3">    observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb33-4">    expr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>: CAGE_dict[gene]}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb33-5">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df.dropna()</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="6">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">pearson_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb34-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb34-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb34-4">    pearson_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">spearman_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb35-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb35-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb35-4">    spearman_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</details>
</div>
<section id="borzois-best-performing-gene" class="level3">
<h3 class="anchored" data-anchor-id="borzois-best-performing-gene">Borzoi’s Best Performing Gene</h3>
<p><strong>(out of the first 47 randomly-sampled genes)</strong> ENSG00000137265 was the best performing gene (both for Spearman and Pearson R) for Borzoi’s personalized prediction.</p>
<div class="cell" data-execution_count="8">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb36-2">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000137265'</span>]</span>
<span id="cb36-3">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb36-4">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb36-5"></span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb36-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb36-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb36-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for ENSG00000137265"</span>)</span>
<span id="cb36-11"></span>
<span id="cb36-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb36-13">plt.legend()</span>
<span id="cb36-14">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-37-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="compare-correlations-to-enformer" class="level2">
<h2 class="anchored" data-anchor-id="compare-correlations-to-enformer">Compare Correlations to Enformer</h2>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb37-2">enformer_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb37-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb37-4">    gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'external_gene_name'</span>]</span>
<span id="cb37-5">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ge'</span>][enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene_name]</span>
<span id="cb37-6">    enformer_corr.append(corr.item())</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr</span>
<span id="cb38-2">spearman_corr_by_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>}).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>])</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">spearman_corr_by_model.head()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">Enformer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000011638</td>
<td>0.097914</td>
<td>0.241614</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000112031</td>
<td>0.036816</td>
<td>-0.007003</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000172732</td>
<td>0.022511</td>
<td>0.078569</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000173638</td>
<td>0.112324</td>
<td>-0.084114</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000156535</td>
<td>0.084083</td>
<td>0.031968</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb40-2">plt.scatter(spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb40-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb40-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb40-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb40-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb40-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb40-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb40-9"></span>
<span id="cb40-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-41-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb41-2">plt.scatter(spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(), spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(), marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb41-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb41-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb41-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb41-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb41-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Absolute Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb41-9"></span>
<span id="cb41-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-42-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="bin-sizing" class="level3">
<h3 class="anchored" data-anchor-id="bin-sizing">Bin Sizing</h3>
<p>We used a 4 bin window centered at the TSS for each CAGE computation, we want to see which bin width gives the best estimate.</p>
<div class="cell" data-execution_count="15">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">CAGE_dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb42-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb42-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb42-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb42-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb42-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb42-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb42-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): </span>
<span id="cb42-9">                    haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb42-10">                    haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb42-11">                    prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb42-12">                    CAGE_dicts[i][gene].append(prediction)</span>
<span id="cb42-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb42-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb42-15">                CAGE_dicts[i][gene].append(np.nan)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="16">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">spearman_corr_by_bin_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>: enformer_corr}, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_list)</span>
<span id="cb43-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb43-3">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb43-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb43-5">        observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb43-6">        predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CAGE_dicts[i][gene]</span>
<span id="cb43-7">        corr, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(observed, predicted)</span>
<span id="cb43-8">        results.append(corr)</span>
<span id="cb43-9">    spearman_corr_by_bin_size[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Borzoi, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> bins'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="17">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> histogram(x, title):</span>
<span id="cb44-2">    plt.hist(x, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb44-3">    plt.title(title)</span>
<span id="cb44-4">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spearman Correlations'</span>)</span>
<span id="cb44-5">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb44-6">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(x)</span>
<span id="cb44-7">    plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb44-8">    plt.legend()</span>
<span id="cb44-9"></span>
<span id="cb44-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb44-11">    plt.show()</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="18">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size:</span>
<span id="cb45-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)</span>
<span id="cb45-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size[column]</span>
<span id="cb45-4">    histogram(x, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Cross-Population Prediction Performance for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on N=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-6.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="19">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size:</span>
<span id="cb46-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)</span>
<span id="cb46-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size[column].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>()</span>
<span id="cb46-4">    histogram(x, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Absolute Cross-Population Prediction Correlation for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on N=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-6.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">model_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb47-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb47-3">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.loc[index].idxmax()</span>
<span id="cb47-4">    model_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb47-5">model_abs_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb47-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb47-7">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().loc[index].idxmax()</span>
<span id="cb47-8">    model_abs_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb47-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Correlation Model:"</span>)</span>
<span id="cb47-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_perf_dict)</span>
<span id="cb47-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Absolute Valued Correlation Model:"</span>)</span>
<span id="cb47-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_abs_perf_dict)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Highest Correlation Model:
{'Enformer': 30, 'Borzoi, 2 bins': 6, 'Borzoi, 4 bins': 5, 'Borzoi, 6 bins': 2, 'Borzoi, 8 bins': 5, 'Borzoi, 10 bins': 4}
Highest Absolute Valued Correlation Model:
{'Enformer': 33, 'Borzoi, 2 bins': 7, 'Borzoi, 4 bins': 5, 'Borzoi, 6 bins': 2, 'Borzoi, 8 bins': 4, 'Borzoi, 10 bins': 1}</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>After these analysis, we can conclude that predictions with borzoi are not significantly different, in performance terms, than enformer. While it does seem that borzoi improves the performance for those genes that previously performed bad with enformer, the improvement is not significant. Additionally, borzoi doesn’t improve predictive performance for the genes that already performed well with enformer.</p>
<p>It should be noted that these analysis are limited by the number of individuals and the small sample of genes that I considered. Also, they are based only on the CAGE LCL track(s), yet, it’s important to remember that borzoi does predict for RNA-seq tracks while enformer does not.</p>


</section>
</section>

 ]]></description>
  <category>analysis</category>
  <category>report</category>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index.html</guid>
  <pubDate>Wed, 25 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Comparing Enformer and Borzoi prediction on GEUVADIS individuals</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index.html</link>
  <description><![CDATA[ 




<p>Based off the limited results from personalized prediction across GEUVADIS individuals (N=455), I conclude that Borzoi does not outperform Enformer in predicting cross-population variation in gene expression. At the very bottom, I found that for most genes, Enformer had the best cross-population predictions out of all Borzoi estimates (from varying CAGE TSS window sizes).</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb1-3">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"external_gene_name"</span>)</span>
<span id="cb1-4">genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>]).intersection(hg38_annot.index)</span>
<span id="cb1-5">genes_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(genes)]</span>
<span id="cb1-6">sample_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genes_annot.sample(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, annot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_genes.iterrows():</span>
<span id="cb2-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-4">    intervals.append(interval)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(intervals))</span></code></pre></div>
</div>
<section id="submit-pbs-job" class="level3">
<h3 class="anchored" data-anchor-id="submit-pbs-job">Submit PBS Job</h3>
<pre><code>#!/bin/bash
#PBS -A AIHPC4EDU
#PBS -q preemptable
#PBS -l walltime=6:00:00
#PBS -l select=2:ncpus=64:ngpus=16
#PBS -l filesystems=home:eagle
#PBS -N borzoi_across_geuvadis_parallel

module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction

python3 personalized_prediction.py \
--intervals_file intervals.txt \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions</code></pre>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-8"></span>
<span id="cb5-9">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb5-10">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb5-11">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb5-12">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions"</span></span>
<span id="cb5-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-14">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb5-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"completed_intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-16">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb5-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-18">    intervals.extend(f.read().splitlines()[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test on first few genes</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> interval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> intervals:</span>
<span id="cb6-3">    split_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb6-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span>
<span id="cb6-5">    tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb6-6">    gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.index[(hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tss)]</span>
<span id="cb6-7">    gene_list.append(gene.item())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">CAGE_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list}</span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb7-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb7-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb7-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb7-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb7-8">                haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, :])</span>
<span id="cb7-9">                haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, :])</span>
<span id="cb7-10">                prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-11">            CAGE_dict[gene].append(prediction)</span>
<span id="cb7-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-13">            CAGE_dict[gene].append(np.nan)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb9-3">    observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb9-4">    expr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>: CAGE_dict[gene]}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb9-5">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df.dropna()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pearson_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb10-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb10-4">    pearson_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">spearman_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb11-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb11-4">    spearman_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb12-2">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000137265'</span>]</span>
<span id="cb12-3">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb12-4">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb12-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb12-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb12-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for ENSG00000137265"</span>)</span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb12-13">plt.legend()</span>
<span id="cb12-14">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>ENSG00000137265 was the best performing gene (both for Spearman and Pearson R) for Borzoi’s personalized prediction.</p>
</section>
<section id="compare-correlations-to-enformer" class="level2">
<h2 class="anchored" data-anchor-id="compare-correlations-to-enformer">Compare Correlations to Enformer</h2>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb13-2">enformer_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb13-4">    gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'external_gene_name'</span>]</span>
<span id="cb13-5">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ge'</span>][enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene_name]</span>
<span id="cb13-6">    enformer_corr.append(corr.item())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr</span>
<span id="cb14-2">spearman_corr_by_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>}).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">spearman_corr_by_model.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">Enformer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000176058</td>
<td>-0.005758</td>
<td>-0.027832</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000156931</td>
<td>-0.075927</td>
<td>0.051405</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000118804</td>
<td>0.027522</td>
<td>0.004061</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000076924</td>
<td>0.058653</td>
<td>0.324224</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000167562</td>
<td>-0.027883</td>
<td>0.062367</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb16-2">plt.scatter(spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb16-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb16-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb16-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb16-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb16-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="bin-sizing" class="level3">
<h3 class="anchored" data-anchor-id="bin-sizing">Bin Sizing</h3>
<p>We used a 4 bin window centered at the TSS for each CAGE computation, we want to see which bin width gives the best estimate.</p>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">CAGE_dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb17-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb17-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb17-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb17-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb17-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb17-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): </span>
<span id="cb17-9">                    haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb17-10">                    haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb17-11">                    prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb17-12">                    CAGE_dicts[i][gene].append(prediction)</span>
<span id="cb17-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb17-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb17-15">                CAGE_dicts[i][gene].append(np.nan)</span>
<span id="cb17-16">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">spearman_corr_by_bin_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>: enformer_corr}, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_list)</span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb18-3">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb18-5">        observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb18-6">        predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CAGE_dicts[i][gene]</span>
<span id="cb18-7">        corr, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(observed, predicted)</span>
<span id="cb18-8">        results.append(corr)</span>
<span id="cb18-9">    spearman_corr_by_bin_size[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Borzoi, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> bins'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span></code></pre></div>
</div>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> histogram(x, title):</span>
<span id="cb19-2">    plt.hist(x, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb19-3">    plt.title(title)</span>
<span id="cb19-4">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spearman Correlations'</span>)</span>
<span id="cb19-5">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb19-6">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(x)</span>
<span id="cb19-7">    plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb19-8">    plt.legend()</span>
<span id="cb19-9"></span>
<span id="cb19-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb19-11">    plt.show()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size:</span>
<span id="cb20-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)</span>
<span id="cb20-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size[column]</span>
<span id="cb20-4">    histogram(x, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Personalized Prediction Performance for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on N=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-6.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">model_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb21-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb21-3">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.loc[index].idxmax()</span>
<span id="cb21-4">    model_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb21-5">model_abs_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb21-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb21-7">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().loc[index].idxmax()</span>
<span id="cb21-8">    model_abs_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Correlation Model:"</span>)</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_perf_dict)</span>
<span id="cb22-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Absolute Valued Correlation Model:"</span>)</span>
<span id="cb22-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_abs_perf_dict)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Highest Correlation Model:
{'Enformer': 18, 'Borzoi, 2 bins': 4, 'Borzoi, 4 bins': 1, 'Borzoi, 6 bins': 2, 'Borzoi, 8 bins': 2, 'Borzoi, 10 bins': 1}
Highest Absolute Valued Correlation Model:
{'Enformer': 18, 'Borzoi, 2 bins': 3, 'Borzoi, 4 bins': 2, 'Borzoi, 6 bins': 1, 'Borzoi, 8 bins': 3, 'Borzoi, 10 bins': 1}</code></pre>
</div>
</div>
<p>These plots suggest that averaging an 8-bin window (equivalent to 2 Enformer bins) might be the best method to estimate gene expression, but not by much:</p>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb24-2">plt.scatter(spearman_corr_by_bin_size[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_bin_size[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi, 8 bins'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb24-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb24-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb24-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb24-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb24-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-23-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index.html</guid>
  <pubDate>Fri, 20 Oct 2023 07:00:00 GMT</pubDate>
</item>
</channel>
</rss>
