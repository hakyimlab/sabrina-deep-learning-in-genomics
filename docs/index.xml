<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>deep-learning-in-genomics</title>
<link>https://sabrinami.quarto.pub/deep-learning-in-genomics/index.html</link>
<atom:link href="https://sabrinami.quarto.pub/deep-learning-in-genomics/index.xml" rel="self" type="application/rss+xml"/>
<description>Sabrina&#39;s blog for Deep Learning in Genomics course</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Wed, 13 Dec 2023 08:00:00 GMT</lastBuildDate>
<item>
  <title>Plotting Br Rats’ Haplotype Distributions</title>
  <dc:creator>Sabrina Mi, Dan Munro</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index.html</link>
  <description><![CDATA[ 




<div class="cell" data-hash="index_cache/html/libraries_22bb44a289b2f55c57889e4dec72c44a">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/calc_genoprob to df function_0fefa23c377fe4368a58ca5a8bad9b56">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/chr20-qtl2-outputs/batch0_prob.rds"</span>)</span>
<span id="cb2-2">reshape_genoprob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(sample) {</span>
<span id="cb2-3">  sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][sample, , ]))</span>
<span id="cb2-4">  snps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(sample_prob), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(snps) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chrom"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pos"</span>)</span>
<span id="cb2-6">  sample_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(sample_prob, snps)</span>
<span id="cb2-7">  plot_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(sample_prob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(chrom, pos), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Strain"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prob"</span>)</span>
<span id="cb2-8">  plot_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pos <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(plot_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pos)</span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(plot_df)</span>
<span id="cb2-10">}</span></code></pre></div>
</div>
<section id="samples-plots" class="level3">
<h3 class="anchored" data-anchor-id="samples-plots">Samples Plots</h3>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_643c993f0e3e2668c4e753ee04c97584">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (sample <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) {</span>
<span id="cb3-2">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reshape_genoprob</span>(sample)</span>
<span id="cb3-3">  plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> pos, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> prob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> Strain)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> chrom, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qual"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Position (Mb)"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Estimated Proportion"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Br Sample: "</span>, sample)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb3-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb3-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-17">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.line.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>),</span>
<span id="cb3-18">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.border =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-19">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>,</span>
<span id="cb3-21">    )</span>
<span id="cb3-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(plot)</span>
<span id="cb3-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggsave</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(sample,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot =</span> plot, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dpi =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb3-24">}</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.
ℹ Please use the `linewidth` argument instead.</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index_files/figure-html/unnamed-chunk-1-2.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-13-plotting-Br-haplotype-distributions/index.html</guid>
  <pubDate>Wed, 13 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Concatenating HS Founder Epigenomes</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-07-concatenating-HS-reference-epigenomes/index.html</link>
  <description><![CDATA[ 




<section id="initialize-gene-interval-mapping" class="level2">
<h2 class="anchored" data-anchor-id="initialize-gene-interval-mapping">Initialize Gene-Interval Mapping</h2>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/Br_expressed_genes.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-3">    gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/metadata/intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-5">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-6">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>: gene_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"interval"</span>: intervals})</span>
<span id="cb2-7">mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span></code></pre></div>
</div>
</section>
<section id="concatenate-by-chromosome" class="level2">
<h2 class="anchored" data-anchor-id="concatenate-by-chromosome">Concatenate by Chromosome</h2>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/predictions_folder/HS_founders_genome_wide/predictions_2023-11-27/enformer_predictions"</span></span>
<span id="cb3-2">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/HS_founder_epigenomes"</span></span>
<span id="cb3-3">gene_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>).to_dict()</span>
<span id="cb3-4">founders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.listdir(predictions_dir)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for N in gene_dict.keys():</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     output_path = os.path.join(output_dir, "human", f"chr{N}_genes.h5")</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     with h5py.File(output_path, "w"):</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         pass</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     output_path = os.path.join(output_dir, "mouse", f"chr{N}_genes.h5")</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     with h5py.File(output_path, "w"):</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         pass</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> concatenate_predictions(N, completed):</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_dict[N]:</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> completed:</span>
<span id="cb5-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb5-5">        interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping[mapping[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>].item()</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> founders:</span>
<span id="cb5-7">            input_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype0"</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb5-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(input_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>:</span>
<span id="cb5-9">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> model <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>.keys():</span>
<span id="cb5-10">                    output_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(output_dir, model, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_genes.h5"</span>)</span>
<span id="cb5-11">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(output_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> output:</span>
<span id="cb5-12">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> output:</span>
<span id="cb5-13">                            gene_group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.create_group(gene)</span>
<span id="cb5-14">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-15">                            gene_group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output[gene]</span>
<span id="cb5-16">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_group:</span>
<span id="cb5-17">                            gene_group.create_dataset(individual, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[model][:])</span>
<span id="cb5-18">        completed.append(gene)</span>
<span id="cb5-19"></span>
<span id="cb5-20"></span>
<span id="cb5-21">            </span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">completed_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-2">concatenate_predictions(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>, completed_genes)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-07-concatenating-HS-reference-epigenomes/index.html</guid>
  <pubDate>Wed, 06 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Organizing founder haplotype probabilities into SQLite database</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-06-qtl2-probabilites-to-sqlite-database/index.html</link>
  <description><![CDATA[ 




<p>We want to store the qtl2 outputs in a database that is easily queryable by sample ID and genomic region.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5">probabilities_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/Br_genotype_probabilities'</span></span>
<span id="cb1-6">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [d <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(probabilities_dir) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.isdir(os.path.join(probabilities_dir, d))]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to read CSV files and create tables in SQLite database</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_sqlite_db(N):</span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to SQLite database</span></span>
<span id="cb2-4">    conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.db'</span>))</span>
<span id="cb2-5">    </span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb2-7">        check_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SELECT name FROM sqlite_master WHERE type='table' AND name='</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>individual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">';"</span></span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the result of the query into a DataFrame</span></span>
<span id="cb2-9">        existing_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(check_query, conn)</span>
<span id="cb2-10"></span>
<span id="cb2-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the table doesn't exist, create table</span></span>
<span id="cb2-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> existing_table.empty:</span>
<span id="cb2-13">            prob_csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.csv'</span>)</span>
<span id="cb2-14">            df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(prob_csv, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-15">            positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>N<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) </span>
<span id="cb2-16">            df.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, positions)</span>
<span id="cb2-17">            df.to_sql(individual, conn, if_exists<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'replace'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commit changes and close connection</span></span>
<span id="cb2-19">    conn.commit()</span>
<span id="cb2-20">    conn.close()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> N <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>):</span>
<span id="cb3-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Working on chromosome"</span>, N)</span>
<span id="cb3-3">    create_sqlite_db(N)</span></code></pre></div>
</div>
<section id="preview-database" class="level2">
<h2 class="anchored" data-anchor-id="preview-database">Preview Database</h2>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to the SQLite database</span></span>
<span id="cb4-2">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/eagle/AIHPC4Edu/sabrina/Br_genotype_probabilities/chr20_probabilities.db'</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a cursor object</span></span>
<span id="cb4-5">cursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb4-6"></span>
<span id="cb4-7">query_tables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT name FROM sqlite_master WHERE type='table';"</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute the query to get table names</span></span>
<span id="cb4-10">cursor.execute(query_tables)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch all table names</span></span>
<span id="cb4-13">tables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.fetchall()</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through tables and print their data</span></span>
<span id="cb4-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> table <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tables[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb4-17">    table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Table: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-19">    </span>
<span id="cb4-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Query to fetch all data from the table</span></span>
<span id="cb4-21">    query_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SELECT * FROM `</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">` LIMIT 3;"</span></span>
<span id="cb4-22">    cursor.execute(query_data)</span>
<span id="cb4-23">    </span>
<span id="cb4-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch all data from the table</span></span>
<span id="cb4-25">    table_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cursor.fetchall()</span>
<span id="cb4-26">    </span>
<span id="cb4-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the table's data</span></span>
<span id="cb4-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> table_data:</span>
<span id="cb4-29">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the database connection</span></span>
<span id="cb4-31">conn.close()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table: 00078A02B6
(3201, 0.499262964281572, 1.88520490019066e-06, 0.162477747051664, 0.0129312367910615, 0.162477747062661, 0.162477747068122, 1.88520490019106e-06, 0.0003687873347151)
(7226, 0.499997674934029, 4.75965339555511e-08, 0.162469115322473, 0.0125925304011694, 0.162469115333482, 0.162469115338949, 4.75965339555847e-08, 2.35347571803293e-06)
(7266, 0.499999935708622, 3.16496421849708e-08, 0.162469769268664, 0.0125905455363656, 0.162469769279672, 0.162469769285139, 3.16496421849787e-08, 1.47622298115919e-07)
Table: 00078A16DB
(3201, 0.499262964281493, 1.88520490019009e-06, 0.162477747051738, 0.0129312367910557, 0.16247774706207, 0.162477747068565, 1.88520490019092e-06, 0.0003687873347151)
(7226, 0.499997674934177, 4.75965339555652e-08, 0.162469115322621, 0.0125925304011694, 0.162469115332964, 0.162469115339466, 4.75965339555987e-08, 2.35347571803365e-06)
(7266, 0.499999935708543, 3.16496421849658e-08, 0.162469769268737, 0.0125905455363599, 0.162469769279081, 0.162469769285583, 3.16496421849737e-08, 1.47622298115918e-07)
Table: 000789FF72
(3201, 0.0003664564160026, 1.85213961479645e-06, 0.324211104988895, 0.0254914257674219, 0.325349456441836, 0.324211105067843, 1.85213961479693e-06, 0.0003667470385653)
(7226, 2.21861272689951e-08, 1.60772193495428e-10, 0.324559451115323, 0.0251804466288168, 0.325700315103997, 0.324559451194463, 1.60772193495378e-10, 3.13450143706256e-07)
(7266, 9.90597147195846e-12, 1.42360488857325e-13, 0.324560774755233, 0.0251764992806042, 0.325701658830483, 0.324560774834422, 1.4236048885734499e-13, 2.92289221332857e-07)
Table: 0007929C19
(3201, 0.0003664564160031, 1.85213961479936e-06, 0.179968257973192, 0.459358312378058, 0.179968263935356, 0.179968257979997, 1.85213961479891e-06, 0.000366747038566)
(7226, 2.21861272690162e-08, 1.60772193495526e-10, 0.179998235542256, 0.460004951434442, 0.179998241517562, 0.179998235549009, 1.60772193495612e-10, 3.13450143706583e-07)
(7266, 9.905971471970129e-12, 1.42360488857486e-13, 0.179997013978896, 0.460008659782977, 0.179997019954297, 0.179997013985643, 1.42360488857615e-13, 2.92289221333234e-07)
Table: 000789FF64
(3201, 0.499262964281413, 1.88520490018993e-06, 0.162477747051369, 0.0129312367910499, 0.162477747062366, 0.162477747068565, 1.88520490019076e-06, 0.0003687873347151)
(7226, 0.499997674934097, 4.75965339555576e-08, 0.162469115322252, 0.0125925304011637, 0.16246911533326, 0.162469115339466, 4.75965339555912e-08, 2.35347571803323e-06)
(7266, 0.49999993570869, 3.16496421849751e-08, 0.162469769268442, 0.0125905455363599, 0.16246976927945, 0.162469769285657, 3.1649642184983e-08, 1.47622298115919e-07)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr20'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7230</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7230</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span>
<span id="cb6-2">probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]:</span>
<span id="cb6-4">    db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(probabilities_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_probabilities.db"</span>)</span>
<span id="cb6-5">    conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(db)</span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a cursor object</span></span>
<span id="cb6-7">    cursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameterized query to select rows within the specified interval for the 'POS' column</span></span>
<span id="cb6-9">    query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SELECT * FROM `</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">` WHERE POS BETWEEN </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> AND </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">;"</span></span>
<span id="cb6-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute the query with the interval bounds as parameters</span></span>
<span id="cb6-11">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(query, conn)</span>
<span id="cb6-12">    probabilities[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df</span>
<span id="cb6-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(probabilities)</span>
<span id="cb6-14">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'00078A02B6':     POS       ACI            BN       BUF      F344      M520        MR  \
0  7226  0.499998  4.759653e-08  0.162469  0.012593  0.162469  0.162469   
1  7266  0.500000  3.164964e-08  0.162470  0.012591  0.162470  0.162470   
2  7269  0.500000  3.039399e-08  0.162470  0.012590  0.162470  0.162470   
3  7341  0.500000  2.313504e-09  0.162471  0.012587  0.162471  0.162471   
4  7581  0.500000  2.433167e-09  0.162475  0.012575  0.162475  0.162475   

            WKY            WN  
0  4.759653e-08  2.353476e-06  
1  3.164964e-08  1.476223e-07  
2  3.039399e-08  1.459054e-07  
3  2.313504e-09  1.265991e-07  
4  2.433167e-09  6.040197e-08  , '00078A16DB':     POS       ACI            BN       BUF      F344      M520        MR  \
0  7226  0.499998  4.759653e-08  0.162469  0.012593  0.162469  0.162469   
1  7266  0.500000  3.164964e-08  0.162470  0.012591  0.162470  0.162470   
2  7269  0.500000  3.039399e-08  0.162470  0.012590  0.162470  0.162470   
3  7341  0.500000  2.313504e-09  0.162471  0.012587  0.162471  0.162471   
4  7581  0.500000  2.433167e-09  0.162475  0.012575  0.162475  0.162475   

            WKY            WN  
0  4.759653e-08  2.353476e-06  
1  3.164964e-08  1.476223e-07  
2  3.039399e-08  1.459054e-07  
3  2.313504e-09  1.265991e-07  
4  2.433167e-09  6.040197e-08  , '000789FF72':     POS       ACI            BN       BUF      F344      M520        MR  \
0  7226  0.499998  4.759653e-08  0.162469  0.012593  0.162469  0.162469   
1  7266  0.500000  3.164964e-08  0.162470  0.012591  0.162470  0.162470   
2  7269  0.500000  3.039399e-08  0.162470  0.012590  0.162470  0.162470   
3  7341  0.500000  2.313504e-09  0.162471  0.012587  0.162471  0.162471   
4  7581  0.500000  2.433167e-09  0.162475  0.012575  0.162475  0.162475   

            WKY            WN  
0  4.759653e-08  2.353476e-06  
1  3.164964e-08  1.476223e-07  
2  3.039399e-08  1.459054e-07  
3  2.313504e-09  1.265991e-07  
4  2.433167e-09  6.040197e-08  }</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-06-qtl2-probabilites-to-sqlite-database/index.html</guid>
  <pubDate>Wed, 06 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Den’s haplotypes for 88 outbred rats</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-01-Den-outbred-rats-haplotypes/index.html</link>
  <description><![CDATA[ 




<p>Den’s files are all on TSCC:</p>
<ol type="1">
<li>Run qtl2-founder-haps: <code>/projects/ps-palmer/DenghuiChen/1U01DA051234/HS/eQTL/haplotypes_BiSNPs/code/run_qtl2_HaoChen.sh</code></li>
<li>Founder pair haplotypes: <code>/projects/ps-palmer/DenghuiChen/1U01DA051234/HS/eQTL/haplotypes_BiSNPs/qtl2_out/chr*_haplotype.parquet.gz</code></li>
<li>Single founder dosage: <code>/projects/ps-palmer/DenghuiChen/1U01DA051234/HS/eQTL/haplotypes_BiSNPs/qtl2_out/chr*_haplotype_collapsed.parquet.gz</code></li>
</ol>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyarrow.parquet <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pq</span>
<span id="cb1-2">haplo_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/outbred_rats_qtl2_outputs'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">founder_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pq.read_table(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>haplo_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/chr20_haplotype.parquet.gz'</span>)</span>
<span id="cb2-2">single_founder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pq.read_table(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>haplo_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/chr20_haplotype_collapsed.parquet.gz'</span>)</span></code></pre></div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-12-01-Den-outbred-rats-haplotypes/index.html</guid>
  <pubDate>Fri, 01 Dec 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Processing qtl2-founder-haps probabilies</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-26-qtl2-probabilities-to-csv/index.html</link>
  <description><![CDATA[ 




<p>I eventually want to organize these probabilities indexed by position in an h5 file, so that given a genomic region, for each individual, we can query probabilities at all snps in the interval. But for now, I just combine the .rds outputs into csvs for each individual, with snp IDs as row names and the 8 founder rats as the columns.</p>
<p>I created a new folder <code>/home/s1mi/Br_genotype_probabilities</code> with subdirectories for each chromosome to store csvs for each individual.</p>
<section id="concatenate-probabilites-by-chromosome" class="level2">
<h2 class="anchored" data-anchor-id="concatenate-probabilites-by-chromosome">Concatenate Probabilites by Chromosome</h2>
<div class="cell" data-hash="index_cache/html/global variables_13ccd6cee6522322e68836a0424f99c2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">qtl2_output_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/qtl2-outputs/"</span></span>
<span id="cb1-2">batch_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-3">n_batches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span></span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/functions_608fa2be687a06842e7d564bec730ce6">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&amp;%"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a,b) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(a,b,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-2">split_by_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(chromosome) {</span>
<span id="cb2-3">  chr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(chromosome)</span>
<span id="cb2-4">  prob_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> qtl2_output_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-qtl2-outputs/"</span></span>
<span id="cb2-5">  output_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Br_genotype_probabilities/"</span></span>
<span id="cb2-6">  batches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(prob_dir)</span>
<span id="cb2-7"></span>
<span id="cb2-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (file <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> batches) {</span>
<span id="cb2-9">    pr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(prob_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> file)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb2-10">    samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(pr)</span>
<span id="cb2-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (sample <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples) {</span>
<span id="cb2-12">      sample_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> output_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> sample</span>
<span id="cb2-13">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(sample_dir)) {</span>
<span id="cb2-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(sample_dir)</span>
<span id="cb2-15">      }</span>
<span id="cb2-16">      csv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> sample_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/chr"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_probabilities.csv"</span></span>
<span id="cb2-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(csv)) {</span>
<span id="cb2-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Write Probabilities"</span>)</span>
<span id="cb2-19">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(pr[sample, ,]), csv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quote=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-20">      }</span>
<span id="cb2-21">    }</span>
<span id="cb2-22">  }</span>
<span id="cb2-23">}</span></code></pre></div>
</div>
</section>
<section id="write-csvs" class="level2">
<h2 class="anchored" data-anchor-id="write-csvs">Write CSVs</h2>
<div class="cell" data-hash="index_cache/html/run_a7e819fd86d892d808c46b5366a7438a">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chromosome:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>((i)))</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_by_sample</span>(i)</span>
<span id="cb3-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb3-5">}</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-26-qtl2-probabilities-to-csv/index.html</guid>
  <pubDate>Sun, 26 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Br rat haplotype probabilities from HS founders by chromosome</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/index.html</link>
  <description><![CDATA[ 




<section id="prepare-chromosome-inputs" class="level3">
<h3 class="anchored" data-anchor-id="prepare-chromosome-inputs">Prepare Chromosome Inputs</h3>
<p>We first generate chromosome-wide input files with Dan’s original make_qtl2_inputs function locally, because I’m having so much trouble creating a conda environment with both R and python’s pysam libraries on polaris.</p>
<pre><code>conda activate genomics
cd Github/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array
GENO_DIR=/Users/sabrinami/Desktop/Sabrina/2022-23/tutorials/enformer_pipeline_test/rn7_data
DATA_DIR=/Users/sabrinami/Desktop/qtl2_data
for CHR in {1..20}
do
    python make_qtl2_inputs.py $GENO_DIR/BrainVCFs/chr${CHR}.vcf.gz $GENO_DIR/FounderVCFs/chr${CHR}.vcf.gz --working-dir $DATA_DIR/chr${CHR}-qtl2-founder-haps --gmap-dir $DATA_DIR/genetic_map
done

scp -r $DATA_DIR/chr*-qtl2-founder-haps polaris:qtl2-data</code></pre>
<p><a href="https://github.com/hakyimlab/sabrina-deep-learning-in-genomics/blob/main/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/run_qtl2_batches.py"><code>run_qtl2_batches.py</code></a> splits genotype inputs for a given chromsome into batches of 10 samples. I passed in chromosome number as a variables when I submitted <a href="https://github.com/hakyimlab/sabrina-deep-learning-in-genomics/blob/main/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/qtl2-founder-haps-by-chromsome.pbs"><code>qtl2-founder-haps-by-chromsome.pbs</code></a>.</p>
<pre><code>cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array
for i in {1..20}
do
    qsub -v CHR=${i} -N chr${i}-qtl2-founder-haps-by-chromosome qtl2-founder-haps-by-chromsome.pbs
    sleep 5
done
</code></pre>
</section>
<section id="fill-in-gaps" class="level3">
<h3 class="anchored" data-anchor-id="fill-in-gaps">Fill in Gaps</h3>
<pre><code>module load conda
conda activate genomics
GENO_DIR=/home/s1mi/enformer_rat_data/genotypes
DATA_DIR=/home/s1mi/qtl2-data
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array
python run_qtl2_batches.py --data_dir $DATA_DIR/chr1-qtl2-founder-haps --output_dir /home/s1mi/qtl2-outputs/chr1-qtl2-outputs --work_dir $DATA_DIR/tmp-chr1-qtl2-founder-haps
</code></pre>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-22-qtl2-founder-haps-pbs-job-array/index.html</guid>
  <pubDate>Wed, 22 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Splitting chr20 Brain rats into batches for qtl2 analysis</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-19-split-qlt2-inputs-batches/index.html</link>
  <description><![CDATA[ 




<p>We’ll split the 340 Br rats into batches of 10. The goal is to do this without creating a new VCF for each batchThe following code subsets the chr20 input files, specifically geno.csv and covar.csv files, that were generated with <a href="https://sabrina-dl.hakyimlab.org/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/">qtl2-founder-haps code</a>. I set up by copying over the other input files that should stay the same.</p>
<pre><code>mkdir tmp-chr20-qtl2-founder-haps
mkdir chr20-qtl2-outputs
cp chr20-qtl2-founder-haps/control.yaml tmp-chr20-qtl2-founder-haps/control.yaml
cp chr20-qtl2-founder-haps/founder_geno.csv tmp-chr20-qtl2-founder-haps/founder_geno.csv
cp chr20-qtl2-founder-haps/gmap.csv tmp-chr20-qtl2-founder-haps/gmap.csv
cp chr20-qtl2-founder-haps/pmap.csv tmp-chr20-qtl2-founder-haps/pmap.csv</code></pre>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="cb2-4">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/chr20-qtl2-founder-haps'</span></span>
<span id="cb2-5">tmp_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/tmp-chr20-qtl2-founder-haps'</span></span>
<span id="cb2-6">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/chr20-qtl2-outputs'</span></span>
<span id="cb2-7">geno <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/geno.csv'</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb2-8">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-9">n_batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(geno.columns) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> batch_size</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> qtl_command(output_file, n_cores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-2">    cmd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'library(qtl2); '</span></span>
<span id="cb3-4">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cross &lt;- read_cross2("</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tmp_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/control.yaml"); '</span></span>
<span id="cb3-5">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_cores<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">); '</span></span>
<span id="cb3-6">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">")'</span></span>
<span id="cb3-7">    )</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cmd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_batches):</span>
<span id="cb4-2">    tic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb4-3">    geno_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geno.iloc[:, i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>batch_size]</span>
<span id="cb4-4">    samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geno_df.columns.to_list()</span>
<span id="cb4-5">    covar_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>: samples, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'generations'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(samples)})</span>
<span id="cb4-6">    geno_df.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tmp_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/geno.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-7">    covar_df.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tmp_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/covar.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-8">    cmd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qtl_command(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/batch</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_prob.rds'</span>, n_cores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-9">    subprocess.run(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"R -e '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cmd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>, shell<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-10">    toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb4-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Batch:"</span>, i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..."</span>, (toc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tic)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minutes"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch0_prob.rds")
&gt; 
&gt; 
Batch: 1 ... 5.516161077900324 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch1_prob.rds")
&gt; 
&gt; 
Batch: 2 ... 5.188156945933588 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch2_prob.rds")
&gt; 
&gt; 
Batch: 3 ... 5.320735947232849 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch3_prob.rds")
&gt; 
&gt; 
Batch: 4 ... 5.9591666307009294 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch4_prob.rds")
&gt; 
&gt; 
Batch: 5 ... 5.304590424666336 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch5_prob.rds")
&gt; 
&gt; 
Batch: 6 ... 5.208924225267643 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch6_prob.rds")
&gt; 
&gt; 
Batch: 7 ... 5.362514834082686 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch7_prob.rds")
&gt; 
&gt; 
Batch: 8 ... 5.318476139800623 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch8_prob.rds")
&gt; 
&gt; 
Batch: 9 ... 5.43069331633354 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch9_prob.rds")
&gt; 
&gt; 
Batch: 10 ... 5.109263749249901 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch10_prob.rds")
&gt; 
&gt; 
Batch: 11 ... 5.2156281993336355 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch11_prob.rds")
&gt; 
&gt; 
Batch: 12 ... 5.699721770366887 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch12_prob.rds")
&gt; 
&gt; 
Batch: 13 ... 5.225824187783291 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch13_prob.rds")
&gt; 
&gt; 
Batch: 14 ... 4.885130250700361 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch14_prob.rds")
&gt; 
&gt; 
Batch: 15 ... 5.367877415949867 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch15_prob.rds")
&gt; 
&gt; 
Batch: 16 ... 5.298072982882149 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch16_prob.rds")
&gt; 
&gt; 
Batch: 17 ... 5.088831246948879 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch17_prob.rds")
&gt; 
&gt; 
Batch: 18 ... 5.172468327915218 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch18_prob.rds")
&gt; 
&gt; 
Batch: 19 ... 5.2715786983006785 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch19_prob.rds")
&gt; 
&gt; 
Batch: 20 ... 4.73374969640087 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch20_prob.rds")
&gt; 
&gt; 
Batch: 21 ... 4.411744385201018 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch21_prob.rds")
&gt; 
&gt; 
Batch: 22 ... 4.215313976900264 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch22_prob.rds")
&gt; 
&gt; 
Batch: 23 ... 4.53186046264988 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch23_prob.rds")
&gt; 
&gt; 
Batch: 24 ... 3.9959222979164526 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch24_prob.rds")
&gt; 
&gt; 
Batch: 25 ... 3.932872584433062 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch25_prob.rds")
&gt; 
&gt; 
Batch: 26 ... 4.306167855666717 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch26_prob.rds")
&gt; 
&gt; 
Batch: 27 ... 4.43262422256715 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch27_prob.rds")
&gt; 
&gt; 
Batch: 28 ... 4.370494974033985 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch28_prob.rds")
&gt; 
&gt; 
Batch: 29 ... 4.498125915382601 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch29_prob.rds")
&gt; 
&gt; 
Batch: 30 ... 5.5711056028997215 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch30_prob.rds")
&gt; 
&gt; 
Batch: 31 ... 5.131772985549954 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch31_prob.rds")
&gt; 
&gt; 
Batch: 32 ... 5.087727682616484 minutes

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

&gt; library(qtl2); cross &lt;- read_cross2("/home/s1mi/tmp-chr20-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 2); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "/home/s1mi/chr20-qtl2-outputs/batch32_prob.rds")</code></pre>
</div>
</div>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-19-split-qlt2-inputs-batches/index.html</guid>
  <pubDate>Sun, 19 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Debugging qtl2’s calc_genoprob</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-17-debugging-qtl2-founder-haps/index.html</link>
  <description><![CDATA[ 




<section id="subset-individuals" class="level3">
<h3 class="anchored" data-anchor-id="subset-individuals">Subset Individuals</h3>
<p>For debugging, we filter the VCFs to 2 samples:</p>
<pre><code>cd /Users/sabrinami/Desktop/qtl2_data
bcftools view -s '000789972A,0007899884' -Oz -o test/chr20.vcf.gz BrainVCFs/chr20.vcf.gz
bcftools index -t test/chr20.vcf.gz
bcftools view -s '000789972A,0007899884' -Oz -o test/chr19.vcf.gz BrainVCFs/chr19.vcf.gz
bcftools index -t test/chr19.vcf.gz
</code></pre>
<p>Create the input files:</p>
<pre><code>conda activate genomics
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py test/chr20.vcf.gz FounderVCFs/chr20.vcf.gz output/chr20_prob.rds --working-dir chr20-test
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py test/chr19.vcf.gz FounderVCFs/chr19.vcf.gz output/chr19_prob.rds --working-dir chr19-test
</code></pre>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_475932e5ff924ca91e9f463b2bbf0cac">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&amp;%"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a,b) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(a,b,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-2">data_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data/'</span></span>
<span id="cb3-3">chr20_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(data_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output/chr20_prob.rds'</span>)</span>
<span id="cb3-4">chr19_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(data_dir <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&amp;%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output/chr19_prob.rds'</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6">chr20_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][, , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>, , chr20:3201

                    ACI           BN       BUF       F344      M520        MR
000789972A 0.4992629643 1.885205e-06 0.1389550 0.01293124 0.2504721 0.0980062
0007899884 0.0003664564 1.852144e-06 0.3551907 0.02549159 0.3575424 0.2610384
                    WKY           WN
000789972A 1.885205e-06 0.0003687873
0007899884 1.852144e-06 0.0003667471

, , chr20:7226

                    ACI           BN       BUF       F344      M520         MR
000789972A 4.999977e-01 4.759653e-08 0.1388944 0.01259253 0.2506577 0.09785527
0007899884 2.218615e-08 1.648856e-10 0.3556074 0.02518061 0.3579643 0.26124736
                    WKY           WN
000789972A 4.759653e-08 2.353476e-06
0007899884 1.648856e-10 3.134648e-07

, , chr20:7266

                    ACI           BN       BUF       F344      M520         MR
000789972A 4.999999e-01 3.164964e-08 0.1388947 0.01259055 0.2506599 0.09785478
0007899884 9.923816e-12 4.269602e-12 0.3556093 0.02517666 0.3579662 0.26124757
                    WKY           WN
000789972A 3.164964e-08 1.476223e-07
0007899884 4.269602e-12 2.923039e-07

, , chr20:7269

                    ACI           BN       BUF       F344      M520         MR
000789972A 4.999999e-01 3.039399e-08 0.1388947 0.01259039 0.2506600 0.09785475
0007899884 1.107912e-12 4.627740e-12 0.3556094 0.02517635 0.3579663 0.26124758
                    WKY           WN
000789972A 3.039399e-08 1.459054e-07
0007899884 4.627740e-12 2.906267e-07

, , chr20:7341

                    ACI           BN       BUF       F344      M520        MR
000789972A 5.000000e-01 2.313504e-09 0.1388951 0.01258686 0.2506640 0.0978539
0007899884 8.523267e-12 1.790190e-09 0.3556128 0.02516929 0.3579697 0.2612479
                    WKY           WN
000789972A 2.313504e-09 1.265991e-07
0007899884 1.790190e-09 2.523467e-07</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(chr20_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]      2      8 202387</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">chr19_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][, , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>, , chr19:2445

                 ACI           BN       BUF         F344         M520        MR
000789972A 0.2438649 4.366846e-08 0.2844450 0.0006018009 0.0006018009 0.2438649
0007899884 0.2434618 4.366846e-08 0.2848848 0.0006018009 0.0006018009 0.2434618
                    WKY        WN
000789972A 0.0006018009 0.2260199
0007899884 0.0006018009 0.2263861

, , chr19:2531

                 ACI           BN       BUF        F344        M520        MR
000789972A 0.2438709 4.949989e-10 0.2844534 0.000593287 0.000593287 0.2438709
0007899884 0.2434678 4.949989e-10 0.2848934 0.000593287 0.000593287 0.2434678
                   WKY        WN
000789972A 0.000593287 0.2260249
0007899884 0.000593287 0.2263911

, , chr19:2727

                 ACI          BN       BUF         F344         M520        MR
000789972A 0.2438845 2.10961e-13 0.2844724 0.0005741863 0.0005741863 0.2438845
0007899884 0.2434814 2.10961e-13 0.2849124 0.0005741863 0.0005741863 0.2434814
                    WKY        WN
000789972A 0.0005741863 0.2260360
0007899884 0.0005741863 0.2264023

, , chr19:2728

                 ACI           BN       BUF         F344         M520        MR
000789972A 0.2438846 2.351976e-13 0.2844726 0.0005740712 0.0005740712 0.2438846
0007899884 0.2434814 2.351976e-13 0.2849125 0.0005740712 0.0005740712 0.2434814
                    WKY        WN
000789972A 0.0005740712 0.2260361
0007899884 0.0005740712 0.2264024

, , chr19:3021

                 ACI           BN       BUF         F344         M520        MR
000789972A 0.2439049 6.487041e-12 0.2845011 0.0005454151 0.0005454151 0.2439049
0007899884 0.2435017 6.487041e-12 0.2849412 0.0005454151 0.0005454151 0.2435017
                    WKY        WN
000789972A 0.0005454151 0.2260528
0007899884 0.0005454151 0.2264192</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(chr19_prob[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]      2      8 139713</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-17-debugging-qtl2-founder-haps/index.html</guid>
  <pubDate>Fri, 17 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Testing qtl’s founder haplotype probability inferences on a single chromosome</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/index.html</link>
  <description><![CDATA[ 




<p>We are trying to work around memory limitations by splitting the genotype inferences by chromosome. We’ll first try to get working results for chromosome 12.</p>
<section id="convert-dans-code" class="level3">
<h3 class="anchored" data-anchor-id="convert-dans-code">Convert Dan’s Code</h3>
<p>My first attempt was to copy his make_qtl_inputs and take out any loops iterating over each chromosome number. However, I run into an unexplainable <code>negative length vectors are not allowed</code> error, even though I checked that the files (gmap.csv, pmap.csv, geno.csv, founder_geno.csv) generated by the new code are identical to the original when subsetted to lines with “chr20”.</p>
<div class="cell" data-hash="index_cache/html/make_qtl_inputs_be26d11ac927d23705fca74c6b8a7c60">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qtl2_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_qtl_inputs</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-3">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data'</span></span>
<span id="cb1-4">individuals_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BrainVCFs'</span>)</span>
<span id="cb1-5">founders_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FounderVCFs'</span>)</span>
<span id="cb1-6">gmap_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>os.path.join(data_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'genetic_map'</span>)</span>
<span id="cb1-7">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data/qtl_inputs'</span></span>
<span id="cb1-8">make_qtl_inputs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr20'</span>, individuals_dir, founders_dir, gmap_dir, output_dir,snps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
</div>
<p>Now run the R code:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-1_9ac05524c49206076a3fab304e9db5ac">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/qtl2_data/qtl_inputs/chr20'</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(qtl2)</span>
<span id="cb2-3">cross <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_cross2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"control.yaml"</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(cross, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cross.rds'</span>)</span>
<span id="cb2-4">pr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calc_genoprob</span>(cross, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error_prob =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(pr, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'genoprob.rds'</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in .calc_genoprob2(cross$crosstype, t(cross$geno[[chr]][group[[i]], : negative length vectors are not allowed</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in saveRDS(pr, "genoprob.rds"): object 'pr' not found</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">pr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">genoprob_to_alleleprob</span>(pr); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(pr, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alleleprob.rds"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in genoprob_to_alleleprob(pr): object 'pr' not found</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in saveRDS(pr, "alleleprob.rds"): object 'pr' not found</code></pre>
</div>
</div>
<p>It’s very puzzling to me why this cross object is causing issues that didn’t appear when we marked the whole genome.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-2_d1a2559addc989cf19e5ac6e795766ce">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cross)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Object of class cross2 (crosstype "hs")

Total individuals               340
No. genotyped individuals       340
No. phenotyped individuals        0
No. with both geno &amp; pheno        0
No. covariates                    1
No. phenotype covariates          0

No. chromosomes                   1
Total markers                202387

No. markers by chr:
    20 
202387 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readRDS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/sabrinami/Github/qtl2-founder-haps/tmp-qtl2-founder-haps/cross.rds"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Object of class cross2 (crosstype "hs")

Total individuals                340
No. genotyped individuals        340
No. phenotyped individuals         0
No. with both geno &amp; pheno         0
No. covariates                     1
No. phenotype covariates           0

No. chromosomes                   20
Total markers                7144158

No. markers by chr:
     1      2      3      4      5      6      7      8      9     10     11 
720616 810342 423788 503477 532683 378129 398571 345747 328200 285406 239651 
    12     13     14     15     16     17     18     19     20 
133178 377791 324143 273548 271191 228981 226616 139713 202387 </code></pre>
</div>
</div>
</section>
<section id="original-code" class="level3">
<h3 class="anchored" data-anchor-id="original-code">Original Code</h3>
<p>I’m going back to Dan’s original code, passing in chromosome 20 VCFs. My inital reasoning for converting Dan’s code to a module was to 1) save memory by not reading in genetic mapping files for every chromosome and 2) have better control over file naming, and 3) break up the task into preparing input files (python) and qtl2 computations (R), but I realized it’s not worth the trouble of debugging.</p>
<pre><code>cd /Users/sabrinami/Desktop/qtl2_data
conda activate genomics
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py BrainVCFs/chr20.vcf.gz FounderVCFs/chr20.vcf.gz output/chr20_prob.rds --working-dir chr20-qtl2-founder-haps
</code></pre>
<p>Since I’m getting the same error as before, I want to check that it’s not an issue with chromosome 20.</p>
<pre><code>cd /Users/sabrinami/Desktop/qtl2_data
conda activate genomics
python /Users/sabrinami/Github/qtl2-founder-haps/qtl2-founder-haps.py BrainVCFs/chr19.vcf.gz FounderVCFs/chr19.vcf.gz output/chr19_prob.rds --working-dir chr19-qtl2-founder-haps
</code></pre>
<p>It seems to run fine for chromosome 19, although I can’t confirm until I try running it on Polaris or Expanse with sufficient memory. On my local computer (8G memory), the R code ran for just under 2 hours before being killed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/macbook_calc_genoprob_bug.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">R on MacBook</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-14-calculating-genotype-probabilities-by-chromosome/index.html</guid>
  <pubDate>Tue, 14 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>All of the bugs encountered when calculating haplotype probabilites from founders</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-08-calculating-Br-genotype-probabilities/index.html</link>
  <description><![CDATA[ 




<p>I am using Dan Munro’s scripts to compute probabilities across the 8 founders per locus per individual. His code uses the R qtl2 package.</p>
<p>Github: <a href="https://github.com/daniel-munro/qtl2-founder-haps/tree/main">https://github.com/daniel-munro/qtl2-founder-haps/tree/main</a></p>
<p>The <code>genetic_map</code> subdirectory contains genetic mapping files from the older build rn6. I downloaded rn7 genetic markers from his preprint, <a href="https://www.biorxiv.org/content/10.1101/2023.04.13.536694v2.article-info">A revamped rat reference genome improves the discovery of genetic diversity in laboratory rats</a>, <a href="https://www.biorxiv.org/content/biorxiv/early/2023/09/29/2023.04.13.536694/DC2/embed/media-2.xlsx?download=true">Supplementary Table S2</a>.</p>
<p>I first saved Table S2 as a CSV, then split it by chromosome.</p>
<section id="write-genetic-mapping-files" class="level2">
<h2 class="anchored" data-anchor-id="write-genetic-mapping-files">Write Genetic Mapping Files</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the original CSV file</span></span>
<span id="cb1-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/Users/sabrinami/Desktop/MAP.csv'</span>)</span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name, group <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CHR'</span>):</span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> group[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POS'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CHR'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cM'</span>]]</span>
<span id="cb1-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/Users/sabrinami/Github/qtl2-founder-haps/rn7_genetic_map/MAP4chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt.gz'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, compression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gzip'</span>)</span></code></pre></div>
</div>
<pre><code>conda activate genomics
cd ~/Github/qtl2-founder-haps
DATA_DIR=~/Desktop/Sabrina/2022-23/tutorials/enformer_pipeline_test/rn7_data
python qtl2-founder-haps.py $DATA_DIR/filtered.Brain.rn7.vcf.gz $DATA_DIR/Palmer_HS_founders_mRatBN7_filtered.vcf.gz probs.rds --gmap-dir rn7_genetic_map
</code></pre>
<p>The <code>make_qtl_inputs</code> function in line 160 of <code>qtl2-founder-haps.py</code> writes input files for the R package qtl2, specifically the <code>calc_genoprob</code> function that computes haplotype probabilities for each individual at each loci. I was able to run through the <code>make_qtl_inputs</code> locally, but the process was killed during the R computations:</p>
<pre><code>&gt; library(qtl2); cross &lt;- read_cross2("tmp-qtl2-founder-haps/control.yaml"); pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 1); pr &lt;- genoprob_to_alleleprob(pr); saveRDS(pr, "probs.rds")
Error: vector memory exhausted (limit reached?)
Execution halted
</code></pre>
<p>I copied over the input files in <code>~/Github/qtl2-founder-haps/tmp-qtl2-founder-haps</code> to polaris and started an interactive job: <code>qsub -I -A AIHPC4EDU -l select=1:ncpus=64 -l walltime=2:00:00 -l filesystems=home -q preemptable</code></p>
<pre><code>cd ~/Github/qtl2-founder-haps/tmp-qtl2-founder-haps
module load conda
conda activate genomics</code></pre>
<p>Then in R:</p>
<pre><code>library(qtl2)
cross &lt;- read_cross2("control.yaml")
pr &lt;- calc_genoprob(cross, error_prob = 0.01, cores = 64)
pr &lt;- genoprob_to_alleleprob(pr)
saveRDS(pr, "~/Github/qtl2-founder-haps/probs.rds")
</code></pre>
<p><strong>Debugging:</strong> I am stuck at the step calling <code>calc_genoprob</code>; after 25 minutes of running, the process gets killed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-08-calculating-Br-genotype-probabilities/polaris_calc_genoprob_bug.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">R on Polaris Compute Node with 64 CPUs</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-08-calculating-Br-genotype-probabilities/index.html</guid>
  <pubDate>Wed, 08 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Running Enformer genome-wide on HS founder rats</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/pipeline.html</link>
  <description><![CDATA[ 




<p>After subset to genes that were expressed in rat brain tissue, we end up with 23,867 genomic regions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">rn7_reference_brain_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/rn7_reference_predicted_vs_observed_expression.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-3">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(rn7_reference_brain_gex.index[rn7_reference_brain_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'observed'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Br_expressed_genes.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-5">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(gene_list))</span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## write intervals.txt</span></span>
<span id="cb1-7">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,  index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geneId'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_intervals(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>):</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb1-12">            gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot_df.loc[gene]</span>
<span id="cb1-13">            tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb1-14">            interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-15">            f.write(interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">write_intervals(gene_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata/intervals.txt"</span>)</span></code></pre></div>
</div>
<section id="run-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="run-pipeline">Run Pipeline</h3>
<pre><code>module load conda
conda activate enformer-predict-tools

python /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/founder_epigenome_config.json</code></pre>
</section>
<section id="check-predictions" class="level2">
<h2 class="anchored" data-anchor-id="check-predictions">Check Predictions</h2>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb3-2">h5_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/Br_predictions/predictions_folder/HS_founders_genome_wide/predictions_2023-11-27/enformer_predictions/BN/haplotype0/chr10_100115821_100115821_predictions.h5"</span></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(h5_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hf.items():</span>
<span id="cb3-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key)</span>
<span id="cb3-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(value[:])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>human
[[0.09566703 0.10165276 0.08404372 ... 0.00587161 0.06136435 0.04359803]
 [0.10662825 0.1139144  0.09694222 ... 0.00824633 0.07404334 0.06823193]
 [0.09993935 0.10983597 0.09347952 ... 0.00431036 0.06122369 0.04992136]
 ...
 [0.06703217 0.06465818 0.05357087 ... 0.01535742 0.05460119 0.04726781]
 [0.03674487 0.03669333 0.02561367 ... 0.00362175 0.01091049 0.00503846]
 [0.06257919 0.07025048 0.06735092 ... 0.00419223 0.00971855 0.00822341]]
mouse
[[0.09508593 0.04494116 0.08364319 ... 0.24798432 0.38567212 0.3783706 ]
 [0.09461962 0.05752731 0.08894978 ... 0.299645   0.44955045 0.44385162]
 [0.10998561 0.07225344 0.09443015 ... 0.2621954  0.35028058 0.3864176 ]
 ...
 [0.04612014 0.0642754  0.07402609 ... 0.4328676  1.1677598  0.7585961 ]
 [0.02304047 0.02882738 0.04057743 ... 0.13793258 0.27883688 0.23426382]
 [0.04535931 0.05920705 0.08596259 ... 0.24028273 0.40435565 0.40454867]]</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-07-HS-founder-epigenomes/pipeline.html</guid>
  <pubDate>Tue, 07 Nov 2023 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Running personalized Enformer pipeline on Br (round 2)</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-02-Br-personalized-prediction-additional-genes/pipeline.html</link>
  <description><![CDATA[ 




<section id="selecting-genes" class="level2">
<h2 class="anchored" data-anchor-id="selecting-genes">Selecting Genes</h2>
<p>We selected 868 genes in the first round, we are aiming to double the gene set.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">tpm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed"</span>, header <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,  index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>)</span>
<span id="cb2-2">tpm_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tpm.iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:].var(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-3">tpm_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tpm_var.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## subset of genes with high observed expression variation</span></span>
<span id="cb2-5">high_tpm_var_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(tpm[tpm_var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> tpm_threshold].index)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_79532/161308317.py:1: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.
  tpm = pd.read_csv("/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed", header = 0, sep="\t",  index_col= 'gene_id')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">eqtl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/Brain.rn7.cis_qtl_signif.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-2">counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eqtl[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>].value_counts()</span>
<span id="cb4-3">counts.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>count    11238.000000
mean      2312.935398
std       1490.079008
min          1.000000
25%       1160.250000
50%       2236.000000
75%       3277.750000
max      10799.000000
Name: gene_id, dtype: float64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">eqtl_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb6-2">eqtl_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counts[counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> eqtl_threshold].index</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> high_tpm_var_genes.intersection(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(eqtl_genes))</span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"candidate genes for enformer prediction experiments"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1358 candidate genes for enformer prediction experiments</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/gene_list.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb9-2">    completed_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb9-3">remaining_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [gene <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> completed_genes]</span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene_list_2.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb9-5">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(remaining_genes))</span></code></pre></div>
</div>
</section>
<section id="run-the-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="run-the-pipeline">Run the Pipeline</h2>
<section id="write-metadata" class="level3">
<h3 class="anchored" data-anchor-id="write-metadata">Write Metadata</h3>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## write intervals.txt</span></span>
<span id="cb10-2">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,  index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geneId'</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write_intervals(gene_list, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>):</span>
<span id="cb10-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb10-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb10-7">            gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annot_df.loc[gene]</span>
<span id="cb10-8">            tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tss'</span>]</span>
<span id="cb10-9">            interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-10">            f.write(interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-11"></span>
<span id="cb10-12">write_intervals(remaining_genes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata/intervals.txt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_79532/3155180299.py:2: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.
  annot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\t',  index_col='geneId')</code></pre>
</div>
</div>
<pre><code>mkdir metadata
cp ~/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/metadata/individuals.txt metadata
cp ~/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/personalized_config.json .</code></pre>
<p>(Replace every string <code>2023-08-31-Br-personalized-prediction-on-more-genes</code> with <code>2023-11-02-Br-personalized-prediction-additional-genes</code>)</p>
</section>
<section id="submit-jobs" class="level3">
<h3 class="anchored" data-anchor-id="submit-jobs">Submit Jobs</h3>
<pre><code>module load conda
conda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools

python /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-11-02-Br-personalized-prediction-additional-genes/personalized_config.json
</code></pre>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-02-Br-personalized-prediction-additional-genes/pipeline.html</guid>
  <pubDate>Thu, 02 Nov 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Full report on Borzoi performance analysis</title>
  <dc:creator>Sofia Salazar, Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this notebook, we explored the question: <strong>Does borzoi predictions have a better performance compared to Enformer, at predicting cross-population expression for the CAGE LCL tracks?</strong></p>
<p><strong>Sofia’s Analysis</strong> involved comparisons between observed and predicted expression 136 of the top-performing genes for enformer and 140 of the worst-performing genes for enformer (total 276 genes). She sampled 100 individuals from the Geuvadis dataset for both borzoi and enformer predictions</p>
<p><strong>Sabrina’s Analysis</strong> predicted gene expression for 100 randomly-sampled genes across all 455 Geuvadis samples.</p>
<p>For both experiments, we compared the correlation between the predictions using both tools, and the ground truth measurements of the Geuvadis gene expression for the same individuals as the prediction. We examined correlations with the ground truth as a measure of performance.</p>
</section>
<section id="sofias-analysis" class="level1">
<h1>Sofia’s Analysis</h1>
<section id="libraries" class="level2">
<h2 class="anchored" data-anchor-id="libraries">Libraries</h2>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span></code></pre></div>
</details>
</div>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">DATA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/t-9ssal0/data/'</span></span>
<span id="cb2-2">PROJECT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/project2/haky/sofia/borzoiRun/'</span></span>
<span id="cb2-3">geuvadis_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DATA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'geuvadis_expression.gz'</span></span>
<span id="cb2-4">geuvadis_gene_expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_table(geuvadis_file, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb2-5">                                         dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_id'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chr'</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>})</span>
<span id="cb2-6">individuals_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(PROJECT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_individuals.tsv'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-7">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals_file[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Individuals'</span>].to_list()</span></code></pre></div>
</details>
</div>
<p>Loading gene lists for both analysis</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">best_predicted_genes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/project2/haky/sofia/borzoiRun/predicted_genes_20oct.csv'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-2">best_my_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> best_predicted_genes_df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].to_list() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 136 best performing genes</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>):</span>
<span id="cb3-6">    genes_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>PROJECT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">gene_lists/worst_list</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv'</span>)</span>
<span id="cb3-7">    gene_list.append(genes_file[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>].to_list())</span>
<span id="cb3-8">worst_my_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sublist <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sublist] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 140 worst performing genes</span></span></code></pre></div>
</details>
</div>
</section>
<section id="functions" class="level2">
<h2 class="anchored" data-anchor-id="functions">Functions</h2>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_genes_per_file(num_files, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<span id="cb4-2">    file_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fast_"</span></span>
<span id="cb4-3">    predicted_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4">    all_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb4-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assuming both files have the same genes</span></span>
<span id="cb4-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/scratch/midway3/t-9ssal0/h5_files/'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>file_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer_predictions'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(s)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb4-8">            group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[individuals[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb4-9">            predicted_genes.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(group.keys()))</span>
<span id="cb4-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> predicted_genes:</span>
<span id="cb4-11">        all_genes.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([re.sub(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"_haplo\d+"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, s) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> l]))))</span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(all_genes)</span>
<span id="cb4-13"></span>
<span id="cb4-14">best_genes_per_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_genes_per_file(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>)</span>
<span id="cb4-15">worst_genes_per_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_genes_per_file(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"worst"</span>)</span></code></pre></div>
</details>
</div>
<p>Note: moved all h5 files to /cds/haky/sofia/h5_files/</p>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_expression_dic(number_files, software, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>, genes_per_file):</span>
<span id="cb5-2">    file_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fast_"</span></span>
<span id="cb5-3">    expression_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k:{} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals}</span>
<span id="cb5-4">    start_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-5">    end_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb5-6">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span></span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb5-8">        gene_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> file_num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, number_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/scratch/midway3/t-9ssal0/h5_files/'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>file_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_predictions'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(file_num)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb5-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes_per_file[file_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#iterate through genes in file</span></span>
<span id="cb5-12">                    group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[individual]</span>
<span id="cb5-13">                    expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-14">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through haplotypes</span></span>
<span id="cb5-15">                        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> group[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_haplo</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>][:, index]</span>
<span id="cb5-16">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>:</span>
<span id="cb5-17">                            prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(prediction, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean over track replicates</span></span>
<span id="cb5-18">                        expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> np.mean(prediction[start_bin: end_bin])</span>
<span id="cb5-19">                    gene_expr[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expression</span>
<span id="cb5-20">                    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> prediction</span>
<span id="cb5-21">        expression_dic[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_expr</span>
<span id="cb5-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expression_dic</span>
<span id="cb5-23"></span>
<span id="cb5-24"></span>
<span id="cb5-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_predictions_across_indiv(expression_dic, genes):</span>
<span id="cb5-26">    predictions_across_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene:[] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes}</span>
<span id="cb5-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> expression_dic:</span>
<span id="cb5-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes:</span>
<span id="cb5-29">            predictions_across_ind[gene].append(expression_dic[individual][gene])</span>
<span id="cb5-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> predictions_across_ind</span>
<span id="cb5-31"></span>
<span id="cb5-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_correlations(dic1, dic2):</span>
<span id="cb5-33">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene: np.empty(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(individuals)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dic1.keys()}</span>
<span id="cb5-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dic1.keys():</span>
<span id="cb5-35">        col_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.corrcoef(dic1[gene], dic2[gene])[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-36">        corr[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col_corr</span>
<span id="cb5-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(corr)</span></code></pre></div>
</details>
</div>
</section>
<section id="first-analysis-performance-comparison-in-best-performing-genes-with-enformer" class="level2">
<h2 class="anchored" data-anchor-id="first-analysis-performance-comparison-in-best-performing-genes-with-enformer">First analysis: performance comparison in best-performing genes with Enformer</h2>
<section id="get-expression-across-individuals-for-each-gene" class="level4">
<h4 class="anchored" data-anchor-id="get-expression-across-individuals-for-each-gene">Get expression across individuals for each gene</h4>
<div class="cell" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">best_expression_borzoi_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best'</span>, best_genes_per_file)</span>
<span id="cb6-2">best_expression_enformer_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best'</span>, best_genes_per_file)</span>
<span id="cb6-3"></span>
<span id="cb6-4">best_borzoi_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(best_expression_borzoi_dic, best_my_genes)</span>
<span id="cb6-5">best_enformer_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(best_expression_enformer_dic, best_my_genes)</span></code></pre></div>
</details>
</div>
<p>Geuvadis data</p>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression.loc[geuvadis_gene_expression[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>].isin(best_my_genes)]</span>
<span id="cb7-2">geuvadis.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>]</span>
<span id="cb7-3">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[:, individuals]</span>
<span id="cb7-4">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[best_my_genes]</span>
<span id="cb7-5">best_GT_across <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene:val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(best_my_genes, geuvadis.values.tolist())}</span></code></pre></div>
</details>
</div>
</section>
<section id="correlations" class="level4">
<h4 class="anchored" data-anchor-id="correlations">Correlations</h4>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">best_corr_borzoi_enf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(best_borzoi_across_individuals, best_enformer_across_individuals)</span>
<span id="cb8-2">best_corr_enf_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(best_enformer_across_individuals, best_GT_across)</span>
<span id="cb8-3">best_corr_bor_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(best_borzoi_across_individuals, best_GT_across)</span></code></pre></div>
</details>
</div>
</section>
<section id="correlations-between-enformer-and-borzoi-predictions" class="level4">
<h4 class="anchored" data-anchor-id="correlations-between-enformer-and-borzoi-predictions">Correlations between enformer and borzoi predictions</h4>
<div class="cell" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">best_df_enf_bor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>: best_corr_borzoi_enf,</span>
<span id="cb9-2">                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>:best_corr_borzoi_enf})</span>
<span id="cb9-3">best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>])</span>
<span id="cb9-4">best_df_enf_bor.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Correlations</th>
<th data-quarto-table-cell-role="th">abs_Correlations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CDC16</td>
<td>0.824303</td>
<td>0.824303</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DPYSL4</td>
<td>0.725614</td>
<td>0.725614</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFAND2A</td>
<td>-0.945341</td>
<td>0.945341</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DCAF4</td>
<td>0.221603</td>
<td>0.221603</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFYVE19</td>
<td>0.560699</td>
<td>0.560699</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MCOLN2</td>
<td>0.664648</td>
<td>0.664648</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">XRRA1</td>
<td>0.864334</td>
<td>0.864334</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TTLL12</td>
<td>0.821124</td>
<td>0.821124</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">USP40</td>
<td>0.959084</td>
<td>0.959084</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">UGT2B17</td>
<td>0.989967</td>
<td>0.989967</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb10-2"></span>
<span id="cb10-3">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb10-4">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb10-5">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb10-6">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations Enformer - Borzoi'</span>)</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the second histogram in the second subplot</span></span>
<span id="cb10-9">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(best_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb10-10">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb10-11">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb10-12">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations Enformer - Borzoi'</span>)</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust layout and display the subplots</span></span>
<span id="cb10-15">plt.tight_layout()</span>
<span id="cb10-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="correlations-against-ground-truth" class="level4">
<h4 class="anchored" data-anchor-id="correlations-against-ground-truth">Correlations against Ground truth</h4>
<div class="cell" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">best_df_against_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>: best_corr_enf_GT,</span>
<span id="cb11-2">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>: best_corr_bor_GT,</span>
<span id="cb11-3">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>: best_corr_enf_GT,</span>
<span id="cb11-4">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>: best_corr_bor_GT})</span>
<span id="cb11-5">best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>])</span>
<span id="cb11-6">best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>])</span>
<span id="cb11-7">best_df_against_GT.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Enformer</th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">abs_Enformer</th>
<th data-quarto-table-cell-role="th">abs_Borzoi</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CDC16</td>
<td>-0.242646</td>
<td>-0.308183</td>
<td>0.242646</td>
<td>0.308183</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DPYSL4</td>
<td>0.318979</td>
<td>0.439701</td>
<td>0.318979</td>
<td>0.439701</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFAND2A</td>
<td>-0.444695</td>
<td>0.386350</td>
<td>0.444695</td>
<td>0.386350</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DCAF4</td>
<td>-0.478554</td>
<td>0.248134</td>
<td>0.478554</td>
<td>0.248134</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFYVE19</td>
<td>-0.017018</td>
<td>0.119285</td>
<td>0.017018</td>
<td>0.119285</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MCOLN2</td>
<td>0.440237</td>
<td>0.086427</td>
<td>0.440237</td>
<td>0.086427</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">XRRA1</td>
<td>0.367341</td>
<td>0.476587</td>
<td>0.367341</td>
<td>0.476587</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TTLL12</td>
<td>0.284871</td>
<td>0.278919</td>
<td>0.284871</td>
<td>0.278919</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">USP40</td>
<td>-0.452123</td>
<td>-0.500160</td>
<td>0.452123</td>
<td>0.500160</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">UGT2B17</td>
<td>0.399678</td>
<td>0.409415</td>
<td>0.399678</td>
<td>0.409415</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="51">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb12-2"></span>
<span id="cb12-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb12-4">ax1.scatter(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb12-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb12-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb12-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb12-8">ax1.legend()</span>
<span id="cb12-9"></span>
<span id="cb12-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb12-11">ax2.scatter(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>], best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb12-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb12-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb12-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb12-15">ax2.legend()</span>
<span id="cb12-16"></span>
<span id="cb12-17">plt.tight_layout()</span>
<span id="cb12-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="qq-plots-of-correlations-against-ground-truth" class="level4">
<h4 class="anchored" data-anchor-id="qq-plots-of-correlations-against-ground-truth">QQ plots of correlations against Ground truth</h4>
<div class="cell" data-execution_count="62">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb13-2"></span>
<span id="cb13-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb13-4">ax1.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb13-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.80</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.80</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb13-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb13-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb13-8">ax1.legend()</span>
<span id="cb13-9"></span>
<span id="cb13-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb13-11">ax2.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(best_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb13-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb13-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb13-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb13-15">ax2.legend()</span>
<span id="cb13-16"></span>
<span id="cb13-17">plt.tight_layout()</span>
<span id="cb13-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="comparing-different-bin-ranges-in-borzoi-performances" class="level2">
<h2 class="anchored" data-anchor-id="comparing-different-bin-ranges-in-borzoi-performances">Comparing different bin ranges in borzoi performances</h2>
<div class="cell" data-execution_count="52">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_expression_dic2(number_files, software, bins_around):</span>
<span id="cb14-2">    expression_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k:{} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals}</span>
<span id="cb14-3">    start_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bins_around) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb14-4">    end_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bins_around) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb14-5">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5110</span></span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb14-7">        gene_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb14-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> file_num <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, number_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb14-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/scratch/midway3/t-9ssal0/h5_files/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_predictions'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(file_num)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb14-10">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> best_genes_per_file[file_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#iterate through genes in file</span></span>
<span id="cb14-11">                    group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[individual]</span>
<span id="cb14-12">                    expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb14-13">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate through haplotypes</span></span>
<span id="cb14-14">                        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> group[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gene<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_haplo</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>][:, index]</span>
<span id="cb14-15">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> software.lower() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>:</span>
<span id="cb14-16">                            prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(prediction, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean over track replicates</span></span>
<span id="cb14-17">                        expression <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> np.mean(prediction[start_bin: end_bin])</span>
<span id="cb14-18">                    gene_expr[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expression</span>
<span id="cb14-19">                    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> prediction</span>
<span id="cb14-20">        expression_dic[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_expr</span>
<span id="cb14-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expression_dic</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="53">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">expression_borzoi_8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-2">borzoi_across_individuals_8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(expression_borzoi_8, best_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="56">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">expression_borzoi_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb16-2">borzoi_across_individuals_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(expression_borzoi_4, best_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="57">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">expression_borzoi_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-2">borzoi_across_individuals_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(expression_borzoi_2, best_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="58">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">corr_borzoi_8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(borzoi_across_individuals_8, best_GT_across)</span>
<span id="cb18-2">corr_borzoi_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(borzoi_across_individuals_4, best_GT_across)</span>
<span id="cb18-3">corr_borzoi_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(borzoi_across_individuals_2, best_GT_across)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="59">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">bin_ranges_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 16 bins'</span>: best_corr_bor_GT,</span>
<span id="cb19-2">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 8 bins'</span>: corr_borzoi_8,</span>
<span id="cb19-3">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 4 bins'</span>: corr_borzoi_4,</span>
<span id="cb19-4">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi 2 bins'</span>: corr_borzoi_2})</span>
<span id="cb19-5">bin_ranges_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="59">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi 16 bins</th>
<th data-quarto-table-cell-role="th">Borzoi 8 bins</th>
<th data-quarto-table-cell-role="th">Borzoi 4 bins</th>
<th data-quarto-table-cell-role="th">Borzoi 2 bins</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CDC16</td>
<td>-0.308183</td>
<td>-0.173212</td>
<td>-0.097312</td>
<td>0.064835</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DPYSL4</td>
<td>0.439701</td>
<td>0.442904</td>
<td>0.438260</td>
<td>0.057265</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFAND2A</td>
<td>0.386350</td>
<td>0.386898</td>
<td>0.043857</td>
<td>0.544630</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DCAF4</td>
<td>0.248134</td>
<td>0.519006</td>
<td>0.557798</td>
<td>0.529078</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZFYVE19</td>
<td>0.119285</td>
<td>0.125048</td>
<td>0.367074</td>
<td>-0.365466</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MCOLN2</td>
<td>0.086427</td>
<td>-0.420791</td>
<td>-0.507746</td>
<td>-0.510637</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">XRRA1</td>
<td>0.476587</td>
<td>0.488511</td>
<td>0.541467</td>
<td>0.566548</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TTLL12</td>
<td>0.278919</td>
<td>0.278045</td>
<td>0.274921</td>
<td>0.302587</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">USP40</td>
<td>-0.500160</td>
<td>-0.493973</td>
<td>-0.475467</td>
<td>-0.469835</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">UGT2B17</td>
<td>0.409415</td>
<td>0.402573</td>
<td>0.391174</td>
<td>0.389104</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="60">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> itertools</span>
<span id="cb20-2">column_combinations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(itertools.combinations(bin_ranges_df.columns, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb20-3">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, (col1, col2) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(column_combinations):</span>
<span id="cb20-6">    row, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">divmod</span>(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the row and column for the current subplot</span></span>
<span id="cb20-7">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[row, col]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the current subplot</span></span>
<span id="cb20-8"></span>
<span id="cb20-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data (customize this part as needed)</span></span>
<span id="cb20-10">    ax.scatter(bin_ranges_df[col1], bin_ranges_df[col2], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'darkorange'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations against GT'</span>)</span>
<span id="cb20-11">    ax.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity Line'</span>)</span>
<span id="cb20-12">    ax.set_xlabel(col1)</span>
<span id="cb20-13">    ax.set_ylabel(col2)</span>
<span id="cb20-14">    ax.legend()</span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust layout and display the plot</span></span>
<span id="cb20-17">plt.tight_layout()</span>
<span id="cb20-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-21-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="second-analysis-performance-comparison-in-worst-performing-genes-with-enformer" class="level2">
<h2 class="anchored" data-anchor-id="second-analysis-performance-comparison-in-worst-performing-genes-with-enformer">Second analysis: performance comparison in worst-performing genes with Enformer</h2>
<section id="get-expression-across-individuals-for-each-gene-1" class="level4">
<h4 class="anchored" data-anchor-id="get-expression-across-individuals-for-each-gene-1">Get expression across individuals for each gene</h4>
<div class="cell" data-execution_count="16">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">worst_expression_borzoi_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'borzoi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'worst'</span>, worst_genes_per_file)</span>
<span id="cb21-2">worst_expression_enformer_dic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_expression_dic(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'enformer'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'worst'</span>, worst_genes_per_file)</span>
<span id="cb21-3"></span>
<span id="cb21-4">worst_borzoi_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(worst_expression_borzoi_dic, worst_my_genes)</span>
<span id="cb21-5">worst_enformer_across_individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions_across_indiv(worst_expression_enformer_dic, worst_my_genes)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="19">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gene_expression.loc[geuvadis_gene_expression[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>].isin(worst_my_genes)]</span>
<span id="cb22-2">geuvadis.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_name'</span>]</span>
<span id="cb22-3">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[:, individuals]</span>
<span id="cb22-4">geuvadis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis.loc[worst_my_genes]</span>
<span id="cb22-5">worst_GT_across <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene:val <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(worst_my_genes, geuvadis.values.tolist())}</span></code></pre></div>
</details>
</div>
</section>
<section id="correlations-1" class="level3">
<h3 class="anchored" data-anchor-id="correlations-1">Correlations</h3>
<div class="cell" data-execution_count="20">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">worst_corr_borzoi_enf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(worst_borzoi_across_individuals, worst_enformer_across_individuals)</span>
<span id="cb23-2">worst_corr_enf_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(worst_enformer_across_individuals, worst_GT_across)</span>
<span id="cb23-3">worst_corr_bor_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_correlations(worst_borzoi_across_individuals, worst_GT_across)</span></code></pre></div>
</details>
</div>
<section id="correlations-between-enformer-and-borzoi-predictions-1" class="level4">
<h4 class="anchored" data-anchor-id="correlations-between-enformer-and-borzoi-predictions-1">Correlations between enformer and borzoi predictions</h4>
<div class="cell" data-execution_count="21">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">worst_df_enf_bor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>: worst_corr_borzoi_enf,</span>
<span id="cb24-2">                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>:worst_corr_borzoi_enf})</span>
<span id="cb24-3">worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>])</span>
<span id="cb24-4">worst_df_enf_bor.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Correlations</th>
<th data-quarto-table-cell-role="th">abs_Correlations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ATP6V1E2</td>
<td>0.052960</td>
<td>0.052960</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ZNF384</td>
<td>0.672741</td>
<td>0.672741</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SART3</td>
<td>0.732671</td>
<td>0.732671</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SLC15A2</td>
<td>-0.523820</td>
<td>0.523820</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AKR7A2</td>
<td>0.075323</td>
<td>0.075323</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">GBP1</td>
<td>0.513649</td>
<td>0.513649</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZNF624</td>
<td>-0.668723</td>
<td>0.668723</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MRTO4</td>
<td>-0.090715</td>
<td>0.090715</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CD84</td>
<td>0.076973</td>
<td>0.076973</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RAB40B</td>
<td>-0.690359</td>
<td>0.690359</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="22">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb25-2"></span>
<span id="cb25-3">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb25-4">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb25-5">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb25-6">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations Enformer - Borzoi'</span>)</span>
<span id="cb25-7"></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the second histogram in the second subplot</span></span>
<span id="cb25-9">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(worst_df_enf_bor[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Correlations'</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb25-10">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb25-11">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb25-12">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations Enformer - Borzoi'</span>)</span>
<span id="cb25-13"></span>
<span id="cb25-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust layout and display the subplots</span></span>
<span id="cb25-15">plt.tight_layout()</span>
<span id="cb25-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-26-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="correlations-against-ground-truth-1" class="level4">
<h4 class="anchored" data-anchor-id="correlations-against-ground-truth-1">Correlations against Ground truth</h4>
<div class="cell" data-execution_count="23">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">worst_df_against_GT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>: worst_corr_enf_GT,</span>
<span id="cb26-2">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>: worst_corr_bor_GT,</span>
<span id="cb26-3">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>: worst_corr_enf_GT,</span>
<span id="cb26-4">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>: worst_corr_bor_GT})</span>
<span id="cb26-5">worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>])</span>
<span id="cb26-6">worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>])</span>
<span id="cb26-7">worst_df_against_GT.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Enformer</th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">abs_Enformer</th>
<th data-quarto-table-cell-role="th">abs_Borzoi</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ATP6V1E2</td>
<td>0.164837</td>
<td>0.322586</td>
<td>0.164837</td>
<td>0.322586</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ZNF384</td>
<td>0.079999</td>
<td>0.129734</td>
<td>0.079999</td>
<td>0.129734</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SART3</td>
<td>-0.031612</td>
<td>-0.124788</td>
<td>0.031612</td>
<td>0.124788</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SLC15A2</td>
<td>-0.078513</td>
<td>0.076483</td>
<td>0.078513</td>
<td>0.076483</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AKR7A2</td>
<td>-0.107319</td>
<td>0.280086</td>
<td>0.107319</td>
<td>0.280086</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">GBP1</td>
<td>-0.167450</td>
<td>-0.006239</td>
<td>0.167450</td>
<td>0.006239</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ZNF624</td>
<td>0.037769</td>
<td>0.005369</td>
<td>0.037769</td>
<td>0.005369</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MRTO4</td>
<td>-0.255579</td>
<td>0.036356</td>
<td>0.255579</td>
<td>0.036356</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CD84</td>
<td>0.096425</td>
<td>0.063115</td>
<td>0.096425</td>
<td>0.063115</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RAB40B</td>
<td>-0.045073</td>
<td>0.052897</td>
<td>0.045073</td>
<td>0.052897</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="47">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb27-2"></span>
<span id="cb27-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb27-4">ax1.scatter(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb27-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb27-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb27-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb27-8">ax1.legend()</span>
<span id="cb27-9"></span>
<span id="cb27-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb27-11">ax2.scatter(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>], worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb27-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb27-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb27-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb27-15">ax2.legend()</span>
<span id="cb27-16"></span>
<span id="cb27-17">plt.tight_layout()</span>
<span id="cb27-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-28-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="qq-plots-of-correlations-against-ground-truth-1" class="level4">
<h4 class="anchored" data-anchor-id="qq-plots-of-correlations-against-ground-truth-1">QQ plots of correlations against ground truth</h4>
<div class="cell" data-execution_count="49">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb28-2"></span>
<span id="cb28-3">ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span>)</span>
<span id="cb28-4">ax1.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlations with GT'</span>)</span>
<span id="cb28-5">ax1.plot([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.70</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.70</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb28-6">ax1.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb28-7">ax1.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb28-8">ax1.legend()</span>
<span id="cb28-9"></span>
<span id="cb28-10">ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>)</span>
<span id="cb28-11">ax2.scatter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Borzoi'</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(worst_df_against_GT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'abs_Enformer'</span>]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'salmon'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Absolute correlations with GT'</span>)</span>
<span id="cb28-12">ax2.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>], color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Identity line'</span>)</span>
<span id="cb28-13">ax2.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>)</span>
<span id="cb28-14">ax2.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>)</span>
<span id="cb28-15">ax2.legend()</span>
<span id="cb28-16"></span>
<span id="cb28-17">plt.tight_layout()</span>
<span id="cb28-18">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-29-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
</section>
</section>
<section id="sabrinas-analysis" class="level1">
<h1>Sabrina’s Analysis</h1>
<section id="collecting-results" class="level2">
<h2 class="anchored" data-anchor-id="collecting-results">Collecting Results</h2>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb29-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb29-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb29-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb29-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb29-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb29-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb29-8"></span>
<span id="cb29-9">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb29-10">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb29-11">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb29-12">prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction"</span></span>
<span id="cb29-13">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions"</span></span>
<span id="cb29-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb29-15">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb29-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/completed_intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb29-17">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb29-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with open("intervals.txt", "r") as f:</span></span>
<span id="cb29-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     intervals.extend(f.read().splitlines()[:5]) # test on first few genes</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb30-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> interval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> intervals:</span>
<span id="cb30-3">    split_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb30-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span>
<span id="cb30-5">    tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb30-6">    gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.index[(hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tss)]</span>
<span id="cb30-7">    gene_list.append(gene.item())</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">CAGE_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list}</span>
<span id="cb31-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb31-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb31-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb31-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb31-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb31-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb31-8">                haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, :])</span>
<span id="cb31-9">                haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, :])</span>
<span id="cb31-10">                prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb31-11">            CAGE_dict[gene].append(prediction)</span>
<span id="cb31-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb31-13">            CAGE_dict[gene].append(np.nan)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb32-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb33-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb33-3">    observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb33-4">    expr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>: CAGE_dict[gene]}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb33-5">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df.dropna()</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="6">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">pearson_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb34-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb34-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb34-4">    pearson_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">spearman_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb35-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb35-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb35-4">    spearman_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</details>
</div>
<section id="borzois-best-performing-gene" class="level3">
<h3 class="anchored" data-anchor-id="borzois-best-performing-gene">Borzoi’s Best Performing Gene</h3>
<p><strong>(out of the first 47 randomly-sampled genes)</strong> ENSG00000137265 was the best performing gene (both for Spearman and Pearson R) for Borzoi’s personalized prediction.</p>
<div class="cell" data-execution_count="8">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb36-2">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000137265'</span>]</span>
<span id="cb36-3">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb36-4">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb36-5"></span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb36-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb36-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb36-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for ENSG00000137265"</span>)</span>
<span id="cb36-11"></span>
<span id="cb36-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb36-13">plt.legend()</span>
<span id="cb36-14">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-37-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="compare-correlations-to-enformer" class="level2">
<h2 class="anchored" data-anchor-id="compare-correlations-to-enformer">Compare Correlations to Enformer</h2>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb37-2">enformer_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb37-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb37-4">    gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'external_gene_name'</span>]</span>
<span id="cb37-5">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ge'</span>][enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene_name]</span>
<span id="cb37-6">    enformer_corr.append(corr.item())</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr</span>
<span id="cb38-2">spearman_corr_by_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>}).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>])</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">spearman_corr_by_model.head()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">Enformer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000011638</td>
<td>0.097914</td>
<td>0.241614</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000112031</td>
<td>0.036816</td>
<td>-0.007003</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000172732</td>
<td>0.022511</td>
<td>0.078569</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000173638</td>
<td>0.112324</td>
<td>-0.084114</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000156535</td>
<td>0.084083</td>
<td>0.031968</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb40-2">plt.scatter(spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb40-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb40-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb40-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb40-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb40-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb40-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb40-9"></span>
<span id="cb40-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-41-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb41-2">plt.scatter(spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(), spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(), marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb41-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb41-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb41-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb41-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb41-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Absolute Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb41-9"></span>
<span id="cb41-10">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-42-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="bin-sizing" class="level3">
<h3 class="anchored" data-anchor-id="bin-sizing">Bin Sizing</h3>
<p>We used a 4 bin window centered at the TSS for each CAGE computation, we want to see which bin width gives the best estimate.</p>
<div class="cell" data-execution_count="15">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">CAGE_dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb42-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb42-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb42-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb42-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb42-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb42-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb42-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): </span>
<span id="cb42-9">                    haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb42-10">                    haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb42-11">                    prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb42-12">                    CAGE_dicts[i][gene].append(prediction)</span>
<span id="cb42-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb42-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb42-15">                CAGE_dicts[i][gene].append(np.nan)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="16">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">spearman_corr_by_bin_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>: enformer_corr}, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_list)</span>
<span id="cb43-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb43-3">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb43-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb43-5">        observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb43-6">        predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CAGE_dicts[i][gene]</span>
<span id="cb43-7">        corr, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(observed, predicted)</span>
<span id="cb43-8">        results.append(corr)</span>
<span id="cb43-9">    spearman_corr_by_bin_size[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Borzoi, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> bins'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="17">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> histogram(x, title):</span>
<span id="cb44-2">    plt.hist(x, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb44-3">    plt.title(title)</span>
<span id="cb44-4">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spearman Correlations'</span>)</span>
<span id="cb44-5">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb44-6">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(x)</span>
<span id="cb44-7">    plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb44-8">    plt.legend()</span>
<span id="cb44-9"></span>
<span id="cb44-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb44-11">    plt.show()</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="18">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size:</span>
<span id="cb45-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)</span>
<span id="cb45-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size[column]</span>
<span id="cb45-4">    histogram(x, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Cross-Population Prediction Performance for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on N=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-46-output-6.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="19">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size:</span>
<span id="cb46-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)</span>
<span id="cb46-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size[column].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>()</span>
<span id="cb46-4">    histogram(x, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Absolute Cross-Population Prediction Correlation for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on N=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index_files/figure-html/cell-47-output-6.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="20">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">model_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb47-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb47-3">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.loc[index].idxmax()</span>
<span id="cb47-4">    model_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb47-5">model_abs_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb47-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb47-7">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().loc[index].idxmax()</span>
<span id="cb47-8">    model_abs_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb47-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Correlation Model:"</span>)</span>
<span id="cb47-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_perf_dict)</span>
<span id="cb47-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Absolute Valued Correlation Model:"</span>)</span>
<span id="cb47-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_abs_perf_dict)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Highest Correlation Model:
{'Enformer': 30, 'Borzoi, 2 bins': 6, 'Borzoi, 4 bins': 5, 'Borzoi, 6 bins': 2, 'Borzoi, 8 bins': 5, 'Borzoi, 10 bins': 4}
Highest Absolute Valued Correlation Model:
{'Enformer': 33, 'Borzoi, 2 bins': 7, 'Borzoi, 4 bins': 5, 'Borzoi, 6 bins': 2, 'Borzoi, 8 bins': 4, 'Borzoi, 10 bins': 1}</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>After these analysis, we can conclude that predictions with borzoi are not significantly different, in performance terms, than enformer. While it does seem that borzoi improves the performance for those genes that previously performed bad with enformer, the improvement is not significant. Additionally, borzoi doesn’t improve predictive performance for the genes that already performed well with enformer.</p>
<p>It should be noted that these analysis are limited by the number of individuals and the small sample of genes that I considered. Also, they are based only on the CAGE LCL track(s), yet, it’s important to remember that borzoi does predict for RNA-seq tracks while enformer does not.</p>


</section>
</section>

 ]]></description>
  <category>analysis</category>
  <category>report</category>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-11-01-borzoi-performance-analysis/index.html</guid>
  <pubDate>Wed, 25 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Comparing Enformer and Borzoi prediction on GEUVADIS individuals</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index.html</link>
  <description><![CDATA[ 




<p>Based off the limited results from personalized prediction across GEUVADIS individuals (N=455), I conclude that Borzoi does not outperform Enformer in predicting cross-population variation in gene expression. At the very bottom, I found that for most genes, Enformer had the best cross-population predictions out of all Borzoi estimates (from varying CAGE TSS window sizes).</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb1-3">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"external_gene_name"</span>)</span>
<span id="cb1-4">genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>]).intersection(hg38_annot.index)</span>
<span id="cb1-5">genes_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(genes)]</span>
<span id="cb1-6">sample_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genes_annot.sample(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, annot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_genes.iterrows():</span>
<span id="cb2-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-4">    intervals.append(interval)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(intervals))</span></code></pre></div>
</div>
<section id="submit-pbs-job" class="level3">
<h3 class="anchored" data-anchor-id="submit-pbs-job">Submit PBS Job</h3>
<pre><code>#!/bin/bash
#PBS -A AIHPC4EDU
#PBS -q preemptable
#PBS -l walltime=6:00:00
#PBS -l select=2:ncpus=64:ngpus=16
#PBS -l filesystems=home:eagle
#PBS -N borzoi_across_geuvadis_parallel

module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction

python3 personalized_prediction.py \
--intervals_file intervals.txt \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions</code></pre>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-8"></span>
<span id="cb5-9">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb5-10">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb5-11">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb5-12">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/eagle/AIHPC4Edu/sabrina/borzoi-personalized-predictions"</span></span>
<span id="cb5-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-14">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb5-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"completed_intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-16">    intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb5-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intervals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb5-18">    intervals.extend(f.read().splitlines()[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test on first few genes</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> interval <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> intervals:</span>
<span id="cb6-3">    split_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb6-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:]</span>
<span id="cb6-5">    tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(split_interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb6-6">    gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.index[(hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tss)]</span>
<span id="cb6-7">    gene_list.append(gene.item())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">CAGE_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list}</span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb7-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb7-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb7-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb7-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb7-8">                haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, :])</span>
<span id="cb7-9">                haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, :])</span>
<span id="cb7-10">                prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-11">            CAGE_dict[gene].append(prediction)</span>
<span id="cb7-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-13">            CAGE_dict[gene].append(np.nan)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb9-3">    observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb9-4">    expr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>: CAGE_dict[gene]}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb9-5">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_df.dropna()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pearson_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pearson R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb10-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb10-4">    pearson_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">spearman_corr_by_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>], index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list)</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb11-3">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>], expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>])</span>
<span id="cb11-4">    spearman_corr_by_gene.loc[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [corr, pval]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb12-2">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000137265'</span>]</span>
<span id="cb12-3">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb12-4">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb12-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb12-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb12-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for ENSG00000137265"</span>)</span>
<span id="cb12-11"></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb12-13">plt.legend()</span>
<span id="cb12-14">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>ENSG00000137265 was the best performing gene (both for Spearman and Pearson R) for Borzoi’s personalized prediction.</p>
</section>
<section id="compare-correlations-to-enformer" class="level2">
<h2 class="anchored" data-anchor-id="compare-correlations-to-enformer">Compare Correlations to Enformer</h2>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">enformer_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer_geuvadis_correlations.csv"</span>).dropna()</span>
<span id="cb13-2">enformer_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb13-4">    gene_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'external_gene_name'</span>]</span>
<span id="cb13-5">    corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ge'</span>][enformer_corr_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene_names'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> gene_name]</span>
<span id="cb13-6">    enformer_corr.append(corr.item())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">spearman_corr_by_gene[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enformer_corr</span>
<span id="cb14-2">spearman_corr_by_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_gene.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spearman R"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>}).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-value"</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">spearman_corr_by_model.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi</th>
<th data-quarto-table-cell-role="th">Enformer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000176058</td>
<td>-0.005758</td>
<td>-0.027832</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000156931</td>
<td>-0.075927</td>
<td>0.051405</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000118804</td>
<td>0.027522</td>
<td>0.004061</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSG00000076924</td>
<td>0.058653</td>
<td>0.324224</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSG00000167562</td>
<td>-0.027883</td>
<td>0.062367</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb16-2">plt.scatter(spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_model[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb16-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb16-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb16-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb16-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb16-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="bin-sizing" class="level3">
<h3 class="anchored" data-anchor-id="bin-sizing">Bin Sizing</h3>
<p>We used a 4 bin window centered at the TSS for each CAGE computation, we want to see which bin width gives the best estimate.</p>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">CAGE_dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{gene: [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(gene_list):</span>
<span id="cb17-3">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intervals[index]</span>
<span id="cb17-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals: </span>
<span id="cb17-5">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb17-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb17-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb17-8">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>): </span>
<span id="cb17-9">                    haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb17-10">                    haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i, :])</span>
<span id="cb17-11">                    prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb17-12">                    CAGE_dicts[i][gene].append(prediction)</span>
<span id="cb17-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb17-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb17-15">                CAGE_dicts[i][gene].append(np.nan)</span>
<span id="cb17-16">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">spearman_corr_by_bin_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>: enformer_corr}, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gene_list)</span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb18-3">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_list:</span>
<span id="cb18-5">        observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb18-6">        predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CAGE_dicts[i][gene]</span>
<span id="cb18-7">        corr, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(observed, predicted)</span>
<span id="cb18-8">        results.append(corr)</span>
<span id="cb18-9">    spearman_corr_by_bin_size[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Borzoi, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> bins'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results</span></code></pre></div>
</div>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> histogram(x, title):</span>
<span id="cb19-2">    plt.hist(x, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bins' determines the number of bins or bars</span></span>
<span id="cb19-3">    plt.title(title)</span>
<span id="cb19-4">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spearman Correlations'</span>)</span>
<span id="cb19-5">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb19-6">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(x)</span>
<span id="cb19-7">    plt.axvline(mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dashed'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb19-8">    plt.legend()</span>
<span id="cb19-9"></span>
<span id="cb19-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb19-11">    plt.show()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size:</span>
<span id="cb20-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gene_list)</span>
<span id="cb20-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size[column]</span>
<span id="cb20-4">    histogram(x, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Personalized Prediction Performance for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on N=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> genes'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-20-output-6.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">model_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb21-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb21-3">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.loc[index].idxmax()</span>
<span id="cb21-4">    model_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb21-5">model_abs_perf_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {column: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size}</span>
<span id="cb21-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> spearman_corr_by_bin_size.iterrows():</span>
<span id="cb21-7">    best_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_by_bin_size.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().loc[index].idxmax()</span>
<span id="cb21-8">    model_abs_perf_dict[best_model] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Correlation Model:"</span>)</span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_perf_dict)</span>
<span id="cb22-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highest Absolute Valued Correlation Model:"</span>)</span>
<span id="cb22-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(model_abs_perf_dict)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Highest Correlation Model:
{'Enformer': 18, 'Borzoi, 2 bins': 4, 'Borzoi, 4 bins': 1, 'Borzoi, 6 bins': 2, 'Borzoi, 8 bins': 2, 'Borzoi, 10 bins': 1}
Highest Absolute Valued Correlation Model:
{'Enformer': 18, 'Borzoi, 2 bins': 3, 'Borzoi, 4 bins': 2, 'Borzoi, 6 bins': 1, 'Borzoi, 8 bins': 3, 'Borzoi, 10 bins': 1}</code></pre>
</div>
</div>
<p>These plots suggest that averaging an 8-bin window (equivalent to 2 Enformer bins) might be the best method to estimate gene expression, but not by much:</p>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb24-2">plt.scatter(spearman_corr_by_bin_size[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer'</span>], spearman_corr_by_bin_size[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi, 8 bins'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb24-3">line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb24-4">plt.plot(line, line, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y = x'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb24-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer"</span>)</span>
<span id="cb24-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi"</span>)</span>
<span id="cb24-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparing Spearman R Correlations for Personalized Prediction"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index_files/figure-html/cell-23-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-20-borzoi-vs-enformer-personalized-prediction/index.html</guid>
  <pubDate>Fri, 20 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Validating High Correlation Genes from Huang et al.</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index.html</link>
  <description><![CDATA[ 




<p><a href="https://www.biorxiv.org/content/10.1101/2023.06.30.547100v1.full.pdf">Huang et al.</a> recorded high cross-population correlation for SLFN5 (Ensembl: ENSG00000166750) from Enformer (CAGE:LCL) on GEUVADIS individuals. We will run the same test with Borzoi’s stranded CAGE tracks and GTEx RNA-seq.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/SLFN5.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Huang et al.&nbsp;Figure</figcaption>
</figure>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb1-3">hg38_annot.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000166750'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>external_gene_name             SLFN5
chromosome_name                   17
transcription_start_site    35243072
transcript_start            35243072
transcript_end              35273655
Name: ENSG00000166750, dtype: object</code></pre>
</div>
</div>
<pre><code>module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene

export LD_LIBRARY_PATH=/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:$LD_LIBRARY_PATH

echo $LD_LIBRARY_PATH

python3 personalized_prediction.py \
--intervals_file intervals.txt \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /grand/TFXcan/imlab/users/sabrina/redo-borzoi-personalized-test
</code></pre>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb4-5">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb4-6">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb4-7">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb4-8">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSG00000166750"</span></span>
<span id="cb4-9">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/redo-borzoi-personalized-test"</span></span>
<span id="cb4-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-11">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb5-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr17_35243072_35243072_predictions.h5'</span>)</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb5-5">        haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]]</span>
<span id="cb5-6">        haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]]</span>
<span id="cb5-7">        CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_1)</span>
<span id="cb5-8">        CAGE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_2)</span>
<span id="cb5-9">        CAGE_predictions.append((CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CAGE_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb6-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-4">observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>: CAGE_predictions, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb7-2">gex_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Predicted</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Predicted</td>
<td>1.000000</td>
<td>0.158283</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Observed</td>
<td>0.158283</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb8-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb9-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb9-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pearson R: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb9-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb9-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb9-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for SLFN5"</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb9-11">plt.legend()</span>
<span id="cb9-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<section id="positive-strand-only" class="level2">
<h2 class="anchored" data-anchor-id="positive-strand-only">Positive Strand Only</h2>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">stranded_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb10-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr17_35243072_35243072_predictions.h5'</span>)</span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb10-5">        haplo_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>]</span>
<span id="cb10-6">        haplo_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8174</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8178</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>]</span>
<span id="cb10-7">        CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_1)</span>
<span id="cb10-8">        CAGE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo_2)</span>
<span id="cb10-9">        stranded_CAGE_predictions.append((CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CAGE_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted+'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stranded_CAGE_predictions</span>
<span id="cb11-2">gex_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted+'</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Observed</th>
<th data-quarto-table-cell-role="th">Predicted</th>
<th data-quarto-table-cell-role="th">Predicted+</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Observed</td>
<td>1.000000</td>
<td>0.158283</td>
<td>0.160137</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Predicted</td>
<td>0.158283</td>
<td>1.000000</td>
<td>0.997363</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Predicted+</td>
<td>0.160137</td>
<td>0.997363</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb12-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted+'</span>])</span>
<span id="cb12-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pearson R: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb12-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb12-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted+"</span>)</span>
<span id="cb12-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for SLFN5"</span>)</span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb12-11">plt.legend()</span>
<span id="cb12-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-18-borzoi-personalized-on-Huang-et-al-high-performance-gene/index.html</guid>
  <pubDate>Wed, 18 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Rerunning Borzoi personalized prediction with shifted indices</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index.html</link>
  <description><![CDATA[ 




<p>This job took less than 30 minutes in total</p>
<pre><code>module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011

export LD_LIBRARY_PATH=/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:$LD_LIBRARY_PATH

echo $LD_LIBRARY_PATH

python3 personalized_prediction.py \
--intervals_file intervals.txt \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /grand/TFXcan/imlab/users/sabrina/redo-borzoi-personalized-test
</code></pre>
<section id="plot-predictions" class="level2">
<h2 class="anchored" data-anchor-id="plot-predictions">Plot Predictions</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb2-5">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb2-6">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb2-7">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb2-8">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENSG00000161011"</span></span>
<span id="cb2-9">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/redo-borzoi-personalized-test"</span></span>
<span id="cb2-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-11">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>]</span>
<span id="cb3-2">interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcript_start'</span>]</span>
<span id="cb3-3">interval_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcript_end'</span>]</span>
<span id="cb3-4">tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]</span>
<span id="cb3-5">center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> interval_end) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-6">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-7">end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-8">seq_out_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb3-9">tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_out_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb4-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb4-5">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:]</span>
<span id="cb4-6">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:]</span>
<span id="cb4-7">        CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo1[:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb4-8">        CAGE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo2[:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb4-9">        CAGE_predictions.append((CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CAGE_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-10"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-2">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-3">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-4">observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>: CAGE_predictions, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">gex_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Predicted</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Predicted</td>
<td>1.000000</td>
<td>0.026531</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Observed</td>
<td>0.026531</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb8-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb8-5"></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config InlineBackend.figure_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retina'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb9-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb9-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb9-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb9-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb9-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE predictions for ENSG00000161011"</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb9-11">plt.legend()</span>
<span id="cb9-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="plotting-cage-tracks-along-personalized-genome" class="level2">
<h2 class="anchored" data-anchor-id="plotting-cage-tracks-along-personalized-genome">Plotting CAGE tracks along Personalized Genome</h2>
<p>There are two CAGE:B lymphoblastoid cell line tracks, for positive and negative strands. I am trying to understand the difference between them.</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kipoiseq</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kipoiseq <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Interval</span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_tracks(tracks, interval, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>):</span>
<span id="cb10-4">  fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tracks), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tracks)), sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax, (title, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axes, tracks.items()):</span>
<span id="cb10-6">    ax.fill_between(np.linspace(interval.start, interval.end, num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)), y)</span>
<span id="cb10-7">    ax.set_title(title)</span>
<span id="cb10-8">    sns.despine(top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-9">  ax.set_xlabel(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(interval))</span>
<span id="cb10-10">  plt.tight_layout()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb11-2">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(individuals, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples:</span>
<span id="cb12-2">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, sample, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb12-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb12-4">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-5">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-6">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-7">        tss_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, tss, tss).resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb12-8">        tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'- strand'</span>: predictions[tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>],</span>
<span id="cb12-9">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+ strand'</span>: predictions[tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]}</span>
<span id="cb12-10">        plot_tracks(tracks, tss_interval)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Those predictions were made by subtracting for 0-based indexing of the fasta file. The original results would have given:</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">old_predictions_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/borzoi-personalized-test"</span></span>
<span id="cb13-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples:</span>
<span id="cb13-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(old_predictions_dir, sample, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb13-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb13-5">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:],axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-6">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:],axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-7">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb13-8">        tss_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kipoiseq.Interval(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, tss, tss).resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb13-9">        tracks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'- strand'</span>: predictions[tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>],</span>
<span id="cb13-10">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+ strand'</span>: predictions[tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">448</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]}</span>
<span id="cb13-11">        plot_tracks(tracks, tss_interval)</span>
<span id="cb13-12"></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="plotting-cagelcl-predicted-vs-observed-expression" class="level2">
<h2 class="anchored" data-anchor-id="plotting-cagelcl-predicted-vs-observed-expression">Plotting CAGE:LCL+ Predicted vs Observed Expression</h2>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">stranded_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb14-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb14-5">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:]</span>
<span id="cb14-6">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:]</span>
<span id="cb14-7">        CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo1[:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>])</span>
<span id="cb14-8">        CAGE_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(haplo2[:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>])</span>
<span id="cb14-9">        stranded_CAGE_predictions.append((CAGE_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> CAGE_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>: stranded_CAGE_predictions, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb16-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb16-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb16-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb16-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb16-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE:LCL+ predictions for ENSG00000161011"</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb16-11">plt.legend()</span>
<span id="cb16-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">old_stranded_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb17-3">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(old_predictions_dir, sample, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb17-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb17-5">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>])</span>
<span id="cb17-6">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>])</span>
<span id="cb17-7">        old_stranded_CAGE_predictions.append((haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> haplo2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">gex_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>: old_stranded_CAGE_predictions, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>: observed}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb19-2">corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.pearsonr(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>])</span>
<span id="cb19-3">plt.scatter(gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed'</span>], gex_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb19-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>)</span>
<span id="cb19-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted"</span>)</span>
<span id="cb19-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE:LCL+ predictions for ENSG00000161011 (Old Indexing)"</span>)</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb19-11">plt.legend()</span>
<span id="cb19-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-17-updated-personalized-borzoi-ENSG00000161011/index.html</guid>
  <pubDate>Tue, 17 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Debugging Borzoi Personalized Predictions Test</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-16-debugging-personalized-borzoi-gene-expression-predictions/index.html</link>
  <description><![CDATA[ 




<p>Use human gene ENSG00000161011 to compute CAGE tracks for personalized genomes.</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">search_gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENSG00000161011'</span></span>
<span id="cb1-2">chrom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr5'</span></span>
<span id="cb1-3">gene_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">179820905</span></span>
<span id="cb1-4">gene_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">179838078</span></span>
<span id="cb1-5">tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_start</span>
<span id="cb1-6">center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (gene_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_end) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-7">start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-8">end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-9">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA20521'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA18934'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">gene_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [gene_key <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene_key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> transcriptome.genes.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> search_gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_key]</span>
<span id="cb2-2"></span>
<span id="cb2-3">gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transcriptome.genes[gene_keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Determine output sequence start</span></span>
<span id="cb2-6">seq_out_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seqnn_model.model_strides[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>seqnn_model.target_crops[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-7">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seqnn_model.model_strides[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>seqnn_model.target_lengths[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Determine output positions of gene exons</span></span>
<span id="cb2-10">gene_slice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene.output_slice(seq_out_start, seq_out_len, seqnn_model.model_strides[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> find_variants_in_vcf_file(cyvcf2_object, interval_object, samples, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phased"</span>):</span>
<span id="cb3-2">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-3">    query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-4">    variants_dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-5">    variants_dictionary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>]</span>
<span id="cb3-6">    variants_dictionary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(variant.POS <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> variant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object(query))</span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'phased'</span>:</span>
<span id="cb3-8">        delim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|'</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unphased'</span>:</span>
<span id="cb3-10">        delim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(samples):</span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object.samples:</span>
<span id="cb3-13">            variants_dictionary[sample] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>([variant.genotypes[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], variant.gt_bases[i].split(delim)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> variant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object(query))</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> variants_dictionary</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_sequence(models, sample_input):</span>
<span id="cb3-17">    prediction_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> haplotype, sequence_encoding <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_input.items():</span>
<span id="cb3-19">        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_tracks(models, sequence_encoding)</span>
<span id="cb3-20">        prediction_output[haplotype] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction</span>
<span id="cb3-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> prediction_output</span>
<span id="cb3-22"></span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cyvcf2</span>
<span id="cb4-2">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>: chrom, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>: start, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>: end}</span>
<span id="cb4-3">vcf_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/data/1000G/vcf_snps_only"</span></span>
<span id="cb4-4">path_to_vcf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(vcf_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ALL.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>chrom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz"</span>)</span>
<span id="cb4-5">vcf_chr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cyvcf2.cyvcf2.VCF(path_to_vcf, samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>individuals)</span>
<span id="cb4-6">variants_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_variants_in_vcf_file(vcf_chr, target_interval, individuals, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phased"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mutate_sequence(sequence_one_hot, start, poses, alts):</span>
<span id="cb5-2">    </span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Induce mutation(s)</span></span>
<span id="cb5-4">    sequence_one_hot_mut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.copy(sequence_one_hot)</span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pos, alt <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(poses, alts) :</span>
<span id="cb5-7">        alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span> :</span>
<span id="cb5-9">            alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span> :</span>
<span id="cb5-11">            alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'G'</span> :</span>
<span id="cb5-13">            alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T'</span> :</span>
<span id="cb5-15">            alt_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-16"></span>
<span id="cb5-17">        sequence_one_hot_mut[pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb5-18">        sequence_one_hot_mut[pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, alt_ix] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span></span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sequence_one_hot_mut</span>
<span id="cb5-20"></span>
<span id="cb5-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> replace_variants_in_reference_sequence(variants_array, individuals):</span>
<span id="cb5-22">    poses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> variants_array[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>]</span>
<span id="cb5-23">    variant_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb5-25">        alts_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [variants_array[individual][i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(poses))]</span>
<span id="cb5-26">        alts_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [variants_array[individual][i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(poses))]</span>
<span id="cb5-27">        sequence_one_hot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_sequence(fasta_open, chrom, gene_start, gene_end)</span>
<span id="cb5-28">        haplotype1_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mutate_sequence(sequence_one_hot, gene_start, poses, alts_1)</span>
<span id="cb5-29">        haplotype2_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mutate_sequence(sequence_one_hot, gene_start, poses, alts_2)</span>
<span id="cb5-30">        variant_encoded[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>: haplotype1_encoded, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>: haplotype2_encoded}</span>
<span id="cb5-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> variant_encoded</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">samples_variants_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> replace_variants_in_reference_sequence(variants_array, individuals)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb7-2">    sample_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> samples_variants_encoded[individual]</span>
<span id="cb7-3">    sample_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_on_sequence(models, sample_input)</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>individual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/test.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb7-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hap <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_predictions.keys():</span>
<span id="cb7-6">            hf[hap]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(sample_predictions[hap], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb8-3">old_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-4">new_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb8-6">    predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/users/sabrina/borzoi-personalized-test"</span>, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr5_179567347_180091635_predictions.h5'</span>)</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb8-8">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:]</span>
<span id="cb8-9">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:]</span>
<span id="cb8-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(haplo1.shape)</span>
<span id="cb8-11">    old_predictions[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>: haplo1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>: haplo2}</span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(os.path.join(individual, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test.h5'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb8-13">        haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:]</span>
<span id="cb8-14">        haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:]</span>
<span id="cb8-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(haplo1.shape)</span>
<span id="cb8-16">    new_predictions[individual] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>: haplo1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>: haplo2}</span>
<span id="cb8-17">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(4, 16352, 7611)
(1, 16352, 7611)
(4, 16352, 7611)
(1, 16352, 7611)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">old_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-2">new_CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-3">tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_out_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb10-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb10-5">    old_CAGE_haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(old_predictions[individual][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb10-6">    old_CAGE_haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(old_predictions[individual][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb10-7">    old_CAGE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (old_CAGE_haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> old_CAGE_haplo2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-8">    new_CAGE_haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(new_predictions[individual][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb10-9">    new_CAGE_haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(new_predictions[individual][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb10-10">    new_CAGE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (new_CAGE_haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> new_CAGE_haplo2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>    </span>
<span id="cb10-11">    old_CAGE_predictions.append(old_CAGE)</span>
<span id="cb10-12">    new_CAGE_predictions.append(new_CAGE)</span>
<span id="cb10-13">    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(old_CAGE_predictions)</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(new_CAGE_predictions)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[41.0625, 41.0]
[42.78125, 42.78125]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">sequence_one_hot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_sequence(fasta_open, chrom, gene_start, gene_end)</span>
<span id="cb13-2">reference_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_tracks(models, sequence_one_hot)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">reference_CAGE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(reference_prediction[..., tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]])</span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(reference_CAGE)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>42.8</code></pre>
</div>
</div>
<p>Since it looks like the new predictions are closer to reference, it could mean our bug was how we indexed variants into the reference sequence.</p>



 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-16-debugging-personalized-borzoi-gene-expression-predictions/index.html</guid>
  <pubDate>Mon, 16 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Personalized Borzoi test on a few genes</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-04-personalized-test-on-a-few-genes/index.html</link>
  <description><![CDATA[ 




<section id="select-genes" class="level3">
<h3 class="anchored" data-anchor-id="select-genes">Select Genes</h3>
<p>We want to pick a handful of human genes (with rat orthologs) used in the Enformer personalized runs (on rats) that will roughly have a similar distribution of Spearman correlations.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">rn7_gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_spearman_corr_human.csv"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="33">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate mean and standard deviation</span></span>
<span id="cb3-2">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(gene_list[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>])</span>
<span id="cb3-3">std_dev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(gene_list[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>])</span>
<span id="cb3-4"></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group the elements based on their distance from the mean</span></span>
<span id="cb3-7">df_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>])</span>
<span id="cb3-8">df_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>])</span>
<span id="cb3-9">df_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>])</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> rn7_gene_list.iterrows():</span>
<span id="cb3-12">    deviation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean)</span>
<span id="cb3-13">    df_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>: [gene], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman r'</span>]})</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> deviation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> std_dev:</span>
<span id="cb3-15">        df_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_1, df_row], ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> deviation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> std_dev:</span>
<span id="cb3-17">        df_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_2, df_row], ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-19">        df_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_3, df_row], ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">rn7_hg38_ortho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb4-2">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-3">ortho_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>((rn7_gene_list.index).intersection(rn7_hg38_ortho.index))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select human gene from each standard deviation grouping</span></span>
<span id="cb5-2">df_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_1[df_1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].isin(ortho_genes)]</span>
<span id="cb5-3">df_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_2[df_2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].isin(ortho_genes)]</span>
<span id="cb5-4">df_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_3[df_3[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].isin(ortho_genes)]</span>
<span id="cb5-5">test_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [df_1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].sample().item(), df_2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].sample().item(), df_3[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gene'</span>].sample().item()]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">hg38_gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rn7_hg38_ortho[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hsapiens_homolog_ensembl_gene'</span>].loc[test_genes].to_list()</span>
<span id="cb6-2">hg38_gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot[hg38_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensembl_gene_id'</span>].isin(hg38_gene_list)]</span>
<span id="cb6-3">hg38_gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_gene_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_end"</span>]]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="86">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">hg38_gene_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene_list.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="write-individuals-list" class="level3">
<h3 class="anchored" data-anchor-id="write-individuals-list">Write Individuals List</h3>
<p>There are 455 individuals in the GEUVADIS data with LCL gene expression data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cyvcf2</span>
<span id="cb8-2">vcf_chr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cyvcf2.cyvcf2.VCF(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/data/1000G/vcf_snps_only/ALL.chr1.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz"</span>)</span>
<span id="cb8-3">vcf_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vcf_chr.samples</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-2">individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:].tolist()</span>
<span id="cb9-3">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(vcf_samples).intersection(individuals))</span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb9-5">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(samples))</span></code></pre></div>
</div>
</section>
<section id="run-predictions" class="level3">
<h3 class="anchored" data-anchor-id="run-predictions">Run Predictions</h3>
<p>I started a pipeline for personalized prediction in this <a href="https://sabrina-dl.hakyimlab.org/posts/2023-09-26-borzoi-personalized-test/geuvadis_personalized_test">notebook</a>, and put it into a <a href="personalized_prediction.py">python script</a>.</p>
<p>I submitted this as a <a href="borzoi_test_run.pbs">PBS job</a>, <code>qsub borzoi_test_run.pbs</code>.</p>
<pre><code>module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-04-personalized-test-on-a-few-genes

export LD_LIBRARY_PATH=/soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:$LD_LIBRARY_PATH

echo $LD_LIBRARY_PATH

python3 personalized_prediction.py \
--gene_df gene_list.csv \
--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \
--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \
--individuals_file individuals.txt \
--model_dir /home/s1mi/borzoi_tutorial \
--output_dir /grand/TFXcan/imlab/users/sabrina/borzoi-personalized-test
</code></pre>
</section>
<section id="check-results" class="level3">
<h3 class="anchored" data-anchor-id="check-results">Check Results</h3>
<p>Expand the code below for setting global variables and reading GEUVADIS data.</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#### LIBRARIES AND DEFINITIONS</span></span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb11-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb11-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb11-6">predictions_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/grand/TFXcan/imlab/users/sabrina/borzoi-personalized-test"</span></span>
<span id="cb11-7">geuvadis_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-8">geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geuvadis_gex[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gene: gene.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb11-9">geuvadis_gex.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TargetID'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-10">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#### GET LIST OF GENES</span></span>
<span id="cb11-12">genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene_list.csv"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensembl_gene_id'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(x)).to_list()</span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#### GET LIST OF INDIVIDUALS</span></span>
<span id="cb11-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"individuals.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb11-15">    individuals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read().splitlines()</span>
<span id="cb11-16"></span>
<span id="cb11-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> borzoi_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb11-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gene <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bgene</span>
<span id="cb11-19">prefix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/borzoi_tutorial"</span></span>
<span id="cb11-20">splice_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/gencode41_basic_protein_splice.csv.gz'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, compression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gzip'</span>)</span>
<span id="cb11-21">transcriptome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bgene.Transcriptome(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/gencode41_basic_nort.gtf'</span>)</span>
<span id="cb11-22"></span>
<span id="cb11-23">targets_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prefix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/targets_human.txt'</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-24">target_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets_df.index</span>
<span id="cb11-25"></span>
<span id="cb11-26"></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Create local index of strand_pair (relative to sliced targets)</span></span>
<span id="cb11-28">strand_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets_df.strand_pair</span>
<span id="cb11-29"></span>
<span id="cb11-30">target_slice_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {ix : i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(target_index.values.tolist())}</span>
<span id="cb11-31">slice_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb11-32">    target_slice_dict[ix] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_slice_dict <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> ix <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> strand_pair.values.tolist()</span>
<span id="cb11-33">], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int32'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>2023-10-12 03:16:08.150141: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-10-12 03:16:11.340129: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2023-10-12 03:16:16.242235: E tensorflow/compiler/xla/stream_executor/cuda/cuda_driver.cc:266] failed call to cuInit: CUDA_ERROR_NOT_INITIALIZED: initialization error
2023-10-12 03:16:16.242438: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:168] retrieving CUDA diagnostic information for host: polaris-login-02
2023-10-12 03:16:16.242469: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:175] hostname: polaris-login-02
2023-10-12 03:16:16.243018: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:199] libcuda reported version is: 470.103.4
2023-10-12 03:16:16.243100: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:203] kernel reported version is: 470.103.4
2023-10-12 03:16:16.243112: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:309] kernel version seems to match DSO: 470.103.4</code></pre>
</div>
</div>
<p>We compare gene expression predictions derived from borzoi’s CAGE and RNA tracks. The GEUVADIS dataset includes RNA-seq data collected from LCL samples. Borzoi was trained on ENCODE’s CAGE:B lymphoblastoid cell line data (tracks 870, 871) as well as GTEx RNA-seq data from EBV-transformed lymphosites, however, it’s unclear to me which track this fell under. My guess is that track 7531:GTEX-1I4MK-0002-SM-EZ6M9 is the best approximation for LCL tissue.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> borzoi_calculation_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract_RNA(ensembl_gene_id, seq_out_start, predictions, tracks, seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span>):</span>
<span id="cb13-3">    gene_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [gene_key <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene_key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> transcriptome.genes.keys() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ensembl_gene_id <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gene_key]</span>
<span id="cb13-4">    gene <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transcriptome.genes[gene_keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb13-5">    gene_slice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene.output_slice(seq_out_start, seq_out_len, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expr_attr(predictions, tracks, gene_slice)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extract_CAGE(predictions, tss_bin, tracks):</span>
<span id="cb14-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.mean(predictions[:, tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:tss_bin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, tracks])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span></span>
<span id="cb15-2">seq_out_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">523264</span></span>
<span id="cb15-3">expr_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb15-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes:</span>
<span id="cb15-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(gene)</span>
<span id="cb15-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chromosome_name'</span>]</span>
<span id="cb15-7">    interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcript_start'</span>]</span>
<span id="cb15-8">    interval_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcript_end'</span>]</span>
<span id="cb15-9">    tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hg38_annot.loc[gene, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transcription_start_site'</span>]</span>
<span id="cb15-10">    center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> interval_end) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-11">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-12">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-13">    seq_out_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb15-14">    tss_bin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_out_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb15-15">    CAGE_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-16">    RNA_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> individual <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> individuals:</span>
<span id="cb15-18">        predictions_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(predictions_dir, individual, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb15-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> os.path.exists(predictions_file):</span>
<span id="cb15-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(predictions_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb15-21">                haplo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>][:]</span>
<span id="cb15-22">                haplo2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>][:]</span>
<span id="cb15-23">            CAGE_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (extract_CAGE(haplo1, tss_bin, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> extract_CAGE(haplo2, tss_bin, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">870</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">871</span>])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-24">            RNA_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (extract_RNA(gene, seq_out_start, haplo1, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7531</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> extract_RNA(gene, seq_out_start, haplo2, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7531</span>])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-25">            CAGE_predictions.append(CAGE_mean)</span>
<span id="cb15-26">            RNA_predictions.append(RNA_mean)</span>
<span id="cb15-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-28">            CAGE_predictions.append(np.nan)</span>
<span id="cb15-29">            RNA_predictions.append(np.nan)</span>
<span id="cb15-30">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAGE predicted'</span>: CAGE_predictions, </span>
<span id="cb15-31">                                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RNA predicted'</span>: RNA_predictions}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals)</span>
<span id="cb15-32">      </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ENSG00000142949
ENSG00000133247
ENSG00000161011</code></pre>
</div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_rat_data/output/borzoi_personalized_predictions_test.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb17-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> expr_dict.items():</span>
<span id="cb17-3">        hf[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/enformer_rat_data/output/borzoi_personalized_predictions_test.h5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb18-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hf.items():</span>
<span id="cb18-3">        expr_dict[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(value, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> individuals, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAGE predicted'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RNA predicted'</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gene <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> genes:</span>
<span id="cb19-2">    observed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_numeric(geuvadis_gex.loc[gene][individuals])</span>
<span id="cb19-3">    observed.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'observed'</span></span>
<span id="cb19-4">    expr_dict[gene] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[gene].merge(observed, left_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb19-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#expr_dict[gene] = expr_dict[gene].apply(pd.to_numeric)</span></span></code></pre></div>
</div>
<section id="compare-predictions-to-observed" class="level4">
<h4 class="anchored" data-anchor-id="compare-predictions-to-observed">Compare Predictions to Observed</h4>
<p>To add context to each gene, we’ll first pull correlations from Enformer personalized prediction on rat orthologs.</p>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">rn7_hg38_ortho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hsapiens_homolog_ensembl_gene"</span>)</span>
<span id="cb20-2">rn7_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rn7_hg38_ortho.loc[genes][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ensembl_gene_id'</span>].to_list()</span>
<span id="cb20-3">rn7_spearman_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_spearman_corr_human.csv"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-4">rn7_pearson_corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/Br_personalized_pearson_corr_human.csv"</span>, index_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<p><strong>Br Rat Pearson Correlations</strong></p>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">rn7_pearson_corr.loc[rn7_genes]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">pearson r</th>
<th data-quarto-table-cell-role="th">pvalue</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000019977</td>
<td>-0.245970</td>
<td>4.443961e-06</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSRNOG00000017508</td>
<td>0.033957</td>
<td>5.326182e-01</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000003147</td>
<td>0.624152</td>
<td>4.101428e-38</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><strong>Br Rat Spearman Correlations</strong></p>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">rn7_spearman_corr.loc[rn7_genes]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">spearman r</th>
<th data-quarto-table-cell-role="th">pvalue</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000019977</td>
<td>-0.235618</td>
<td>1.130621e-05</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENSRNOG00000017508</td>
<td>0.012958</td>
<td>8.118338e-01</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENSRNOG00000003147</td>
<td>0.614930</td>
<td>9.560589e-37</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><strong>GEUVADIS Human Pearson Correlations</strong></p>
<p>ENSG00000142949 (Enformer Rat R=-0.246): Both CAGE and RNA tracks predict in the correct direction of gene effect, but with reduced magnitude</p>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearson'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.460416</td>
<td>0.086982</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.460416</td>
<td>1.000000</td>
<td>0.073000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.086982</td>
<td>0.073000</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>ENSG00000133247 (Enformer Rat R = 0.034): Borzoi performs weakly as well.</p>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearson'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.641555</td>
<td>-0.010348</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.641555</td>
<td>1.000000</td>
<td>0.024595</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>-0.010348</td>
<td>0.024595</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>ENSG00000161011 (Enformer Rat R = 0.624): Borzoi underperforms in both tracks, I will need to debug.</p>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pearson'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.18870</td>
<td>0.021334</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.188700</td>
<td>1.00000</td>
<td>0.003480</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.021334</td>
<td>0.00348</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><strong>GEUVADIS Human Spearman Correlations</strong></p>
<div class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.526191</td>
<td>0.071541</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.526191</td>
<td>1.000000</td>
<td>0.085379</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.071541</td>
<td>0.085379</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.665929</td>
<td>0.00412</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.665929</td>
<td>1.000000</td>
<td>0.02841</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.004120</td>
<td>0.028410</td>
<td>1.00000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">expr_dict[genes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]].corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spearman'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="72">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">CAGE predicted</th>
<th data-quarto-table-cell-role="th">RNA predicted</th>
<th data-quarto-table-cell-role="th">observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">CAGE predicted</td>
<td>1.000000</td>
<td>0.481421</td>
<td>0.022248</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RNA predicted</td>
<td>0.481421</td>
<td>1.000000</td>
<td>0.029495</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">observed</td>
<td>0.022248</td>
<td>0.029495</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb29-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb29-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb29-4">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pastel"</span>)</span>
<span id="cb29-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> scatter_plot(x, y, xlabel, ylabel, title, corr):</span>
<span id="cb29-6">    plt.scatter(x, y, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-7"></span>
<span id="cb29-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb29-9">    plt.xlabel(xlabel)</span>
<span id="cb29-10">    plt.ylabel(ylabel)</span>
<span id="cb29-11">    plt.title(gene)</span>
<span id="cb29-12"></span>
<span id="cb29-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb29-14">    plt.legend()</span>
<span id="cb29-15">    plt.show()</span>
<span id="cb29-16"></span>
<span id="cb29-17"></span>
<span id="cb29-18"></span>
<span id="cb29-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_spearman_corr(gene):</span>
<span id="cb29-20">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"observed"</span>]</span>
<span id="cb29-21">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expr_dict[gene][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"human predicted"</span>]</span>
<span id="cb29-22">    corr, pval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.spearmanr(x, y)</span>
<span id="cb29-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.scatter(x, y, marker='o', color='blue', label=f"Correlation: {corr:.3f}\nP-value: {pval}")</span></span>
<span id="cb29-24">    plt.scatter(stats.rankdata(x), stats.rankdata(y), marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Correlation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-25"></span>
<span id="cb29-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add labels and title</span></span>
<span id="cb29-27">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed Ranks'</span>)</span>
<span id="cb29-28">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted Ranks'</span>)</span>
<span id="cb29-29">    plt.title(gene)</span>
<span id="cb29-30"></span>
<span id="cb29-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb29-32">    plt.legend()</span>
<span id="cb29-33">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'ENSG00000142949':          CAGE predicted  RNA predicted
 NA20521       20.140625   30171.421875
 NA18934       20.171875   31623.371094
 HG00324       20.062500   31657.937500
 HG00103       20.281250   32049.599609
 NA20516       20.156250   31728.843750
 ...                 ...            ...
 HG00152       20.093750   30087.642578
 HG00351       20.218750   31902.732422
 HG00185       20.218750   31106.968750
 NA06994       20.250000   32102.337891
 NA12341       20.125000   31183.824219
 
 [455 rows x 2 columns],
 'ENSG00000133247':          CAGE predicted  RNA predicted
 NA20521       22.968750   61911.656250
 NA18934       23.000000   62215.453125
 HG00324       22.859375   60991.593750
 HG00103       22.968750   61437.328125
 NA20516       22.906250   61042.312500
 ...                 ...            ...
 HG00152       22.843750   60993.703125
 HG00351       22.875000   61338.320312
 HG00185       22.968750   61601.574219
 NA06994       22.796875   61072.781250
 NA12341       22.875000   61673.406250
 
 [455 rows x 2 columns],
 'ENSG00000161011':          CAGE predicted  RNA predicted
 NA20521        41.06250      6132596.0
 NA18934        41.00000      5838809.0
 HG00324        41.12500      5967448.0
 HG00103        40.96875      5852593.0
 NA20516        41.00000      5942520.0
 ...                 ...            ...
 HG00152        41.09375      6227792.5
 HG00351        41.12500      6053156.0
 HG00185        41.06250      6043781.0
 NA06994        41.06250      5897614.0
 NA12341        41.12500      6036931.0
 
 [455 rows x 2 columns]}</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-10-04-personalized-test-on-a-few-genes/index.html</guid>
  <pubDate>Wed, 04 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Code Snippets for Borzoi Personalized Prediction</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-26-borzoi-personalized-test/geuvadis_personalized_test.html</link>
  <description><![CDATA[ 




<section id="step-1-vcf-to-one-hot-encode" class="level2">
<h2 class="anchored" data-anchor-id="step-1-vcf-to-one-hot-encode">Step 1: VCF to One-hot Encode</h2>
<div class="cell" data-execution_count="127">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cyvcf2</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pysam</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> borzoi_helpers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> process_sequence, predict_tracks</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/gene_list.txt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-2">    rn7_gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read().splitlines()</span>
<span id="cb2-3">rn7_hg38_ortho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb2-4">hg38_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">ortho_genes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(rn7_gene_list).intersection(rn7_hg38_ortho.index))</span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## convert to hg38</span></span>
<span id="cb3-3">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rn7_hg38_ortho.loc[ortho_genes]</span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## annotate hg38 genes</span></span>
<span id="cb3-5">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_df.merge(hg38_annot, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hsapiens_homolog_ensembl_gene"</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>)</span>
<span id="cb3-6">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_end"</span>]]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> find_variants_in_vcf_file(cyvcf2_object, interval_object, samples, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phased"</span>):</span>
<span id="cb4-2">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-3">    query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-4">    variants_dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb4-5">    variants_dictionary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>]</span>
<span id="cb4-6">    variants_dictionary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(variant.POS <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> variant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object(query))</span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'phased'</span>:</span>
<span id="cb4-8">        delim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|'</span></span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unphased'</span>:</span>
<span id="cb4-10">        delim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span></span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(samples):</span>
<span id="cb4-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object.samples:</span>
<span id="cb4-13">            variants_dictionary[sample] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>([variant.genotypes[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], variant.gt_bases[i].split(delim)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> variant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cyvcf2_object(query))</span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> variants_dictionary</span></code></pre></div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_mapping_dictionary(variants_array, samples, interval_start):</span>
<span id="cb5-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-3">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb5-4">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb5-5">    G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb5-6">    T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb5-7">    seq_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>: A, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>: C, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'G'</span>: G, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T'</span>: T}</span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># collect common information</span></span>
<span id="cb5-10">    samples_haplotype_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-11">    samples_haplotype_map[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>((variants_array[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>][i]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> interval_start <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(variants_array[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>])))</span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples:</span>
<span id="cb5-13">        samples_haplotype_map[sample] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-14">        samples_haplotype_map[sample][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype1'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(seq_dict[variants_array[sample][i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(variants_array[sample])))</span>
<span id="cb5-15">        samples_haplotype_map[sample][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'haplotype2'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(seq_dict[variants_array[sample][i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(variants_array[sample])))</span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> samples_haplotype_map</span></code></pre></div>
</div>
<div class="cell" data-execution_count="83">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> resize(region, seq_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">524288</span>):</span>
<span id="cb6-2">    center_bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (region[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> region[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-3">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-4">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center_bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>: region[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>: start, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>: end}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="96">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> replace_variants_in_reference_sequence(query_sequences_encoded, mapping_dict, samples):</span>
<span id="cb7-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> copy</span>
<span id="cb7-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-4">    positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'positions'</span>]</span>
<span id="cb7-5">    variant_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples:</span>
<span id="cb7-7">        haplotype1_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.copy(query_sequences_encoded)</span>
<span id="cb7-8">        haplotype2_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.copy(query_sequences_encoded)</span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, position <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(positions):</span>
<span id="cb7-10">            haplotype1_encoded[position] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping_dict[sample][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype1"</span>][i]</span>
<span id="cb7-11">            haplotype2_encoded[position] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mapping_dict[sample][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype2"</span>][i]</span>
<span id="cb7-12">        variant_encoded[sample] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype1"</span>: haplotype1_encoded, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"haplotype2"</span>: haplotype2_encoded}</span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> variant_encoded</span></code></pre></div>
</div>
<div class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_model(model_dir):</span>
<span id="cb8-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb8-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> h5py</span>
<span id="cb8-4">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb8-5">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb8-6">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb8-7"></span>
<span id="cb8-8">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> baskerville</span>
<span id="cb8-9">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seqnn</span>
<span id="cb8-10">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dna</span>
<span id="cb8-11">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> baskerville <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gene <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> bgene</span>
<span id="cb8-12"></span>
<span id="cb8-13">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb8-14"></span>
<span id="cb8-15">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pysam</span>
<span id="cb8-16">    params_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'params_pred.json'</span>) </span>
<span id="cb8-17">    targets_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'targets_human.txt'</span>) </span>
<span id="cb8-18"></span>
<span id="cb8-19">    n_folds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#To use only one model fold, change to 'n_folds = 1'</span></span>
<span id="cb8-20">    rc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Average across reverse-complement prediction</span></span>
<span id="cb8-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Read model parameters</span></span>
<span id="cb8-22"></span>
<span id="cb8-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(params_file) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> params_open :</span>
<span id="cb8-24">        </span>
<span id="cb8-25">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(params_open)</span>
<span id="cb8-26">        </span>
<span id="cb8-27">        params_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>]</span>
<span id="cb8-28"></span>
<span id="cb8-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Read targets</span></span>
<span id="cb8-30"></span>
<span id="cb8-31">    targets_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(targets_file, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-32">    target_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets_df.index</span>
<span id="cb8-33"></span>
<span id="cb8-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Create local index of strand_pair (relative to sliced targets)</span></span>
<span id="cb8-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rc :</span>
<span id="cb8-36">        strand_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> targets_df.strand_pair</span>
<span id="cb8-37">        </span>
<span id="cb8-38">        target_slice_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {ix : i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(target_index.values.tolist())}</span>
<span id="cb8-39">        slice_pair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb8-40">            target_slice_dict[ix] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target_slice_dict <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> ix <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> strand_pair.values.tolist()</span>
<span id="cb8-41">        ], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int32'</span>)</span>
<span id="cb8-42"></span>
<span id="cb8-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Initialize model ensemble</span></span>
<span id="cb8-44"></span>
<span id="cb8-45">    models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> fold_ix <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_folds) :</span>
<span id="cb8-47">        </span>
<span id="cb8-48">        model_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"saved_models/f"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(fold_ix) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/model0_best.h5"</span>)</span>
<span id="cb8-49"></span>
<span id="cb8-50">        seqnn_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seqnn.SeqNN(params_model)</span>
<span id="cb8-51">        seqnn_model.restore(model_file, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-52">        seqnn_model.build_slice(target_index)</span>
<span id="cb8-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rc :</span>
<span id="cb8-54">            seqnn_model.strand_pair.append(slice_pair)</span>
<span id="cb8-55">        seqnn_model.build_ensemble(rc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>)</span>
<span id="cb8-56">        </span>
<span id="cb8-57">        models.append(seqnn_model)</span>
<span id="cb8-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> models</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict_on_sequence(models, sample_input):</span>
<span id="cb9-2">    prediction_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> haplotype, sequence_encoding <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_input.items():</span>
<span id="cb9-4">        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_tracks(models, sequence_encoding)</span>
<span id="cb9-5">        prediction_output[haplotype] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> prediction_output</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">fasta_open <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pysam.Fastafile(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/borzoi_tutorial/hg38.fa'</span>)</span>
<span id="cb10-2">model_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/s1mi/borzoi_tutorial'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="137">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> enformer_predict_on_region(target_interval, samples, path_to_vcf, output_dir):</span>
<span id="cb11-2">    models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model(model_dir)</span>
<span id="cb11-3">    sequence_one_hot_ref <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_sequence(fasta_open, target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>], target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>], target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>])</span>
<span id="cb11-4">    vcf_chr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cyvcf2.cyvcf2.VCF(path_to_vcf, samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>samples)</span>
<span id="cb11-5">    variants_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_variants_in_vcf_file(vcf_chr, target_interval, samples, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phased"</span>)</span>
<span id="cb11-6">    mapping_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_mapping_dictionary(variants_array, samples, target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>])</span>
<span id="cb11-7">    samples_variants_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> replace_variants_in_reference_sequence(sequence_one_hot_ref, mapping_dict, samples)</span>
<span id="cb11-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> samples:</span>
<span id="cb11-9">        sample_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> samples_variants_encoded[sample]</span>
<span id="cb11-10">        sample_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_on_sequence(models, sample_input)</span>
<span id="cb11-11">        sample_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb11-12">        sample_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(output_dir, sample)</span>
<span id="cb11-13">        output_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(sample_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chr"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_interval[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_predictions.h5'</span>)</span>
<span id="cb11-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> os.path.exists(sample_dir): os.makedirs(sample_dir, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> h5py.File(output_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hf:</span>
<span id="cb11-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hap <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sample_predictions.keys():</span>
<span id="cb11-17">                sample_output[hap]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.squeeze(sample_predictions[hap], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="138">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">gene_annot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_df.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb12-2">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA21143"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA21144"</span>]</span>
<span id="cb12-3">vcf_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/grand/TFXcan/imlab/data/1000G/vcf_snps_only"</span></span>
<span id="cb12-4">output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-09-26-borzoi-personalized-test/"</span></span>
<span id="cb12-5">interval_object <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome_name"</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start'</span>: gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_start"</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'end'</span>: gene_annot[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcript_end"</span>]}</span>
<span id="cb12-6">target_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(interval_object)</span>
<span id="cb12-7">path_to_vcf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(vcf_dir, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ALL.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>interval_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chr'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz"</span>)</span>
<span id="cb12-8">enformer_predict_on_region(interval_object, samples, path_to_vcf, output_dir)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-26-borzoi-personalized-test/geuvadis_personalized_test.html</guid>
  <pubDate>Wed, 27 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Borzoi CAGE test</title>
  <dc:creator>Sabrina Mi</dc:creator>
  <link>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index.html</link>
  <description><![CDATA[ 




<p>We ran the Borzoi human track models on the same genes as the GTEx track runs to compare the performance.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2">annot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt"</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-3">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-4">gene_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list.dropna()</span>
<span id="cb1-5">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_list.merge(annot_df, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, right_on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>)</span>
<span id="cb1-6">gene_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gene_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ensembl_gene_id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromosome_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transcription_start_site"</span>]]</span>
<span id="cb1-7">gene_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gene_list.csv"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<section id="run-predictions" class="level1">
<h1>Run Predictions</h1>
<p>Each run can take anywhere from 2.5-5 GPU seconds, so allocate walltime accordingly. For my 981 gene regions, I requested <code>qsub -I -A AIHPC4EDU -l walltime=1:30:00 -l filesystems=home:grand -q preemptable</code></p>
<pre><code>module load conda
conda activate borzoi
cd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test
python borzoi_predict_CAGE.py --gene_df gene_list.csv --CAGE_tracks 610,611 </code></pre>
</section>
<section id="process-results" class="level1">
<h1>Process Results</h1>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read CAGE predictions</span></span>
<span id="cb4-2">hg38_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_borzoi_CAGE_test_predictions.csv"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read GTEx predictions</span></span>
<span id="cb4-4">gtex_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv"</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read observed gene expression</span></span>
<span id="cb4-6">human_brain_gex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_all_GTEx_brain_tissues.csv"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).dropna()</span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># merge dataframes</span></span>
<span id="cb4-8">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gtex_predictions.merge(human_brain_gex, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, right_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>)</span>
<span id="cb4-9">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enformer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cortex"</span>]]</span>
<span id="cb4-10">merged_df.columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gene"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]</span>
<span id="cb4-11">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df.merge(hg38_predictions, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gene"</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inner"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gene"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]]</span>
<span id="cb5-2">merged_df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gene"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write to File</span></span>
<span id="cb5-4">merged_df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/s1mi/enformer_rat_data/output/hg38_borzoi_vs_enformer_test_predictions.csv"</span>, header <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<p>We have 3 different prediction methods to evaluate, the outputs are combined in the following table:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">merged_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Gene</th>
<th data-quarto-table-cell-role="th">Borzoi (GTEx)</th>
<th data-quarto-table-cell-role="th">Borzoi (CAGE)</th>
<th data-quarto-table-cell-role="th">Enformer (CAGE)</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>ENSG00000260286</td>
<td>6.873438e+02</td>
<td>0.002146</td>
<td>0.005209</td>
<td>0.086014</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>ENSG00000162877</td>
<td>3.553310e+03</td>
<td>0.174000</td>
<td>0.270328</td>
<td>0.128466</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>ENSG00000083845</td>
<td>9.018748e+06</td>
<td>1.906000</td>
<td>18.964096</td>
<td>135.113922</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>ENSG00000143199</td>
<td>1.511829e+03</td>
<td>0.019640</td>
<td>0.049658</td>
<td>0.256258</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>ENSG00000188522</td>
<td>8.282543e+04</td>
<td>0.777000</td>
<td>0.083827</td>
<td>0.460673</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">968</td>
<td>ENSG00000198626</td>
<td>3.959017e+04</td>
<td>2.357000</td>
<td>11.577308</td>
<td>8.737213</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">969</td>
<td>ENSG00000184206</td>
<td>8.352521e+03</td>
<td>0.006187</td>
<td>0.002583</td>
<td>0.155200</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">970</td>
<td>ENSG00000140043</td>
<td>3.883056e+04</td>
<td>0.748500</td>
<td>5.710264</td>
<td>7.826176</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">971</td>
<td>ENSG00000081248</td>
<td>3.480795e+03</td>
<td>0.037500</td>
<td>0.021962</td>
<td>0.345895</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">972</td>
<td>ENSG00000198774</td>
<td>1.029021e+04</td>
<td>0.293000</td>
<td>0.156194</td>
<td>0.116595</td>
</tr>
</tbody>
</table>

<p>973 rows × 5 columns</p>
</div>
</div>
</div>
</section>
<section id="plot-correlations" class="level1">
<h1>Plot Correlations</h1>
<p>The correlation tables validate two key claims from the Borzoi paper:</p>
<ol type="1">
<li>Borzoi performs comparably, if not better, than Enformer on shared ENCODE tracks</li>
<li>Borzoi’s RNA-seq coverage metric for gene expression correlates higher than CAGE predictions from both Borzoi and Enformer
<ul>
<li>This correlation is biased because Borzoi was trained on some GTEx data</li>
<li>We need to validate on new data (GEUVADIS, HS rats, …)</li>
</ul></li>
</ol>
<p>Although this experiment was tested on N=981 randomly selected genes, I believe this sample decently reflects how the Enformer/Borzoi methods would perform genome-wide. This subset has correlations similar to the full set of human genes when we look at the CAGE tracks, with Spearman R = 0.796 (subset) and R = 0.794 (all genes).</p>
<p><strong>Pearson Correlations</strong></p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pearson_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pearson"</span>)</span>
<span id="cb7-2">pearson_corr_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi (GTEx)</th>
<th data-quarto-table-cell-role="th">Borzoi (CAGE)</th>
<th data-quarto-table-cell-role="th">Enformer (CAGE)</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Borzoi (GTEx)</td>
<td>1.000000</td>
<td>0.190700</td>
<td>0.225605</td>
<td>0.620217</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Borzoi (CAGE)</td>
<td>0.190700</td>
<td>1.000000</td>
<td>0.719421</td>
<td>0.469197</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Enformer (CAGE)</td>
<td>0.225605</td>
<td>0.719421</td>
<td>1.000000</td>
<td>0.593030</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Observed</td>
<td>0.620217</td>
<td>0.469197</td>
<td>0.593030</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The low correlations between CAGE tracks (Enformer and Borzoi) and GTex tracks can be explained by non-linearity. We calculated RNA-seq coverage from a series of exponents, log transforms to better represent counts of transcripts, which can also explains why it has the highest correlation with observed GTEx TPM.</p>
<p><strong>Spearman Correlations</strong></p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">spearman_corr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df.corr(method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spearman"</span>)</span>
<span id="cb8-2">spearman_corr_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Borzoi (GTEx)</th>
<th data-quarto-table-cell-role="th">Borzoi (CAGE)</th>
<th data-quarto-table-cell-role="th">Enformer (CAGE)</th>
<th data-quarto-table-cell-role="th">Observed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Borzoi (GTEx)</td>
<td>1.000000</td>
<td>0.843272</td>
<td>0.773361</td>
<td>0.856641</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Borzoi (CAGE)</td>
<td>0.843272</td>
<td>1.000000</td>
<td>0.888218</td>
<td>0.806720</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Enformer (CAGE)</td>
<td>0.773361</td>
<td>0.888218</td>
<td>1.000000</td>
<td>0.795909</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Observed</td>
<td>0.856641</td>
<td>0.806720</td>
<td>0.795909</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<section id="plot-against-observed" class="level3">
<h3 class="anchored" data-anchor-id="plot-against-observed">Plot against Observed</h3>
<blockquote class="blockquote">
<p>All plots are comparing predicted and observed reference gene expression in human brain tissue, based off data from N=981 human genes. To account for outliers, we are plotting relative expression levels (rank) and the correlations shown are all Spearman R.</p>
</blockquote>
<div class="cell" data-execution_count="35">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]</span>
<span id="cb9-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>]</span>
<span id="cb9-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>]</span>
<span id="cb9-4">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed (Rank)'</span>)</span>
<span id="cb9-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer CAGE (Rank)'</span>)</span>
<span id="cb9-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer CAGE Prediction"</span>)</span>
<span id="cb9-8">plt.legend()</span>
<span id="cb9-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="36">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]</span>
<span id="cb10-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb10-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb10-4">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed (Rank)'</span>)</span>
<span id="cb10-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi CAGE (Rank)'</span>)</span>
<span id="cb10-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE Prediction"</span>)</span>
<span id="cb10-8">plt.legend()</span>
<span id="cb10-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="38">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>]</span>
<span id="cb11-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>]</span>
<span id="cb11-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spearman_corr_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>]</span>
<span id="cb11-4">plt.scatter(stats.rankdata(x), stats.rankdata(y), s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Observed (Rank)'</span>)</span>
<span id="cb11-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi GTEx (Rank)'</span>)</span>
<span id="cb11-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi GTEx Prediction"</span>)</span>
<span id="cb11-8">plt.legend()</span>
<span id="cb11-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="extra-plots" class="level2">
<h2 class="anchored" data-anchor-id="extra-plots">Extra Plots</h2>
<p>Since Borzoi and Enformer CAGE tracks are measured on the same scale, it makes sense that the two have the highest pearson correlation out of all pairs. It’s not clear why the plot looks curved though.</p>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>]</span>
<span id="cb12-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb12-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pearson_corr_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer (CAGE)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb12-4">plt.scatter(x, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb12-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enformer CAGE'</span>)</span>
<span id="cb12-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi CAGE'</span>)</span>
<span id="cb12-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enformer and Borzoi CAGE Predictions"</span>)</span>
<span id="cb12-8">plt.legend()</span>
<span id="cb12-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Borzoi CAGE and GTEx had a large improvement from Pearson R = 0.191 to Spearman R = 0.843.</p>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>]</span>
<span id="cb13-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb13-3">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pearson_corr_df.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (GTEx)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi (CAGE)"</span>]</span>
<span id="cb13-4">plt.scatter(x, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>corr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi GTEx'</span>)</span>
<span id="cb13-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borzoi CAGE'</span>)</span>
<span id="cb13-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borzoi CAGE and GTEx Predictions"</span>)</span>
<span id="cb13-8">plt.legend()</span>
<span id="cb13-9">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>https://sabrinami.quarto.pub/deep-learning-in-genomics/posts/2023-09-25-borzoi-CAGE-test/index.html</guid>
  <pubDate>Tue, 26 Sep 2023 07:00:00 GMT</pubDate>
</item>
</channel>
</rss>
