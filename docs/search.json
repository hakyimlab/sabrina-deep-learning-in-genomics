[
  {
    "objectID": "posts/2023-08-10-selecting-genes/selecting-well-predicted-gene-regions.html",
    "href": "posts/2023-08-10-selecting-genes/selecting-well-predicted-gene-regions.html",
    "title": "Selecting Rat genes for Enformer CAGE predictions",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\n## Read in expression data\ntpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\niqn = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.iqn.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\n\n/tmp/ipykernel_238845/1386399847.py:2: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\n/tmp/ipykernel_238845/1386399847.py:3: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  iqn = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.iqn.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\n\n\n\ntpm_var = tpm.iloc[:, 3:].var(axis=1)\nnp.average(tpm_var)\n\n1003.8945129200853\n\n\n\niqn_var = iqn.iloc[:, 3:].var(axis=1)\nnp.average(iqn_var)\n\n0.6306594759954833\n\n\nWe first subset to genes in the top decile for both TPM and IQN variance.\n\ntpm_threshold = tpm_var.quantile(0.9)\niqn_threshold = iqn_var.quantile(0.9)\nhigh_tpm_var_genes = set(tpm[tpm_var&gt; tpm_threshold].index)\nhigh_iqn_var_genes = set(iqn[iqn_var&gt; iqn_threshold].index)\nhigh_var_genes = high_tpm_var_genes.intersection(high_iqn_var_genes)\nprint(len(high_var_genes), \"genes with high variance\")\n\n167 genes with high variance"
  },
  {
    "objectID": "posts/2023-08-10-selecting-genes/selecting-well-predicted-gene-regions.html#calculate-gene-expression-variance-across-individuals",
    "href": "posts/2023-08-10-selecting-genes/selecting-well-predicted-gene-regions.html#calculate-gene-expression-variance-across-individuals",
    "title": "Selecting Rat genes for Enformer CAGE predictions",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n\n## Read in expression data\ntpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\niqn = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.iqn.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\n\n/tmp/ipykernel_238845/1386399847.py:2: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\n/tmp/ipykernel_238845/1386399847.py:3: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  iqn = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.iqn.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\n\n\n\ntpm_var = tpm.iloc[:, 3:].var(axis=1)\nnp.average(tpm_var)\n\n1003.8945129200853\n\n\n\niqn_var = iqn.iloc[:, 3:].var(axis=1)\nnp.average(iqn_var)\n\n0.6306594759954833\n\n\nWe first subset to genes in the top decile for both TPM and IQN variance.\n\ntpm_threshold = tpm_var.quantile(0.9)\niqn_threshold = iqn_var.quantile(0.9)\nhigh_tpm_var_genes = set(tpm[tpm_var&gt; tpm_threshold].index)\nhigh_iqn_var_genes = set(iqn[iqn_var&gt; iqn_threshold].index)\nhigh_var_genes = high_tpm_var_genes.intersection(high_iqn_var_genes)\nprint(len(high_var_genes), \"genes with high variance\")\n\n167 genes with high variance"
  },
  {
    "objectID": "posts/2023-08-10-selecting-genes/selecting-well-predicted-gene-regions.html#count-eqtls",
    "href": "posts/2023-08-10-selecting-genes/selecting-well-predicted-gene-regions.html#count-eqtls",
    "title": "Selecting Rat genes for Enformer CAGE predictions",
    "section": "Count eQTLs",
    "text": "Count eQTLs\n\neqtl = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/Brain.rn7.cis_qtl_signif.txt\", sep=\"\\t\")\neqtl.head()\n\n\n\n\n\n\n\n\ngene_id\nvariant_id\ntss_distance\naf\nma_samples\nma_count\npval_nominal\nslope\nslope_se\npval_nominal_threshold\n\n\n\n\n0\nENSRNOG00000050129\nchr1:2002359\n695174\n0.433432\n223\n294\n0.0015\n0.129848\n0.04054\n0.006989\n\n\n1\nENSRNOG00000050129\nchr1:2002361\n695176\n0.433432\n223\n294\n0.0015\n0.129848\n0.04054\n0.006989\n\n\n2\nENSRNOG00000050129\nchr1:2002408\n695223\n0.433432\n223\n294\n0.0015\n0.129848\n0.04054\n0.006989\n\n\n3\nENSRNOG00000050129\nchr1:2002450\n695265\n0.433432\n223\n294\n0.0015\n0.129848\n0.04054\n0.006989\n\n\n4\nENSRNOG00000050129\nchr1:2002464\n695279\n0.433432\n223\n294\n0.0015\n0.129848\n0.04054\n0.006989\n\n\n\n\n\n\n\n\ncounts = eqtl['gene_id'].value_counts()\n\n\ncounts.describe()\n\ncount    11238.000000\nmean      2312.935398\nstd       1490.079008\nmin          1.000000\n25%       1160.250000\n50%       2236.000000\n75%       3277.750000\nmax      10799.000000\nName: gene_id, dtype: float64\n\n\n\neqtl_threshold = counts.quantile(0.9)\neqtl_genes = counts[counts &gt; eqtl_threshold].index\n\n\nprint(eqtl_genes)\n\nIndex(['ENSRNOG00000031024', 'ENSRNOG00000000451', 'ENSRNOG00000032708',\n       'ENSRNOG00000000455', 'ENSRNOG00000021507', 'ENSRNOG00000009389',\n       'ENSRNOG00000066838', 'ENSRNOG00000000432', 'ENSRNOG00000039396',\n       'ENSRNOG00000002232',\n       ...\n       'ENSRNOG00000016364', 'ENSRNOG00000008471', 'ENSRNOG00000043350',\n       'ENSRNOG00000012337', 'ENSRNOG00000005248', 'ENSRNOG00000068325',\n       'ENSRNOG00000012868', 'ENSRNOG00000068200', 'ENSRNOG00000005610',\n       'ENSRNOG00000008356'],\n      dtype='object', length=1124)\n\n\n\ngene_list = high_var_genes.intersection(set(eqtl_genes))\nprint(len(gene_list), \"candidate genes for enformer prediction experiments\")\n\n17 candidate genes for enformer prediction experiments"
  },
  {
    "objectID": "posts/2023-08-10-selecting-genes/selecting-well-predicted-gene-regions.html#check-elastic-net-prediction-performance",
    "href": "posts/2023-08-10-selecting-genes/selecting-well-predicted-gene-regions.html#check-elastic-net-prediction-performance",
    "title": "Selecting Rat genes for Enformer CAGE predictions",
    "section": "Check Elastic Net Prediction Performance",
    "text": "Check Elastic Net Prediction Performance\nNow that we have a manageable number of genes, we can individual check that these genes have sufficient prediction performance.\n\nmodel_genes = pd.read_csv(\"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/highestR2genes.csv\", header=0, index_col=\"gene\")\nmodel_genes.loc[[gene for gene in gene_list if gene in model_genes.index]]\n\n\n\n\n\n\n\n\ngenename\npred.perf.R2\nn.snps.in.model\npred.perf.pval\ncor\npred.perf.qval\n\n\ngene\n\n\n\n\n\n\n\n\n\n\nENSRNOG00000009734\nAkr1b8\n0.050379\n4\n6.577101e-04\n0.224453\n4.811327e-04\n\n\nENSRNOG00000001311\nRab36\n0.559618\n2\n6.036613e-42\n0.748076\n7.693936e-41\n\n\nENSRNOG00000010079\nCa3\n0.003307\n2\n3.884876e-01\n0.057507\n1.439053e-01\n\n\nENSRNOG00000028436\nRprml\n0.228241\n3\n2.407910e-14\n0.477745\n5.222104e-14\n\n\nENSRNOG00000032908\nAcaa1a\n0.548779\n2\n9.394297e-41\n0.740796\n1.111821e-39\n\n\nENSRNOG00000050647\nHspa1b\n0.078443\n6\n1.847947e-05\n0.280077\n1.706734e-05\n\n\nENSRNOG00000012235\nPpp1r17\n0.370200\n2\n2.229702e-24\n0.608441\n9.825564e-24\n\n\nENSRNOG00000048258\nCisd2\n0.661901\n2\n6.783282e-55\n0.813573\n2.391336e-53\n\n\nENSRNOG00000054549\nLss\n0.124023\n3\n4.970816e-08\n0.352169\n6.169430e-08\n\n\nENSRNOG00000004430\nCep131\n0.650722\n2\n2.657264e-53\n0.806673\n8.153414e-52\n\n\n\n\n\n\n\nAll of the genes found in the model have positive correlation. For now, we will keep all 17 genes in our list to run Enformer on."
  },
  {
    "objectID": "posts/2023-08-10-selecting-genes/selecting-well-predicted-gene-regions.html#run-pipeline",
    "href": "posts/2023-08-10-selecting-genes/selecting-well-predicted-gene-regions.html#run-pipeline",
    "title": "Selecting Rat genes for Enformer CAGE predictions",
    "section": "Run Pipeline",
    "text": "Run Pipeline\n\nWrite Metadata\nFirst, write our metadata/intervals.txt file with the 17 genes we have narrowed down to.\n\ndef write_intervals(gene_list, file):\n    with open(file, 'a') as f:\n        for gene in gene_list:\n            gene_annot = annot_df.loc[gene]\n            tss = gene_annot['tss']\n            interval = f\"chr{gene_annot['chromosome']}_{tss}_{tss}\"\n            f.write(interval + '\\n')\n\n\nannot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\n\nwith open(\"gene_list.txt\", \"w\") as f:\n    f.write(\"\\n\".join(gene_list))\nwrite_intervals(gene_list, \"metadata/intervals.txt\")\n\n/tmp/ipykernel_238845/487979158.py:1: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv('/home/s1mi/enformer_rat_data/rn7.gene.txt', sep ='\\t',  index_col='geneId')\n\n\nUse all 340 individuals:\n\n!bcftools query -l /home/s1mi/enformer_rat_data/genotypes/Brain.rn7.vcf.gz &gt; metadata/individuals.txt\n\n\n\nSubmit Jobs\nmodule load conda\n\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\n\ncd /home/s1mi/Github/shared_pipelines/enformer_pipeline\npython3 scripts/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-10-selecting-genes/personalized_config.json"
  },
  {
    "objectID": "posts/2023-10-04-personalized-test-on-a-few-genes/index.html",
    "href": "posts/2023-10-04-personalized-test-on-a-few-genes/index.html",
    "title": "Personalized Borzoi test on a few genes",
    "section": "",
    "text": "Select Genes\nWe want to pick a handful of human genes (with rat orthologs) used in the Enformer personalized runs (on rats) that will roughly have a similar distribution of Spearman correlations.\n\nimport pandas as pd\nimport numpy as np\n\n\nrn7_gene_list = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/Br_personalized_spearman_corr_human.csv\", index_col = 0)\n\n\n\nCode\n# Calculate mean and standard deviation\nmean = np.mean(gene_list['spearman r'])\nstd_dev = np.std(gene_list['spearman r'])\n\n\n# Group the elements based on their distance from the mean\ndf_1 = pd.DataFrame(columns=['gene', 'spearman r'])\ndf_2 = pd.DataFrame(columns=['gene', 'spearman r'])\ndf_3 = pd.DataFrame(columns=['gene', 'spearman r'])\n\nfor gene, row in rn7_gene_list.iterrows():\n    deviation = abs(row['spearman r'] - mean)\n    df_row = pd.DataFrame({'gene': [gene], 'spearman r': row['spearman r']})\n    if deviation &lt;= std_dev:\n        df_1 = pd.concat([df_1, df_row], ignore_index=True)\n    elif deviation &lt;= 2 * std_dev:\n        df_2 = pd.concat([df_2, df_row], ignore_index=True)\n    else:\n        df_3 = pd.concat([df_3, df_row], ignore_index=True)\n\n\n\nrn7_hg38_ortho = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt\", sep=\"\\t\", index_col=\"ensembl_gene_id\")\nhg38_annot = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt\", sep=\"\\t\")\northo_genes = list((rn7_gene_list.index).intersection(rn7_hg38_ortho.index))\n\n\n# select human gene from each standard deviation grouping\ndf_1 = df_1[df_1['gene'].isin(ortho_genes)]\ndf_2 = df_2[df_2['gene'].isin(ortho_genes)]\ndf_3 = df_3[df_3['gene'].isin(ortho_genes)]\ntest_genes = [df_1['gene'].sample().item(), df_2['gene'].sample().item(), df_3['gene'].sample().item()]\n\n\nhg38_gene_list = rn7_hg38_ortho['hsapiens_homolog_ensembl_gene'].loc[test_genes].to_list()\nhg38_gene_df = hg38_annot[hg38_annot['ensembl_gene_id'].isin(hg38_gene_list)]\nhg38_gene_df = hg38_gene_df[[\"ensembl_gene_id\", \"chromosome_name\", \"transcript_start\", \"transcript_end\"]]\n\n\nhg38_gene_df.to_csv(\"gene_list.csv\", index=False)\n\n\n\nWrite Individuals List\nThere are 455 individuals in the GEUVADIS data with LCL gene expression data.\n\nimport cyvcf2\nvcf_chr = cyvcf2.cyvcf2.VCF(\"/grand/TFXcan/imlab/data/1000G/vcf_snps_only/ALL.chr1.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz\")\nvcf_samples = vcf_chr.samples\n\n\ngeuvadis_gex = pd.read_csv(\"/lus/grand/projects/TFXcan/imlab/data/1000G/expression/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz\", sep=\"\\t\")\nindividuals = geuvadis_gex.columns[4:].tolist()\nsamples = list(set(vcf_samples).intersection(individuals))\nwith open(\"individuals.txt\", \"w\") as f:\n    f.write(\"\\n\".join(samples))\n\n\n\nRun Predictions\nI started a pipeline for personalized prediction in this notebook, and put it into a python script.\nI submitted this as a PBS job, qsub borzoi_test_run.pbs.\nmodule load conda\nconda activate borzoi\ncd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-10-04-personalized-test-on-a-few-genes\n\npython3 personalized_prediction.py \\\n--gene_df gene_list.csv \\\n--fasta_file /home/s1mi/borzoi_tutorial/hg38.fa \\\n--vcf_dir /grand/TFXcan/imlab/data/1000G/vcf_snps_only \\\n--individuals_file individuals.txt \\\n--model_dir /home/s1mi/borzoi_tutorial \\\n--output_dir /grand/TFXcan/imlab/users/sabrina/borzoi-personalized-test\n\n\n\nCheck Results\n\nimport h5py\nwith h5py.File(\"/grand/TFXcan/imlab/users/sabrina/borzoi-personalized-test/NA21144/chr1_43530883_43623666_predictions.h5\", \"r\") as hf:\n    for key, value in hf.items():\n        print(key)\n        print(value)\n\nhaplotype1\n&lt;HDF5 dataset \"haplotype1\": shape (4, 16352, 7611), type \"&lt;f2\"&gt;\nhaplotype2\n&lt;HDF5 dataset \"haplotype2\": shape (4, 16352, 7611), type \"&lt;f2\"&gt;"
  },
  {
    "objectID": "posts/2023-09-15-PrediXcan-and-Enformer-plots/index.html",
    "href": "posts/2023-09-15-PrediXcan-and-Enformer-plots/index.html",
    "title": "All R plots of PrediXcan and Enformer results",
    "section": "",
    "text": "Import Haky’s QQ plot gists and read Enformer personalized prediction summary results.\n\n\nCode\ndevtools::source_gist(\"a925fea01b365a8c605e\")\ndevtools::source_gist(\"38431b74c6c0bf90c12f\")\npearson_corr_human &lt;- read.csv(\"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_pearson_corr_human.csv\", row.names = 1)\npearson_corr_mouse &lt;- read.csv(\"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_pearson_corr_mouse.csv\", row.names = 1)\nspearman_corr_human &lt;- read.csv(\"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_spearman_corr_human.csv\", row.names = 1)\nspearman_corr_mouse &lt;- read.csv(\"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_spearman_corr_mouse.csv\", row.names = 1)\n\n\nWe used Enformer human and mouse head outputs across 340 rats in Br study to predict individual-level gene expression. We recorded pearson and spearman correlations of predicted vs observed expression for each gene. In this post, we evaluate performance of both models against each other as well as PrediXcan.\n\n\nPlots generated from pearson correlations:\n\n\nCode\nqqR(pearson_corr_human$pearson.r, 340, main=\"Human Head Prediction for Br Rats: Pearson R2 vs Expected\")\n\n\n\n\n\nCode\nqqR2(pearson_corr_human$pearson.r ** 2, 340, main=\"Human Head Prediction for Br Rats: Pearson R2 vs Expected\")\n\n\n\n\n\nCode\nqqunif(pearson_corr_human$pvalue, main=\"Human Head Prediction for Br Rats: Pearson P-values\")\n\n\nWarning in qqunif(pearson_corr_human$pvalue, main = \"Human Head Prediction for\nBr Rats: Pearson P-values\"): thresholding p to 1e-30\n\n\n\n\n\nPlots generated from spearman correlations:\n\n\nCode\nqqR(spearman_corr_human$spearman.r, 340, main=\"Human Head Prediction for Br Rats: Spearman R2 vs Expected\")\n\n\n\n\n\nCode\nqqR2(spearman_corr_human$spearman.r ** 2, 340, main=\"Human Head Prediction for Br Rats: Spearman R2 vs Expected\")\n\n\n\n\n\nCode\nqqunif(spearman_corr_human$pvalue, main=\"Human Head Prediction for Br Rats: Spearman P-values\")\n\n\nWarning in qqunif(spearman_corr_human$pvalue, main = \"Human Head Prediction for\nBr Rats: Spearman P-values\"): thresholding p to 1e-30\n\n\n\n\n\n\n\n\n\n\nCode\nqqR(pearson_corr_mouse$pearson.r, 340, main=\"Mouse Head Prediction for Br Rats: Pearson R2 vs Expected\")\n\n\n\n\n\nCode\nqqR2(pearson_corr_mouse$pearson.r ** 2, 340, main=\"Mouse Head Prediction for Br Rats: Pearson R2 vs Expected\")\n\n\n\n\n\nCode\nqqunif(pearson_corr_mouse$pvalue, main=\"Mouse Head Prediction for Br Rats: Pearson P-values\")\n\n\nWarning in qqunif(pearson_corr_mouse$pvalue, main = \"Mouse Head Prediction for\nBr Rats: Pearson P-values\"): thresholding p to 1e-30\n\n\n\n\n\n\n\nCode\nqqR(spearman_corr_mouse$spearman.r, 340, main=\"Mouse Head Prediction for Br Rats: Spearman R2 vs Expected\")\n\n\n\n\n\nCode\nqqR2(spearman_corr_mouse$spearman.r ** 2, 340, main=\"Mouse Head Prediction for Br Rats: Spearman R2 vs Expected\")\n\n\n\n\n\nCode\nqqunif(spearman_corr_mouse$pvalue, main=\"Mouse Head Prediction for Br Rats: Spearman P-values\")\n\n\nWarning in qqunif(spearman_corr_mouse$pvalue, main = \"Mouse Head Prediction for\nBr Rats: Spearman P-values\"): thresholding p to 1e-30"
  },
  {
    "objectID": "posts/2023-09-15-PrediXcan-and-Enformer-plots/index.html#qq-plots",
    "href": "posts/2023-09-15-PrediXcan-and-Enformer-plots/index.html#qq-plots",
    "title": "All R plots of PrediXcan and Enformer results",
    "section": "",
    "text": "Import Haky’s QQ plot gists and read Enformer personalized prediction summary results.\n\n\nCode\ndevtools::source_gist(\"a925fea01b365a8c605e\")\ndevtools::source_gist(\"38431b74c6c0bf90c12f\")\npearson_corr_human &lt;- read.csv(\"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_pearson_corr_human.csv\", row.names = 1)\npearson_corr_mouse &lt;- read.csv(\"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_pearson_corr_mouse.csv\", row.names = 1)\nspearman_corr_human &lt;- read.csv(\"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_spearman_corr_human.csv\", row.names = 1)\nspearman_corr_mouse &lt;- read.csv(\"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/output/Br_personalized_spearman_corr_mouse.csv\", row.names = 1)\n\n\nWe used Enformer human and mouse head outputs across 340 rats in Br study to predict individual-level gene expression. We recorded pearson and spearman correlations of predicted vs observed expression for each gene. In this post, we evaluate performance of both models against each other as well as PrediXcan.\n\n\nPlots generated from pearson correlations:\n\n\nCode\nqqR(pearson_corr_human$pearson.r, 340, main=\"Human Head Prediction for Br Rats: Pearson R2 vs Expected\")\n\n\n\n\n\nCode\nqqR2(pearson_corr_human$pearson.r ** 2, 340, main=\"Human Head Prediction for Br Rats: Pearson R2 vs Expected\")\n\n\n\n\n\nCode\nqqunif(pearson_corr_human$pvalue, main=\"Human Head Prediction for Br Rats: Pearson P-values\")\n\n\nWarning in qqunif(pearson_corr_human$pvalue, main = \"Human Head Prediction for\nBr Rats: Pearson P-values\"): thresholding p to 1e-30\n\n\n\n\n\nPlots generated from spearman correlations:\n\n\nCode\nqqR(spearman_corr_human$spearman.r, 340, main=\"Human Head Prediction for Br Rats: Spearman R2 vs Expected\")\n\n\n\n\n\nCode\nqqR2(spearman_corr_human$spearman.r ** 2, 340, main=\"Human Head Prediction for Br Rats: Spearman R2 vs Expected\")\n\n\n\n\n\nCode\nqqunif(spearman_corr_human$pvalue, main=\"Human Head Prediction for Br Rats: Spearman P-values\")\n\n\nWarning in qqunif(spearman_corr_human$pvalue, main = \"Human Head Prediction for\nBr Rats: Spearman P-values\"): thresholding p to 1e-30\n\n\n\n\n\n\n\n\n\n\nCode\nqqR(pearson_corr_mouse$pearson.r, 340, main=\"Mouse Head Prediction for Br Rats: Pearson R2 vs Expected\")\n\n\n\n\n\nCode\nqqR2(pearson_corr_mouse$pearson.r ** 2, 340, main=\"Mouse Head Prediction for Br Rats: Pearson R2 vs Expected\")\n\n\n\n\n\nCode\nqqunif(pearson_corr_mouse$pvalue, main=\"Mouse Head Prediction for Br Rats: Pearson P-values\")\n\n\nWarning in qqunif(pearson_corr_mouse$pvalue, main = \"Mouse Head Prediction for\nBr Rats: Pearson P-values\"): thresholding p to 1e-30\n\n\n\n\n\n\n\nCode\nqqR(spearman_corr_mouse$spearman.r, 340, main=\"Mouse Head Prediction for Br Rats: Spearman R2 vs Expected\")\n\n\n\n\n\nCode\nqqR2(spearman_corr_mouse$spearman.r ** 2, 340, main=\"Mouse Head Prediction for Br Rats: Spearman R2 vs Expected\")\n\n\n\n\n\nCode\nqqunif(spearman_corr_mouse$pvalue, main=\"Mouse Head Prediction for Br Rats: Spearman P-values\")\n\n\nWarning in qqunif(spearman_corr_mouse$pvalue, main = \"Mouse Head Prediction for\nBr Rats: Spearman P-values\"): thresholding p to 1e-30"
  },
  {
    "objectID": "posts/2023-09-15-PrediXcan-and-Enformer-plots/index.html#scatter-plot-with-predixcan-elastic-net-performance",
    "href": "posts/2023-09-15-PrediXcan-and-Enformer-plots/index.html#scatter-plot-with-predixcan-elastic-net-performance",
    "title": "All R plots of PrediXcan and Enformer results",
    "section": "Scatter Plot with PrediXcan Elastic Net Performance",
    "text": "Scatter Plot with PrediXcan Elastic Net Performance\n399 genes out of the 867 genes used in the Enformer runs have prediction performance results in the Br elastic net PrediXcan model. The missing genes were likely filtered out during training because there were no snps found to have effect on their expression.\n\n\nCode\nenet_Br_perf &lt;- read.csv(\"/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/Within-Lab-Sharing/Sabrina-Data/rat_data/misc/highestR2genes.csv\")[,c(1,6)]\nenet_Br_merged &lt;- merge(enet_Br_perf, spearman_corr_human, by.x =\"gene\", by.y = \"row.names\")\nplot(enet_Br_merged$cor, enet_Br_merged$spearman.r, main = \"Cross-Individual Correlations for 399 Genes\", type = \"n\", xlab = \"PrediXcan\", ylab = \"Enformer Human Head\")\npoints(enet_Br_merged$cor, enet_Br_merged$spearman.r)\nabline(a=0,b=0)\nabline(v=0)"
  },
  {
    "objectID": "posts/2023-08-07-CAGE-Brain-plots-at-TSS/index.html",
    "href": "posts/2023-08-07-CAGE-Brain-plots-at-TSS/index.html",
    "title": "CAGE Brain plots for three well-predicted genes",
    "section": "",
    "text": "import tensorflow as tf\n# Make sure the GPU is enabled\nassert tf.config.list_physical_devices('GPU'), 'Start the colab kernel with GPU: Runtime -&gt; Change runtime type -&gt; GPU'\n\n2023-08-11 15:54:08.579990: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n2023-08-11 15:54:14.184182: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/opt/cray/pe/gcc/11.2.0/snos/lib64:/opt/cray/pe/papi/6.0.0.14/lib64:/opt/cray/libfabric/1.11.0.4.125/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32:${LD_LIBRARY_PATH}\n2023-08-11 15:54:14.185125: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /soft/compilers/cudatoolkit/cuda-11.8.0/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.8.0/lib64:/soft/libraries/trt/TensorRT-8.5.2.2.Linux.x86_64-gnu.cuda-11.8.cudnn8.6/lib:/soft/libraries/nccl/nccl_2.16.2-1+cuda11.8_x86_64/lib:/soft/libraries/cudnn/cudnn-11-linux-x64-v8.6.0.163/lib:/opt/cray/pe/gcc/11.2.0/snos/lib64:/opt/cray/pe/papi/6.0.0.14/lib64:/opt/cray/libfabric/1.11.0.4.125/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32:${LD_LIBRARY_PATH}\n2023-08-11 15:54:14.185137: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n\n\n\nimport tensorflow_hub as hub\nimport joblib\nimport gzip\nimport kipoiseq\nfrom kipoiseq import Interval\nimport pyfaidx\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\ntransform_path = 'gs://dm-enformer/models/enformer.finetuned.SAD.robustscaler-PCA500-robustscaler.transform.pkl'\nmodel_path = 'https://tfhub.dev/deepmind/enformer/1'\nfasta_file = '/home/s1mi/enformer_rat_data/reference_genome/rn7_genome.fasta'\n\n\n\ntargets_txt = 'https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_human.txt'\ndf_targets = pd.read_csv(targets_txt, sep='\\t')\n\n\n# @title `Enformer`, `EnformerScoreVariantsNormalized`, `EnformerScoreVariantsPCANormalized`,\nSEQUENCE_LENGTH = 393216\n\nclass Enformer:\n\n  def __init__(self, tfhub_url):\n    self._model = hub.load(tfhub_url).model\n\n  def predict_on_batch(self, inputs):\n    predictions = self._model.predict_on_batch(inputs)\n    return {k: v.numpy() for k, v in predictions.items()}\n\n  @tf.function\n  def contribution_input_grad(self, input_sequence,\n                              target_mask, output_head='human'):\n    input_sequence = input_sequence[tf.newaxis]\n\n    target_mask_mass = tf.reduce_sum(target_mask)\n    with tf.GradientTape() as tape:\n      tape.watch(input_sequence)\n      prediction = tf.reduce_sum(\n          target_mask[tf.newaxis] *\n          self._model.predict_on_batch(input_sequence)[output_head]) / target_mask_mass\n\n    input_grad = tape.gradient(prediction, input_sequence) * input_sequence\n    input_grad = tf.squeeze(input_grad, axis=0)\n    return tf.reduce_sum(input_grad, axis=-1)\n\n\nclass EnformerScoreVariantsRaw:\n\n  def __init__(self, tfhub_url, organism='human'):\n    self._model = Enformer(tfhub_url)\n    self._organism = organism\n\n  def predict_on_batch(self, inputs):\n    ref_prediction = self._model.predict_on_batch(inputs['ref'])[self._organism]\n    alt_prediction = self._model.predict_on_batch(inputs['alt'])[self._organism]\n\n    return alt_prediction.mean(axis=1) - ref_prediction.mean(axis=1)\n\n\nclass EnformerScoreVariantsNormalized:\n\n  def __init__(self, tfhub_url, transform_pkl_path,\n               organism='human'):\n    assert organism == 'human', 'Transforms only compatible with organism=human'\n    self._model = EnformerScoreVariantsRaw(tfhub_url, organism)\n    with tf.io.gfile.GFile(transform_pkl_path, 'rb') as f:\n      transform_pipeline = joblib.load(f)\n    self._transform = transform_pipeline.steps[0][1]  # StandardScaler.\n\n  def predict_on_batch(self, inputs):\n    scores = self._model.predict_on_batch(inputs)\n    return self._transform.transform(scores)\n\n\nclass EnformerScoreVariantsPCANormalized:\n\n  def __init__(self, tfhub_url, transform_pkl_path,\n               organism='human', num_top_features=500):\n    self._model = EnformerScoreVariantsRaw(tfhub_url, organism)\n    with tf.io.gfile.GFile(transform_pkl_path, 'rb') as f:\n      self._transform = joblib.load(f)\n    self._num_top_features = num_top_features\n\n  def predict_on_batch(self, inputs):\n    scores = self._model.predict_on_batch(inputs)\n    return self._transform.transform(scores)[:, :self._num_top_features]\n\n\n# TODO(avsec): Add feature description: Either PCX, or full names.\n\n\n# @title `variant_centered_sequences`\n\nclass FastaStringExtractor:\n\n    def __init__(self, fasta_file):\n        self.fasta = pyfaidx.Fasta(fasta_file)\n        self._chromosome_sizes = {k: len(v) for k, v in self.fasta.items()}\n\n    def extract(self, interval: Interval, **kwargs) -&gt; str:\n        # Truncate interval if it extends beyond the chromosome lengths.\n        chromosome_length = self._chromosome_sizes[interval.chrom]\n        trimmed_interval = Interval(interval.chrom,\n                                    max(interval.start, 0),\n                                    min(interval.end, chromosome_length),\n                                    )\n        # pyfaidx wants a 1-based interval\n        sequence = str(self.fasta.get_seq(trimmed_interval.chrom,\n                                          trimmed_interval.start + 1,\n                                          trimmed_interval.stop).seq).upper()\n        # Fill truncated values with N's.\n        pad_upstream = 'N' * max(-interval.start, 0)\n        pad_downstream = 'N' * max(interval.end - chromosome_length, 0)\n        return pad_upstream + sequence + pad_downstream\n\n    def close(self):\n        return self.fasta.close()\n\n\ndef variant_generator(vcf_file, gzipped=False):\n  \"\"\"Yields a kipoiseq.dataclasses.Variant for each row in VCF file.\"\"\"\n  def _open(file):\n    return gzip.open(vcf_file, 'rt') if gzipped else open(vcf_file)\n\n  with _open(vcf_file) as f:\n    for line in f:\n      if line.startswith('#'):\n        continue\n      chrom, pos, id, ref, alt_list = line.split('\\t')[:5]\n      # Split ALT alleles and return individual variants as output.\n      for alt in alt_list.split(','):\n        yield kipoiseq.dataclasses.Variant(chrom=chrom, pos=pos,\n                                           ref=ref, alt=alt, id=id)\n\n\ndef one_hot_encode(sequence):\n  return kipoiseq.transforms.functional.one_hot_dna(sequence).astype(np.float32)\n\n\ndef variant_centered_sequences(vcf_file, sequence_length, gzipped=False,\n                               chr_prefix=''):\n  seq_extractor = kipoiseq.extractors.VariantSeqExtractor(\n    reference_sequence=FastaStringExtractor(fasta_file))\n\n  for variant in variant_generator(vcf_file, gzipped=gzipped):\n    interval = Interval(chr_prefix + variant.chrom,\n                        variant.pos, variant.pos)\n    interval = interval.resize(sequence_length)\n    center = interval.center() - interval.start\n\n    reference = seq_extractor.extract(interval, [], anchor=center)\n    alternate = seq_extractor.extract(interval, [variant], anchor=center)\n\n    yield {'inputs': {'ref': one_hot_encode(reference),\n                      'alt': one_hot_encode(alternate)},\n           'metadata': {'chrom': chr_prefix + variant.chrom,\n                        'pos': variant.pos,\n                        'id': variant.id,\n                        'ref': variant.ref,\n                        'alt': variant.alt}}\n\n\n# @title `plot_tracks`\n\ndef plot_tracks(tracks, interval, height=1.5):\n  fig, axes = plt.subplots(len(tracks), 1, figsize=(20, height * len(tracks)), sharex=True)\n  for ax, (title, y) in zip(axes, tracks.items()):\n    ax.fill_between(np.linspace(interval.start, interval.end, num=len(y)), y)\n    ax.set_title(title)\n    sns.despine(top=True, right=True, bottom=True)\n  ax.set_xlabel(str(interval))\n  plt.tight_layout()\n\n\nmodel = Enformer(model_path)\n\nfasta_extractor = FastaStringExtractor(fasta_file)\n\n\ngene_list = ['ENSRNOG00000001342', 'ENSRNOG00000020624', 'ENSRNOG00000058006']\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\ngene_annot = annot_df.loc[gene_list].iloc[:, :6]\n\n/tmp/ipykernel_102315/2838342331.py:2: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\n\n\nimport os\nimport h5py\nimport random\n\n\ngene = 'ENSRNOG00000001342'\nchromosome = 12\nstart = 33261476\nend = 33293932\npredictions_dir = \"/home/s1mi/enformer_rat_pipeline/predictions_folder/personalized_enformer_minimal_some_regions/predictions_2023-07-26/enformer_predictions\"\n\n\npredictions = {}\n\nfor gene in gene_annot.index:\n    chromosome = gene_annot.loc[gene]['chromosome']\n    start = gene_annot.loc[gene]['start']\n    end = gene_annot.loc[gene]['end']\n    gene_predictions = {}\n    for individual in os.listdir(predictions_dir):\n        interval = f'chr{chromosome}_{start}_{end}'\n        predictions_file = h5py.File(f\"{predictions_dir}/{individual}/haplotype1/{interval}_predictions.h5\", \"r\")\n        gene_predictions[individual] = predictions_file[interval][()]\n    predictions[gene] = gene_predictions\n\n\nprint(gene_annot)\n\n                            geneSymbol chromosome      start        end  \\\ngeneId                                                                    \nENSRNOG00000001342  ENSRNOG00000001342         12   33261476   33293932   \nENSRNOG00000020624              Acadsb          1  186188987  186230379   \nENSRNOG00000058006                Sncg         16    9700514    9705368   \n\n                   strand        tss  \ngeneId                                \nENSRNOG00000001342      -   33293932  \nENSRNOG00000020624      +  186188987  \nENSRNOG00000058006      -    9705368  \n\n\n\n# @title Plot tracks\n\n# 'ENSRNOG00000001342'\ntarget_interval = kipoiseq.Interval('chr12', 33261476, 33293932).resize(114688)\ntracks = {}\nindividuals = list(predictions['ENSRNOG00000001342'].keys())\nsample = random.sample(individuals, 3)\nfor individual in sample:\n    tracks['CAGE:Brain, ' + individual] = np.log10(1 + predictions['ENSRNOG00000001342'][individual][:, 4980])\nplot_tracks(tracks, target_interval)\n\n\n\n\nWe sampled 3 rats to plot CAGE expression around ENSRNOG00000001342. The TSS is at 33293932, where we see a small peak at the edge of the plot. But the biggest peak lies somewhere in the middle of the gene, which we’ll have to investigate futher. We’ll also check the other two genes.\n\n# ENSRNOG00000020624\ntarget_interval = kipoiseq.Interval('chr1', 186188987, 186230379).resize(114688)\ntracks = {}\nsample = random.sample(individuals, 3)\nfor individual in sample:\n    tracks['CAGE:Brain, ' + individual] = np.log10(1 + predictions['ENSRNOG00000020624'][individual][:, 4980])\nplot_tracks(tracks, target_interval)\n\n\n\n\nThe peak at the start lines up with the TSS for ENSRNOG00000020624 (pos: 186230379). The second, smaller peak could be another TSS.\n\n# ENSRNOG00000058006\ntarget_interval = kipoiseq.Interval('chr16', 9700514, 9705368).resize(114688)\ntracks = {}\nsample = random.sample(individuals, 3)\nfor individual in sample:\n    tracks['CAGE:Brain, ' + individual] = np.log10(1 + predictions['ENSRNOG00000058006'][individual][:, 4980])\nplot_tracks(tracks, target_interval)\n\n\n\n\nThe TSS for ENSRNOG00000058006 is at the end (9705368), which is roughly the peak in the plot. In summary, two out of three genes have CAGE peaks where we expected at the TSS.\nThis probably means Enformer is correctly identifying TSS, and the low CAGE values around the TSS for the first gene indicate that ENSRNOG00000001342 is not expressed in brain tissue."
  },
  {
    "objectID": "posts/2023-08-03-comparing-enformer-CAGE-to-observed-gene-expression/comparing-gene-expression.html",
    "href": "posts/2023-08-03-comparing-enformer-CAGE-to-observed-gene-expression/comparing-gene-expression.html",
    "title": "First attempt of comparing predicted vs observed gene expression",
    "section": "",
    "text": "gene_expr_bed = \"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\"\n\nimport pandas as pd\nimport numpy as np\nobs_gene_expr = pd.read_csv(gene_expr_bed, sep=\"\\t\", header=0, index_col='gene_id')\n\n/tmp/ipykernel_156512/1612639889.py:5: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  obs_gene_expr = pd.read_csv(gene_expr_bed, sep=\"\\t\", header=0, index_col='gene_id')\n\n\n\ngene_list = ['ENSRNOG00000001342', 'ENSRNOG00000020624', 'ENSRNOG00000058006', 'ENSRNOG00000060045']\n#print(obs_gene_expr.loc[gene_list])\n\npred_vs_obs = {}\nfor gene in gene_list:\n    obs = obs_gene_expr.loc[gene][3:]\n    pred_vs_obs[gene] = pd.DataFrame({\"observed\": obs, \"predicted\": np.zeros(obs.shape)})\n\n\ndef compute_tss_bin(output_window_coords_resized, tss_position, output_length=114688, bin_length=128, rc=False):\n    '''\n    Computes the bin index of the enformer output bin containing the TSS\n    Inputs:\n    output_window_coords_resized: Kipoiseq interval for the output window of Enformer, should already be resized to the model output window size\n    tss_position: absolute location of TSS\n    output_length: Length of output window in base pairs\n    bin_size: Length of output bins in base pairs\n    Outputs:\n    tss_bin: Index of bin containing TSS\n    '''\n    try:\n        relative_position = int(tss_position) - int(output_window_coords_resized.start)\n    except:\n    # print(tss_position)\n    # print(output_window_coords_resized.start)\n        sys.exit()\n\n    if relative_position &lt; 0 or relative_position &gt; output_length:\n        # print(tss_position, \"appears to be out of bounds for output window: \",output_window_coords_resized)\n        return None \n    else:\n        center = relative_position // bin_length\n\n        \n        if rc:\n            number_of_bins = int(output_length/bin_length)\n            new_center = number_of_bins - 1 - center\n            # print(new_center)\n            return [new_center-1,new_center,new_center+1]\n        else:\n            # print(center)\n            return [center-1,center,center+1]\n\n\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\nprint(annot_df.loc[gene_list])\n\n                            geneSymbol chromosome      start        end  \\\ngeneId                                                                    \nENSRNOG00000001342  ENSRNOG00000001342         12   33261476   33293932   \nENSRNOG00000020624              Acadsb          1  186188987  186230379   \nENSRNOG00000058006                Sncg         16    9700514    9705368   \nENSRNOG00000060045               Pi4ka         11   83609069   83724080   \n\n                   strand        tss  \\\ngeneId                                 \nENSRNOG00000001342      -   33293932   \nENSRNOG00000020624      +  186188987   \nENSRNOG00000058006      -    9705368   \nENSRNOG00000060045      +   83609069   \n\n                                                     description  hasEqtl  \\\ngeneId                                                                      \nENSRNOG00000001342     cilia and flagella associated protein 251     True   \nENSRNOG00000020624  acyl-CoA dehydrogenase, short/branched chain     True   \nENSRNOG00000058006                              synuclein, gamma     True   \nENSRNOG00000060045           phosphatidylinositol 4-kinase alpha     True   \n\n                    expr_BLA  expr_Brain  ...  sqtl_BLA  sqtl_Brain  sqtl_Eye  \\\ngeneId                                    ...                                   \nENSRNOG00000001342      True        True  ...     False        True     False   \nENSRNOG00000020624      True        True  ...      True        True     False   \nENSRNOG00000058006      True        True  ...     False        True     False   \nENSRNOG00000060045      True        True  ...     False       False     False   \n\n                    sqtl_IL  sqtl_LHb  sqtl_NAcc  sqtl_NAcc2  sqtl_OFC  \\\ngeneId                                                                   \nENSRNOG00000001342    False     False      False       False     False   \nENSRNOG00000020624    False     False      False        True     False   \nENSRNOG00000058006    False     False      False       False     False   \nENSRNOG00000060045    False     False      False       False     False   \n\n                    sqtl_PL  sqtl_PL2  \ngeneId                                 \nENSRNOG00000001342    False     False  \nENSRNOG00000020624    False      True  \nENSRNOG00000058006    False     False  \nENSRNOG00000060045    False     False  \n\n[4 rows x 68 columns]\n\n\n/tmp/ipykernel_156512/3990301426.py:1: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\n\n\nimport kipoiseq # for manipulating fasta files\nfrom kipoiseq import Interval # same as above, really\nimport sys\nimport h5py\npredictions_dir = \"/home/s1mi/enformer_rat_pipeline/predictions_folder/personalized_enformer_minimal_some_regions/predictions_2023-07-26/enformer_predictions\"\n\n\nfor gene in gene_list:\n    print(gene)\n    gene_annot = annot_df.loc[gene]\n    interval_obj = Interval(\"chr\" + str(gene_annot['chromosome']), gene_annot['start'], gene_annot['end'])\n    tss_bins = compute_tss_bin(interval_obj.resize(114688), gene_annot['tss'])\n    if tss_bins is None:\n        print(\"Skipping\", gene)\n        continue\n    interval = f\"chr{gene_annot['chromosome']}_{gene_annot['start']}_{gene_annot['end']}\"\n    for individual in pred_vs_obs[gene].index:\n        predictions = h5py.File(f\"{predictions_dir}/{individual}/haplotype1/{interval}_predictions.h5\", \"r\")\n        matrix = predictions[interval][()]\n        extra_bins =  [tss_bins[0] - 1] + tss_bins + [tss_bins[2] + 1]\n        pred_expr = np.average(matrix[tss_bins, 4980])\n        pred_vs_obs[gene].loc[individual, \"predicted\"] = pred_expr\n\n    \n\nENSRNOG00000001342\n[0.00573627 0.00507914 0.0072732  0.00559864 0.00767822]\n[0.00573627 0.00507914 0.0072732  0.00559864 0.00767822]\n[0.00573627 0.00507914 0.0072732  0.00559864 0.00767822]\n[0.00573627 0.00507914 0.0072732  0.00559864 0.00767822]\n[0.00573627 0.00507914 0.0072732  0.00559864 0.00767822]\nENSRNOG00000020624\n[5.7827654  4.293017   7.8872423  0.10644712 0.05631344]\n[5.7819533  4.290507   7.8848658  0.10634203 0.05630142]\n[5.7827654  4.293017   7.8872423  0.10644712 0.05631344]\n[5.7827654  4.293017   7.8872423  0.10644712 0.05631344]\n[5.7827654  4.293017   7.8872423  0.10644712 0.05631344]\nENSRNOG00000058006\n[1.4247483e+01 5.7383850e-02 1.2978141e-02 9.7031957e-03 1.5117653e-02]\n[1.42411528e+01 5.73353358e-02 1.29730888e-02 9.69883148e-03\n 1.51052885e-02]\n[1.4247483e+01 5.7383850e-02 1.2978141e-02 9.7031957e-03 1.5117653e-02]\n[1.4247483e+01 5.7383850e-02 1.2978141e-02 9.7031957e-03 1.5117653e-02]\n[1.4247483e+01 5.7383850e-02 1.2978141e-02 9.7031957e-03 1.5117653e-02]\nENSRNOG00000060045\nSkipping ENSRNOG00000060045\n\n\n\nprint(pred_vs_obs)\n\n{'ENSRNOG00000001342':            observed  predicted\n000789972A     7.53   0.005984\n0007899884    11.35   0.005984\n000789FF64     9.33   0.005984\n00079298B1     9.88   0.005984\n00079299B5      9.9   0.005984\n...             ...        ...\n00079FF7D6     7.63   0.005984\n0007899826     2.83   0.005984\n0007929917     8.29   0.005984\n00077E82E3    10.05   0.005985\n00078A18A7     6.73   0.005984\n\n[340 rows x 2 columns], 'ENSRNOG00000020624':            observed  predicted\n000789972A    44.43   4.095569\n0007899884    50.12   4.093905\n000789FF64    62.47   4.095569\n00079298B1    64.97   4.095569\n00079299B5    57.53   4.095569\n...             ...        ...\n00079FF7D6     53.3   4.093905\n0007899826    52.88   4.093905\n0007929917    54.19   4.093905\n00077E82E3    74.91   4.095569\n00078A18A7     50.0   4.093905\n\n[340 rows x 2 columns], 'ENSRNOG00000058006':            observed  predicted\n000789972A    75.75   0.026688\n0007899884    98.29   0.026669\n000789FF64     26.2   0.026688\n00079298B1    91.46   0.026688\n00079299B5     34.1   0.026688\n...             ...        ...\n00079FF7D6    80.28   0.026669\n0007899826   133.57   0.026669\n0007929917    59.49   0.026669\n00077E82E3    43.07   0.026669\n00078A18A7    45.07   0.026669\n\n[340 rows x 2 columns], 'ENSRNOG00000060045':            observed  predicted\n000789972A    87.16        0.0\n0007899884     87.5        0.0\n000789FF64    94.36        0.0\n00079298B1    89.63        0.0\n00079299B5    87.33        0.0\n...             ...        ...\n00079FF7D6    94.34        0.0\n0007899826    85.75        0.0\n0007929917    80.93        0.0\n00077E82E3    80.16        0.0\n00078A18A7    79.55        0.0\n\n[340 rows x 2 columns]}\n\n\n\nimport matplotlib.pyplot as plt\ndf = pred_vs_obs['ENSRNOG00000020624']\nprint(df['observed'])\n\nfrom scipy.stats import zscore\nx = df['observed']\ny = df['predicted']\n# Create the dot plot\nplt.scatter(x, y, color='blue', marker='o', s=100)\n\n\n\n\n# Add labels and title\nplt.xlabel('Observed')\nplt.ylabel('Predicted')\nplt.title('Enformed Predicted vs Observed Gene Expression')\n\n# Show the plot\nplt.show()\n\n000789972A    44.43\n0007899884    50.12\n000789FF64    62.47\n00079298B1    64.97\n00079299B5    57.53\n              ...  \n00079FF7D6     53.3\n0007899826    52.88\n0007929917    54.19\n00077E82E3    74.91\n00078A18A7     50.0\nName: observed, Length: 340, dtype: object\n\n\n\n\n\n\nHow we could improve plots:\n\nUse all 340 individuals (instead of the 80 that I moved to Box before polaris shut down)\nRerun predictions with sequences centered at TSS (instead of gene start and end)\nThe upside is that the Enformer predictions so far agree with basic expectations:\n\nThere is variation in predicted gene expression between individuals (although slim)\nCAGE expression peaks around TSS and tapers off\n\n\n\n\nExtra Plots\n\n# predixcan = '/Users/sabrinami/Library/CloudStorage/Box-Box/imlab-data/data-Github/rat-genomic-analysis/PTRS-Analysis/RatXcan/Results/Br_EN__predict.txt'\n# pred_gene_expr = pd.read_csv(predixcan, sep=\"\\t\", header=0, index_col='IID')\n# pred_gene_expr = pred_gene_expr.loc[individuals]\n\n\n\nprint(pred_gene_expr[[gene]].join(df['predicted'], how='inner'))\n\n            ENSRNOG00000060045  predicted\n00077E90D8            1.286916   4.095569\n00078997FE            0.011189   4.095569\n00079FF7D6            2.644286   4.093905\n00078A1A62            0.009481   4.093905\n000792A3F9            2.646413   4.093905\n...                        ...        ...\n00078A072C            0.009487   4.093905\n000792A07E            1.288204   4.095264\n000792A420            1.370338   4.093905\n00078997BF            0.009408   4.093905\n00077E7666            0.010847   4.095569\n\n[80 rows x 2 columns]\n\n\n\n# gene = 'ENSRNOG00000020624'\n# df = pred_vs_obs[gene]\n# df = pred_gene_expr[[gene]].join(df['predicted'], how = 'inner')\n# print(df)\n\n# from scipy.stats import zscore\n# x = zscore(df[gene])\n# y = zscore(df['predicted'])\n# # Create the dot plot\n# plt.scatter(x, y, color='blue', marker='o', s=100)\n\n\nNameError: name 'pred_gene_expr' is not defined\n\n\n\ndf = pred_vs_obs['ENSRNOG00000001342']\n\n\nfrom scipy.stats import zscore\nx = zscore(df['observed'])\ny = zscore(df['predicted'])\n# Create the dot plot\nplt.scatter(x, y, color='blue', marker='o', s=100)\n\n\n\n\n# Add labels and title\nplt.xlabel('Observed')\nplt.ylabel('Predicted')\nplt.title('Enformed Predicted vs Observed Gene Expression')\n\n# Show the plot\nplt.show()\n\nTypeError: loop of ufunc does not support argument 0 of type numpy.float64 which has no callable sqrt method\n\n\n\nimport matplotlib.pyplot as plt\ndf = pred_vs_obs['ENSRNOG00000058006']\n\n\nfrom scipy.stats import zscore\nx = zscore(df['observed'])\ny = zscore(df['predicted'])\n# Create the dot plot\nplt.scatter(x, y, color='blue', marker='o', s=100)\n\n\n\n\n# Add labels and title\nplt.xlabel('Observed')\nplt.ylabel('Predicted')\nplt.title('Enformed Predicted vs Observed Gene Expression')\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "posts/2023-08-18-gene-annotation-query-example-hg38/index.html",
    "href": "posts/2023-08-18-gene-annotation-query-example-hg38/index.html",
    "title": "biomaRt tutorial for querying gene annotation",
    "section": "",
    "text": "BioMart is a database with gene annotations for various species, builds, etc. We can use the package biomaRt package to query information.\n\nInstall biomaRt\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(\"biomaRt\")\n\n\n\nExample 1: Getting a list of human genes and their TSS in hg38\n\nlibrary(biomaRt)\nlibrary(tidyverse)\n\nWe first want to verify gene annotation is in build hg38.\n\nensembl &lt;- useEnsembl(biomart = \"genes\")\nsearchDatasets(mart = ensembl, pattern = \"hsapiens\")\n\n                 dataset              description    version\n80 hsapiens_gene_ensembl Human genes (GRCh38.p14) GRCh38.p14\n\n\n\n# connect to BioMart database for human genes\nensembl &lt;- useEnsembl(biomart = \"genes\", dataset = \"hsapiens_gene_ensembl\")\n# query canonical TSS for protein-coding genes on chr 1-22, X, and Y\nprotein_coding_TSS &lt;- biomaRt::getBM(attributes = c(\"ensembl_gene_id\",\"external_gene_name\", \"chromosome_name\",\"transcript_start\",\"transcript_end\",\"transcript_biotype\",\"transcription_start_site\", \"transcript_is_canonical\", \"strand\"), filters = c(\"transcript_biotype\",\"chromosome_name\", \"transcript_is_canonical\"),values = list(\"protein_coding\",c(1:22, 'X', 'Y'), TRUE), mart = ensembl)\n\n# extract columns of interest\nprotein_coding_TSS = protein_coding_TSS[, c(\"ensembl_gene_id\", \"external_gene_name\", \"chromosome_name\", \"transcription_start_site\", \"transcript_start\", \"transcript_end\")]\n\n# write to file\nwrite.table(protein_coding_TSS, file=\"protein_coding_TSS.tsv\", sep=\"\\t\", row.names=FALSE, col.names=TRUE, quote=FALSE)\n\n\n\nExample 2: Getting a list of rat genes with orthologs in humans\n\nlistMarts()\n\n               biomart                version\n1 ENSEMBL_MART_ENSEMBL      Ensembl Genes 110\n2   ENSEMBL_MART_MOUSE      Mouse strains 110\n3     ENSEMBL_MART_SNP  Ensembl Variation 110\n4 ENSEMBL_MART_FUNCGEN Ensembl Regulation 110\n\n\n\n# connect to BioMart database for rat genes\nensembl = useEnsembl(biomart = \"genes\", dataset = \"rnorvegicus_gene_ensembl\")\n\n# query all relevant data and store in a dataframe\northo_rat = getBM( attributes=\n                    c(\"ensembl_gene_id\", \n                      \"hsapiens_homolog_ensembl_gene\",\n                      \"external_gene_name\"),\n                  filters = \"with_hsapiens_homolog\",\n                  values =TRUE,\n                  mart = ensembl)\n\n# write to file\nwrite.table(ortho_rat, file=\"ortholog_genes_rats_humans.tsv\", sep=\"\\t\", row.names=FALSE, col.names=TRUE, quote=FALSE)"
  },
  {
    "objectID": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html",
    "href": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html",
    "title": "Comparing the predicted reference epigenome to Enformer runs centered at the TSS and ground truth",
    "section": "",
    "text": "We are trying to debug low correlation values between predicted reference CAGE values and reference observed gene expression by inspecting a few genes."
  },
  {
    "objectID": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html#select-genes",
    "href": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html#select-genes",
    "title": "Comparing the predicted reference epigenome to Enformer runs centered at the TSS and ground truth",
    "section": "Select Genes",
    "text": "Select Genes\n\nimport tensorflow as tf\n# Make sure the GPU is enabled \nassert tf.config.list_physical_devices('GPU'), 'Start the colab kernel with GPU: Runtime -&gt; Change runtime type -&gt; GPU'\nimport tensorflow_hub as hub\nimport joblib\nimport gzip\nimport kipoiseq\nfrom kipoiseq import Interval\nimport pyfaidx\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\n\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\ntransform_path = 'gs://dm-enformer/models/enformer.finetuned.SAD.robustscaler-PCA500-robustscaler.transform.pkl'\nmodel_path = 'https://tfhub.dev/deepmind/enformer/1'\nfasta_file = '/lus/grand/projects/TFXcan/imlab/data/hg_sequences/hg38/Homo_sapiens_assembly38.fasta'\n\n\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.protein_coding_TSS.txt\", sep=\"\\t\")\ngenes = annot_df.sample(n=10)\nprint(genes)\n\n       ensembl_gene_id external_gene_name chromosome_name  \\\n2199   ENSG00000121898              CPXM2              10   \n1804   ENSG00000162613              FUBP1               1   \n15362  ENSG00000164327             RICTOR               5   \n5786   ENSG00000087303               NID2              14   \n4613   ENSG00000139233               LLPH              12   \n6638   ENSG00000050820              BCAR1              16   \n2681   ENSG00000171160              MORN4              10   \n9526   ENSG00000181781             ODF3L2              19   \n4709   ENSG00000123064              DDX54              12   \n10435  ENSG00000135632              SMYD5               2   \n\n       transcription_start_site  \n2199                  123891807  \n1804                   77979072  \n15362                  39074399  \n5786                   52069059  \n4613                   66130750  \n6638                   75251624  \n2681                   97633500  \n9526                     474983  \n4709                  113185478  \n10435                  73214245"
  },
  {
    "objectID": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html#run-enformer-at-the-tss",
    "href": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html#run-enformer-at-the-tss",
    "title": "Comparing the predicted reference epigenome to Enformer runs centered at the TSS and ground truth",
    "section": "Run Enformer at the TSS",
    "text": "Run Enformer at the TSS\n\n\nCode\nSEQUENCE_LENGTH = 393216\n\nclass Enformer:\n\n  def __init__(self, tfhub_url):\n    self._model = hub.load(tfhub_url).model\n\n  def predict_on_batch(self, inputs):\n    predictions = self._model.predict_on_batch(inputs)\n    return {k: v.numpy() for k, v in predictions.items()}\n\n  @tf.function\n  def contribution_input_grad(self, input_sequence,\n                              target_mask, output_head='human'):\n    input_sequence = input_sequence[tf.newaxis]\n\n    target_mask_mass = tf.reduce_sum(target_mask)\n    with tf.GradientTape() as tape:\n      tape.watch(input_sequence)\n      prediction = tf.reduce_sum(\n          target_mask[tf.newaxis] *\n          self._model.predict_on_batch(input_sequence)[output_head]) / target_mask_mass\n\n    input_grad = tape.gradient(prediction, input_sequence) * input_sequence\n    input_grad = tf.squeeze(input_grad, axis=0)\n    return tf.reduce_sum(input_grad, axis=-1)\n  \ndef plot_tracks(tracks, interval, height=1.5):\n  fig, axes = plt.subplots(len(tracks), 1, figsize=(20, height * len(tracks)), sharex=True)\n  for ax, (title, y) in zip(axes, tracks.items()):\n    ax.fill_between(np.linspace(interval.start, interval.end, num=len(y)), y)\n    ax.set_title(title)\n    sns.despine(top=True, right=True, bottom=True)\n  ax.set_xlabel(str(interval))\n  plt.tight_layout()\n  \nclass FastaStringExtractor:\n    \n    def __init__(self, fasta_file):\n        self.fasta = pyfaidx.Fasta(fasta_file)\n        self._chromosome_sizes = {k: len(v) for k, v in self.fasta.items()}\n\n    def extract(self, interval: Interval, **kwargs) -&gt; str:\n        # Truncate interval if it extends beyond the chromosome lengths.\n        chromosome_length = self._chromosome_sizes[interval.chrom]\n        trimmed_interval = Interval(interval.chrom,\n                                    max(interval.start, 0),\n                                    min(interval.end, chromosome_length),\n                                    )\n        # pyfaidx wants a 1-based interval\n        sequence = str(self.fasta.get_seq(trimmed_interval.chrom,\n                                          trimmed_interval.start + 1,\n                                          trimmed_interval.stop).seq).upper()\n        # Fill truncated values with N's.\n        pad_upstream = 'N' * max(-interval.start, 0)\n        pad_downstream = 'N' * max(interval.end - chromosome_length, 0)\n        return pad_upstream + sequence + pad_downstream\n\n    def close(self):\n        return self.fasta.close()\n    \ndef one_hot_encode(sequence):\n  return kipoiseq.transforms.functional.one_hot_dna(sequence).astype(np.float32)\n\n\n\nmodel = Enformer(model_path)\nfasta_extractor = FastaStringExtractor(fasta_file)\n\n\n## Create Interval object for each TSS\nintervals = [kipoiseq.Interval('chr'+ row['chromosome_name'], row['transcription_start_site'], row['transcription_start_site'])\n            for _, row in genes.iterrows()]\n\n\ntss_predictions = {}\nfor index, gene in enumerate(genes['ensembl_gene_id']):\n    tss = intervals[index]\n    sequence_one_hot = one_hot_encode(fasta_extractor.extract(tss.resize(SEQUENCE_LENGTH)))\n    tss_predictions[gene] = model.predict_on_batch(sequence_one_hot[np.newaxis])['human'][0]"
  },
  {
    "objectID": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html#query-predicted-reference-epigenome-at-the-tss",
    "href": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html#query-predicted-reference-epigenome-at-the-tss",
    "title": "Comparing the predicted reference epigenome to Enformer runs centered at the TSS and ground truth",
    "section": "Query Predicted Reference Epigenome at the TSS",
    "text": "Query Predicted Reference Epigenome at the TSS\n\n\nCode\nimport h5py\n\nenfref_dir = \"/grand/TFXcan/imlab/users/lvairus/reftile_project/enformer-reference-epigenome\"\n\ndef query_epigenome(chr_num, center_bp, num_bins=3, tracks=-1):\n    \"\"\"\n    Parameters:\n        path_to_enfref (str): path to the directory containing the concatenated reference enformer files\n        chr_num (int/string): chromosome number\n        center_bp (int): center base pair position (1-indexed)\n        num_bins (int): number of bins to extract centered around center_bp (default: 896) \n            note: if the number of bins is even, the center bin will be in the second half of the array\n        tracks (int list): list of tracks to extract (default: all 5313 tracks)\n\n    Returns:\n        epigen (np.array): enformer predictions centered at center_bp of shape (num_bins, len(tracks))\n    \"\"\"\n\n    # from position choose center bin\n    center_ind = center_bp - 1\n    center_bin = center_ind // 128\n    \n    half_bins = num_bins // 2\n    start_bin = center_bin - half_bins\n    end_bin = center_bin + half_bins\n    if num_bins % 2 != 0: # if num_bins is odd\n        end_bin += 1\n\n    with h5py.File(f\"{enfref_dir}/chr{chr_num}_cat.h5\", \"r\") as f:\n        # get tracks if list provided\n        if tracks == -1:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, :] \n        else:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, tracks] \n\n    return epigen\n\n\n\npredicted_reference_epigenome = {}\nfor index, gene in enumerate(genes['ensembl_gene_id']):\n    chr = genes.iloc[index]['chromosome_name']\n    pos = genes.iloc[index]['transcription_start_site']\n    predicted_reference_epigenome[gene] = query_epigenome(chr, pos, num_bins=896)\n\nWe’ll save these matrices so we can come back to the same genes.\n\n\nCode\n# with h5py.File('/home/s1mi/enformer_rat_data/output/hg38_tss_predictions.h5', 'w') as hf:\n#     for key, value in tss_predictions.items():\n#         hf[key] = value\n# with h5py.File('/home/s1mi/enformer_rat_data/output/hg38_reference_epigenome_tss.h5', 'w') as hf:\n#     for key, value in predicted_reference_epigenome.items():\n#         hf[key] = value\n\n\n\n# import h5py\n# annot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.protein_coding_TSS.txt\", sep=\"\\t\", index_col='ensembl_gene_id')\n# predicted_reference_epigenome = {}\n# with h5py.File('/home/s1mi/enformer_rat_data/output/hg38_reference_epigenome_tss.h5', 'r') as hf:\n#     for key in hf.keys():\n#         predicted_reference_epigenome[key] = hf[key][()]\n# tss_predictions = {}\n# with h5py.File('/home/s1mi/enformer_rat_data/output/hg38_tss_predictions.h5', 'r') as hf:\n#     for key in hf.keys():\n#         tss_predictions[key] = hf[key][()]"
  },
  {
    "objectID": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html#compare-matrices",
    "href": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html#compare-matrices",
    "title": "Comparing the predicted reference epigenome to Enformer runs centered at the TSS and ground truth",
    "section": "Compare Matrices",
    "text": "Compare Matrices\nI used Laura’s matrix comparison functions, which can be expanded below:\n\n\nCode\ndef get_diffmat(mat1, mat2):\n    \n    diffmat = mat1 - mat2\n    colwise_maxes1 = np.max(mat1, axis=0)\n    colwise_maxes2 = np.max(mat2, axis=0)\n\n    colwise_maxes_maxes = np.maximum(colwise_maxes1, colwise_maxes2)\n\n    relmax3_diffmat = diffmat / colwise_maxes_maxes\n    relmax3_diffmat = np.abs(relmax3_diffmat)\n    return relmax3_diffmat\n\ndef get_summary(arr):\n    summary = {\n        \"mean\": np.mean(arr),\n        \"median\": np.median(arr),\n        \"minimum\": np.min(arr),\n        \"maximum\": np.max(arr),\n        \"q1\": np.percentile(arr, 25),\n        \"q3\": np.percentile(arr, 75),\n    }\n    return summary\n\ndef plot_hist(arr, bin_num, xlab='Value', ylab='Frequency', title='Histogram'):\n    plt.hist(arr, bins=bin_num)\n    plt.title(title)\n    plt.xlabel(xlab)\n    plt.ylabel(ylab)\n    plt.show()\n\n\n\ndiff_mats = {gene: get_diffmat(tss_predictions[gene], predicted_reference_epigenome[gene]) for gene in tss_predictions.keys()}\nfor gene in diff_mats.keys():\n    print(gene, \"summary:\\n\", get_summary(diff_mats[gene]))\n\nENSG00000121898 summary:\n {'mean': 0.032200303, 'median': 0.01341768, 'minimum': 0.0, 'maximum': 0.9901849, 'q1': 0.003314544155728072, 'q3': 0.038835618644952774}\nENSG00000162613 summary:\n {'mean': 0.01999371, 'median': 0.005458167, 'minimum': 0.0, 'maximum': 0.988134, 'q1': 0.0007359800220001489, 'q3': 0.022952284663915634}\nENSG00000164327 summary:\n {'mean': 0.025973188, 'median': 0.0063576996, 'minimum': 2.6839478e-10, 'maximum': 0.99930054, 'q1': 0.0010229847976006567, 'q3': 0.0275100851431489}\nENSG00000087303 summary:\n {'mean': 0.02138613, 'median': 0.0077090887, 'minimum': 0.0, 'maximum': 0.9420468, 'q1': 0.001561658486025408, 'q3': 0.025569051504135132}\nENSG00000139233 summary:\n {'mean': 0.015630499, 'median': 0.0037975144, 'minimum': 0.0, 'maximum': 0.9219668, 'q1': 0.0006033704994479194, 'q3': 0.016216954216361046}\nENSG00000050820 summary:\n {'mean': 0.013206795, 'median': 0.004311326, 'minimum': 0.0, 'maximum': 0.91182494, 'q1': 0.0008041909604799002, 'q3': 0.015259698033332825}\nENSG00000171160 summary:\n {'mean': 0.02672244, 'median': 0.00733448, 'minimum': 0.0, 'maximum': 0.98480076, 'q1': 0.001141986605944112, 'q3': 0.030081284698098898}\nENSG00000181781 summary:\n {'mean': 0.026071776, 'median': 0.0058201756, 'minimum': 0.0, 'maximum': 0.99881804, 'q1': 0.0007384350174106658, 'q3': 0.027037601452320814}\nENSG00000123064 summary:\n {'mean': 0.018377414, 'median': 0.0051327366, 'minimum': 0.0, 'maximum': 0.84950185, 'q1': 0.0008188941283151507, 'q3': 0.020361649803817272}\nENSG00000135632 summary:\n {'mean': 0.010653677, 'median': 0.002438372, 'minimum': 0.0, 'maximum': 0.88420224, 'q1': 0.0003591718268580735, 'q3': 0.010761200217530131}\n\n\nSince get_diffmat quantifies relative difference between two matrices, a maximum of 1 is quite high.\n\ncorr_dict = {key: np.empty(5313) for key in diff_mats.keys()}\nfor gene in corr_dict.keys():\n    for col in range(5313):\n        col_corr = np.corrcoef(tss_predictions[gene][:, col], predicted_reference_epigenome[gene][:, col])[0, 1]\n        corr_dict[gene][col] = col_corr\n\n\nfor gene in corr_dict.keys():\n    print(get_summary(corr_dict[gene]))\n    plot_hist(corr_dict[gene], 1000, title=gene)\n\n{'mean': 0.8049430343560166, 'median': 0.8328356084654803, 'minimum': 0.0886049231976136, 'maximum': 0.9873011016369064, 'q1': 0.7457438348765015, 'q3': 0.8957395348558694}\n{'mean': 0.8986475454955245, 'median': 0.9287121904359038, 'minimum': 0.44826868323321156, 'maximum': 0.9945962529032818, 'q1': 0.8838251793830844, 'q3': 0.9635682170126223}\n{'mean': 0.8045267661551807, 'median': 0.8533021666864998, 'minimum': 0.04249028764892999, 'maximum': 0.9829007173160716, 'q1': 0.7808240903986677, 'q3': 0.9162318636964755}\n{'mean': 0.9153468696782503, 'median': 0.9217565843086337, 'minimum': 0.24337527243785198, 'maximum': 0.9960668159468162, 'q1': 0.8843923256605982, 'q3': 0.9570777829613587}\n{'mean': 0.9067276703056678, 'median': 0.9487685336551595, 'minimum': 0.3544397363159794, 'maximum': 0.9962932767154381, 'q1': 0.9172946319240809, 'q3': 0.9721852288345812}\n{'mean': 0.9685002179647139, 'median': 0.9718918783698673, 'minimum': 0.5774837936897961, 'maximum': 0.9970822682600515, 'q1': 0.9603764167762545, 'q3': 0.983808164894418}\n{'mean': 0.8188228830558877, 'median': 0.8774429361059797, 'minimum': 0.15878411819220745, 'maximum': 0.9908752372163073, 'q1': 0.806399316249025, 'q3': 0.9316126393219638}\n{'mean': 0.8244396183353139, 'median': 0.8766614272845572, 'minimum': 0.21515277099870878, 'maximum': 0.9734314614679092, 'q1': 0.8314860244560973, 'q3': 0.9116283548886374}\n{'mean': 0.9224101439094681, 'median': 0.9397228749133515, 'minimum': 0.6120791237641421, 'maximum': 0.9941067107710185, 'q1': 0.9002750036208108, 'q3': 0.9632379272802634}\n{'mean': 0.9115669859866135, 'median': 0.9701754129932663, 'minimum': 0.2662981770716635, 'maximum': 0.9971998874233308, 'q1': 0.9490859996588221, 'q3': 0.9862075624647917}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis is pretty bad. But we’ll still plot the brain CAGE tracks, in case the root of our problems is bin indexing.\n\n\nCode\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.protein_coding_TSS.txt\", sep=\"\\t\", index_col='ensembl_gene_id')\ndef plot_CAGE_tracks(gene):\n    gene_annot = annot_df.loc[gene]\n    start = gene_annot['transcription_start_site'] - 57344\n    end = gene_annot['transcription_start_site'] + 57344\n    target_interval = kipoiseq.Interval(f\"chr{gene_annot['chromosome_name']}\", start, end)\n    tracks = {\"Centered at TSS\": tss_predictions[gene][:, 4980],\n              \"Queried from reference\": predicted_reference_epigenome[gene][:,4980]}\n    plot_tracks(tracks, target_interval)\n\n\n\nfor gene in tss_predictions.keys():\n    plot_CAGE_tracks(gene)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAt least for the CAGE:Brain track, centering the input sequence at the TSS does not noticeably affect prediction along bins. But it is worth noting that the peaks predicted by centering sequences at TSS look slightly wider than when predicting in a fixed 448 bin window. Let’s query 8 bins around the TSS to verify. (In theory, the TSS will land on index 448 in both cases, or index 4 in the 8 bin window.)\n\nfor gene in corr_dict.keys():\n    print(gene)\n    df = pd.DataFrame({\n        \"Centered at TSS\": tss_predictions[gene][444:452, 4980],\n        \"Queried from reference\": predicted_reference_epigenome[gene][444:452, 4980]\n    })\n    print(df.transpose())\n\nENSG00000121898\n                               0         1         2         3          4  \\\nCentered at TSS         0.082086  0.279907  0.440625  4.071788   3.021415   \nQueried from reference  0.026973  0.184488  0.306243  0.599280  10.036044   \n\n                               5         6         7  \nCentered at TSS         0.033681  0.012400  0.010115  \nQueried from reference  0.683917  0.033996  0.018840  \nENSG00000162613\n                               0         1         2          3           4  \\\nCentered at TSS         0.076932  0.107431  0.190104  59.414913   44.131977   \nQueried from reference  0.054259  0.077803  0.129248   0.457014  113.825249   \n\n                               5         6         7  \nCentered at TSS         7.694908  0.878686  3.008540  \nQueried from reference  7.781330  4.396933  2.460186  \nENSG00000164327\n                               0         1         2          3          4  \\\nCentered at TSS         0.392323  0.314011  0.328351  12.959496   4.288091   \nQueried from reference  0.125206  0.404037  0.652251   0.185249  17.119499   \n\n                               5         6         7  \nCentered at TSS         0.746995  0.368291  0.123126  \nQueried from reference  0.754246  0.489976  0.373154  \nENSG00000087303\n                               0         1         2         3         4  \\\nCentered at TSS         0.039021  0.053638  0.235429  0.646864  1.494921   \nQueried from reference  0.080472  0.029643  0.127269  0.273104  2.420461   \n\n                               5         6         7  \nCentered at TSS         0.172857  0.049821  0.075797  \nQueried from reference  0.190278  0.060742  0.115897  \nENSG00000139233\n                               0         1         2         3          4  \\\nCentered at TSS         0.040307  0.030658  0.027995  5.852082   9.505428   \nQueried from reference  0.070822  0.031764  0.034324  0.041555  11.567361   \n\n                               5         6         7  \nCentered at TSS         0.185968  0.026289  0.013464  \nQueried from reference  0.815561  0.030036  0.016201  \nENSG00000050820\n                               0         1         2         3          4  \\\nCentered at TSS         0.114673  0.221738  0.484987  3.659282  15.693231   \nQueried from reference  0.141583  0.171815  0.351790  0.665281  24.632042   \n\n                               5         6         7  \nCentered at TSS         0.169728  0.162921  0.282628  \nQueried from reference  0.280914  0.157273  0.284518  \nENSG00000171160\n                               0         1         2          3          4  \\\nCentered at TSS         0.073427  0.057288  0.123217  17.251186   3.344472   \nQueried from reference  0.055889  0.057332  0.082732   0.132029  18.254246   \n\n                               5         6         7  \nCentered at TSS         0.072126  0.083481  0.012901  \nQueried from reference  0.312892  0.033270  0.029419  \nENSG00000181781\n                               0         1         2         3         4  \\\nCentered at TSS         0.018649  0.026022  0.118225  0.119143  0.134566   \nQueried from reference  0.027906  0.015841  0.033200  0.094467  0.129208   \n\n                               5         6         7  \nCentered at TSS         0.011545  0.005993  0.008782  \nQueried from reference  0.110075  0.010298  0.006653  \nENSG00000123064\n                               0         1         2          3          4  \\\nCentered at TSS         1.115006  0.157705  0.413661  12.203613  16.859051   \nQueried from reference  0.175724  1.541537  0.067659   0.507933  21.480145   \n\n                               5         6         7  \nCentered at TSS         0.659016  0.442875  0.483138  \nQueried from reference  7.751738  0.415864  0.562360  \nENSG00000135632\n                               0         1         2         3          4  \\\nCentered at TSS         0.004197  0.005604  0.035540  3.246182   9.616517   \nQueried from reference  0.002469  0.006195  0.026891  0.172134  14.617000   \n\n                               5         6         7  \nCentered at TSS         0.261616  1.216553  0.174459  \nQueried from reference  0.161753  1.406903  0.269044  \n\n\nNow the difference is much more noticeable. Let’s confirm with a correlation test for CAGE:Brain track.\n\nfor gene in corr_dict.keys():\n    col_corr = np.corrcoef(tss_predictions[gene][:, 4980], predicted_reference_epigenome[gene][:, 4980])[0, 1]\n    dist = annot_df.loc[gene]['transcription_start_site'] % 57344\n    print(gene, \"\\nCorrelation:\", col_corr, \"\\nTSS distance from center:\", min(dist, 57344 - dist))\n\nENSG00000121898 \nCorrelation: 0.6396015700677352 \nTSS distance from center: 28577\nENSG00000162613 \nCorrelation: 0.6089762800309391 \nTSS distance from center: 8768\nENSG00000164327 \nCorrelation: 0.3250502250053843 \nTSS distance from center: 23135\nENSG00000087303 \nCorrelation: 0.94357261835514 \nTSS distance from center: 707\nENSG00000139233 \nCorrelation: 0.510355799911747 \nTSS distance from center: 13118\nENSG00000050820 \nCorrelation: 0.9543710850658597 \nTSS distance from center: 16296\nENSG00000171160 \nCorrelation: 0.36819984155156643 \nTSS distance from center: 23332\nENSG00000181781 \nCorrelation: 0.6519049075736117 \nTSS distance from center: 16231\nENSG00000123064 \nCorrelation: 0.9232435790584608 \nTSS distance from center: 11578\nENSG00000135632 \nCorrelation: 0.5146963218167778 \nTSS distance from center: 14043\n\n\nThe distance between the gene TSS and the center of input sequence is likely affecting predictions. Now we’ll want to consider whether centering at the TSS improves predictions based on a very small sample of 10 genes."
  },
  {
    "objectID": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html#compare-to-gtex-gene-expression",
    "href": "posts/2023-08-28-comparing-enformer-at-gene-tss-vs-reference-epigenome-vs-encode-experiments/index.html#compare-to-gtex-gene-expression",
    "title": "Comparing the predicted reference epigenome to Enformer runs centered at the TSS and ground truth",
    "section": "Compare to GTEx gene expression",
    "text": "Compare to GTEx gene expression\n\ngtex_tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/gene_tpm_2017-06-05_v8_brain_cortex.gct.gz\", header=2, sep=\"\\t\")\ngtex_tpm['Name'] = gtex_tpm['Name'].apply(lambda gene: gene.split('.')[0])\ngtex_tpm.set_index('Name', inplace=True)\n# Calculate average gene expression\ngtex_mean_tpm = gtex_tpm.drop(columns=['id', 'Description']).mean(axis=1)\ngtex_mean_tpm.name = 'GTEx'\n\n\n## Quantify predicted gene expression\ndf = pd.DataFrame({\n    \"Centered at TSS\": [np.average(tss_predictions[gene][446:450, 4980]) for gene in tss_predictions.keys()],\n    \"Queried from reference\": [np.average(predicted_reference_epigenome[gene][446:450, 4980]) for gene in predicted_reference_epigenome.keys()]\n    }, index = tss_predictions.keys())\n\n\nreference_gex_df = df.merge(gtex_mean_tpm, left_index=True, right_index=True, how='inner')\nprint(reference_gex_df)\n\n                 Centered at TSS  Queried from reference       GTEx\nENSG00000050820         9.676256               12.648662  20.471502\nENSG00000087303         1.070892                1.346782   0.780738\nENSG00000121898         3.546602                5.317662   1.135701\nENSG00000123064        14.531332               10.994039  11.954925\nENSG00000135632         6.431349                7.394567  25.394757\nENSG00000139233         7.678755                5.804458   2.995251\nENSG00000162613        51.773445               57.141132  17.891106\nENSG00000164327         8.623794                8.652374   5.890239\nENSG00000171160        10.297829                9.193137  34.015620\nENSG00000181781         0.126855                0.111838   0.479827\n\n\n\ngex_corr = reference_gex_df.corr()\ngex_corr\n\n\n\n\n\n\n\n\nCentered at TSS\nQueried from reference\nGTEx\n\n\n\n\nCentered at TSS\n1.000000\n0.991899\n0.324152\n\n\nQueried from reference\n0.991899\n1.000000\n0.316441\n\n\nGTEx\n0.324152\n0.316441\n1.000000\n\n\n\n\n\n\n\nIt’s worth noting that once the four bins around the TSS are averaged, predictions centered at TSS compared to 57,344 bp increments in the reference epigenome are very similar."
  },
  {
    "objectID": "posts/2023-09-25-borzoi-CAGE-test/index.html",
    "href": "posts/2023-09-25-borzoi-CAGE-test/index.html",
    "title": "Borzoi CAGE test",
    "section": "",
    "text": "We ran the Borzoi human track models on the same genes as the GTEx track runs to compare the performance.\nimport pandas as pd\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt\", sep=\"\\t\")\ngene_list = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv\", header=None)\ngene_list = gene_list.dropna()\ngene_df = gene_list.merge(annot_df, left_on= 0, right_on = \"ensembl_gene_id\")\ngene_df = gene_df[[\"ensembl_gene_id\", \"chromosome_name\", \"transcription_start_site\"]]\ngene_df.to_csv(\"gene_list.csv\", header=False, index=False)"
  },
  {
    "objectID": "posts/2023-09-25-borzoi-CAGE-test/index.html#extra-plots",
    "href": "posts/2023-09-25-borzoi-CAGE-test/index.html#extra-plots",
    "title": "Borzoi CAGE test",
    "section": "Extra Plots",
    "text": "Extra Plots\nSince Borzoi and Enformer CAGE tracks are measured on the same scale, it makes sense that the two have the highest pearson correlation out of all pairs. It’s not clear why the plot looks curved though.\n\n\nCode\nx = merged_df[\"Enformer (CAGE)\"]\ny = merged_df[\"Borzoi (CAGE)\"]\ncorr = pearson_corr_df.loc[\"Enformer (CAGE)\", \"Borzoi (CAGE)\"]\nplt.scatter(x, y, s=5, alpha=0.6, label=f'R = {corr:.3f}')\nplt.xlabel('Enformer CAGE')\nplt.ylabel('Borzoi CAGE')\nplt.title(\"Enformer and Borzoi CAGE Predictions\")\nplt.legend()\nplt.show()\n\n\n\n\n\nBorzoi CAGE and GTEx had a large improvement from Pearson R = 0.191 to Spearman R = 0.843.\n\n\nCode\nx = merged_df[\"Borzoi (GTEx)\"]\ny = merged_df[\"Borzoi (CAGE)\"]\ncorr = pearson_corr_df.loc[\"Borzoi (GTEx)\", \"Borzoi (CAGE)\"]\nplt.scatter(x, y, s=5, alpha=0.6, label=f'R = {corr:.3f}')\nplt.xlabel('Borzoi GTEx')\nplt.ylabel('Borzoi CAGE')\nplt.title(\"Borzoi CAGE and GTEx Predictions\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html",
    "href": "posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html",
    "title": "Borzoi test predictions on small gene set",
    "section": "",
    "text": "import pandas as pd\nfrom scipy import stats\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt\", sep=\"\\t\")\ngene_list = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv\", header=None)\ngene_df = annot_df[~annot_df[\"ensembl_gene_id\"].isin(gene_list[0])]\ngene_df = annot_df.sample(n=1000).drop(columns=[\"external_gene_name\", \"transcription_start_site\"])\ngene_df.to_csv(\"gene_list.txt\", header=False, index=False)"
  },
  {
    "objectID": "posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html#sample-genes",
    "href": "posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html#sample-genes",
    "title": "Borzoi test predictions on small gene set",
    "section": "",
    "text": "import pandas as pd\nfrom scipy import stats\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt\", sep=\"\\t\")\ngene_list = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv\", header=None)\ngene_df = annot_df[~annot_df[\"ensembl_gene_id\"].isin(gene_list[0])]\ngene_df = annot_df.sample(n=1000).drop(columns=[\"external_gene_name\", \"transcription_start_site\"])\ngene_df.to_csv(\"gene_list.txt\", header=False, index=False)"
  },
  {
    "objectID": "posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html#run-borzoi",
    "href": "posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html#run-borzoi",
    "title": "Borzoi test predictions on small gene set",
    "section": "Run Borzoi",
    "text": "Run Borzoi\nmodule load conda\nconda activate borzoi\ncd /home/s1mi/Github/deep-learning-in-genomics/posts/2023-09-21-borzoi-reference-gene-expression-prediction-test\npython borzoi_predict.py --gene_df gene_list.txt --tracks \"17,18,19\""
  },
  {
    "objectID": "posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html#plot-comparisons-across-genes",
    "href": "posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html#plot-comparisons-across-genes",
    "title": "Borzoi test predictions on small gene set",
    "section": "Plot Comparisons Across Genes",
    "text": "Plot Comparisons Across Genes\n\n#!cat gene_predictions.csv gene_predictions0.csv &gt; /home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv\noutput_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/hg38_borzoi_across_genes.csv\", header=None).dropna()\n\n\nhuman_brain_gex = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_all_GTEx_brain_tissues.csv\", index_col=0).dropna()\nmerged_df = output_df.merge(human_brain_gex, left_on=0, right_index=True)\nmerged_df = merged_df[[0, 4, \"enformer\", \"cortex\"]]\nmerged_df.columns=[\"gene\", \"borzoi\", \"enformer\", \"observed\"]\nmerged_df\n\n\n\n\n\n\n\n\ngene\nborzoi\nenformer\nobserved\n\n\n\n\n0\nENSG00000260286\n6.873438e+02\n0.005209\n0.086014\n\n\n1\nENSG00000162877\n3.553310e+03\n0.270328\n0.128466\n\n\n2\nENSG00000083845\n9.018748e+06\n18.964096\n135.113922\n\n\n3\nENSG00000143199\n1.511829e+03\n0.049658\n0.256258\n\n\n5\nENSG00000188522\n8.282543e+04\n0.083827\n0.460673\n\n\n...\n...\n...\n...\n...\n\n\n998\nENSG00000198626\n3.959017e+04\n11.577308\n8.737213\n\n\n999\nENSG00000184206\n8.352521e+03\n0.002583\n0.155200\n\n\n1000\nENSG00000140043\n3.883056e+04\n5.710264\n7.826176\n\n\n1001\nENSG00000081248\n3.480795e+03\n0.021962\n0.345895\n\n\n1002\nENSG00000198774\n1.029021e+04\n0.156194\n0.116595\n\n\n\n\n973 rows × 4 columns\n\n\n\n\nimport matplotlib.pyplot as plt\nx = merged_df[\"observed\"]\ny = merged_df[\"borzoi\"]\ncorr, pval = stats.pearsonr(x, y)\nplt.scatter(stats.rankdata(x), stats.rankdata(y), s=5, alpha=0.6, label=f'R = {corr:.3f}')\nplt.xlabel('Observed')\nplt.ylabel('Borzoi')\nplt.title(\"Human Reference Gene Expression in Brain Tissue\")\nplt.legend()\nplt.show()\n\n\n\n\n\nx = merged_df[\"observed\"]\ny = merged_df[\"borzoi\"]\ncorr, pval = stats.spearmanr(x, y)\nplt.scatter(stats.rankdata(x), stats.rankdata(y), s=5, alpha=0.6, label=f'R = {corr:.3f}')\nplt.xlabel('Observed Rank')\nplt.ylabel('Borzoi Rank')\nplt.title(\"Human Reference Gene Expression in Brain Tissue\")\nplt.legend()\nplt.show()\n\n\n\n\n\nx = merged_df[\"observed\"]\ny = merged_df[\"enformer\"]\ncorr, pval = stats.spearmanr(x, y)\nplt.scatter(stats.rankdata(x), stats.rankdata(y), s=5, alpha=0.6, label=f'R = {corr:.3f}')\nplt.xlabel('Rank Observed')\nplt.ylabel('Rank Enformer')\nplt.title(\"Human Reference Gene Expression in Brain Tissue\")\nplt.legend()\nplt.show()\n\n\n\n\n\nx = merged_df[\"borzoi\"]\ny = merged_df[\"enformer\"]\ncorr, pval = stats.spearmanr(x, y)\nplt.scatter(stats.rankdata(x), stats.rankdata(y), s=5, alpha=0.6, label=f'R = {corr:.3f}')\nplt.xlabel('Rank Borzoi')\nplt.ylabel('Rank Enformer')\nplt.title(\"Human Reference Gene Expression in Brain Tissue\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html#summary",
    "href": "posts/2023-09-21-borzoi-reference-gene-expression-prediction-test/index.html#summary",
    "title": "Borzoi test predictions on small gene set",
    "section": "Summary",
    "text": "Summary\n\nprint(\"Pearson R\")\nmerged_df.corr(method=\"pearson\")\n\nPearson R\n\n\n/tmp/ipykernel_42770/1150790563.py:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  merged_df.corr(method=\"pearson\")\n\n\n\n\n\n\n\n\n\nborzoi\nenformer\nobserved\n\n\n\n\nborzoi\n1.000000\n0.225605\n0.620217\n\n\nenformer\n0.225605\n1.000000\n0.593030\n\n\nobserved\n0.620217\n0.593030\n1.000000\n\n\n\n\n\n\n\n\nprint(\"Spearman R\")\nmerged_df.corr(method=\"spearman\")\n\nSpearman R\n\n\n/tmp/ipykernel_42770/774805496.py:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  merged_df.corr(method=\"spearman\")\n\n\n\n\n\n\n\n\n\nborzoi\nenformer\nobserved\n\n\n\n\nborzoi\n1.000000\n0.773361\n0.856641\n\n\nenformer\n0.773361\n1.000000\n0.795909\n\n\nobserved\n0.856641\n0.795909\n1.000000"
  },
  {
    "objectID": "posts/2023-09-06-validating-Huang-et-al/index.html",
    "href": "posts/2023-09-06-validating-Huang-et-al/index.html",
    "title": "Validating reference gene expression prediction",
    "section": "",
    "text": "I replicated the Enformer result’s in Personal transcriptome variation is poorly explained by current genomic deep learning models, Huang et al. They reported a 0.57 correlation in reference prediction across all genes. They used median GEUVADIS LCL gene expression data for their comparison and quantified predicted gene expression using the average of 10 bin window around each gene’s TSS on the CAGE:B lymphoblastoid cell line track.\nThey subsetted to 3,295 genes with a significant cis-QTL, however, when I expanded the analysis to all GEUVADIS genes, I found an even higher correlation of 0.77."
  },
  {
    "objectID": "posts/2023-09-06-validating-Huang-et-al/index.html#split-genes-by-chromosome",
    "href": "posts/2023-09-06-validating-Huang-et-al/index.html#split-genes-by-chromosome",
    "title": "Validating reference gene expression prediction",
    "section": "Split genes by chromosome",
    "text": "Split genes by chromosome\n\n## Subset annotation to GEUVADIS genes\nhg38_annot = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.protein_coding_TSS.txt\", header=0, sep=\"\\t\")\nhg38_annot = hg38_annot[hg38_annot[\"ensembl_gene_id\"].isin(geuvadis_gex.index)]\ngene_dict = hg38_annot.groupby('chromosome_name')['ensembl_gene_id'].apply(list).to_dict()\n## Initialize CAGE predictions\nhg38_annot.set_index(\"ensembl_gene_id\", inplace=True)\nchr_list = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"X\"]\nCAGE_predictions = {key: [] for key in chr_list}"
  },
  {
    "objectID": "posts/2023-09-06-validating-Huang-et-al/index.html#query-enformer-predicted-gene-expression-1",
    "href": "posts/2023-09-06-validating-Huang-et-al/index.html#query-enformer-predicted-gene-expression-1",
    "title": "Validating reference gene expression prediction",
    "section": "Query Enformer predicted gene expression",
    "text": "Query Enformer predicted gene expression\n\nfor chr in chr_list:\n    gene_list = gene_dict[chr]\n    for gene in gene_list:\n        bins = query_epigenome(chr, hg38_annot.loc[gene]['transcription_start_site'], tracks=[5110])\n        CAGE_predictions[chr].append(np.average(bins))\n    break\n\n\nPlot correlation across genes\n\nmerged_dict = {chr: pd.DataFrame(index=gene_dict[chr]) for chr in chr_list}\nfor chr in chr_list:\n    merged_dict[chr]['enformer, 3 bin'] = CAGE_predictions[chr]\n\n\nfor chr in chr_list:\n    merged_dict[chr] = merged_dict[chr].merge(geuvadis_mean_gex, left_index=True, right_index=True, how='inner').dropna()\n    merged_dict[chr] = merged_dict[chr].merge(geuvadis_median_gex, left_index=True, right_index=True, how='inner').dropna()\n\n\nall_genes = pd.concat(merged_dict.values())\n# #all_genes.to_csv(\"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_GEUVADIS.csv\")\n\n\n#all_genes = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_GEUVADIS.csv\", index_col=0)\nprint(\"Pearson Correlation across all GEUVADIS genes, 3 bin\", all_genes.corr(method = \"pearson\").iloc[0,1])\ncorr = scipy.stats.spearmanr(all_genes[\"geuvadis\"], all_genes[\"enformer, 3 bin\"])[0]\nprint(\"Spearman Correlation across all GEUVADIS genes, 3 bin:\", corr)\n\nPearson Correlation across all GEUVADIS genes, 3 bin 0.20215477325106418\nSpearman Correlation across all GEUVADIS genes, 3 bin: 0.7688261493752583\n\n\n\nplt.scatter(all_genes['enformer, 3 bin'], all_genes['geuvadis'], label=f'Correlation: {corr:.2f}')\nplt.xlabel('observed')\nplt.ylabel('predicted')\nplt.title(\"hg38 prediction across genes\")\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\nCompare to 10 bin window predictions\n\nimport time\nfor chr in chr_list:\n    tic = time.perf_counter()\n    gene_list = merged_dict[chr].index\n    predictions = []\n    for gene in gene_list:\n        bins = query_epigenome(chr, hg38_annot.loc[gene]['transcription_start_site'], n_bins=10, tracks=[5110])\n        predictions.append(np.average(bins))\n    merged_dict[chr][\"enformer, 10 bin\"] = predictions\n    toc = time.perf_counter()\n    print(\"Querying chromosome\", chr, \"genes...,\", toc - tic, \"seconds\")\n\n\nall_genes = pd.concat(merged_dict.values())\nall_genes = all_genes[[\"geuvadis, mean\", \"geuvadis, median\", \"enformer, 3 bin\", \"enformer, 10 bin\"]]\nall_genes.to_csv(\"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_GEUVADIS.csv\")\n\n\nprint(\"Pearson Correlation\")\nall_genes.corr(method = \"pearson\")\n\nPearson Correlation\n\n\n\n\n\n\n\n\n\ngeuvadis, mean\ngeuvadis, median\nenformer, 3 bin\nenformer, 10 bin\n\n\n\n\ngeuvadis, mean\n1.000000\n0.999931\n0.202155\n0.193256\n\n\ngeuvadis, median\n0.999931\n1.000000\n0.201489\n0.192641\n\n\nenformer, 3 bin\n0.202155\n0.201489\n1.000000\n0.923923\n\n\nenformer, 10 bin\n0.193256\n0.192641\n0.923923\n1.000000\n\n\n\n\n\n\n\n\nprint(\"Spearman Correlation:\")\nall_genes.corr(method = \"spearman\")\n\nSpearman Correlation:\n\n\n\n\n\n\n\n\n\ngeuvadis, mean\ngeuvadis, median\nenformer, 3 bin\nenformer, 10 bin\n\n\n\n\ngeuvadis, mean\n1.000000\n0.999273\n0.768826\n0.759941\n\n\ngeuvadis, median\n0.999273\n1.000000\n0.770554\n0.761739\n\n\nenformer, 3 bin\n0.768826\n0.770554\n1.000000\n0.963611\n\n\nenformer, 10 bin\n0.759941\n0.761739\n0.963611\n1.000000\n\n\n\n\n\n\n\nThe highest correlation between observed and predicted expression in the 14,585 GEUVADIS genes is 0.77, by using a 3 bin average around the TSS for predicted reference and median gene expression across GEUVADIS individuals as observed reference. This is actually better than the reported 0.57 correlation by Huang et al, but I will run the original code to triple check.\n\n\nOriginal Code\nI cloned personalized-expression-benchmark.\nThe first difference I noticed in their analysis is that they subset to 3259 genes in the GEUVADIS EUR dataset found to have at least one significant cis-eQTL.\n\n\nOriginal Code\nMy only modification was hard-coding paths and removing the fasta folder argument in personalized-expression-benchmark/enformer/run_enformer_reference.py\nmodule load conda\nconda activate ml-python\ncd /home/s1mi/Github/personalized-expression-benchmark\n\npython3 enformer/run_enformer_reference.py . data/gene_list.csv\n\n\noutput = pd.read_csv(\"/home/s1mi/Github/personalized-expression-benchmark/output/reference_predictions.csv\")\nmerged_output = output.merge(geuvadis_median_gex, left_on=\"geneId\", right_index=True).drop(columns=[\"mean\", \"max\"])\n\n\nprint(\"Pearson Correlation:\")\nmerged_output.corr(method=\"pearson\")\n\nPearson Correlation:\n\n\n\n\n\n\n\n\n\ntss3\ntss10\ngeuvadis, median\n\n\n\n\ntss3\n1.000000\n0.835206\n0.197672\n\n\ntss10\n0.835206\n1.000000\n0.218041\n\n\ngeuvadis, median\n0.197672\n0.218041\n1.000000\n\n\n\n\n\n\n\n\nprint(\"Spearman Correlation:\")\nmerged_output.corr(method=\"spearman\")\n\nSpearman Correlation:\n\n\n\n\n\n\n\n\n\ntss3\ntss10\ngeuvadis, median\n\n\n\n\ntss3\n1.000000\n0.893283\n0.501058\n\n\ntss10\n0.893283\n1.000000\n0.569476\n\n\ngeuvadis, median\n0.501058\n0.569476\n1.000000\n\n\n\n\n\n\n\n\ncorr = merged_output.corr(method=\"spearman\").iloc[1,2]\nplt.scatter(all_genes['enformer, 10 bin'], all_genes['geuvadis, median'], label=f'Correlation: {corr:.2f}')\nplt.xlabel('observed')\nplt.ylabel('predicted')\nplt.title(\"hg38 prediction across genes\")\nplt.legend()\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "posts/2023-07-17-annotating-targets-table/annotate_targets.html",
    "href": "posts/2023-07-17-annotating-targets-table/annotate_targets.html",
    "title": "Annotate ENCODE targets table with system, cell, organ informations",
    "section": "",
    "text": "Import library and read in targets dataframe\n\nimport pandas as pd\nimport requests, json\n\n\n# Download Targets\ntargets_txt = 'https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_human.txt'\ndf_targets = pd.read_csv(targets_txt, sep='\\t')\n\n\n\nQuery ENCODE database\n\n# Force return from the server in JSON format\nheaders = {'accept': 'application/json'}\n\ndef get_json(accession_id):\n\n    # This URL locates the ENCODE biosample with accession number ENCBS000AAA\n    url = 'https://www.encodeproject.org/files/' + accession_id +'/?format=json'\n    \n    # GET the object\n    response = requests.get(url, headers=headers)\n    \n    # Extract the JSON response as a Python dictionary\n    encff = response.json()\n\n    return encff\n\n\n\nExtract fields\nWe want to query system, cell, and organ information.\n\nsys_col, cell_col, org_col, dev_col, syn_col = ([] for i in range(5))\n\nfor i in range(5313):\n    accession_id = df_targets['identifier'][i]\n    encff = get_json(accession_id)\n\n    if 'biosample_ontology' in encff.keys():\n\n        sys = encff['biosample_ontology']['system_slims']\n        sys_col.append(', '.join(sys) if len(sys) &gt; 0 else 'NA')\n\n        cell = encff['biosample_ontology']['cell_slims']\n        cell_col.append(', '.join(cell) if len(cell) &gt; 0 else 'NA')\n\n        org = encff['biosample_ontology']['organ_slims']\n        org_col.append(', '.join(org) if len(org) &gt; 0 else 'NA')\n\n        dev = encff['biosample_ontology']['developmental_slims']\n        dev_col.append(', '.join(dev) if len(org) &gt; 0 else 'NA')\n    \n    else:\n        \n        sys_col.append('NA')\n        cell_col.append('NA')\n        org_col.append('NA')\n        dev_col.append('NA')\n        \n    if i % 500 == 0: print(i)\n\n\n\n\n0\n500\n1000\n1500\n2000\n2500\n3000\n3500\n4000\n4500\n5000\n\n\n\nprint(sys_col)\nprint(cell_col)\nprint(org_col)\nprint(dev_col)\n\ndf_targets['system'] = sys_col\ndf_targets['cell'] = cell_col\ndf_targets ['organ'] = org_col\ndf_targets['developmental'] = dev_col\n\n['central nervous system', 'central nervous system', 'NA', 'reproductive system', 'integumental system', 'integumental system', 'integumental system', 'respiratory system', 'integumental system', 'central nervous system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'NA', 'NA', 'NA', 'circulatory system', 'excretory system', 'reproductive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'circulatory system, reproductive system', 'NA', 'integumental system', 'integumental system', 'immune system', 'immune system', 'immune system', 'reproductive system', 'reproductive system', 'exocrine system, integumental system', 'central nervous system', 'integumental system', 'immune system', 'integumental system', 'skeletal system', 'musculature', 'exocrine system, integumental system', 'excretory system', 'respiratory system', 'integumental system', 'respiratory system', 'integumental system', 'digestive system', 'integumental system', 'circulatory system', 'central nervous system', 'reproductive system', 'immune system, skeletal system', 'immune system, skeletal system', 'skeletal system, immune system', 'digestive system', 'immune system', 'NA', 'immune system', 'immune system, skeletal system', 'integumental system', 'integumental system', 'immune system', 'immune system', 'immune system', 'immune system', 'NA', 'musculature, circulatory system', 'NA', 'NA', 'musculature, circulatory system', 'NA', 'central nervous system', 'central nervous system', 'central nervous system', 'reproductive system', 'central nervous system, circulatory system', 'central nervous system', 'central nervous system, circulatory system', 'circulatory system', 'circulatory system', 'musculature, circulatory system', 'sensory system', 'central nervous system, circulatory system', 'digestive system', 'digestive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'integumental system, reproductive system', 'reproductive system', 'digestive system', 'sensory system', 'immune system', 'integumental system, exocrine system', 'integumental system, exocrine system', 'circulatory system, integumental system', 'integumental system, circulatory system', 'integumental system, circulatory system', 'integumental system, immune system, circulatory system', 'immune system, circulatory system, integumental system', 'integumental system, circulatory system', 'circulatory system, respiratory system', 'circulatory system, respiratory system', 'NA', 'circulatory system', 'circulatory system', 'skeletal system', 'respiratory system', 'excretory system', 'excretory system', 'excretory system, circulatory system', 'sensory system', 'musculature', 'musculature', 'circulatory system, reproductive system', 'reproductive system', 'immune system', 'immune system', 'immune system', 'immune system', 'musculature', 'musculature', 'reproductive system', 'central nervous system', 'exocrine system, integumental system', 'integumental system, exocrine system', 'exocrine system, integumental system', 'immune system', 'skeletal system, immune system', 'central nervous system', 'respiratory system', 'integumental system', 'integumental system, reproductive system', 'integumental system', 'respiratory system', 'reproductive system', 'endocrine system', 'reproductive system', 'integumental system', 'excretory system', 'respiratory system', 'central nervous system', 'central nervous system', 'musculature', 'integumental system, exocrine system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'sensory system', 'respiratory system', 'respiratory system', 'NA', 'integumental system', 'musculature', 'respiratory system', 'central nervous system', 'integumental system', 'respiratory system', 'integumental system', 'musculature', 'integumental system, reproductive system', 'excretory system', 'central nervous system', 'excretory system', 'NA', 'excretory system', 'immune system', 'immune system', 'excretory system', 'central nervous system', 'musculature', 'musculature', 'reproductive system', 'integumental system, reproductive system', 'excretory system', 'excretory system', 'digestive system', 'excretory system', 'immune system', 'digestive system', 'reproductive system', 'musculature', 'endocrine system', 'circulatory system', 'digestive system', 'musculature', 'circulatory system', 'excretory system', 'circulatory system', 'musculature', 'respiratory system', 'circulatory system', 'endocrine system', 'excretory system', 'digestive system', 'digestive system', 'skeletal system', 'integumental system', 'excretory system', 'digestive system', 'excretory system', 'NA', 'excretory system', 'musculature', 'NA', 'digestive system', 'central nervous system', 'digestive system', 'excretory system', 'NA', 'immune system', 'sensory system', 'excretory system', 'reproductive system', 'digestive system', 'digestive system', 'digestive system', 'excretory system', 'excretory system', 'respiratory system', 'musculature', 'respiratory system', 'central nervous system', 'NA', 'endocrine system, exocrine system, digestive system', 'integumental system, reproductive system', 'NA', 'digestive system', 'circulatory system', 'excretory system', 'central nervous system', 'endocrine system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'immune system, endocrine system', 'respiratory system', 'NA', 'musculature', 'immune system', 'musculature', 'musculature', 'musculature', 'digestive system', 'musculature', 'circulatory system', 'excretory system', 'integumental system', 'NA', 'NA', 'excretory system', 'integumental system', 'central nervous system', 'digestive system', 'circulatory system', 'immune system', 'endocrine system', 'musculature', 'musculature', 'immune system, digestive system', 'NA', 'digestive system', 'digestive system', 'respiratory system', 'integumental system', 'digestive system', 'integumental system', 'musculature', 'endocrine system', 'central nervous system', 'respiratory system', 'NA', 'integumental system, exocrine system', 'musculature', 'reproductive system', 'reproductive system', 'NA', 'digestive system', 'immune system', 'integumental system, reproductive system', 'excretory system', 'excretory system', 'excretory system', 'excretory system', 'integumental system, reproductive system', 'excretory system', 'respiratory system', 'respiratory system', 'excretory system', 'excretory system', 'musculature', 'immune system', 'musculature', 'skeletal system', 'NA', 'reproductive system', 'central nervous system', 'circulatory system', 'immune system', 'digestive system', 'musculature', 'musculature', 'excretory system', 'musculature', 'musculature', 'respiratory system', 'immune system', 'excretory system', 'musculature', 'circulatory system', 'central nervous system', 'musculature', 'circulatory system', 'immune system, skeletal system', 'immune system', 'musculature', 'excretory system', 'central nervous system', 'respiratory system', 'circulatory system', 'excretory system', 'immune system', 'immune system, digestive system', 'integumental system', 'NA', 'excretory system', 'circulatory system', 'excretory system', 'immune system, endocrine system', 'central nervous system', 'central nervous system', 'musculature', 'musculature', 'musculature', 'musculature', 'integumental system', 'central nervous system', 'NA', 'endocrine system, exocrine system, digestive system', 'excretory system', 'circulatory system', 'digestive system', 'immune system', 'integumental system', 'immune system', 'immune system', 'central nervous system', 'integumental system', 'integumental system, reproductive system', 'musculature', 'integumental system, exocrine system', 'digestive system', 'circulatory system', 'peripheral nervous system', 'NA', 'musculature', 'circulatory system', 'immune system', 'excretory system', 'endocrine system', 'NA', 'central nervous system', 'NA', 'excretory system', 'immune system', 'skeletal system, immune system', 'musculature', 'reproductive system', 'digestive system', 'skeletal system', 'excretory system', 'reproductive system', 'NA', 'reproductive system', 'excretory system', 'musculature', 'musculature', 'integumental system, reproductive system', 'respiratory system', 'respiratory system', 'digestive system', 'respiratory system', 'skeletal system', 'immune system', 'musculature', 'immune system, digestive system', 'immune system', 'respiratory system', 'digestive system', 'immune system', 'digestive system', 'respiratory system', 'immune system', 'sensory system', 'central nervous system', 'musculature', 'respiratory system', 'respiratory system', 'respiratory system', 'immune system', 'respiratory system', 'NA', 'central nervous system', 'immune system', 'reproductive system', 'excretory system', 'circulatory system', 'digestive system', 'digestive system', 'central nervous system', 'respiratory system', 'digestive system', 'central nervous system', 'digestive system', 'NA', 'musculature', 'excretory system', 'musculature', 'reproductive system', 'digestive system', 'NA', 'excretory system', 'NA', 'digestive system', 'musculature, skeletal system', 'circulatory system', 'circulatory system', 'excretory system', 'respiratory system', 'immune system, endocrine system', 'reproductive system', 'excretory system', 'immune system, endocrine system', 'reproductive system', 'reproductive system', 'excretory system', 'reproductive system', 'reproductive system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'integumental system', 'sensory system, digestive system', 'integumental system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'NA', 'immune system', 'digestive system', 'immune system', 'central nervous system', 'reproductive system', 'excretory system', 'respiratory system', 'central nervous system', 'musculature', 'respiratory system', 'excretory system', 'NA', 'immune system', 'digestive system', 'central nervous system', 'NA', 'endocrine system', 'NA', 'excretory system', 'excretory system', 'digestive system', 'immune system', 'central nervous system', 'musculature', 'excretory system', 'immune system, skeletal system', 'skeletal system', 'sensory system', 'musculature', 'integumental system', 'central nervous system', 'digestive system', 'respiratory system', 'immune system', 'immune system', 'excretory system', 'respiratory system', 'respiratory system', 'immune system', 'digestive system', 'immune system', 'excretory system', 'integumental system', 'reproductive system', 'central nervous system', 'musculature', 'excretory system', 'endocrine system', 'immune system', 'circulatory system', 'digestive system', 'integumental system', 'excretory system', 'immune system', 'NA', 'central nervous system', 'immune system, digestive system', 'respiratory system', 'immune system, endocrine system', 'immune system', 'digestive system', 'reproductive system', 'immune system', 'endocrine system', 'endocrine system', 'musculature', 'musculature', 'immune system', 'circulatory system', 'central nervous system', 'reproductive system', 'NA', 'immune system', 'immune system', 'integumental system, reproductive system', 'digestive system', 'endocrine system', 'reproductive system', 'NA', 'reproductive system', 'immune system', 'circulatory system', 'immune system, skeletal system', 'circulatory system', 'integumental system, exocrine system', 'excretory system', 'musculature', 'NA', 'peripheral nervous system', 'excretory system', 'sensory system, digestive system', 'digestive system', 'excretory system', 'digestive system', 'excretory system', 'excretory system', 'integumental system', 'central nervous system', 'excretory system', 'circulatory system', 'immune system, endocrine system', 'digestive system', 'sensory system', 'digestive system', 'excretory system', 'musculature', 'central nervous system', 'exocrine system, integumental system', 'digestive system', 'excretory system', 'NA', 'digestive system', 'digestive system', 'reproductive system', 'respiratory system', 'circulatory system', 'skeletal system', 'central nervous system', 'NA', 'excretory system', 'digestive system', 'musculature, skeletal system', 'sensory system', 'NA', 'respiratory system', 'central nervous system', 'musculature', 'excretory system', 'central nervous system', 'immune system, endocrine system', 'immune system', 'musculature, circulatory system', 'immune system', 'NA', 'respiratory system', 'respiratory system', 'respiratory system', 'endocrine system', 'excretory system', 'immune system, digestive system', 'excretory system', 'circulatory system', 'reproductive system', 'NA', 'circulatory system', 'endocrine system', 'digestive system', 'central nervous system', 'respiratory system', 'digestive system', 'musculature', 'integumental system', 'endocrine system', 'endocrine system', 'musculature', 'excretory system', 'excretory system', 'digestive system', 'excretory system', 'excretory system', 'musculature', 'immune system, endocrine system', 'immune system', 'endocrine system', 'central nervous system', 'circulatory system', 'excretory system', 'excretory system', 'circulatory system', 'NA', 'immune system', 'excretory system', 'respiratory system', 'digestive system', 'digestive system', 'excretory system', 'central nervous system', 'respiratory system', 'musculature', 'NA', 'musculature', 'respiratory system', 'excretory system', 'digestive system', 'NA', 'musculature, digestive system', 'digestive system', 'circulatory system', 'central nervous system', 'central nervous system', 'respiratory system', 'musculature', 'musculature', 'excretory system', 'respiratory system', 'excretory system', 'immune system, digestive system', 'excretory system', 'reproductive system', 'reproductive system', 'respiratory system', 'immune system, endocrine system', 'central nervous system', 'NA', 'respiratory system', 'NA', 'digestive system', 'central nervous system', 'excretory system', 'skeletal system', 'reproductive system', 'digestive system', 'excretory system', 'respiratory system', 'central nervous system', 'excretory system, circulatory system', 'reproductive system', 'excretory system', 'circulatory system', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'exocrine system, integumental system', 'exocrine system, integumental system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'reproductive system, circulatory system', 'reproductive system, circulatory system', 'reproductive system, circulatory system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'reproductive system, circulatory system', 'reproductive system, circulatory system', 'integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'NA', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'musculature', 'musculature', 'musculature', 'musculature', 'musculature', 'musculature', 'musculature', 'musculature', 'NA', 'musculature', 'musculature', 'musculature', 'musculature', 'musculature', 'musculature', 'musculature', 'musculature', 'musculature', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'musculature', 'central nervous system', 'central nervous system', 'central nervous system', 'immune system', 'immune system', 'musculature', 'musculature', 'musculature', 'reproductive system', 'immune system', 'immune system', 'immune system', 'skeletal system', 'skeletal system', 'skeletal system', 'skeletal system', 'skeletal system', 'skeletal system', 'integumental system', 'integumental system', 'integumental system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'immune system', 'NA', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'NA', 'musculature', 'reproductive system', 'reproductive system', 'skeletal system', 'skeletal system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'musculature', 'endocrine system, exocrine system, digestive system', 'integumental system', 'integumental system', 'integumental system', 'respiratory system', 'respiratory system', 'respiratory system', 'central nervous system', 'central nervous system', 'immune system', 'immune system', 'exocrine system, integumental system', 'reproductive system, circulatory system', 'reproductive system, circulatory system', 'integumental system', 'respiratory system', 'skeletal system', 'respiratory system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'respiratory system', 'respiratory system', 'immune system', 'reproductive system, circulatory system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'skeletal system', 'musculature', 'immune system', 'NA', 'immune system', 'respiratory system', 'NA', 'NA', 'NA', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'immune system', 'NA', 'NA', 'immune system', 'immune system', 'immune system', 'immune system', 'NA', 'NA', 'NA', 'immune system', 'respiratory system', 'respiratory system', 'immune system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'immune system', 'NA', 'NA', 'NA', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'NA', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'respiratory system', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'reproductive system', 'reproductive system', 'NA', 'reproductive system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system', 'central nervous system', 'respiratory system', 'exocrine system, integumental system', 'respiratory system', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'NA', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system', 'reproductive system', 'immune system', 'NA', 'NA', 'immune system', 'immune system', 'exocrine system, integumental system', 'reproductive system', 'NA', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'exocrine system, integumental system', 'immune system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'central nervous system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'immune system', 'central nervous system', 'immune system', 'immune system', 'NA', 'digestive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'immune system', 'immune system', 'exocrine system, integumental system', 'immune system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'NA', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'immune system', 'NA', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'endocrine system', 'central nervous system', 'central nervous system', 'central nervous system', 'central nervous system', 'central nervous system', 'respiratory system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'central nervous system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'reproductive system, circulatory system', 'reproductive system, circulatory system', 'exocrine system, integumental system', 'reproductive system', 'central nervous system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'central nervous system', 'respiratory system', 'respiratory system', 'respiratory system', 'reproductive system', 'immune system', 'immune system', 'immune system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'immune system', 'immune system', 'immune system', 'immune system', 'respiratory system', 'respiratory system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'digestive system', 'digestive system', 'central nervous system', 'exocrine system, integumental system', 'immune system', 'immune system', 'immune system', 'central nervous system, peripheral nervous system', 'immune system', 'exocrine system, integumental system', 'immune system', 'immune system', 'immune system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'NA', 'NA', 'reproductive system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'central nervous system', 'respiratory system', 'integumental system', 'immune system, digestive system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'respiratory system', 'integumental system', 'integumental system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'integumental system', 'integumental system', 'digestive system', 'digestive system', 'integumental system', 'integumental system', 'circulatory system', 'circulatory system', 'central nervous system', 'central nervous system', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'digestive system', 'digestive system', 'digestive system', 'digestive system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'musculature, circulatory system', 'NA', 'musculature, circulatory system', 'NA', 'NA', 'musculature, circulatory system', 'musculature, circulatory system', 'NA', 'NA', 'musculature, circulatory system', 'NA', 'musculature, circulatory system', 'NA', 'NA', 'NA', 'central nervous system', 'central nervous system', 'central nervous system', 'central nervous system', 'circulatory system, central nervous system', 'circulatory system, central nervous system', 'circulatory system', 'circulatory system', 'circulatory system', 'musculature, circulatory system', 'musculature, circulatory system', 'circulatory system, central nervous system', 'circulatory system, central nervous system', 'digestive system', 'digestive system', 'digestive system', 'digestive system', 'excretory system', 'reproductive system', 'reproductive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'reproductive system, integumental system', 'reproductive system, integumental system', 'reproductive system', 'reproductive system', 'immune system', 'immune system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'circulatory system', 'circulatory system', 'respiratory system', 'respiratory system', 'excretory system', 'excretory system', 'excretory system', 'excretory system', 'sensory system', 'sensory system', 'reproductive system, circulatory system', 'reproductive system, circulatory system', 'reproductive system, circulatory system', 'reproductive system', 'reproductive system', 'immune system', 'immune system', 'immune system', 'immune system', 'reproductive system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'immune system', 'immune system', 'immune system, skeletal system', 'immune system, skeletal system', 'reproductive system, integumental system', 'reproductive system, integumental system', 'integumental system', 'integumental system', 'respiratory system', 'respiratory system', 'endocrine system', 'excretory system', 'excretory system', 'respiratory system', 'respiratory system', 'respiratory system', 'central nervous system', 'central nervous system', 'central nervous system', 'central nervous system', 'musculature', 'sensory system', 'sensory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'respiratory system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'central nervous system', 'central nervous system', 'central nervous system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'immune system', 'NA', 'NA', 'digestive system', 'digestive system', 'excretory system', 'excretory system', 'reproductive system, circulatory system', 'reproductive system, circulatory system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'reproductive system', 'endocrine system', 'endocrine system', 'endocrine system', 'endocrine system', 'circulatory system', 'circulatory system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system, skeletal system', 'immune system, skeletal system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'excretory system', 'excretory system', 'immune system', 'endocrine system', 'endocrine system', 'central nervous system', 'central nervous system', 'central nervous system', 'central nervous system', 'central nervous system, peripheral nervous system', 'respiratory system', 'excretory system', 'respiratory system', 'musculature, circulatory system', 'circulatory system', 'digestive system', 'musculature', 'respiratory system', 'digestive system', 'musculature, digestive system', 'NA', 'digestive system', 'immune system', 'excretory system', 'respiratory system', 'NA', 'digestive system', 'immune system', 'immune system', 'immune system, digestive system', 'immune system', 'NA', 'excretory system', 'NA', 'exocrine system, integumental system', 'immune system', 'integumental system', 'endocrine system, exocrine system, digestive system', 'immune system', 'excretory system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'immune system, skeletal system', 'digestive system', 'central nervous system', 'integumental system', 'immune system', 'immune system', 'immune system', 'excretory system', 'immune system', 'immune system', 'NA', 'reproductive system, integumental system', 'endocrine system', 'immune system', 'central nervous system', 'immune system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'immune system', 'central nervous system', 'exocrine system, integumental system', 'immune system', 'excretory system', 'immune system', 'exocrine system, integumental system', 'immune system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'NA', 'excretory system', 'reproductive system, integumental system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'immune system', 'central nervous system', 'excretory system', 'central nervous system', 'circulatory system', 'musculature', 'immune system', 'digestive system', 'immune system', 'musculature, digestive system', 'integumental system', 'reproductive system, integumental system', 'respiratory system', 'immune system', 'reproductive system', 'excretory system', 'central nervous system', 'exocrine system, integumental system', 'circulatory system', 'reproductive system', 'immune system', 'immune system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'endocrine system', 'immune system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'integumental system', 'digestive system', 'respiratory system', 'immune system', 'endocrine system', 'immune system', 'endocrine system, exocrine system, digestive system', 'integumental system', 'endocrine system', 'digestive system', 'NA', 'NA', 'NA', 'NA', 'musculature, digestive system', 'central nervous system', 'immune system', 'NA', 'NA', 'reproductive system', 'immune system', 'integumental system', 'endocrine system, exocrine system, digestive system', 'immune system', 'respiratory system', 'NA', 'immune system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'digestive system', 'central nervous system', 'respiratory system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'excretory system', 'central nervous system', 'central nervous system', 'digestive system', 'exocrine system, integumental system', 'immune system', 'immune system', 'excretory system', 'NA', 'central nervous system, peripheral nervous system', 'immune system', 'integumental system', 'digestive system', 'reproductive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'NA', 'immune system', 'NA', 'digestive system', 'reproductive system', 'NA', 'immune system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'immune system', 'endocrine system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'respiratory system', 'digestive system', 'digestive system', 'NA', 'respiratory system', 'exocrine system, integumental system', 'digestive system', 'NA', 'immune system', 'exocrine system, integumental system', 'central nervous system', 'digestive system', 'digestive system', 'central nervous system', 'immune system', 'immune system', 'exocrine system, digestive system', 'immune system', 'immune system', 'integumental system', 'endocrine system', 'digestive system', 'exocrine system, integumental system', 'NA', 'endocrine system', 'respiratory system', 'central nervous system', 'NA', 'excretory system', 'excretory system', 'immune system', 'circulatory system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'reproductive system', 'exocrine system, integumental system', 'respiratory system', 'reproductive system, integumental system', 'respiratory system', 'circulatory system', 'immune system', 'respiratory system', 'central nervous system', 'digestive system', 'central nervous system', 'circulatory system', 'central nervous system', 'excretory system', 'musculature', 'endocrine system, exocrine system, digestive system', 'immune system, skeletal system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'immune system', 'immune system', 'immune system', 'digestive system', 'circulatory system', 'reproductive system', 'musculature, digestive system', 'central nervous system', 'excretory system', 'immune system', 'immune system', 'reproductive system, integumental system', 'digestive system', 'circulatory system', 'excretory system', 'immune system, skeletal system', 'excretory system', 'central nervous system', 'excretory system', 'immune system', 'immune system', 'immune system', 'immune system, digestive system', 'digestive system', 'immune system', 'reproductive system, integumental system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system, skeletal system', 'NA', 'digestive system', 'circulatory system', 'digestive system', 'central nervous system', 'musculature, digestive system', 'immune system', 'immune system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'immune system', 'endocrine system', 'immune system', 'circulatory system', 'immune system, digestive system', 'immune system', 'musculature', 'endocrine system, exocrine system, digestive system', 'respiratory system', 'digestive system', 'immune system', 'musculature, digestive system', 'NA', 'exocrine system, integumental system', 'reproductive system, integumental system', 'immune system', 'musculature', 'excretory system', 'immune system', 'musculature, digestive system', 'immune system', 'immune system', 'digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'excretory system', 'digestive system', 'central nervous system', 'immune system', 'endocrine system', 'excretory system', 'exocrine system, integumental system', 'musculature, digestive system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'integumental system', 'exocrine system, integumental system', 'excretory system', 'musculature, digestive system', 'NA', 'reproductive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'excretory system', 'immune system', 'musculature', 'NA', 'excretory system', 'reproductive system, integumental system', 'central nervous system', 'immune system', 'respiratory system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'musculature', 'digestive system', 'immune system', 'excretory system', 'immune system', 'central nervous system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'musculature', 'NA', 'immune system', 'central nervous system', 'immune system, digestive system', 'musculature', 'excretory system', 'immune system', 'endocrine system', 'digestive system', 'immune system', 'circulatory system', 'immune system', 'reproductive system, integumental system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'exocrine system, integumental system', 'circulatory system', 'immune system', 'integumental system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'endocrine system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'reproductive system', 'central nervous system', 'immune system', 'central nervous system', 'exocrine system, integumental system', 'central nervous system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'reproductive system, integumental system', 'immune system', 'endocrine system, exocrine system, digestive system', 'NA', 'immune system', 'immune system, digestive system', 'NA', 'exocrine system, integumental system', 'musculature, digestive system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'reproductive system', 'central nervous system', 'immune system', 'digestive system', 'digestive system', 'reproductive system, integumental system', 'reproductive system', 'circulatory system', 'central nervous system', 'central nervous system', 'respiratory system', 'immune system', 'respiratory system', 'integumental system', 'central nervous system, peripheral nervous system', 'endocrine system, exocrine system, digestive system', 'immune system', 'excretory system', 'central nervous system', 'central nervous system', 'excretory system', 'exocrine system, integumental system', 'NA', 'central nervous system', 'immune system', 'exocrine system, integumental system', 'central nervous system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'musculature', 'circulatory system', 'digestive system', 'NA', 'immune system', 'musculature', 'immune system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'integumental system', 'digestive system', 'digestive system', 'reproductive system', 'exocrine system, integumental system', 'excretory system', 'exocrine system, integumental system', 'NA', 'immune system', 'NA', 'NA', 'NA', 'immune system', 'immune system', 'immune system', 'excretory system', 'immune system', 'immune system', 'central nervous system', 'reproductive system', 'reproductive system', 'excretory system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'reproductive system', 'immune system', 'immune system', 'central nervous system', 'musculature', 'reproductive system', 'NA', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'musculature, digestive system', 'digestive system', 'musculature', 'integumental system', 'central nervous system', 'excretory system', 'excretory system', 'reproductive system', 'digestive system', 'integumental system', 'musculature', 'digestive system', 'immune system', 'digestive system', 'central nervous system', 'musculature', 'circulatory system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'central nervous system', 'integumental system', 'respiratory system', 'integumental system', 'NA', 'immune system', 'peripheral nervous system', 'integumental system', 'immune system', 'exocrine system, integumental system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'digestive system', 'immune system', 'peripheral nervous system', 'immune system', 'reproductive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'immune system', 'exocrine system, integumental system', 'immune system', 'NA', 'immune system, digestive system', 'musculature', 'digestive system', 'NA', 'immune system', 'immune system', 'immune system', 'immune system', 'NA', 'immune system', 'excretory system', 'respiratory system', 'immune system', 'immune system', 'digestive system', 'integumental system', 'circulatory system', 'immune system', 'immune system', 'immune system', 'excretory system', 'immune system', 'musculature, digestive system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'immune system', 'digestive system', 'digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'NA', 'reproductive system, integumental system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'reproductive system, integumental system', 'immune system', 'integumental system', 'immune system', 'circulatory system', 'exocrine system, integumental system', 'central nervous system', 'immune system', 'digestive system', 'NA', 'integumental system', 'exocrine system, integumental system', 'circulatory system', 'digestive system', 'musculature, digestive system', 'immune system', 'endocrine system', 'exocrine system, integumental system', 'immune system', 'immune system', 'immune system', 'immune system', 'excretory system', 'digestive system', 'immune system', 'digestive system', 'musculature', 'respiratory system', 'central nervous system', 'endocrine system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'immune system', 'musculature', 'reproductive system', 'immune system, skeletal system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'excretory system', 'immune system', 'musculature, digestive system', 'NA', 'NA', 'NA', 'immune system, skeletal system', 'immune system', 'endocrine system', 'immune system', 'immune system', 'musculature', 'immune system', 'immune system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'musculature', 'excretory system', 'immune system', 'excretory system', 'reproductive system', 'NA', 'reproductive system', 'central nervous system', 'immune system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'immune system', 'NA', 'circulatory system', 'immune system', 'exocrine system, integumental system', 'immune system, digestive system', 'reproductive system', 'respiratory system', 'exocrine system, integumental system', 'NA', 'immune system', 'central nervous system, peripheral nervous system', 'immune system', 'integumental system', 'immune system', 'exocrine system, integumental system', 'NA', 'immune system', 'digestive system', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system', 'musculature', 'digestive system', 'circulatory system', 'reproductive system', 'digestive system', 'immune system', 'endocrine system', 'reproductive system', 'endocrine system', 'endocrine system, exocrine system, digestive system', 'endocrine system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'immune system', 'musculature, digestive system', 'immune system', 'musculature', 'exocrine system, integumental system', 'immune system', 'endocrine system', 'digestive system', 'respiratory system', 'central nervous system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'respiratory system', 'musculature', 'endocrine system, exocrine system, digestive system', 'excretory system', 'immune system', 'excretory system', 'exocrine system, integumental system', 'immune system', 'integumental system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'digestive system', 'NA', 'immune system', 'integumental system', 'immune system', 'integumental system', 'NA', 'NA', 'musculature, digestive system', 'excretory system', 'musculature, digestive system', 'excretory system', 'excretory system', 'endocrine system', 'excretory system', 'immune system', 'immune system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'reproductive system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'NA', 'immune system', 'immune system', 'digestive system', 'immune system', 'immune system', 'excretory system', 'NA', 'immune system', 'excretory system', 'excretory system', 'NA', 'endocrine system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'digestive system', 'excretory system', 'digestive system', 'excretory system', 'musculature, digestive system', 'immune system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'immune system', 'circulatory system', 'NA', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'immune system', 'exocrine system, integumental system', 'excretory system', 'circulatory system', 'excretory system', 'immune system, digestive system', 'exocrine system, integumental system', 'endocrine system', 'integumental system', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'immune system', 'integumental system', 'digestive system', 'integumental system', 'NA', 'digestive system', 'excretory system', 'immune system', 'musculature', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'immune system', 'immune system', 'integumental system', 'digestive system', 'excretory system', 'respiratory system', 'NA', 'immune system', 'exocrine system, integumental system', 'excretory system', 'immune system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'integumental system', 'NA', 'immune system', 'digestive system', 'musculature', 'digestive system', 'digestive system', 'immune system', 'digestive system', 'reproductive system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'respiratory system', 'circulatory system', 'reproductive system', 'immune system', 'reproductive system', 'endocrine system', 'immune system, digestive system', 'integumental system', 'musculature', 'NA', 'immune system', 'endocrine system, exocrine system, digestive system', 'integumental system', 'excretory system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'central nervous system', 'immune system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'endocrine system', 'central nervous system', 'digestive system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'central nervous system', 'NA', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'musculature', 'central nervous system', 'NA', 'NA', 'central nervous system', 'immune system', 'reproductive system, integumental system', 'integumental system', 'immune system', 'digestive system', 'immune system', 'integumental system', 'central nervous system', 'reproductive system', 'NA', 'NA', 'exocrine system, integumental system', 'endocrine system', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'reproductive system, integumental system', 'immune system', 'reproductive system', 'immune system', 'digestive system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'musculature, circulatory system', 'integumental system', 'digestive system', 'NA', 'musculature, digestive system', 'immune system', 'NA', 'reproductive system', 'digestive system', 'excretory system', 'central nervous system', 'central nervous system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'digestive system', 'reproductive system', 'digestive system', 'NA', 'musculature, circulatory system', 'integumental system', 'immune system', 'exocrine system, integumental system', 'immune system', 'central nervous system', 'respiratory system', 'musculature', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'exocrine system, integumental system', 'immune system', 'excretory system', 'reproductive system', 'digestive system', 'NA', 'circulatory system', 'NA', 'excretory system', 'excretory system', 'respiratory system', 'immune system', 'immune system', 'musculature, digestive system', 'reproductive system, integumental system', 'immune system', 'central nervous system', 'integumental system', 'digestive system', 'central nervous system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'immune system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'central nervous system', 'immune system', 'respiratory system', 'excretory system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'endocrine system', 'immune system', 'central nervous system', 'integumental system', 'immune system', 'exocrine system, integumental system', 'digestive system', 'respiratory system', 'integumental system', 'NA', 'excretory system', 'excretory system', 'integumental system', 'immune system', 'NA', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'digestive system', 'immune system', 'endocrine system, immune system', 'excretory system', 'NA', 'integumental system', 'central nervous system', 'NA', 'musculature', 'immune system', 'reproductive system', 'endocrine system, immune system', 'central nervous system', 'excretory system', 'NA', 'NA', 'digestive system', 'immune system', 'digestive system', 'excretory system', 'immune system', 'reproductive system, integumental system', 'NA', 'endocrine system, immune system', 'exocrine system, integumental system', 'endocrine system, exocrine system, digestive system', 'exocrine system, digestive system', 'immune system', 'central nervous system', 'NA', 'musculature', 'reproductive system', 'digestive system', 'central nervous system', 'integumental system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'peripheral nervous system', 'central nervous system, peripheral nervous system', 'NA', 'endocrine system, exocrine system, digestive system', 'NA', 'reproductive system', 'immune system', 'immune system', 'NA', 'excretory system', 'immune system', 'integumental system', 'circulatory system', 'exocrine system, integumental system', 'central nervous system', 'reproductive system', 'respiratory system', 'central nervous system', 'excretory system', 'digestive system', 'respiratory system', 'immune system', 'digestive system', 'digestive system', 'NA', 'circulatory system', 'central nervous system', 'reproductive system', 'endocrine system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'NA', 'NA', 'immune system', 'immune system', 'circulatory system', 'NA', 'NA', 'immune system, skeletal system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'integumental system', 'digestive system', 'digestive system', 'excretory system', 'musculature', 'musculature', 'exocrine system, integumental system', 'immune system', 'digestive system', 'immune system', 'immune system', 'excretory system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'NA', 'digestive system', 'immune system', 'endocrine system', 'immune system', 'endocrine system, exocrine system, digestive system', 'NA', 'endocrine system', 'immune system', 'endocrine system', 'digestive system', 'circulatory system', 'immune system', 'exocrine system, integumental system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'immune system, skeletal system', 'endocrine system, exocrine system, digestive system', 'musculature, digestive system', 'musculature, digestive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'digestive system', 'immune system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'circulatory system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'musculature', 'reproductive system, integumental system', 'musculature, digestive system', 'integumental system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'NA', 'reproductive system, integumental system', 'musculature', 'NA', 'immune system', 'exocrine system, integumental system', 'excretory system', 'NA', 'immune system', 'central nervous system', 'immune system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'immune system', 'immune system', 'NA', 'endocrine system, exocrine system, digestive system', 'excretory system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'integumental system', 'musculature, digestive system', 'immune system', 'reproductive system', 'digestive system', 'NA', 'central nervous system', 'immune system', 'central nervous system', 'NA', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'NA', 'NA', 'excretory system', 'digestive system', 'central nervous system', 'circulatory system', 'central nervous system', 'reproductive system', 'immune system', 'musculature, digestive system', 'immune system', 'exocrine system, integumental system', 'immune system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'integumental system', 'excretory system', 'NA', 'NA', 'immune system', 'excretory system', 'exocrine system, integumental system', 'excretory system', 'excretory system', 'central nervous system', 'reproductive system, integumental system', 'NA', 'musculature, digestive system', 'NA', 'musculature', 'circulatory system', 'digestive system', 'immune system', 'immune system', 'integumental system', 'endocrine system, exocrine system, digestive system', 'endocrine system', 'immune system', 'endocrine system', 'NA', 'excretory system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'endocrine system', 'immune system', 'central nervous system', 'exocrine system, integumental system', 'digestive system', 'central nervous system', 'immune system, digestive system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'immune system', 'immune system', 'reproductive system, integumental system', 'circulatory system', 'central nervous system', 'reproductive system, integumental system', 'integumental system', 'excretory system', 'central nervous system', 'musculature', 'central nervous system', 'digestive system', 'excretory system', 'endocrine system, immune system', 'immune system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'exocrine system, integumental system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'respiratory system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'digestive system', 'central nervous system', 'integumental system', 'NA', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'immune system', 'exocrine system, integumental system', 'immune system', 'reproductive system', 'immune system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'reproductive system', 'central nervous system', 'immune system, digestive system', 'reproductive system', 'NA', 'central nervous system', 'immune system', 'musculature', 'immune system', 'NA', 'immune system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'reproductive system', 'central nervous system, peripheral nervous system', 'integumental system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'NA', 'immune system', 'reproductive system', 'central nervous system', 'NA', 'immune system', 'exocrine system, integumental system', 'respiratory system', 'immune system', 'NA', 'NA', 'digestive system', 'central nervous system, peripheral nervous system', 'immune system', 'immune system', 'reproductive system', 'NA', 'endocrine system', 'digestive system', 'central nervous system, peripheral nervous system', 'central nervous system', 'endocrine system', 'endocrine system, immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system, digestive system', 'NA', 'endocrine system', 'central nervous system', 'immune system', 'NA', 'NA', 'musculature', 'immune system', 'immune system', 'immune system', 'endocrine system', 'immune system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'respiratory system', 'musculature', 'musculature, digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'circulatory system', 'immune system', 'exocrine system, integumental system', 'reproductive system, integumental system', 'digestive system', 'excretory system', 'central nervous system', 'central nervous system', 'excretory system', 'excretory system', 'NA', 'immune system, digestive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'immune system', 'reproductive system', 'immune system, digestive system', 'digestive system', 'excretory system', 'immune system, skeletal system', 'immune system', 'central nervous system', 'reproductive system', 'immune system', 'musculature', 'exocrine system, integumental system', 'central nervous system', 'immune system', 'respiratory system', 'endocrine system', 'NA', 'central nervous system', 'immune system', 'immune system', 'NA', 'exocrine system, integumental system', 'NA', 'musculature', 'digestive system', 'musculature', 'digestive system', 'respiratory system', 'immune system', 'immune system', 'NA', 'immune system', 'integumental system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'integumental system', 'immune system', 'skeletal system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'exocrine system, integumental system', 'respiratory system', 'immune system', 'endocrine system', 'immune system, digestive system', 'NA', 'NA', 'NA', 'immune system', 'circulatory system', 'digestive system', 'endocrine system', 'peripheral nervous system', 'musculature', 'exocrine system, integumental system', 'immune system', 'immune system', 'immune system', 'respiratory system', 'digestive system', 'digestive system', 'immune system', 'NA', 'immune system', 'circulatory system', 'excretory system', 'central nervous system', 'NA', 'immune system', 'immune system', 'NA', 'excretory system', 'immune system', 'respiratory system', 'NA', 'immune system', 'NA', 'excretory system', 'NA', 'immune system', 'circulatory system', 'immune system', 'reproductive system', 'NA', 'circulatory system', 'exocrine system, integumental system', 'endocrine system, exocrine system, digestive system', 'musculature, digestive system', 'excretory system', 'central nervous system', 'immune system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'respiratory system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'immune system', 'NA', 'digestive system', 'digestive system', 'immune system', 'excretory system', 'immune system, digestive system', 'central nervous system', 'NA', 'immune system', 'central nervous system', 'immune system, skeletal system', 'musculature', 'NA', 'NA', 'immune system', 'excretory system', 'exocrine system, integumental system', 'endocrine system', 'digestive system', 'excretory system', 'reproductive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'central nervous system', 'musculature', 'digestive system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'endocrine system', 'respiratory system', 'immune system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'excretory system', 'reproductive system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'exocrine system, integumental system', 'reproductive system', 'immune system', 'excretory system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'immune system', 'integumental system', 'immune system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'immune system, digestive system', 'respiratory system', 'excretory system', 'immune system', 'integumental system', 'excretory system', 'exocrine system, integumental system', 'peripheral nervous system', 'respiratory system', 'immune system', 'NA', 'central nervous system', 'digestive system', 'NA', 'NA', 'respiratory system', 'immune system', 'reproductive system', 'immune system', 'digestive system', 'skeletal system', 'musculature, digestive system', 'exocrine system, digestive system', 'exocrine system, integumental system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'NA', 'central nervous system', 'excretory system', 'digestive system', 'reproductive system', 'central nervous system', 'central nervous system', 'peripheral nervous system', 'integumental system', 'immune system', 'endocrine system, immune system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'reproductive system', 'excretory system', 'endocrine system', 'reproductive system', 'reproductive system', 'respiratory system', 'excretory system', 'NA', 'immune system, digestive system', 'immune system', 'immune system', 'excretory system', 'NA', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'endocrine system', 'digestive system', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'endocrine system', 'central nervous system', 'immune system', 'NA', 'NA', 'central nervous system', 'central nervous system, peripheral nervous system', 'exocrine system, integumental system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'digestive system', 'immune system', 'immune system, digestive system', 'NA', 'immune system', 'integumental system', 'NA', 'respiratory system', 'endocrine system', 'immune system', 'endocrine system', 'endocrine system', 'reproductive system', 'musculature', 'exocrine system, integumental system', 'immune system', 'central nervous system', 'central nervous system', 'central nervous system', 'immune system', 'immune system', 'reproductive system', 'immune system', 'reproductive system', 'NA', 'NA', 'excretory system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'immune system', 'reproductive system, integumental system', 'reproductive system', 'NA', 'reproductive system', 'NA', 'skeletal system', 'integumental system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'immune system', 'integumental system', 'NA', 'NA', 'excretory system', 'endocrine system, exocrine system, digestive system', 'NA', 'excretory system', 'exocrine system, integumental system', 'immune system', 'excretory system', 'digestive system', 'musculature', 'exocrine system, integumental system', 'circulatory system', 'digestive system', 'excretory system', 'integumental system', 'exocrine system, integumental system', 'reproductive system, integumental system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'exocrine system, integumental system', 'immune system', 'NA', 'musculature, digestive system', 'central nervous system, peripheral nervous system', 'endocrine system', 'immune system', 'reproductive system, integumental system', 'central nervous system', 'reproductive system', 'immune system', 'respiratory system', 'excretory system', 'digestive system', 'respiratory system', 'respiratory system', 'musculature', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'integumental system', 'musculature', 'endocrine system, exocrine system, digestive system', 'NA', 'excretory system', 'exocrine system, integumental system', 'excretory system', 'NA', 'immune system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'musculature', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system, skeletal system', 'skeletal system', 'exocrine system, integumental system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'musculature', 'excretory system', 'immune system', 'respiratory system', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'musculature', 'endocrine system, exocrine system, digestive system', 'NA', 'reproductive system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'NA', 'exocrine system, integumental system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'immune system', 'central nervous system, peripheral nervous system', 'endocrine system, exocrine system, digestive system', 'immune system', 'musculature, digestive system', 'immune system', 'excretory system', 'NA', 'excretory system', 'integumental system', 'excretory system', 'central nervous system', 'immune system, skeletal system', 'digestive system', 'immune system', 'excretory system', 'skeletal system', 'respiratory system', 'musculature', 'central nervous system', 'respiratory system', 'respiratory system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'circulatory system', 'integumental system', 'immune system', 'excretory system', 'NA', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'immune system', 'exocrine system, integumental system', 'immune system', 'immune system', 'excretory system', 'reproductive system', 'circulatory system', 'immune system, skeletal system', 'immune system', 'digestive system', 'NA', 'immune system', 'respiratory system', 'respiratory system', 'central nervous system', 'excretory system', 'excretory system', 'musculature, digestive system', 'central nervous system', 'exocrine system, integumental system', 'digestive system', 'immune system', 'central nervous system', 'immune system', 'immune system', 'NA', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'NA', 'exocrine system, integumental system', 'digestive system', 'exocrine system, integumental system', 'NA', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'immune system', 'immune system', 'endocrine system', 'digestive system', 'excretory system', 'integumental system', 'reproductive system, integumental system', 'central nervous system', 'immune system, skeletal system', 'excretory system', 'musculature, digestive system', 'integumental system', 'exocrine system, integumental system', 'musculature', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system', 'reproductive system', 'digestive system', 'immune system, skeletal system', 'integumental system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'respiratory system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'NA', 'central nervous system', 'digestive system', 'immune system', 'excretory system', 'immune system', 'NA', 'reproductive system', 'integumental system', 'reproductive system', 'respiratory system', 'immune system', 'excretory system', 'integumental system', 'central nervous system', 'central nervous system', 'immune system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'peripheral nervous system', 'exocrine system, integumental system', 'immune system', 'central nervous system', 'immune system', 'reproductive system', 'NA', 'endocrine system, exocrine system, digestive system', 'NA', 'central nervous system', 'exocrine system, integumental system', 'digestive system', 'reproductive system', 'immune system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'respiratory system', 'NA', 'immune system, digestive system', 'digestive system', 'central nervous system', 'digestive system', 'immune system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'musculature, digestive system', 'reproductive system, circulatory system', 'immune system', 'reproductive system', 'respiratory system', 'NA', 'immune system', 'respiratory system', 'immune system', 'peripheral nervous system', 'immune system', 'immune system, skeletal system', 'musculature', 'endocrine system', 'integumental system', 'integumental system', 'endocrine system', 'digestive system', 'exocrine system, integumental system', 'immune system', 'NA', 'immune system, skeletal system', 'respiratory system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'immune system', 'endocrine system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'integumental system', 'exocrine system, integumental system', 'musculature', 'digestive system', 'central nervous system', 'central nervous system', 'central nervous system', 'NA', 'excretory system', 'circulatory system', 'NA', 'immune system', 'immune system', 'excretory system', 'NA', 'NA', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'musculature', 'NA', 'endocrine system', 'exocrine system, integumental system', 'immune system, skeletal system', 'reproductive system', 'immune system', 'integumental system', 'immune system', 'immune system', 'NA', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'excretory system', 'immune system', 'central nervous system', 'immune system, skeletal system', 'NA', 'endocrine system, exocrine system, digestive system', 'excretory system', 'excretory system', 'integumental system', 'immune system', 'endocrine system', 'immune system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'reproductive system', 'musculature, digestive system', 'immune system, digestive system', 'immune system', 'central nervous system, peripheral nervous system', 'digestive system', 'central nervous system', 'immune system', 'NA', 'immune system', 'integumental system', 'reproductive system', 'musculature', 'reproductive system', 'peripheral nervous system', 'NA', 'NA', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'central nervous system', 'NA', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'reproductive system', 'respiratory system', 'immune system', 'respiratory system', 'digestive system', 'endocrine system', 'immune system', 'central nervous system', 'excretory system', 'reproductive system', 'excretory system', 'integumental system', 'immune system', 'exocrine system, integumental system', 'endocrine system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system, digestive system', 'reproductive system, integumental system', 'circulatory system', 'immune system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'reproductive system, integumental system', 'endocrine system, exocrine system, digestive system', 'immune system', 'central nervous system', 'immune system', 'central nervous system', 'immune system', 'immune system', 'digestive system', 'reproductive system', 'central nervous system', 'immune system, skeletal system', 'immune system', 'immune system', 'immune system', 'NA', 'excretory system', 'immune system', 'excretory system', 'integumental system', 'immune system', 'excretory system', 'immune system', 'immune system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'NA', 'NA', 'immune system, skeletal system', 'reproductive system', 'immune system', 'immune system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'respiratory system', 'exocrine system, integumental system', 'exocrine system, integumental system', 'digestive system', 'immune system', 'respiratory system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system, skeletal system', 'central nervous system', 'immune system', 'respiratory system', 'respiratory system', 'immune system', 'endocrine system, exocrine system, digestive system', 'endocrine system', 'exocrine system, integumental system', 'digestive system', 'digestive system', 'immune system', 'digestive system', 'endocrine system', 'endocrine system, exocrine system, digestive system', 'immune system', 'digestive system', 'reproductive system', 'excretory system', 'immune system', 'central nervous system', 'circulatory system', 'reproductive system', 'digestive system', 'endocrine system, immune system', 'digestive system', 'reproductive system', 'immune system', 'immune system', 'reproductive system', 'endocrine system', 'musculature', 'central nervous system', 'musculature, circulatory system', 'immune system', 'endocrine system, exocrine system, digestive system', 'central nervous system, peripheral nervous system', 'reproductive system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'NA', 'endocrine system, exocrine system, digestive system', 'musculature, digestive system', 'integumental system', 'immune system', 'immune system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'endocrine system', 'immune system', 'reproductive system', 'respiratory system', 'reproductive system', 'digestive system', 'immune system, digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'reproductive system', 'immune system', 'excretory system', 'central nervous system', 'digestive system', 'central nervous system', 'NA', 'musculature, digestive system', 'endocrine system, exocrine system, digestive system', 'NA', 'NA', 'exocrine system, integumental system', 'immune system', 'NA', 'respiratory system', 'integumental system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'reproductive system, integumental system', 'musculature', 'digestive system', 'circulatory system', 'exocrine system, integumental system', 'excretory system', 'immune system', 'musculature', 'excretory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'immune system', 'reproductive system', 'respiratory system', 'central nervous system', 'central nervous system', 'musculature', 'respiratory system', 'circulatory system', 'integumental system', 'excretory system', 'reproductive system', 'reproductive system', 'respiratory system', 'immune system', 'immune system', 'immune system', 'NA', 'immune system', 'circulatory system', 'excretory system', 'circulatory system', 'NA', 'NA', 'musculature, digestive system', 'central nervous system', 'immune system, skeletal system', 'endocrine system, exocrine system, digestive system', 'immune system', 'reproductive system, integumental system', 'central nervous system', 'excretory system', 'digestive system', 'excretory system', 'reproductive system', 'immune system', 'reproductive system, integumental system', 'immune system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'immune system', 'digestive system', 'immune system', 'musculature', 'exocrine system, integumental system', 'central nervous system', 'central nervous system, peripheral nervous system', 'endocrine system', 'NA', 'endocrine system, exocrine system, digestive system', 'NA', 'excretory system', 'NA', 'immune system', 'central nervous system', 'central nervous system', 'immune system, digestive system', 'immune system', 'central nervous system', 'excretory system', 'central nervous system', 'immune system', 'immune system, skeletal system', 'excretory system', 'immune system', 'immune system, digestive system', 'musculature, digestive system', 'central nervous system', 'reproductive system', 'immune system', 'central nervous system', 'central nervous system', 'digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'digestive system', 'musculature', 'NA', 'immune system', 'digestive system', 'immune system', 'circulatory system', 'endocrine system', 'immune system', 'exocrine system, integumental system', 'circulatory system', 'musculature', 'integumental system', 'exocrine system, integumental system', 'NA', 'excretory system', 'immune system, skeletal system', 'exocrine system, integumental system', 'respiratory system', 'immune system', 'integumental system', 'reproductive system, integumental system', 'immune system', 'NA', 'exocrine system, integumental system', 'reproductive system, integumental system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'excretory system', 'respiratory system', 'immune system', 'respiratory system', 'immune system', 'circulatory system', 'excretory system', 'reproductive system', 'immune system', 'reproductive system', 'immune system', 'immune system', 'immune system', 'excretory system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'central nervous system', 'immune system', 'respiratory system', 'musculature, circulatory system', 'digestive system', 'digestive system', 'digestive system', 'central nervous system, peripheral nervous system', 'immune system', 'excretory system', 'excretory system', 'musculature', 'musculature', 'endocrine system, exocrine system, digestive system', 'immune system', 'endocrine system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'endocrine system', 'immune system', 'excretory system', 'NA', 'central nervous system', 'central nervous system', 'reproductive system', 'reproductive system', 'immune system', 'NA', 'immune system', 'NA', 'immune system', 'musculature', 'reproductive system', 'central nervous system', 'digestive system', 'NA', 'excretory system', 'circulatory system', 'digestive system', 'immune system', 'immune system', 'central nervous system', 'exocrine system, integumental system', 'immune system', 'immune system, digestive system', 'respiratory system', 'central nervous system', 'exocrine system, digestive system', 'integumental system', 'excretory system', 'central nervous system', 'respiratory system', 'respiratory system', 'NA', 'excretory system', 'NA', 'integumental system', 'integumental system', 'immune system, digestive system', 'immune system', 'exocrine system, integumental system', 'NA', 'NA', 'endocrine system, exocrine system, digestive system', 'excretory system', 'digestive system', 'immune system', 'immune system', 'integumental system', 'central nervous system', 'immune system', 'immune system', 'immune system', 'NA', 'NA', 'NA', 'digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system', 'musculature', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'central nervous system', 'excretory system', 'immune system', 'digestive system', 'immune system', 'NA', 'endocrine system, immune system', 'excretory system', 'respiratory system', 'NA', 'immune system', 'integumental system', 'immune system', 'NA', 'central nervous system', 'exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'digestive system', 'integumental system', 'musculature, digestive system', 'immune system', 'endocrine system', 'endocrine system, exocrine system, digestive system', 'NA', 'NA', 'digestive system', 'immune system', 'reproductive system', 'musculature', 'NA', 'NA', 'immune system', 'endocrine system', 'reproductive system', 'NA', 'digestive system', 'digestive system', 'immune system', 'immune system', 'immune system', 'digestive system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'excretory system', 'NA', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'NA', 'immune system', 'integumental system', 'digestive system', 'digestive system', 'immune system, skeletal system', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'NA', 'endocrine system', 'excretory system', 'immune system', 'immune system', 'musculature, digestive system', 'exocrine system, integumental system', 'excretory system', 'exocrine system, integumental system', 'digestive system', 'endocrine system', 'excretory system', 'integumental system', 'endocrine system, immune system', 'reproductive system', 'immune system', 'reproductive system', 'immune system', 'central nervous system', 'immune system', 'endocrine system, exocrine system, digestive system', 'central nervous system', 'musculature', 'reproductive system', 'NA', 'excretory system', 'central nervous system', 'NA', 'excretory system', 'excretory system', 'immune system', 'excretory system', 'respiratory system', 'NA', 'excretory system', 'immune system', 'digestive system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'endocrine system', 'excretory system', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system', 'peripheral nervous system', 'immune system', 'digestive system', 'integumental system', 'excretory system', 'digestive system', 'NA', 'immune system', 'musculature', 'NA', 'excretory system', 'digestive system', 'digestive system', 'immune system', 'musculature', 'endocrine system, immune system', 'excretory system', 'excretory system', 'reproductive system', 'immune system', 'excretory system', 'excretory system', 'immune system', 'exocrine system, digestive system', 'immune system, skeletal system', 'NA', 'immune system', 'excretory system', 'central nervous system', 'endocrine system', 'excretory system', 'central nervous system', 'reproductive system, integumental system', 'immune system', 'digestive system', 'immune system', 'musculature', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'musculature', 'immune system', 'exocrine system, integumental system', 'immune system', 'reproductive system', 'reproductive system, integumental system', 'NA', 'immune system', 'NA', 'immune system', 'immune system', 'reproductive system', 'immune system', 'exocrine system, integumental system', 'excretory system', 'immune system, skeletal system', 'skeletal system', 'integumental system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'circulatory system', 'central nervous system', 'musculature', 'circulatory system', 'digestive system', 'immune system', 'NA', 'digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'integumental system', 'immune system', 'circulatory system', 'respiratory system', 'digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'immune system', 'immune system', 'central nervous system', 'immune system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'reproductive system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'immune system', 'central nervous system', 'digestive system', 'immune system, digestive system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'musculature', 'immune system', 'exocrine system, integumental system', 'immune system', 'reproductive system', 'excretory system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'NA', 'immune system', 'central nervous system', 'respiratory system', 'digestive system', 'skeletal system', 'immune system', 'excretory system', 'exocrine system, integumental system', 'immune system', 'endocrine system, exocrine system, digestive system', 'NA', 'digestive system', 'immune system', 'exocrine system, integumental system', 'excretory system', 'central nervous system', 'digestive system', 'reproductive system, integumental system', 'immune system', 'respiratory system', 'exocrine system, integumental system', 'digestive system', 'immune system', 'NA', 'central nervous system, peripheral nervous system', 'NA', 'NA', 'NA', 'immune system', 'central nervous system', 'immune system', 'central nervous system, peripheral nervous system', 'immune system', 'endocrine system', 'immune system', 'immune system', 'immune system', 'musculature', 'immune system', 'central nervous system', 'immune system', 'central nervous system', 'central nervous system', 'immune system', 'immune system', 'central nervous system, peripheral nervous system', 'immune system', 'peripheral nervous system', 'reproductive system, integumental system', 'endocrine system, exocrine system, digestive system', 'NA', 'digestive system', 'musculature', 'immune system', 'NA', 'endocrine system, exocrine system, digestive system', 'integumental system', 'reproductive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'NA', 'excretory system', 'reproductive system', 'immune system', 'respiratory system', 'immune system', 'reproductive system', 'central nervous system', 'digestive system', 'excretory system', 'respiratory system', 'digestive system', 'immune system', 'NA', 'reproductive system', 'immune system', 'digestive system', 'musculature', 'central nervous system', 'immune system', 'immune system', 'immune system', 'skeletal system', 'immune system', 'musculature', 'reproductive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'immune system', 'digestive system', 'reproductive system', 'NA', 'central nervous system', 'immune system', 'central nervous system', 'digestive system', 'immune system', 'exocrine system, integumental system', 'integumental system', 'NA', 'musculature', 'central nervous system, peripheral nervous system', 'NA', 'NA', 'immune system', 'NA', 'NA', 'NA', 'endocrine system', 'endocrine system, exocrine system, digestive system', 'immune system', 'skeletal system', 'reproductive system', 'immune system', 'NA', 'integumental system', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'endocrine system', 'immune system', 'central nervous system', 'NA', 'endocrine system, exocrine system, digestive system', 'immune system', 'peripheral nervous system', 'immune system', 'immune system', 'immune system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'reproductive system, integumental system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'excretory system', 'circulatory system', 'central nervous system', 'endocrine system', 'reproductive system', 'immune system, skeletal system', 'reproductive system, integumental system', 'reproductive system', 'endocrine system', 'NA', 'excretory system', 'digestive system', 'excretory system', 'digestive system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system, skeletal system', 'respiratory system', 'excretory system', 'immune system', 'central nervous system', 'immune system', 'immune system', 'integumental system', 'immune system', 'musculature, digestive system', 'excretory system', 'NA', 'central nervous system', 'immune system', 'NA', 'exocrine system, integumental system', 'musculature, circulatory system', 'excretory system', 'integumental system', 'exocrine system, integumental system', 'immune system', 'immune system, skeletal system', 'immune system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'respiratory system', 'immune system', 'immune system', 'central nervous system', 'immune system', 'NA', 'integumental system', 'immune system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'musculature, digestive system', 'endocrine system, exocrine system, digestive system', 'central nervous system, peripheral nervous system', 'immune system', 'immune system, skeletal system', 'NA', 'exocrine system, integumental system', 'exocrine system, integumental system', 'reproductive system, integumental system', 'NA', 'immune system', 'NA', 'exocrine system, integumental system', 'digestive system', 'digestive system', 'circulatory system', 'reproductive system', 'immune system', 'excretory system', 'central nervous system', 'immune system', 'immune system, digestive system', 'immune system', 'NA', 'reproductive system', 'immune system', 'excretory system', 'excretory system', 'NA', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'endocrine system', 'immune system', 'digestive system', 'central nervous system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'NA', 'integumental system', 'central nervous system', 'NA', 'NA', 'respiratory system', 'reproductive system, integumental system', 'immune system', 'central nervous system', 'reproductive system, integumental system', 'NA', 'immune system', 'immune system', 'musculature, digestive system', 'central nervous system', 'respiratory system', 'immune system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'central nervous system', 'digestive system', 'excretory system', 'central nervous system', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'immune system', 'NA', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'NA', 'NA', 'excretory system', 'exocrine system, digestive system', 'exocrine system, integumental system', 'excretory system', 'immune system', 'respiratory system', 'excretory system', 'digestive system', 'exocrine system, integumental system', 'immune system', 'exocrine system, integumental system', 'immune system', 'endocrine system', 'endocrine system', 'musculature', 'integumental system', 'NA', 'immune system', 'digestive system', 'immune system', 'endocrine system', 'digestive system', 'central nervous system', 'circulatory system', 'NA', 'integumental system', 'NA', 'endocrine system, exocrine system, digestive system', 'NA', 'digestive system', 'endocrine system, exocrine system, digestive system', 'immune system', 'central nervous system', 'integumental system', 'musculature, digestive system', 'excretory system', 'excretory system', 'digestive system', 'endocrine system', 'digestive system', 'immune system', 'immune system', 'immune system', 'endocrine system', 'integumental system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'excretory system', 'digestive system', 'circulatory system', 'NA', 'immune system', 'excretory system', 'reproductive system', 'immune system', 'immune system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'central nervous system', 'exocrine system, integumental system', 'NA', 'exocrine system, integumental system', 'central nervous system', 'respiratory system', 'integumental system', 'immune system', 'central nervous system', 'musculature, digestive system', 'reproductive system, integumental system', 'reproductive system, integumental system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'NA', 'reproductive system', 'immune system', 'immune system', 'immune system', 'digestive system', 'immune system', 'central nervous system', 'musculature, digestive system', 'integumental system', 'musculature', 'integumental system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'endocrine system, immune system', 'excretory system', 'immune system', 'exocrine system, integumental system', 'endocrine system, exocrine system, digestive system', 'digestive system', 'NA', 'endocrine system, exocrine system, digestive system', 'musculature', 'immune system', 'endocrine system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'NA', 'immune system', 'integumental system', 'central nervous system, peripheral nervous system', 'digestive system', 'digestive system', 'circulatory system', 'musculature', 'NA', 'immune system', 'NA', 'integumental system', 'digestive system', 'immune system', 'respiratory system', 'exocrine system, integumental system', 'central nervous system, peripheral nervous system', 'peripheral nervous system', 'respiratory system', 'musculature, digestive system', 'immune system', 'endocrine system, exocrine system, digestive system', 'NA', 'immune system', 'circulatory system', 'immune system', 'exocrine system, integumental system', 'central nervous system', 'NA', 'musculature, digestive system', 'integumental system', 'respiratory system', 'endocrine system', 'NA', 'reproductive system', 'digestive system', 'digestive system', 'immune system', 'respiratory system', 'central nervous system', 'endocrine system, exocrine system, digestive system', 'reproductive system', 'excretory system', 'immune system', 'immune system', 'immune system', 'musculature', 'reproductive system', 'exocrine system, integumental system', 'immune system', 'musculature', 'excretory system', 'immune system, digestive system', 'endocrine system, exocrine system, digestive system', 'endocrine system, immune system', 'NA', 'immune system', 'musculature, digestive system', 'central nervous system', 'NA', 'respiratory system', 'endocrine system, exocrine system, digestive system', 'exocrine system, integumental system', 'musculature', 'endocrine system', 'skeletal system', 'central nervous system', 'NA', 'central nervous system', 'central nervous system', 'reproductive system', 'circulatory system', 'immune system, skeletal system', 'central nervous system', 'NA', 'respiratory system', 'immune system', 'reproductive system', 'endocrine system', 'immune system', 'immune system', 'digestive system', 'NA', 'central nervous system, peripheral nervous system', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'NA', 'NA', 'circulatory system', 'NA', 'circulatory system', 'immune system, skeletal system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'reproductive system', 'immune system', 'reproductive system', 'immune system', 'respiratory system', 'immune system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'immune system', 'excretory system', 'exocrine system, integumental system', 'NA', 'circulatory system', 'immune system', 'endocrine system, exocrine system, digestive system', 'immune system', 'integumental system', 'immune system', 'respiratory system', 'musculature, digestive system', 'immune system', 'musculature', 'respiratory system', 'reproductive system', 'circulatory system', 'NA', 'immune system', 'immune system', 'digestive system', 'immune system', 'circulatory system', 'central nervous system', 'endocrine system', 'reproductive system', 'central nervous system', 'immune system', 'skeletal system', 'immune system', 'NA', 'excretory system', 'reproductive system', 'immune system', 'central nervous system', 'excretory system', 'digestive system', 'NA', 'exocrine system, integumental system', 'immune system', 'immune system', 'integumental system', 'integumental system', 'immune system', 'reproductive system', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'circulatory system', 'central nervous system', 'integumental system', 'circulatory system', 'excretory system', 'NA', 'exocrine system, integumental system', 'excretory system', 'immune system', 'respiratory system', 'exocrine system, integumental system', 'integumental system', 'immune system', 'immune system', 'reproductive system', 'circulatory system', 'musculature', 'circulatory system', 'endocrine system, exocrine system, digestive system', 'endocrine system, exocrine system, digestive system', 'circulatory system', 'integumental system', 'integumental system', 'immune system', 'endocrine system, exocrine system, digestive system', 'NA', 'immune system', 'central nervous system', 'immune system', 'endocrine system', 'immune system', 'excretory system', 'endocrine system, exocrine system, digestive system', 'excretory system', 'musculature, circulatory system', 'endocrine system, exocrine system, digestive system', 'immune system, digestive system', 'musculature', 'respiratory system', 'central nervous system', 'immune system', 'integumental system', 'excretory system', 'immune system, skeletal system', 'excretory system', 'immune system', 'central nervous system', 'immune system', 'musculature', 'immune system', 'digestive system', 'reproductive system', 'exocrine system, integumental systemn['NA', 'NA', 'NA', 'cancer cell', 'fibroblast', 'fibroblast', 'fibroblast', 'fibroblast', 'fibroblast', 'NA', 'cancer cell', 'leukocyte, hematopoietic cell, B cell', 'hematopoietic cell, B cell, leukocyte', 'leukocyte, hematopoietic cell, B cell', 'leukocyte, hematopoietic cell, B cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'leukocyte, hematopoietic cell, B cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'epithelial cell, endothelial cell', 'stem cell, induced pluripotent stem cell', 'stem cell, induced pluripotent stem cell', 'stem cell, induced pluripotent stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'neural cell', 'melanocyte', 'monocyte, leukocyte, myeloid cell, hematopoietic cell', 'epithelial cell, keratinocyte', 'connective tissue cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell', 'fibroblast', 'fibroblast, connective tissue cell', 'fibroblast', 'fibroblast', 'fibroblast', 'connective tissue cell, fibroblast', 'neuroblastoma cell, cancer cell, neural cell, stem cell', 'connective tissue cell, fibroblast', 'epithelial cell', 'fibroblast, connective tissue cell', 'connective tissue cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, progenitor cell', 'T cell, leukocyte, CD4+ T cell, hematopoietic cell', 'cancer cell, myeloid cell, hematopoietic cell', 'fibroblast', 'fibroblast', 'B cell, hematopoietic cell, leukocyte', 'leukocyte, hematopoietic cell, B cell', 'B cell, hematopoietic cell, leukocyte', 'leukocyte, hematopoietic cell, B cell', 'embryonic cell, stem cell', 'myoblast, embryonic cell', 'stem cell', 'embryonic cell', 'cardiocyte', 'embryonic cell, stem cell', 'neural cell', 'neural cell', 'neural cell', 'epithelial cell', 'epithelial cell, endothelial cell, neural cell', 'pericyte, neural cell, hematopoietic cell, connective tissue cell', 'smooth muscle cell, neural cell', 'fibroblast, cardiocyte, connective tissue cell', 'connective tissue cell, cardiocyte, fibroblast', 'cardiocyte', 'connective tissue cell, fibroblast', 'neural cell, epithelial cell', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'connective tissue cell, fibroblast', 'connective tissue cell, fibroblast', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'fibroblast, connective tissue cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'epithelial cell', 'epithelial cell, endothelial cell', 'connective tissue cell, fibroblast', 'connective tissue cell, fibroblast', 'fibroblast, connective tissue cell', 'epithelial cell', 'epithelial cell', 'epithelial cell, endothelial cell', 'neural cell, epithelial cell', 'embryonic cell, myoblast', 'NA', 'epithelial cell, endothelial cell', 'connective tissue cell, fibroblast', 'T cell, hematopoietic cell, leukocyte, cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'embryonic cell, myoblast', 'cancer cell, epithelial cell', 'cancer cell, neural cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'monocyte, leukocyte, myeloid cell, hematopoietic cell', 'cancer cell', 'neural cell', 'epithelial cell', 'fibroblast, connective tissue cell', 'connective tissue cell, fibroblast', 'keratinocyte, epithelial cell', 'connective tissue cell, fibroblast', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, neuroblastoma cell', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, CD4+ T cell, T cell, leukocyte', 'T cell, leukocyte, CD4+ T cell, hematopoietic cell', 'T cell, leukocyte, CD4+ T cell, hematopoietic cell', 'T cell, leukocyte, CD4+ T cell, hematopoietic cell', 'T cell, leukocyte, CD4+ T cell, hematopoietic cell', 'hematopoietic cell, CD4+ T cell, T cell, leukocyte', 'T cell, leukocyte, CD4+ T cell, hematopoietic cell', 'leukocyte, hematopoietic cell, CD4+ T cell, T cell', 'leukocyte, CD4+ T cell, hematopoietic cell, T cell', 'cancer cell, neural cell', 'connective tissue cell, fibroblast', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'fibroblast, cancer cell, connective tissue cell', 'cancer cell, epithelial cell', 'cancer cell, neural cell, stem cell, neuroblastoma cell', 'induced pluripotent stem cell, stem cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'induced pluripotent stem cell, stem cell', 'NA', 'NA', 'NA', 'embryonic cell, stem cell', 'NA', 'leukocyte, hematopoietic cell, B cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'keratinocyte, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'T cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell', 'NA', 'NA', 'NA', 'NA', 'progenitor cell, hematopoietic cell', 'NA', 'NA', 'progenitor cell, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'myeloid cell, hematopoietic cell, progenitor cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'hematopoietic cell, progenitor cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'embryonic cell', 'NA', 'T cell, leukocyte, CD4+ T cell, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'fibroblast, connective tissue cell', 'NA', 'NA', 'NA', 'fibroblast, connective tissue cell', 'NA', 'NA', 'NA', 'myeloid cell, hematopoietic cell, progenitor cell', 'NA', 'NA', 'NA', 'NA', 'stem cell, connective tissue cell', 'NA', 'NA', 'NA', 'fibroblast', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'fibroblast, connective tissue cell', 'NA', 'NA', 'hematopoietic cell, B cell, leukocyte', 'fibroblast, connective tissue cell', 'NA', 'cancer cell', 'NA', 'NA', 'induced pluripotent stem cell, stem cell', 'NA', 'NA', 'cancer cell', 'NA', 'cancer cell', 'NA', 'myeloid cell, hematopoietic cell, progenitor cell', 'NA', 'NA', 'embryonic cell, stem cell', 'NA', 'neural cell, stem cell', 'NA', 'progenitor cell, myeloid cell, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'leukocyte, hematopoietic cell, B cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'induced pluripotent stem cell, stem cell', 'T cell, leukocyte, CD8+ T cell, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'progenitor cell, myeloid cell, hematopoietic cell', 'NA', 'fibroblast, connective tissue cell', 'progenitor cell, hematopoietic cell', 'NA', 'NA', 'cancer cell', 'NA', 'NA', 'neural cell', 'cancer cell', 'NA', 'NA', 'NA', 'fibroblast', 'progenitor cell', 'progenitor cell, hematopoietic cell', 'epithelial cell', 'NA', 'NA', 'NA', 'T cell, leukocyte, hematopoietic cell', 'fibroblast', 'dendritic cell, leukocyte, myeloid cell, hematopoietic cell', 'leukocyte, hematopoietic cell, B cell', 'NA', 'fibroblast', 'induced pluripotent stem cell, stem cell', 'NA', 'epithelial cell', 'NA', 'NA', 'NA', 'connective tissue cell', 'NA', 'NA', 'hematopoietic cell, T cell, leukocyte', 'NA', 'NA', 'progenitor cell, hematopoietic cell', 'NA', 'NA', 'NA', 'T cell, leukocyte, CD4+ T cell, hematopoietic cell', 'cancer cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'epithelial cell', 'melanocyte', 'NA', 'NA', 'NA', 'NA', 'NA', 'induced pluripotent stem cell, stem cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'monocyte, leukocyte, myeloid cell, hematopoietic cell', 'NA', 'NA', 'myeloid cell, hematopoietic cell, progenitor cell', 'NA', 'NA', 'cancer cell, hematopoietic cell, leukocyte, B cell', 'NA', 'NA', 'hematopoietic cell, progenitor cell, myeloid cell', 'NA', 'NA', 'NA', 'fibroblast, connective tissue cell', 'NA', 'NA', 'cancer cell, hematopoietic cell, leukocyte, B cell', 'NA', 'progenitor cell, hematopoietic cell', 'NA', 'hematopoietic cell, progenitor cell, myeloid cell', 'NA', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'melanocyte', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'connective tissue cell, fibroblast', 'NA', 'NA', 'NA', 'NA', 'NA', 'fibroblast', 'NA', 'fibroblast', 'NA', 'NA', 'progenitor cell, hematopoietic cell', 'hematopoietic cell, progenitor cell, myeloid cell', 'NA', 'T cell, leukocyte, CD4+ T cell, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell, hematopoietic cell, leukocyte, B cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'leukocyte, hematopoietic cell, CD8+ T cell, T cell', 'NA', 'NA', 'NA', 'cancer cell', 'cancer cell', 'NA', 'NA', 'fibroblast, connective tissue cell', 'neural cell', 'NA', 'NA', 'hematopoietic cell, T cell, leukocyte', 'hematopoietic cell, T cell, leukocyte', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'myeloid cell, hematopoietic cell, progenitor cell', 'NA', 'leukocyte, hematopoietic cell, CD4+ T cell, T cell', 'NA', 'fibroblast', 'NA', 'NA', 'NA', 'NA', 'NA', 'B cell, hematopoietic cell, leukocyte', 'NA', 'NA', 'fibroblast, connective tissue cell', 'NA', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'embryonic cell, stem cell', 'NA', 'NA', 'NA', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'fibroblast, connective tissue cell', 'monocyte, leukocyte, myeloid cell, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell, fibroblast, connective tissue cell', 'leukocyte, NK cell, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'leukocyte, NK cell, hematopoietic cell', 'hematopoietic cell, NK cell, leukocyte', 'keratinocyte, epithelial cell', 'NA', 'NA', 'NA', 'stem cell, connective tissue cell', 'NA', 'hematopoietic cell, progenitor cell, myeloid cell', 'NA', 'induced pluripotent stem cell, stem cell', 'NA', 'epithelial cell', 'NA', 'NA', 'embryonic cell, stem cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'fibroblast', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'embryonic cell, stem cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'stem cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'T cell, leukocyte, CD8+ T cell, hematopoietic cell', 'cardiocyte', 'T cell, leukocyte, CD8+ T cell, hematopoietic cell', 'progenitor cell, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'progenitor cell, hematopoietic cell', 'fibroblast, cardiocyte, connective tissue cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'leukocyte, hematopoietic cell, B cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell', 'NA', 'NA', 'hematopoietic cell, progenitor cell', 'NA', 'cancer cell', 'NA', 'NA', 'embryonic cell, stem cell', 'NA', 'NA', 'NA', 'cancer cell, neural cell, stem cell, neuroblastoma cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'progenitor cell', 'NA', 'NA', 'embryonic cell, stem cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'epithelial cell, endothelial cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, keratinocyte', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'embryonic cell, myoblast', 'embryonic cell, myoblast', 'embryonic cell, myoblast', 'embryonic cell, myoblast', 'embryonic cell, myoblast', 'embryonic cell, myoblast', 'embryonic cell, myoblast', 'embryonic cell, myoblast', 'embryonic cell, stem cell', 'embryonic cell, myoblast', 'embryonic cell, myoblast', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'neural cell', 'neural cell', 'neural cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'embryonic cell, myoblast', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'connective tissue cell', 'connective tissue cell', 'connective tissue cell', 'connective tissue cell', 'connective tissue cell', 'connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'connective tissue cell', 'connective tissue cell', 'T cell, hematopoietic cell, leukocyte', 'T cell, hematopoietic cell, leukocyte', 'T cell, hematopoietic cell, leukocyte', 'T cell, hematopoietic cell, leukocyte', 'T cell, hematopoietic cell, leukocyte', 'T cell, hematopoietic cell, leukocyte', 'T cell, hematopoietic cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'embryonic cell, myoblast', 'cancer cell, epithelial cell', 'epithelial cell, keratinocyte', 'epithelial cell, keratinocyte', 'epithelial cell, keratinocyte', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'neural cell', 'neural cell', 'T cell, hematopoietic cell, leukocyte', 'T cell, hematopoietic cell, leukocyte', 'epithelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'connective tissue cell', 'cancer cell', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'cancer cell', 'cancer cell', 'T cell, hematopoietic cell, leukocyte', 'epithelial cell, endothelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'connective tissue cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'cancer cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell', 'cancer cell', 'embryonic cell, stem cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'neuroblastoma cell, cancer cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'cancer cell', 'cancer cell, epithelial cell', 'cancer cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'neuroblastoma cell, cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'fibroblast, connective tissue cell', 'cancer cell', 'cancer cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell, epithelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'cancer cell, epithelial cell', 'cancer cell', 'neuroblastoma cell, cancer cell', 'cancer cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'fibroblast, connective tissue cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'neuroblastoma cell, cancer cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'neural cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'neural cell', 'cancer cell', 'epithelial cell, keratinocyte', 'NA', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'cancer cell', 'fibroblast', 'fibroblast', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast', 'fibroblast', 'fibroblast', 'fibroblast', 'fibroblast', 'fibroblast', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'neuroblastoma cell, cancer cell, stem cell, neural cell', 'neuroblastoma cell, cancer cell, stem cell, neural cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, myoblast', 'embryonic cell', 'embryonic cell, myoblast', 'stem cell', 'embryonic cell', 'cardiocyte', 'embryonic cell, myoblast', 'stem cell', 'embryonic cell', 'cardiocyte', 'stem cell', 'cardiocyte', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'neural cell', 'neural cell', 'neural cell', 'neural cell', 'neural cell, epithelial cell, endothelial cell', 'neural cell, epithelial cell, endothelial cell', 'fibroblast, connective tissue cell, cardiocyte', 'fibroblast, connective tissue cell, cardiocyte', 'fibroblast, connective tissue cell, cardiocyte', 'cardiocyte', 'cardiocyte', 'epithelial cell, neural cell', 'epithelial cell, neural cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'epithelial cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell, neural cell', 'epithelial cell, neural cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'T cell, hematopoietic cell, leukocyte, cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'cancer cell', 'cancer cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'epithelial cell, keratinocyte', 'epithelial cell, keratinocyte', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'NA', 'cancer cell, neural cell', 'cancer cell, neural cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'epithelial cell', 'epithelial cell', 'epithelial cell, endothelial cell', 'epithelial cell, endothelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'myeloid cell, hematopoietic cell', 'myeloid cell, hematopoietic cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'hematopoietic cell, mononuclear cell, leukocyte', 'hematopoietic cell, mononuclear cell, leukocyte', 'hematopoietic cell, mononuclear cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'neuroblastoma cell, cancer cell', 'neural cell', 'fibroblast, connective tissue cell', 'NA', 'NA', 'cardiocyte', 'NA', 'NA', 'NA', 'fibroblast, connective tissue cell', 'NA', 'NA', 'stem cell, connective tissue cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'fibroblast, connective tissue cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'epithelial cell', 'stem cell, connective tissue cell', 'cancer cell, epithelial cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'neuroblastoma cell, cancer cell', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'stem cell, connective tissue cell', 'epithelial cell, keratinocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'NA', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'epithelial cell', 'fibroblast, connective tissue cell', 'epithelial cell', 'NA', 'epithelial cell', 'hematopoietic cell, leukocyte, NK cell', 'stem cell, neural cell', 'epithelial cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'epithelial cell, keratinocyte', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell', 'epithelial cell', 'stem cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'stem cell, induced pluripotent stem cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'T cell, hematopoietic cell, leukocyte', 'NA', 'embryonic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'fibroblast, connective tissue cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'stem cell', 'fibroblast, connective tissue cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'epithelial cell', 'NA', 'neural cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'stem cell, induced pluripotent stem cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'NA', 'melanocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'NA', 'NA', 'NA', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'NA', 'embryonic cell, stem cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'NA', 'myeloid cell, hematopoietic cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'stem cell, induced pluripotent stem cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'NA', 'cancer cell', 'NA', 'stem cell, connective tissue cell', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'neural cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'stem cell, induced pluripotent stem cell', 'cancer cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'progenitor cell', 'NA', 'NA', 'NA', 'NA', 'epithelial cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell', 'cancer cell, epithelial cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'myeloid cell, hematopoietic cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'neuroblastoma cell, cancer cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell, keratinocyte', 'NA', 'NA', 'epithelial cell', 'cancer cell', 'epithelial cell', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'fibroblast, connective tissue cell', 'epithelial cell', 'NA', 'NA', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'NA', 'cancer cell, epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'epithelial cell', 'epithelial cell, keratinocyte', 'cancer cell, leukocyte, hematopoietic cell', 'smooth muscle cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'embryonic cell, stem cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'embryonic cell', 'NA', 'stem cell, induced pluripotent stem cell', 'stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'stem cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'neural cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'progenitor cell', 'NA', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'neural cell', 'epithelial cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'epithelial cell, keratinocyte', 'T cell, hematopoietic cell, leukocyte', 'cancer cell, epithelial cell', 'stem cell, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'connective tissue cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'neuroblastoma cell, cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'fibroblast, connective tissue cell', 'NA', 'NA', 'NA', 'stem cell, neural cell', 'fibroblast, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'fibroblast, connective tissue cell', 'fibroblast, connective tissue cell', 'neural cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'neuroblastoma cell, cancer cell', 'progenitor cell', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'stem cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'smooth muscle cell', 'cancer cell, leukocyte, hematopoietic cell', 'stem cell', 'cancer cell, epithelial cell', 'NA', 'fibroblast, connective tissue cell', 'NA', 'NA', 'NA', 'epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'neural cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'fibroblast', 'embryonic cell', 'connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'progenitor cell', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'smooth muscle cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'NA', 'NA', 'NA', 'epithelial cell', 'NA', 'melanocyte', 'NA', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'melanocyte', 'cancer cell, epithelial cell', 'NA', 'cancer cell', 'NA', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'stem cell, induced pluripotent stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'connective tissue cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'epithelial cell', 'fibroblast, connective tissue cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'T cell, hematopoietic cell, leukocyte', 'NA', 'stem cell, induced pluripotent stem cell', 'NA', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'stem cell, neural cell', 'cancer cell, epithelial cell', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'stem cell, connective tissue cell', 'epithelial cell, keratinocyte', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'stem cell, induced pluripotent stem cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'neural cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'embryonic cell, stem cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'cancer cell, epithelial cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'cancer cell', 'cancer cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'stem cell, neural cell', 'cancer cell, epithelial cell', 'T cell, hematopoietic cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'cancer cell', 'cancer cell, epithelial cell', 'epithelial cell', 'epithelial cell', 'T cell, hematopoietic cell, leukocyte', 'NA', 'embryonic cell, stem cell', 'NA', 'embryonic cell, stem cell', 'cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'smooth muscle cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'embryonic cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'stem cell, connective tissue cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'neural cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'embryonic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'connective tissue cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'fibroblast, connective tissue cell', 'smooth muscle cell', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'stem cell, induced pluripotent stem cell', 'NA', 'embryonic cell, stem cell', 'NA', 'epithelial cell', 'NA', 'epithelial cell', 'epithelial cell', 'NA', 'epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'T cell, hematopoietic cell, leukocyte', 'cancer cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'T cell, hematopoietic cell, leukocyte', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'embryonic cell, stem cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'epithelial cell', 'epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'melanocyte', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'epithelial cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'NA', 'melanocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'embryonic cell, stem cell', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'epithelial cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'stem cell, induced pluripotent stem cell', 'embryonic cell', 'cancer cell, epithelial cell', 'NA', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'stem cell, induced pluripotent stem cell', 'NA', 'stem cell, induced pluripotent stem cell', 'embryonic cell, stem cell', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'stem cell, neural cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'NA', 'NA', 'NA', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'cancer cell', 'neural cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'stem cell, induced pluripotent stem cell', 'NA', 'stem cell, connective tissue cell', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'NA', 'epithelial cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'stem cell, neural cell', 'myeloid cell, hematopoietic cell, leukocyte', 'NA', 'stem cell, neural cell', 'NA', 'progenitor cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'cancer cell, epithelial cell', 'NA', 'stem cell, neural cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'smooth muscle cell', 'NA', 'embryonic cell, stem cell', 'stem cell, connective tissue cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'stem cell, induced pluripotent stem cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'stem cell, induced pluripotent stem cell', 'NA', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'T cell, hematopoietic cell, leukocyte', 'myeloid cell, hematopoietic cell, leukocyte', 'epithelial cell, keratinocyte', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'cardiocyte', 'NA', 'NA', 'embryonic cell, stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell', 'NA', 'NA', 'epithelial cell', 'progenitor cell', 'neuroblastoma cell, cancer cell', 'fibroblast, connective tissue cell', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'cancer cell', 'NA', 'embryonic cell, stem cell', 'cardiocyte', 'stem cell, induced pluripotent stem cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'stem cell, neural cell', 'cancer cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'neural cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'cancer cell', 'NA', 'embryonic cell, stem cell', 'NA', 'embryonic cell, stem cell', 'epithelial cell', 'epithelial cell', 'fibroblast, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'fibroblast, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'epithelial cell', 'NA', 'neural cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'stem cell', 'stem cell, induced pluripotent stem cell', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'NA', 'cancer cell', 'NA', 'embryonic cell, stem cell', 'epithelial cell', 'epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'neuroblastoma cell, cancer cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'NA', 'NA', 'neural cell', 'embryonic cell, stem cell', 'smooth muscle cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'stem cell, induced pluripotent stem cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'fibroblast', 'NA', 'NA', 'NA', 'NA', 'stem cell, induced pluripotent stem cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'neural cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell', 'NA', 'epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'embryonic cell, stem cell', 'NA', 'NA', 'melanocyte', 'NA', 'epithelial cell', 'NA', 'embryonic cell, stem cell', 'fibroblast', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'embryonic cell, stem cell', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'NA', 'fibroblast, connective tissue cell', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'cancer cell, epithelial cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'NA', 'NA', 'fibroblast, connective tissue cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'fibroblast, connective tissue cell', 'NA', 'fibroblast', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'melanocyte', 'NA', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'stem cell, connective tissue cell', 'NA', 'epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'stem cell, induced pluripotent stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'melanocyte', 'NA', 'NA', 'stem cell, neural cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'NA', 'NA', 'cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'stem cell, neural cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'NA', 'neuroblastoma cell, cancer cell', 'fibroblast, connective tissue cell', 'embryonic cell, stem cell', 'NA', 'connective tissue cell', 'NA', 'NA', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'stem cell, induced pluripotent stem cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'NA', 'myeloid cell, hematopoietic cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'NA', 'neural cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell, keratinocyte', 'NA', 'NA', 'epithelial cell, keratinocyte', 'fibroblast, connective tissue cell', 'NA', 'stem cell', 'NA', 'NA', 'NA', 'epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'cancer cell, epithelial cell', 'melanocyte', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'fibroblast, connective tissue cell', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'stem cell, induced pluripotent stem cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, leukocyte, NK cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell', 'stem cell, neural cell', 'NA', 'NA', 'NA', 'stem cell', 'myeloid cell, hematopoietic cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'T cell, hematopoietic cell, leukocyte', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'neural cell', 'fibroblast, connective tissue cell', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'NA', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'fibroblast', 'NA', 'NA', 'neural cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'NA', 'NA', 'neural cell', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'NA', 'stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'NA', 'epithelial cell', 'NA', 'neural cell', 'epithelial cell', 'epithelial cell', 'embryonic cell, stem cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'NA', 'NA', 'epithelial cell', 'cancer cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'neuroblastoma cell, cancer cell', 'melanocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'neuroblastoma cell, cancer cell', 'hematopoietic cell, B cell, leukocyte', 'fibroblast, connective tissue cell', 'NA', 'NA', 'stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'T cell, hematopoietic cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'stem cell, induced pluripotent stem cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'stem cell, connective tissue cell', 'neural cell', 'myeloid cell, hematopoietic cell, leukocyte', 'NA', 'NA', 'NA', 'NA', 'cancer cell', 'cancer cell, epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'myeloid cell, hematopoietic cell, leukocyte', 'fibroblast, connective tissue cell', 'NA', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'embryonic cell, stem cell', 'T cell, hematopoietic cell, leukocyte', 'NA', 'NA', 'stem cell', 'stem cell, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'epithelial cell', 'embryonic cell, stem cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'embryonic cell, stem cell', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'epithelial cell', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'stem cell', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell', 'NA', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'NA', 'stem cell, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'progenitor cell', 'cancer cell', 'NA', 'NA', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'stem cell', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell', 'epithelial cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'epithelial cell', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'T cell, hematopoietic cell, leukocyte', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'stem cell, induced pluripotent stem cell', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'neural cell', 'NA', 'NA', 'NA', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'stem cell, neural cell', 'embryonic cell, stem cell', 'NA', 'epithelial cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'fibroblast, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'melanocyte', 'cancer cell', 'epithelial cell', 'NA', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'NA', 'epithelial cell', 'neural cell', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'embryonic cell, stem cell', 'NA', 'stem cell, neural cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'neural cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'stem cell, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'stem cell, connective tissue cell', 'cancer cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'smooth muscle cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'embryonic cell, stem cell', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell, keratinocyte', 'NA', 'NA', 'NA', 'NA', 'hematopoietic cell', 'stem cell, induced pluripotent stem cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'stem cell, connective tissue cell', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'stem cell, connective tissue cell', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell', 'stem cell, induced pluripotent stem cell', 'cancer cell, epithelial cell', 'stem cell, induced pluripotent stem cell', 'melanocyte', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'stem cell, connective tissue cell', 'NA', 'neural cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'fibroblast, connective tissue cell', 'stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'epithelial cell', 'NA', 'fibroblast, connective tissue cell', 'cancer cell', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'NA', 'smooth muscle cell', 'NA', 'embryonic cell, stem cell', 'epithelial cell', 'epithelial cell', 'epithelial cell', 'NA', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'progenitor cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, leukocyte, NK cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell', 'hematopoietic cell', 'epithelial cell', 'cancer cell', 'NA', 'cancer cell', 'epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'fibroblast, connective tissue cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'myeloid cell, hematopoietic cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'stem cell, connective tissue cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'neural cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'epithelial cell', 'stem cell, induced pluripotent stem cell', 'epithelial cell', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'hematopoietic cell', 'NA', 'smooth muscle cell', 'neuroblastoma cell, cancer cell', 'cancer cell', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'T cell, hematopoietic cell, leukocyte', 'epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'NA', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'NA', 'stem cell, neural cell', 'epithelial cell', 'epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'stem cell, connective tissue cell', 'cancer cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'NA', 'stem cell, induced pluripotent stem cell', 'epithelial cell, keratinocyte', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'fibroblast, connective tissue cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'neuroblastoma cell, cancer cell', 'NA', 'T cell, hematopoietic cell, leukocyte', 'epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'NA', 'stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, leukocyte, NK cell', 'stem cell, neural cell', 'cancer cell, leukocyte, hematopoietic cell', 'melanocyte', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'NA', 'progenitor cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'NA', 'stem cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'NA', 'epithelial cell, endothelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'fibroblast, connective tissue cell', 'fibroblast', 'cancer cell, leukocyte, hematopoietic cell', 'fibroblast, connective tissue cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'cancer cell', 'NA', 'stem cell, induced pluripotent stem cell', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'cancer cell', 'cancer cell', 'NA', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'myeloid cell, hematopoietic cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'stem cell, induced pluripotent stem cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'progenitor cell', 'NA', 'neural cell', 'NA', 'epithelial cell', 'NA', 'stem cell, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'fibroblast', 'embryonic cell, stem cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, myoblast', 'NA', 'NA', 'epithelial cell', 'cancer cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell', 'stem cell, connective tissue cell', 'cancer cell, epithelial cell', 'epithelial cell', 'epithelial cell', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'neural cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'fibroblast, connective tissue cell', 'NA', 'cancer cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'embryonic cell, stem cell', 'cancer cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'neural cell', 'epithelial cell', 'NA', 'epithelial cell', 'stem cell, induced pluripotent stem cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'fibroblast, connective tissue cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell', 'cancer cell, epithelial cell', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'stem cell, neural cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell', 'T cell, hematopoietic cell, leukocyte', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'embryonic cell, stem cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'embryonic cell, stem cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'stem cell', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'cancer cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'cancer cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'progenitor cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'smooth muscle cell', 'stem cell, neural cell', 'cardiocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'neural cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'progenitor cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'NA', 'stem cell, induced pluripotent stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'neuroblastoma cell, cancer cell', 'hematopoietic cell, B cell, leukocyte', 'T cell, hematopoietic cell, leukocyte', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'epithelial cell', 'neuroblastoma cell, cancer cell', 'cancer cell, epithelial cell', 'progenitor cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'stem cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'fibroblast, connective tissue cell', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'epithelial cell, keratinocyte', 'NA', 'NA', 'NA', 'epithelial cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'stem cell', 'NA', 'smooth muscle cell', 'fibroblast, connective tissue cell', 'NA', 'fibroblast, connective tissue cell', 'epithelial cell', 'cancer cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'NA', 'embryonic cell', 'NA', 'NA', 'progenitor cell', 'cancer cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'epithelial cell, keratinocyte', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'stem cell, induced pluripotent stem cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'neural cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'stem cell, neural cell', 'neural cell', 'NA', 'stem cell', 'epithelial cell', 'NA', 'epithelial cell', 'embryonic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'neural cell', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'epithelial cell', 'stem cell, neural cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'NA', 'NA', 'melanocyte', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'stem cell, neural cell', 'stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'stem cell, induced pluripotent stem cell', 'cancer cell, epithelial cell', 'stem cell, connective tissue cell', 'epithelial cell', 'cancer cell', 'cancer cell, epithelial cell', 'cancer cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'epithelial cell, keratinocyte', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'stem cell, induced pluripotent stem cell', 'cancer cell, epithelial cell', 'NA', 'epithelial cell', 'cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'fibroblast, connective tissue cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'melanocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'fibroblast, connective tissue cell', 'cardiocyte', 'NA', 'NA', 'NA', 'neural cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'epithelial cell', 'epithelial cell', 'NA', 'cancer cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'T cell, hematopoietic cell, leukocyte', 'NA', 'embryonic cell, stem cell', 'NA', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'T cell, hematopoietic cell, leukocyte', 'stem cell, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'progenitor cell', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'epithelial cell', 'stem cell', 'NA', 'NA', 'fibroblast', 'epithelial cell', 'embryonic cell, stem cell', 'stem cell, induced pluripotent stem cell', 'stem cell, induced pluripotent stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'stem cell, neural cell', 'hematopoietic cell, B cell, leukocyte', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'progenitor cell, hematopoietic cell, myeloid cell', 'stem cell, connective tissue cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'NA', 'epithelial cell', 'NA', 'embryonic cell, stem cell', 'hematopoietic cell, B cell, leukocyte', 'stem cell, induced pluripotent stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'stem cell', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'stem cell, induced pluripotent stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'stem cell, connective tissue cell', 'NA', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell', 'embryonic cell', 'NA', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'epithelial cell', 'stem cell, connective tissue cell', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'cancer cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'epithelial cell', 'NA', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'T cell, hematopoietic cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'stem cell', 'NA', 'NA', 'NA', 'epithelial cell', 'NA', 'embryonic cell, stem cell', 'epithelial cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'cancer cell', 'connective tissue cell', 'epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'embryonic cell, stem cell', 'epithelial cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'epithelial cell', 'epithelial cell', 'cancer cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'epithelial cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'NA', 'epithelial cell', 'NA', 'epithelial cell, keratinocyte', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'smooth muscle cell', 'T cell, hematopoietic cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'myeloid cell, hematopoietic cell, leukocyte', 'NA', 'fibroblast, connective tissue cell', 'stem cell, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell', 'hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'neuroblastoma cell, cancer cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'stem cell, induced pluripotent stem cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'myeloid cell, hematopoietic cell, monocyte, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'stem cell, neural cell', 'NA', 'NA', 'stem cell, neural cell', 'cancer cell, epithelial cell', 'epithelial cell', 'melanocyte', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'NA', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'fibroblast, connective tissue cell', 'NA', 'hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'stem cell, connective tissue cell', 'cancer cell, epithelial cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'cancer cell, epithelial cell', 'epithelial cell', 'stem cell, neural cell', 'NA', 'fibroblast, connective tissue cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'neural cell', 'embryonic cell, stem cell', 'NA', 'embryonic cell, stem cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'neural cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'neural cell', 'neural cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'neural cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'embryonic cell', 'NA', 'NA', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'stem cell, connective tissue cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell', 'myeloid cell, hematopoietic cell, leukocyte', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'NA', 'NA', 'epithelial cell', 'fibroblast, connective tissue cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'stem cell, connective tissue cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'T cell, hematopoietic cell, leukocyte', 'NA', 'NA', 'NA', 'neural cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'stem cell, induced pluripotent stem cell', 'stem cell', 'NA', 'neural cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'embryonic cell, stem cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell', 'cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'stem cell, induced pluripotent stem cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell', 'cancer cell, epithelial cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'neural cell', 'embryonic cell, stem cell', 'epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'cancer cell, leukocyte, hematopoietic cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell, keratinocyte', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'NA', 'NA', 'epithelial cell', 'cancer cell', 'stem cell, induced pluripotent stem cell', 'cancer cell', 'NA', 'embryonic cell, stem cell', 'epithelial cell', 'NA', 'epithelial cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell', 'NA', 'epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'hematopoietic cell, B cell, leukocyte', 'hematopoietic cell, B cell, leukocyte', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'epithelial cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'cardiocyte', 'epithelial cell', 'fibroblast, connective tissue cell', 'cancer cell, epithelial cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'cancer cell, epithelial cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'embryonic cell, stem cell', 'stem cell, induced pluripotent stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'neural cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'stem cell, induced pluripotent stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'epithelial cell', 'neuroblastoma cell, cancer cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'T cell, hematopoietic cell, leukocyte', 'embryonic cell, stem cell', 'cancer cell', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'epithelial cell', 'embryonic cell, stem cell', 'NA', 'epithelial cell', 'NA', 'T cell, hematopoietic cell, leukocyte', 'NA', 'neural cell', 'cancer cell, leukocyte, hematopoietic cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'embryonic cell', 'NA', 'NA', 'NA', 'embryonic cell, stem cell', 'NA', 'stem cell, induced pluripotent stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'neural cell', 'fibroblast, connective tissue cell', 'stem cell', 'hematopoietic cell, B cell, leukocyte', 'progenitor cell, hematopoietic cell, myeloid cell', 'NA', 'NA', 'cancer cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'epithelial cell', 'NA', 'NA', 'epithelial cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'cancer cell, B cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell, stem cell', 'stem cell, connective tissue cell', 'epithelial cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell', 'epithelial cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'NA', 'fibroblast, connective tissue cell', 'NA', 'T cell, hematopoietic cell, leukocyte', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'NA', 'NA', 'NA', 'stem cell, connective tissue cell', 'NA', 'fibroblast', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'neural cell', 'fibroblast, connective tissue cell', 'NA', 'epithelial cell', 'epithelial cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'stem cell, induced pluripotent stem cell', 'cancer cell, epithelial cell', 'epithelial cell', 'epithelial cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'epithelial cell', 'hematopoietic cell, B cell, leukocyte', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'fibroblast', 'cancer cell, epithelial cell', 'NA', 'cancer cell', 'fibroblast, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'neuroblastoma cell, cancer cell', 'NA', 'stem cell, induced pluripotent stem cell', 'fibroblast, connective tissue cell', 'NA', 'epithelial cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'T cell, hematopoietic cell, leukocyte', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'neural cell', 'NA', 'NA', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'embryonic cell, stem cell', 'cancer cell, epithelial cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'neural cell', 'NA', 'NA', 'NA', 'NA', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'embryonic cell', 'stem cell, induced pluripotent stem cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell', 'cancer cell, epithelial cell', 'neural cell', 'NA', 'NA', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'NA', 'hematopoietic cell, leukocyte, NK cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'stem cell, neural cell', 'NA', 'NA', 'stem cell, induced pluripotent stem cell', 'fibroblast, connective tissue cell', 'NA', 'NA', 'cancer cell', 'NA', 'NA', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'cancer cell', 'neuroblastoma cell, cancer cell', 'cancer cell, epithelial cell', 'cancer cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'epithelial cell', 'NA', 'cancer cell, epithelial cell', 'NA', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'fibroblast', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'hematopoietic cell', 'stem cell', 'NA', 'NA', 'stem cell, neural cell', 'NA', 'NA', 'cancer cell', 'stem cell', 'embryonic cell, stem cell', 'fibroblast, connective tissue cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'progenitor cell, hematopoietic cell, myeloid cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'embryonic cell, stem cell', 'neural cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'cancer cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, epithelial cell', 'hematopoietic cell, T cell, leukocyte, CD8+ T cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'hematopoietic cell, leukocyte, NK cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'cancer cell, epithelial cell', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'epithelial cell', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'hematopoietic cell, mononuclear cell, leukocyte', 'epithelial cell, keratinocyte', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'NA', 'melanocyte', 'NA', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'T cell, hematopoietic cell, leukocyte', 'NA', 'hematopoietic cell, B cell, leukocyte', 'NA', 'neuroblastoma cell, cancer cell', 'NA', 'NA', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'hematopoietic cell', 'hematopoietic cell, B cell, leukocyte', 'NA', 'epithelial cell', 'NA', 'hematopoietic cell, B cell, leukocyte', 'neuroblastoma cell, cancer cell', 'epithelial cell', 'NA', 'NA', 'cancer cell, epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'progenitor cell, hematopoietic cell, myeloid cell', 'stem cell, induced pluripotent stem cell', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'NA', 'NA', 'NA', 'neural cell', 'NA', 'NA', 'epithelial cell', 'NA', 'cancer cell, epithelial cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, epithelial cell', 'stem cell, induced pluripotent stem cell', 'hematopoietic cell, B cell, leukocyte', 'cancer cell, leukocyte, hematopoietic cell', 'epithelial cell', 'NA', 'cancer cell', 'NA', 'cancer cell, epithelial cell', 'cancer cell, epithelial cell', 'NA', 'NA', 'stem cell, induced pluripotent stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'cancer cell, epithelial cell', 'embryonic cell, stem cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'hematopoietic cell, mononuclear cell, leukocyte', 'NA', 'hematopoietic cell, B cell, leukocyte', 'epithelial cell', 'cancer cell, epithelial cell', 'NA', 'cardiocyte', 'NA', 'NA', 'NA', 'cancer cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'stem cell, induced pluripotent stem cell', 'epithelial cell', 'cancer cell', 'epithelial cell', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'cancer cell, leukocyte, hematopoietic cell', 'NA', 'CD4+ T cell, hematopoietic cell, T cell, leukocyte', 'NA', 'NA', 'cancer cell, epithelial cell', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA']\n['brain', 'brain', 'extraembryonic component', 'uterus', 'skin of body, connective tissue', 'skin of body, connective tissue', 'skin of body, connective tissue', 'lung, connective tissue', 'skin of body, connective tissue', 'brain', 'brain', 'blood, bodily fluid', 'bodily fluid, blood', 'blood, bodily fluid', 'blood, bodily fluid', 'lymphoid tissue', 'bodily fluid, blood', 'bodily fluid, blood', 'blood, bodily fluid', 'embryo', 'embryo', 'embryo', 'heart', 'epithelium, kidney', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo, extraembryonic component, placenta', 'blood vessel, vein, epithelium, vasculature, extraembryonic component, placenta', 'connective tissue', 'skin of body', 'skin of body', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'prostate gland, epithelium', 'prostate gland, epithelium', 'epithelium, mammary gland, exocrine gland', 'brain', 'epithelium, skin of body', 'blood, bodily fluid', 'epithelium, skin of body', 'connective tissue', 'musculature of body', 'epithelium, mammary gland, exocrine gland', 'epithelium', 'lung', 'connective tissue, skin of body', 'connective tissue, lung', 'connective tissue, skin of body', 'connective tissue, mouth', 'connective tissue, skin of body', 'connective tissue, blood vessel, arterial blood vessel, vasculature', 'brain', 'penis, connective tissue, skin of body', 'epithelium, bone element, bone marrow', 'bone element, connective tissue, bone marrow', 'bone element, connective tissue, bone marrow', 'intestine, colon, large intestine', 'bodily fluid, blood', 'bodily fluid, blood', 'blood, bodily fluid', 'bone element, blood, bodily fluid, bone marrow', 'connective tissue, skin of body', 'connective tissue, skin of body', 'bodily fluid, blood', 'blood, bodily fluid', 'bodily fluid, blood', 'blood, bodily fluid', 'embryo', 'musculature of body, heart', 'NA', 'embryo', 'heart, musculature of body', 'embryo', 'brain', 'spinal cord', 'brain', 'extraembryonic component, epithelium, placenta', 'vasculature, epithelium, blood vessel, brain', 'brain, connective tissue', 'vasculature, brain', 'heart, connective tissue', 'connective tissue, heart', 'heart, musculature of body', 'connective tissue, eye', 'vasculature, brain, epithelium', 'intestine, epithelium, colon, large intestine', 'epithelium, esophagus', 'epithelium, uterus', 'epithelium, endocrine gland, exocrine gland, liver', 'connective tissue, skin of body, penis', 'penis, connective tissue', 'connective tissue, mouth', 'eye, epithelium', 'blood, bodily fluid', 'epithelium, exocrine gland, mammary gland', 'exocrine gland, connective tissue, mammary gland', 'epithelium, blood vessel, vasculature, skin of body', 'blood vessel, vasculature, epithelium, skin of body', 'blood vessel, vasculature, epithelium, skin of body', 'blood vessel, vasculature, skin of body, lymphatic vessel, epithelium', 'blood vessel, lymphatic vessel, epithelium, vasculature, skin of body', 'blood vessel, vasculature, epithelium, skin of body', 'blood vessel, lung, vasculature, epithelium', 'blood vessel, lung, vasculature, epithelium', 'epithelium', 'arterial blood vessel, epithelium, blood vessel, vasculature', 'connective tissue, blood vessel, arterial blood vessel, vasculature', 'connective tissue, mouth', 'connective tissue, lung', 'epithelium, kidney', 'epithelium, kidney', 'vasculature, epithelium, kidney', 'eye, epithelium', 'musculature of body', 'musculature of body', 'blood vessel, vein, epithelium, vasculature, extraembryonic component, placenta', 'connective tissue, placenta, extraembryonic component', 'bodily fluid, blood', 'blood, bodily fluid', 'bodily fluid, blood', 'bodily fluid, blood', 'musculature of body', 'musculature of body', 'epithelium, prostate gland', 'brain', 'epithelium, mammary gland, exocrine gland', 'epithelium, exocrine gland, mammary gland', 'epithelium, mammary gland, exocrine gland', 'blood, bodily fluid', 'bone element, bone marrow', 'spinal cord, brain', 'lung, epithelium, bronchus', 'connective tissue, skin of body', 'penis, connective tissue, skin of body', 'epithelium, skin of body', 'connective tissue, lung', 'epithelium, testis, gonad', 'pancreas, epithelium', 'epithelium, prostate gland', 'epithelium, skin of body', 'epithelium, kidney', 'lung, epithelium, bronchus', 'epithelium, brain', 'brain', 'musculature of body', 'mammary gland, epithelium, exocrine gland', 'bodily fluid, blood', 'blood, bodily fluid', 'blood, bodily fluid', 'blood, bodily fluid', 'blood, bodily fluid', 'bodily fluid, blood', 'blood, bodily fluid', 'blood, bodily fluid', 'blood, bodily fluid', 'eye', 'lung, connective tissue', 'lung, connective tissue', 'epithelium, connective tissue', 'epithelium, skin of body', 'musculature of body, connective tissue', 'epithelium, lung', 'brain', 'skin of body', 'lung', 'epithelium, skin of body', 'musculature of body', 'skin of prepuce of penis, skin of body, penis', 'kidney', 'brain', 'kidney, ureter', 'embryo', 'kidney', 'lymph node, blood, bodily fluid', 'bodily fluid, blood', 'kidney', 'brain', 'limb, musculature of body', 'musculature of body', 'extraembryonic component, placenta', 'epithelium, skin of body, penis', 'kidney', 'kidney, epithelium', 'intestine, colon, large intestine', 'kidney', 'blood, bodily fluid', 'large intestine, intestine', 'prostate gland', 'limb, musculature of body', 'adrenal gland, endocrine gland', 'vasculature, arterial blood vessel, heart, blood vessel', 'stomach', 'limb, musculature of body', 'heart', 'kidney', 'heart', 'musculature of body', 'lung', 'arterial blood vessel, limb, blood vessel, vasculature', 'endocrine gland, adrenal gland', 'kidney', 'stomach', 'intestine, small intestine', 'bone element', 'skin of body', 'kidney', 'stomach', 'kidney', 'blood, bodily fluid', 'kidney', 'musculature of body', 'blood, bodily fluid', 'intestine, small intestine', 'brain', 'stomach', 'kidney', 'extraembryonic component, embryo', 'bone marrow, bone element', 'eye', 'kidney', 'placenta, extraembryonic component', 'stomach', 'intestine, small intestine', 'large intestine, intestine', 'kidney, epithelium', 'kidney', 'lung', 'musculature of body', 'lung', 'spinal cord', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'connective tissue, skin of body, penis', 'adipose tissue, connective tissue', 'intestine, large intestine', 'heart', 'kidney', 'brain', 'endocrine gland, thyroid gland', 'endocrine gland, exocrine gland, liver', 'stomach', 'thymus, endocrine gland, immune organ', 'lung', 'embryo', 'limb, musculature of body', 'blood, bodily fluid', 'limb, musculature of body', 'musculature of body, limb', 'musculature of body, limb', 'stomach', 'musculature of body', 'heart', 'epithelium, kidney', 'connective tissue, skin of body', 'pancreas', 'extraembryonic component, embryo', 'kidney', 'connective tissue, skin of body', 'brain', 'intestine, small intestine', 'heart', 'bone marrow, bone element', 'adrenal gland, endocrine gland', 'musculature of body', 'limb, musculature of body', 'lymphoid tissue, intestine', 'extraembryonic component, connective tissue', 'stomach', 'intestine, large intestine', 'lung', 'skin of body', 'intestine, epithelium, colon, large intestine', 'limb, connective tissue, skin of body', 'musculature of body', 'pancreas', 'brain', 'lung', 'pancreas', 'epithelium, exocrine gland, mammary gland', 'musculature of body, limb', 'uterus', 'connective tissue, penis', 'adipose tissue, connective tissue', 'stomach', 'bodily fluid, blood', 'connective tissue, skin of body, penis', 'kidney', 'kidney', 'kidney, epithelium', 'kidney, ureter', 'skin of prepuce of penis, skin of body, penis', 'kidney', 'lung', 'lung', 'kidney', 'kidney', 'limb, musculature of body', 'bone marrow, bone element', 'limb, musculature of body', 'limb, bone element, skeleton', 'embryo', 'testis, gonad', 'embryo', 'heart', 'bone element, bone marrow', 'stomach', 'limb, musculature of body', 'limb, musculature of body', 'kidney', 'musculature of body', 'limb, musculature of body', 'lung', 'blood, bodily fluid', 'kidney', 'limb, musculature of body', 'heart', 'brain', 'limb, musculature of body', 'heart', 'bone element, bone marrow', 'blood, bodily fluid', 'musculature of body', 'ureter, kidney', 'brain', 'lung', 'heart', 'kidney, ureter', 'bone element, bone marrow', 'lymphoid tissue, intestine', 'connective tissue, skin of body', 'blood, bodily fluid', 'kidney', 'limb, arterial blood vessel, vasculature, blood vessel', 'kidney', 'thymus, endocrine gland, immune organ', 'brain', 'brain', 'musculature of body', 'limb, musculature of body', 'limb, musculature of body', 'musculature of body', 'skin of body', 'NA', 'blood, bodily fluid', 'epithelium, endocrine gland, exocrine gland, liver', 'kidney', 'heart', 'large intestine, intestine', 'blood, bodily fluid', 'skin of body', 'blood, bodily fluid', 'blood, bodily fluid', 'brain', 'skin of body', 'skin of prepuce of penis, skin of body, penis', 'limb, musculature of body', 'epithelium, exocrine gland, mammary gland', 'colon, large intestine, intestine', 'heart', 'nerve, limb', 'connective tissue', 'musculature of body', 'heart', 'bodily fluid, blood', 'kidney', 'endocrine gland, adrenal gland', 'bodily fluid, blood', 'brain', 'pancreas', 'kidney', 'blood, bodily fluid', 'bone element, bone marrow', 'musculature of body', 'ovary, gonad', 'intestine, epithelium, colon, large intestine', 'limb, bone element, skeleton', 'kidney, epithelium', 'penis', 'embryo', 'vagina', 'kidney', 'musculature of body', 'musculature of body', 'skin of prepuce of penis, skin of body, penis', 'lung', 'lung', 'intestine, large intestine', 'lung', 'limb, bone element, skeleton', 'blood, bodily fluid', 'limb, musculature of body', 'lymphoid tissue, intestine', 'bone marrow, bone element', 'lung', 'intestine, small intestine', 'blood, bodily fluid', 'colon, large intestine, intestine', 'lung', 'bone marrow, bone element', 'eye', 'brain', 'musculature of body', 'connective tissue, lung', 'lung', 'lung', 'blood, bodily fluid', 'lung', 'blood, bodily fluid', 'brain', 'bone marrow, bone element', 'extraembryonic component, placenta', 'kidney', 'heart', 'intestine, small intestine', 'intestine, epithelium, colon, large intestine', 'brain', 'lung', 'colon, large intestine, intestine', 'brain', 'stomach', 'extraembryonic component', 'limb, musculature of body', 'epithelium, kidney', 'limb, musculature of body', 'penis', 'stomach', 'pancreas', 'kidney', 'pancreas', 'intestine, large intestine', 'limb', 'heart', 'heart', 'kidney, ureter', 'lung', 'thymus, endocrine gland, immune organ', 'ovary, gonad', 'kidney', 'endocrine gland, thymus, immune organ', 'placenta, extraembryonic component', 'penis, connective tissue', 'kidney', 'extraembryonic component, placenta', 'placenta, extraembryonic component', 'kidney', 'exocrine gland, endocrine gland, liver', 'skin of body', 'mouth, tongue', 'skin of body', 'endocrine gland, exocrine gland, liver', 'intestine, large intestine', 'blood, bodily fluid', 'bone marrow, bone element', 'intestine, small intestine', 'blood, bodily fluid', 'brain', 'extraembryonic component, placenta', 'kidney', 'lung', 'brain', 'musculature of body', 'lung', 'kidney', 'embryo, extraembryonic component', 'blood, bodily fluid', 'intestine, small intestine', 'brain', 'pancreas', 'adrenal gland, endocrine gland', 'epithelium, breast', 'kidney', 'kidney', 'stomach', 'blood, bodily fluid', 'spinal cord', 'limb, musculature of body', 'kidney', 'bone marrow, bone element', 'bone element', 'eye', 'limb, musculature of body', 'connective tissue, skin of body', 'ear, spinal cord, brain, eye', 'stomach', 'lung', 'bodily fluid, blood', 'bodily fluid, blood', 'kidney, epithelium', 'epithelium, lung', 'lung', 'bone marrow, bone element', 'stomach', 'blood, bodily fluid', 'kidney', 'skin of body', 'extraembryonic component, placenta', 'brain', 'limb, musculature of body', 'kidney', 'endocrine gland, thyroid gland', 'bodily fluid, blood', 'heart', 'large intestine, intestine', 'connective tissue, skin of body', 'kidney', 'bodily fluid, blood', 'embryo', 'spinal cord', 'spleen, immune organ', 'lung', 'endocrine gland, thymus, immune organ', 'bodily fluid, blood', 'stomach', 'connective tissue, penis', 'blood, bodily fluid', 'endocrine gland, thyroid gland', 'adrenal gland, endocrine gland', 'musculature of body', 'musculature of body, connective tissue', 'blood, bodily fluid', 'heart', 'brain', 'ovary, gonad', 'embryo', 'blood, bodily fluid', 'bodily fluid, blood', 'epithelium, skin of body, penis', 'stomach', 'adrenal gland, endocrine gland', 'gonad, testis', 'connective tissue', 'vagina', 'bone marrow, bone element', 'heart', 'bone element, bone marrow', 'heart', 'mammary gland, epithelium, exocrine gland', 'kidney, ureter', 'limb, musculature of body', 'embryo', 'nerve, limb', 'kidney', 'tongue, mouth', 'colon, large intestine, intestine', 'ureter, kidney', 'large intestine, intestine', 'kidney', 'kidney', 'skin of body', 'brain', 'kidney', 'heart', 'thymus, endocrine gland, immune organ', 'stomach', 'eye', 'epithelium, esophagus', 'kidney, epithelium', 'musculature of body', 'spinal cord', 'epithelium, mammary gland, exocrine gland', 'colon, large intestine, intestine', 'kidney', 'embryo', 'large intestine, intestine', 'large intestine, intestine', 'extraembryonic component, placenta', 'lung', 'heart', 'limb, bone element, skeleton', 'epithelium, brain', 'extraembryonic component, embryo', 'urinary bladder', 'intestine, epithelium, colon, large intestine', 'limb', 'eye', 'extraembryonic component, connective tissue', 'lung', 'brain', 'limb, musculature of body', 'kidney', 'brain', 'endocrine gland, thymus, immune organ', 'blood, bodily fluid', 'musculature of body, heart', 'blood, bodily fluid', 'blood, bodily fluid', 'lung', 'lung', 'lung', 'adrenal gland, endocrine gland', 'kidney', 'immune organ, spleen', 'kidney', 'vasculature, arterial blood vessel, blood vessel', 'ovary, gonad', 'blood, bodily fluid', 'heart, connective tissue', 'adrenal gland, endocrine gland', 'large intestine, intestine', 'brain', 'lung', 'intestine, small intestine', 'limb, musculature of body', 'skin of body, limb', 'adrenal gland, endocrine gland', 'endocrine gland, adrenal gland', 'limb, musculature of body', 'kidney', 'kidney', 'large intestine, intestine', 'kidney', 'kidney', 'limb, musculature of body', 'endocrine gland, thymus, immune organ', 'blood, bodily fluid', 'endocrine gland, thyroid gland', 'spinal cord', 'heart', 'kidney', 'kidney', 'heart', 'embryo', 'bodily fluid, blood', 'kidney', 'lung', 'stomach', 'intestine, small intestine', 'kidney', 'brain', 'lung', 'limb, musculature of body', 'bodily fluid, blood', 'limb, musculature of body', 'lung', 'kidney', 'stomach', 'embryo', 'musculature of body, esophagus', 'intestine, small intestine', 'heart', 'brain', 'brain', 'lung', 'limb, musculature of body', 'limb, musculature of body', 'kidney', 'lung', 'kidney', 'lymphoid tissue, intestine', 'kidney', 'prostate gland', 'epithelium, uterus', 'lung', 'endocrine gland, thymus, immune organ', 'NA', 'extraembryonic component, embryo', 'lung', 'embryo', 'intestine, small intestine', 'spinal cord', 'kidney', 'limb, bone element, skeleton', 'testis, gonad', 'colon, large intestine, intestine', 'kidney, ureter', 'lung', 'brain', 'kidney, epithelium, blood vessel, vasculature', 'placenta, extraembryonic component', 'kidney', 'arterial blood vessel, heart, vasculature, blood vessel', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, skin of body', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'embryo', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'musculature of body', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, endocrine gland, exocrine gland, liver', 'musculature of body', 'brain, spinal cord', 'brain, spinal cord', 'brain, spinal cord', 'bodily fluid, blood', 'bodily fluid, blood', 'musculature of body', 'musculature of body', 'musculature of body', 'epithelium, uterus', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'connective tissue', 'connective tissue', 'connective tissue', 'connective tissue', 'connective tissue', 'connective tissue', 'skin of body, connective tissue', 'skin of body, connective tissue', 'skin of body, connective tissue', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, uterus', 'bodily fluid, blood', 'embryo', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'musculature of body', 'epithelium, uterus', 'epithelium, uterus', 'connective tissue', 'connective tissue', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, skin of body', 'epithelium, skin of body', 'epithelium, skin of body', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'brain, spinal cord', 'brain, spinal cord', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'skin of body, connective tissue', 'lung, connective tissue', 'connective tissue', 'lung', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'lung', 'lung', 'bodily fluid, blood', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, uterus', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'connective tissue', 'musculature of body', 'bodily fluid, blood', 'embryo', 'bodily fluid, blood', 'lung', 'embryo', 'embryo', 'embryo', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'lung', 'lung', 'lung', 'lung', 'lung', 'lung', 'lung', 'bodily fluid, blood', 'embryo', 'embryo', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'embryo', 'embryo', 'bodily fluid, blood', 'lung', 'lung', 'bodily fluid, blood', 'brain, epithelium', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, uterus', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'lung', 'lung', 'lung', 'lung', 'lung', 'bodily fluid, blood', 'embryo', 'embryo', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'lung', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'uterus', 'uterus', 'embryo', 'uterus', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, pancreas', 'brain, connective tissue', 'lung', 'epithelium, mammary gland, exocrine gland', 'lung', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'uterus', 'bodily fluid, blood', 'embryo', 'embryo', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'uterus', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'brain', 'brain', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'epithelium, colon, large intestine, intestine', 'epithelium, uterus', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'embryo', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, pancreas', 'brain, connective tissue', 'brain', 'brain', 'brain', 'brain, connective tissue', 'lung', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'brain, epithelium', 'lung', 'lung', 'lung', 'lung', 'lung', 'lung', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, mammary gland, exocrine gland', 'uterus', 'brain', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'brain, connective tissue', 'lung', 'lung', 'lung', 'uterus', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'lung', 'lung', 'lung', 'lung', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'lung', 'lung', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, colon, large intestine, intestine', 'epithelium, colon, large intestine, intestine', 'brain', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'NA', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'embryo', 'prostate gland, epithelium', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'brain', 'lung', 'epithelium, skin of body', 'immune organ, spleen', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'lung', 'skin of body, connective tissue', 'skin of body, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'skin of body, connective tissue', 'skin of body, connective tissue', 'connective tissue, mouth', 'connective tissue, mouth', 'skin of body, connective tissue', 'skin of body, connective tissue', 'connective tissue, vasculature, arterial blood vessel, blood vessel', 'connective tissue, vasculature, arterial blood vessel, blood vessel', 'brain', 'brain', 'connective tissue, skin of body, penis', 'connective tissue, skin of body, penis', 'connective tissue, skin of body, penis', 'connective tissue, skin of body, penis', 'colon, large intestine, intestine', 'colon, large intestine, intestine', 'colon, large intestine, intestine', 'colon, large intestine, intestine', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'heart, musculature of body', 'embryo', 'heart, musculature of body', 'NA', 'embryo', 'heart, musculature of body', 'heart, musculature of body', 'NA', 'embryo', 'heart, musculature of body', 'NA', 'heart, musculature of body', 'embryo', 'embryo', 'embryo', 'spinal cord', 'spinal cord', 'brain', 'brain', 'brain, epithelium, vasculature, blood vessel', 'brain, epithelium, vasculature, blood vessel', 'heart, connective tissue', 'heart, connective tissue', 'heart, connective tissue', 'heart, musculature of body', 'heart, musculature of body', 'brain, vasculature, epithelium', 'brain, vasculature, epithelium', 'epithelium, colon, large intestine, intestine', 'epithelium, colon, large intestine, intestine', 'esophagus, epithelium', 'esophagus, epithelium', 'epithelium, kidney', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'connective tissue, skin of body, penis', 'connective tissue, skin of body, penis', 'connective tissue, penis', 'connective tissue, penis', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'mammary gland, exocrine gland, connective tissue', 'mammary gland, exocrine gland, connective tissue', 'connective tissue, vasculature, arterial blood vessel, blood vessel', 'connective tissue, vasculature, arterial blood vessel, blood vessel', 'lung, connective tissue', 'lung, connective tissue', 'epithelium, kidney', 'epithelium, kidney', 'epithelium, kidney', 'epithelium, kidney', 'epithelium, eye', 'epithelium, eye', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'extraembryonic component, placenta, connective tissue', 'extraembryonic component, placenta, connective tissue', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'prostate gland, epithelium', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'bone marrow, bone element', 'bone marrow, bone element', 'connective tissue, skin of body, penis', 'connective tissue, skin of body, penis', 'epithelium, skin of body', 'epithelium, skin of body', 'lung, connective tissue', 'lung, connective tissue', 'epithelium, pancreas', 'epithelium, kidney', 'epithelium, kidney', 'epithelium, lung, bronchus', 'epithelium, lung, bronchus', 'epithelium, lung, bronchus', 'brain, epithelium', 'brain', 'brain', 'brain', 'musculature of body', 'eye', 'eye', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'lung', 'lung', 'lung', 'lung', 'lung', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'embryo', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, uterus', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'lung, connective tissue', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'brain', 'brain', 'brain', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'embryo', 'epithelium, colon, large intestine, intestine', 'epithelium, colon, large intestine, intestine', 'epithelium, kidney', 'epithelium, kidney', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, testis, gonad', 'epithelium, testis, gonad', 'epithelium, testis, gonad', 'epithelium, testis, gonad', 'epithelium, testis, gonad', 'epithelium, testis, gonad', 'epithelium, testis, gonad', 'epithelium, testis, gonad', 'epithelium, pancreas', 'epithelium, pancreas', 'epithelium, pancreas', 'epithelium, pancreas', 'bone marrow, bone element', 'bone marrow, bone element', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'lymphoid tissue', 'epithelium, bone marrow, bone element', 'epithelium, bone marrow, bone element', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, kidney', 'bodily fluid, blood', 'epithelium, pancreas', 'epithelium, pancreas', 'brain', 'brain', 'brain', 'brain', 'NA', 'lung, connective tissue', 'kidney', 'lung', 'heart, musculature of body', 'heart', 'stomach', 'musculature of body', 'lung, connective tissue', 'esophagus, epithelium', 'stomach, musculature of body', 'connective tissue', 'colon, large intestine, intestine', 'bodily fluid, blood', 'epithelium, kidney', 'lung, connective tissue', 'adipose tissue, connective tissue', 'stomach', 'bodily fluid, blood', 'bodily fluid, blood', 'lymphoid tissue, intestine', 'bodily fluid, blood', 'embryo, extraembryonic component', 'epithelium, kidney', 'connective tissue', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'skin of body, limb, connective tissue', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'kidney', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'bone marrow, bone element', 'colon, large intestine, intestine', 'brain', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'bodily fluid, blood', 'bone marrow, bone element', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'connective tissue', 'epithelium, skin of body, penis', 'adrenal gland, endocrine gland', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'vasculature, arterial blood vessel, blood vessel', 'epithelium, endocrine gland, exocrine gland, liver', 'exocrine gland, endocrine gland, liver', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'brain', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'epithelium, kidney', 'NA', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo', 'epithelium, kidney', 'connective tissue, skin of body, penis', 'epithelium, kidney', 'exocrine gland, endocrine gland, liver', 'epithelium, kidney', 'bodily fluid, blood', 'embryo', 'epithelium, kidney', 'brain', 'heart', 'musculature of body', 'bodily fluid, blood', 'colon, large intestine, intestine', 'bodily fluid, blood', 'stomach, musculature of body', 'skin of body', 'epithelium, skin of body, penis', 'lung', 'bodily fluid, blood', 'prostate gland', 'epithelium, kidney', 'NA', 'epithelium, mammary gland, exocrine gland', 'heart', 'extraembryonic component, placenta', 'bodily fluid, blood', 'immune organ, spleen', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'adrenal gland, endocrine gland', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'brain', 'adipose tissue, connective tissue', 'stomach', 'lung', 'bodily fluid, blood', 'paraythroid gland', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'skin of body', 'paraythroid gland', 'esophagus', 'epithelium, breast', 'embryo', 'embryo, extraembryonic component', 'pancreas', 'stomach, musculature of body', 'spinal cord', 'bodily fluid, blood', 'embryo', 'embryo', 'ovary, gonad', 'bodily fluid, blood', 'skin of body', 'exocrine gland, endocrine gland, liver', 'bone marrow, bone element', 'lung, connective tissue', 'embryo, extraembryonic component', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'stomach', 'NA', 'lung, connective tissue', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'brain', 'brain', 'colon, large intestine, intestine', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'embryo, extraembryonic component', 'NA', 'bone marrow, bone element', 'skin of body', 'epithelium, colon, large intestine, intestine', 'testis, gonad', 'extraembryonic component, placenta', 'epithelium, endocrine gland, exocrine gland, liver', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'embryo', 'colon, large intestine, intestine', 'penis', 'embryo', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'NA', 'adrenal gland, endocrine gland', 'urinary bladder', 'epithelium, endocrine gland, exocrine gland, liver', 'lung, connective tissue', 'small intestine, intestine', 'large intestine, intestine', 'pancreas', 'lung, connective tissue', 'epithelium, mammary gland, exocrine gland', 'esophagus, epithelium', 'embryo', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'brain', 'small intestine, intestine', 'esophagus, epithelium', 'brain', 'bodily fluid, blood', 'bodily fluid, blood, lymph node', 'epithelium, exocrine gland, mouth', 'bodily fluid, blood', 'bone marrow, bone element', 'skin of body', 'pancreas', 'small intestine, intestine', 'epithelium, mammary gland, exocrine gland', 'embryo', 'endocrine gland, thyroid gland', 'lung', 'brain', 'connective tissue', 'urinary bladder', 'epithelium, kidney', 'bodily fluid, blood', 'vasculature, arterial blood vessel, blood vessel', 'brain, spinal cord, eye, ear', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'heart', 'extraembryonic component, placenta', 'epithelium, mammary gland, exocrine gland', 'lung', 'skin of prepuce of penis, skin of body, penis', 'lung', 'heart', 'bodily fluid, blood', 'lung', 'NA', 'colon, large intestine, intestine', 'brain', 'vasculature, arterial blood vessel, blood vessel', 'brain', 'epithelium, kidney', 'musculature of body, limb', 'epithelium, endocrine gland, exocrine gland, liver', 'bone marrow, bone element', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'small intestine, intestine', 'heart', 'extraembryonic component, placenta', 'esophagus, musculature of body', 'brain', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, skin of body, penis', 'small intestine, intestine', 'heart', 'epithelium, kidney', 'bone marrow, bone element', 'epithelium, kidney', 'brain', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'immune organ, spleen', 'esophagus, epithelium', 'bodily fluid, blood', 'connective tissue, skin of body, penis', 'epithelium, kidney', 'exocrine gland, endocrine gland, liver', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'embryo, extraembryonic component', 'epithelium, endocrine gland, exocrine gland, liver', 'bone marrow, bone element', 'adipose tissue, connective tissue', 'colon, large intestine, intestine', 'vasculature, arterial blood vessel, blood vessel', 'stomach', 'spinal cord', 'stomach, musculature of body', 'NA', 'bodily fluid, blood', 'heart', 'exocrine gland, endocrine gland, liver', 'brain', 'bodily fluid, blood', 'paraythroid gland', 'bodily fluid, blood', 'heart', 'immune organ, spleen', 'bodily fluid, blood', 'musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'lung, connective tissue', 'esophagus', 'NA', 'stomach, musculature of body', 'adipose tissue, connective tissue', 'epithelium, mammary gland, exocrine gland', 'epithelium, skin of body, penis', 'bodily fluid, blood', 'musculature of body', 'epithelium, kidney', 'bodily fluid, blood', 'stomach, musculature of body', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, colon, large intestine, intestine', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, colon, large intestine, intestine', 'brain', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'epithelium, kidney', 'epithelium, mammary gland, exocrine gland', 'esophagus, musculature of body', 'kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'skin of body, limb, connective tissue', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'stomach, musculature of body', 'embryo', 'embryo, extraembryonic component, placenta', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'stomach', 'epithelium, kidney', 'bodily fluid, blood', 'musculature of body', 'embryo', 'kidney', 'skin of prepuce of penis, skin of body, penis', 'NA', 'bodily fluid, blood', 'lung', 'colon, large intestine, intestine', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'musculature of body, limb', 'colon, large intestine, intestine', 'bodily fluid, blood', 'epithelium, kidney', 'bodily fluid, blood', 'NA', 'vasculature, arterial blood vessel, blood vessel', 'epithelium, endocrine gland, exocrine gland, liver', 'musculature of body, limb', 'embryo', 'bodily fluid, blood', 'NA', 'immune organ, spleen', 'musculature of body, limb', 'epithelium, kidney', 'bodily fluid, blood', 'paraythroid gland', 'colon, large intestine, intestine', 'bodily fluid, blood', 'heart', 'bodily fluid, blood', 'connective tissue, skin of body, penis', 'epithelium, endocrine gland, exocrine gland, liver', 'brain', 'epithelium, mammary gland, exocrine gland', 'heart', 'bodily fluid, blood', 'adipose tissue, connective tissue', 'lung', 'exocrine gland, endocrine gland, liver', 'brain, epithelium', 'pancreas', 'heart', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'ovary, gonad', 'brain, epithelium', 'bodily fluid, blood', 'NA', 'epithelium, mammary gland, exocrine gland', 'brain', 'NA', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, skin of body, penis', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'connective tissue', 'bodily fluid, blood', 'immune organ, spleen', 'connective tissue', 'epithelium, mammary gland, exocrine gland', 'esophagus, musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'extraembryonic component, placenta', 'brain', 'bodily fluid, blood', 'esophagus, epithelium', 'stomach', 'connective tissue, skin of body, penis', 'prostate gland', 'vasculature, arterial blood vessel, blood vessel', 'brain', 'embryo', 'lung, connective tissue', 'bodily fluid, blood', 'lung, connective tissue', 'skin of body, limb, connective tissue', 'NA', 'epithelium, endocrine gland, exocrine gland, liver', 'NA', 'epithelium, kidney', 'brain', 'NA', 'epithelium, kidney', 'epithelium, mammary gland, exocrine gland', 'embryo', 'brain', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'NA', 'limb, arterial blood vessel, vasculature, blood vessel', 'epithelium, endocrine gland, exocrine gland, liver', 'musculature of body, limb', 'vasculature, arterial blood vessel, blood vessel', 'stomach', 'embryo', 'bodily fluid, blood', 'musculature of body', 'bodily fluid, blood', 'NA', 'epithelium, endocrine gland, exocrine gland, liver', 'extraembryonic component, placenta', 'skin of body, limb, connective tissue', 'colon, large intestine, intestine', 'stomach', 'prostate gland', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'epithelium, mammary gland, exocrine gland', 'embryo', 'bone marrow, bone element', 'breast', 'embryo', 'connective tissue', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'NA', 'ovary, gonad', 'epithelium, uterus', 'epithelium, kidney', 'colon, large intestine, intestine', 'epithelium, endocrine gland, exocrine gland, liver', 'heart', 'uterus', 'bodily fluid, blood', 'bodily fluid, blood', 'brain', 'musculature of body', 'extraembryonic component, placenta', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'stomach, musculature of body', 'large intestine, intestine', 'musculature of body', 'adipose tissue, connective tissue', 'brain', 'epithelium, kidney', 'kidney', 'penis', 'esophagus, epithelium', 'adipose tissue, connective tissue', 'musculature of body, limb', 'small intestine, intestine', 'bodily fluid, blood', 'esophagus', 'brain', 'musculature of body, limb', 'heart', 'colon, large intestine, intestine', 'epithelium, endocrine gland, exocrine gland, liver', 'penis', 'brain, epithelium', 'adipose tissue, connective tissue', 'lung', 'skin of body, limb', 'embryo', 'bodily fluid, blood', 'nerve, limb', 'skin of body', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'esophagus, epithelium', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'brain', 'large intestine, intestine', 'bodily fluid, blood', 'nerve, limb', 'bodily fluid, blood', 'ovary, gonad', 'bodily fluid, blood, lymph node', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'embryo', 'immune organ, spleen', 'musculature of body, limb', 'epithelium, colon, large intestine, intestine', 'embryo', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'connective tissue', 'bone marrow, bone element', 'epithelium, kidney', 'lung, connective tissue', 'bone marrow, bone element', 'bodily fluid, blood', 'stomach', 'skin of body', 'limb, arterial blood vessel, vasculature, blood vessel', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'bodily fluid, blood', 'stomach, musculature of body', 'exocrine gland, endocrine gland, liver', 'small intestine, intestine', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'immune organ, spleen', 'bone marrow, bone element', 'colon, large intestine, intestine', 'colon, large intestine, intestine', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'connective tissue', 'epithelium, skin of body, penis', 'stomach', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, mammary gland, exocrine gland', 'skin of prepuce of penis, skin of body, penis', 'bodily fluid, blood', 'skin of body, limb', 'bodily fluid, blood', 'vasculature, arterial blood vessel, heart, blood vessel', 'epithelium, mammary gland, exocrine gland', 'brain, spinal cord, eye, ear', 'bodily fluid, blood', 'colon, large intestine, intestine', 'embryo', 'adipose tissue, connective tissue', 'epithelium, mammary gland, exocrine gland', 'heart', 'small intestine, intestine', 'esophagus, musculature of body', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, colon, large intestine, intestine', 'bone marrow, bone element', 'small intestine, intestine', 'musculature of body', 'lung', 'brain', 'adrenal gland, endocrine gland', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'musculature of body', 'epithelium, uterus', 'bone marrow, bone element', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'epithelium, kidney', 'bodily fluid, blood', 'stomach, musculature of body', 'embryo', 'pancreas', 'embryo', 'bone marrow, bone element', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'musculature of body', 'bodily fluid, blood', 'bodily fluid, blood', 'small intestine, intestine', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'bone marrow, bone element', 'musculature of body', 'epithelium, kidney', 'bodily fluid, blood', 'epithelium, kidney', 'extraembryonic component, placenta', 'embryo', 'extraembryonic component, placenta', 'brain', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'prostate gland, epithelium', 'bone marrow, bone element', 'connective tissue', 'vasculature, arterial blood vessel, blood vessel', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'immune organ, spleen', 'prostate gland', 'lung, connective tissue', 'epithelium, mammary gland, exocrine gland', 'embryo', 'bodily fluid, blood', 'NA', 'bodily fluid, blood', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'embryo', 'bodily fluid, blood', 'esophagus', 'connective tissue', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'musculature of body, limb', 'stomach', 'vasculature, arterial blood vessel, blood vessel', 'embryo, extraembryonic component, placenta', 'small intestine, intestine', 'bodily fluid, blood', 'endocrine gland, thyroid gland', 'prostate gland, epithelium', 'epithelium, pancreas', 'exocrine gland, endocrine gland, liver', 'adrenal gland, endocrine gland', 'lung', 'exocrine gland, endocrine gland, liver', 'small intestine, intestine', 'bodily fluid, blood', 'stomach, musculature of body', 'bodily fluid, blood', 'musculature of body, limb', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'colon, large intestine, intestine', 'lung', 'spinal cord', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'lung, connective tissue', 'musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'adipose tissue, connective tissue', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'embryo, extraembryonic component', 'colon, large intestine, intestine', 'embryo, extraembryonic component', 'bodily fluid, blood', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'skin of body', 'extraembryonic component', 'embryo', 'stomach, musculature of body', 'epithelium, kidney', 'esophagus, musculature of body', 'epithelium, kidney', 'epithelium, kidney', 'adrenal gland, endocrine gland', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'prostate gland', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'epithelium, uterus', 'lung, connective tissue', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'bodily fluid, blood', 'bodily fluid, blood', 'colon, large intestine, intestine', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'embryo', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, kidney', 'adipose tissue, connective tissue', 'endocrine gland, thyroid gland', 'epithelium, endocrine gland, exocrine gland, liver', 'penis', 'epithelium, colon, large intestine, intestine', 'epithelium, kidney', 'stomach', 'epithelium, kidney', 'esophagus, musculature of body', 'bodily fluid, blood', 'kidney', 'exocrine gland, endocrine gland, liver', 'penis', 'bodily fluid, blood', 'heart', 'embryo', 'exocrine gland, endocrine gland, liver', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'limb, arterial blood vessel, vasculature, blood vessel', 'epithelium, kidney', 'immune organ, spleen', 'epithelium, mammary gland, exocrine gland', 'adrenal gland, endocrine gland', 'skin of body', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'immune organ, spleen', 'bodily fluid, blood', 'skin of body', 'colon, large intestine, intestine', 'skin of body', 'embryo', 'small intestine, intestine', 'epithelium, kidney', 'bodily fluid, blood', 'musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo', 'bodily fluid, blood', 'bodily fluid, blood', 'adipose tissue, connective tissue', 'epithelium, colon, large intestine, intestine', 'epithelium, kidney', 'lung', 'extraembryonic component', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'bodily fluid, blood', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'adipose tissue, connective tissue', 'extraembryonic component', 'bodily fluid, blood', 'colon, large intestine, intestine', 'musculature of body', 'stomach', 'small intestine, intestine', 'bone marrow, bone element', 'small intestine, intestine', 'prostate gland', 'brain, spinal cord, eye, ear', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, mammary gland, exocrine gland', 'lung, connective tissue', 'vasculature, arterial blood vessel, blood vessel', 'extraembryonic component, placenta', 'bodily fluid, blood', 'uterus', 'paraythroid gland', 'immune organ, spleen', 'skin of body', 'musculature of body', 'connective tissue', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'skin of body, limb', 'epithelium, kidney', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'large intestine, intestine', 'embryo', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'embryo', 'paraythroid gland', 'NA', 'stomach', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'vagina', 'embryo', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'musculature of body', 'spinal cord', 'embryo', 'connective tissue', 'brain', 'bodily fluid, blood', 'skin of prepuce of penis, skin of body, penis', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'small intestine, intestine', 'bodily fluid, blood', 'skin of body', 'brain', 'prostate gland, epithelium', 'embryo', 'pancreas', 'epithelium, mammary gland, exocrine gland', 'endocrine gland, thyroid gland', 'exocrine gland, endocrine gland, liver', 'immune organ, spleen', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, skin of body, penis', 'bone marrow, bone element', 'ovary, gonad', 'bodily fluid, blood', 'colon, large intestine, intestine', 'stomach', 'epithelium, endocrine gland, exocrine gland, liver', 'heart, musculature of body', 'skin of body', 'small intestine, intestine', 'embryo', 'stomach, musculature of body', 'bodily fluid, blood', 'embryo', 'extraembryonic component, placenta', 'colon, large intestine, intestine', 'epithelium, kidney', 'NA', 'brain', 'lung, connective tissue', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'large intestine, intestine', 'prostate gland', 'large intestine, intestine', 'embryo', 'heart, musculature of body', 'skin of body', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'embryo', 'lung', 'musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'embryo', 'epithelium, mammary gland, exocrine gland', 'NA', 'epithelium, kidney', 'prostate gland', 'esophagus', 'embryo', 'heart', 'embryo', 'epithelium, kidney', 'epithelium, kidney', 'lung, connective tissue', 'bodily fluid, blood', 'bodily fluid, blood', 'large intestine, musculature of body, intestine', 'connective tissue, skin of body, penis', 'bodily fluid, blood', 'brain', 'adipose tissue, connective tissue', 'small intestine, intestine', 'brain, epithelium', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'immune organ, spleen', 'NA', 'bodily fluid, blood', 'lung', 'epithelium, kidney', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'pancreas', 'bodily fluid, blood', 'NA', 'skin of body', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'colon, large intestine, intestine', 'lung', 'adipose tissue, connective tissue', 'embryo', 'epithelium, kidney', 'epithelium, kidney', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'embryo', 'exocrine gland, endocrine gland, liver', 'brain', 'small intestine, intestine', 'bodily fluid, blood', 'immune organ, endocrine gland, thymus', 'epithelium, kidney', 'epithelium, breast', 'skin of body', 'brain, spinal cord, eye, ear', 'embryo', 'musculature of body', 'bodily fluid, blood', 'prostate gland, epithelium', 'immune organ, endocrine gland, thymus', 'brain', 'epithelium, kidney', 'epithelium, breast', 'epithelium, breast', 'large intestine, intestine', 'bodily fluid, blood, lymph node', 'esophagus', 'epithelium, kidney', 'NA', 'skin of prepuce of penis, skin of body, penis', 'pancreas', 'immune organ, endocrine gland, thymus', 'epithelium, mammary gland, exocrine gland', 'exocrine gland, endocrine gland, liver', 'epithelium, exocrine gland, mouth', 'bone marrow, bone element', 'brain', 'breast', 'musculature of body', 'extraembryonic component, placenta', 'colon, large intestine, intestine', 'brain', 'skin of body', 'embryo, extraembryonic component, placenta', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'nerve, limb', 'NA', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'pancreas', 'prostate gland', 'bodily fluid, blood', 'NA', 'embryo', 'kidney', 'bodily fluid, blood, lymph node', 'adipose tissue, connective tissue', 'vasculature, arterial blood vessel, blood vessel', 'epithelium, mammary gland, exocrine gland', 'brain', 'embryo, extraembryonic component, placenta', 'lung', 'brain', 'epithelium, kidney', 'colon, large intestine, intestine', 'lung', 'bodily fluid, blood', 'colon, large intestine, intestine', 'colon, large intestine, intestine', 'embryo', 'vasculature, arterial blood vessel, blood vessel', 'brain', 'penis', 'pancreas', 'epithelium, kidney', 'exocrine gland, endocrine gland, liver', 'embryo', 'breast', 'bodily fluid, blood', 'bodily fluid, blood', 'vasculature, arterial blood vessel, blood vessel', 'embryo', 'embryo', 'bone marrow, bone element', 'epithelium, endocrine gland, exocrine gland, liver', 'colon, large intestine, intestine', 'skin of body, limb, connective tissue', 'colon, large intestine, intestine', 'colon, large intestine, intestine', 'epithelium, kidney', 'musculature of body', 'musculature of body', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'small intestine, intestine', 'bodily fluid, blood', 'bodily fluid, blood', 'kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'epithelium, colon, large intestine, intestine', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo', 'paraythroid gland', 'bodily fluid, blood', 'paraythroid gland', 'large intestine, intestine', 'heart', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'exocrine gland, endocrine gland, liver', 'epithelium, kidney', 'bone marrow, bone element', 'epithelium, endocrine gland, exocrine gland, liver', 'stomach, musculature of body', 'stomach, musculature of body', 'prostate gland', 'epithelium, endocrine gland, exocrine gland, liver', 'brain', 'small intestine, intestine', 'bone marrow, bone element', 'epithelium, uterus', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'vasculature, arterial blood vessel, heart, blood vessel', 'epithelium, kidney', 'exocrine gland, endocrine gland, liver', 'musculature of body', 'connective tissue, skin of body, penis', 'large intestine, musculature of body, intestine', 'adipose tissue, connective tissue', 'extraembryonic component, placenta', 'exocrine gland, endocrine gland, liver', 'epithelium, breast', 'connective tissue, skin of body, penis', 'musculature of body', 'breast', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'pancreas', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'penis', 'exocrine gland, endocrine gland, liver', 'immune organ, spleen', 'NA', 'bodily fluid, blood', 'connective tissue', 'exocrine gland, endocrine gland, liver', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'skin of body', 'esophagus, musculature of body', 'bodily fluid, blood', 'penis', 'stomach', 'embryo, extraembryonic component', 'embryo', 'bone marrow, bone element', 'brain', 'embryo, extraembryonic component', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo', 'embryo', 'epithelium, kidney', 'stomach', 'brain', 'heart', 'brain', 'prostate gland', 'bodily fluid, blood', 'esophagus, musculature of body', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'lymphoid tissue, intestine', 'adipose tissue, connective tissue', 'epithelium, kidney', 'embryo', 'extraembryonic component', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'kidney', 'brain', 'connective tissue, skin of body, penis', 'embryo', 'stomach, musculature of body', 'connective tissue', 'musculature of body', 'heart', 'stomach', 'bodily fluid, blood', 'bodily fluid, blood', 'skin of body', 'epithelium, endocrine gland, exocrine gland, liver', 'paraythroid gland', 'bodily fluid, blood', 'pancreas', 'embryo, extraembryonic component', 'epithelium, kidney', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'pancreas', 'bodily fluid, blood', 'brain', 'epithelium, mammary gland, exocrine gland', 'colon, large intestine, intestine', 'brain, spinal cord, eye, ear', 'lymphoid tissue, intestine', 'epithelium, endocrine gland, exocrine gland, liver', 'testis, gonad', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, skin of body, penis', 'heart', 'brain', 'epithelium, skin of body, penis', 'skin of body, limb, connective tissue', 'kidney', 'NA', 'musculature of body, limb', 'brain', 'colon, large intestine, intestine', 'epithelium, kidney', 'immune organ, endocrine gland, thymus', 'bodily fluid, blood', 'epithelium, kidney', 'exocrine gland, endocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'penis', 'epithelium, mammary gland, exocrine gland', 'epithelium, endocrine gland, exocrine gland, liver', 'brain', 'lung, connective tissue', 'stomach', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'colon, large intestine, intestine', 'brain', 'skin of body', 'embryo', 'exocrine gland, endocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'embryo, extraembryonic component, placenta', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'prostate gland', 'embryo', 'lymphoid tissue, intestine', 'uterus', 'pancreas', 'NA', 'bodily fluid, blood', 'musculature of body', 'bodily fluid, blood', 'embryo', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'embryo, extraembryonic component, placenta', 'NA', 'skin of body, limb, connective tissue', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, breast', 'bone marrow, bone element', 'vagina', 'brain', 'pancreas', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'lung', 'bodily fluid, blood', 'breast', 'epithelium, breast', 'colon, large intestine, intestine', 'NA', 'bodily fluid, blood', 'bodily fluid, blood', 'prostate gland', 'embryo', 'adrenal gland, endocrine gland', 'small intestine, intestine', 'NA', 'brain', 'adrenal gland, endocrine gland', 'immune organ, endocrine gland, thymus', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'immune organ, spleen', 'pancreas', 'adrenal gland, endocrine gland', 'NA', 'bodily fluid, blood', 'embryo', 'embryo', 'musculature of body', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'large intestine, intestine', 'lung', 'musculature of body, limb', 'stomach, musculature of body', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'epithelium, breast', 'vasculature, arterial blood vessel, blood vessel', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'connective tissue, skin of body, penis', 'small intestine, intestine', 'epithelium, kidney', 'brain', 'brain, spinal cord, eye, ear', 'epithelium, kidney', 'epithelium, kidney', 'embryo', 'lymphoid tissue, intestine', 'extraembryonic component, placenta', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'extraembryonic component, placenta', 'immune organ, spleen', 'colon, large intestine, intestine', 'epithelium, kidney', 'bone marrow, bone element', 'bodily fluid, blood', 'brain', 'penis', 'bodily fluid, blood', 'musculature of body, limb', 'epithelium, mammary gland, exocrine gland', 'brain', 'bodily fluid, blood', 'lung, connective tissue', 'adrenal gland, endocrine gland', 'embryo, extraembryonic component', 'NA', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'epithelium, mammary gland, exocrine gland', 'embryo, extraembryonic component', 'musculature of body, limb', 'epithelium, colon, large intestine, intestine', 'musculature of body', 'colon, large intestine, intestine', 'lung', 'bodily fluid, blood', 'bodily fluid, blood', 'pancreas', 'bodily fluid, blood', 'skin of body', 'epithelium, endocrine gland, exocrine gland, liver', 'extraembryonic component, placenta', 'skin of body, limb', 'bodily fluid, blood', 'bone element', 'colon, large intestine, intestine', 'epithelium, endocrine gland, exocrine gland, liver', 'brain', 'epithelium, mammary gland, exocrine gland', 'lung, connective tissue', 'bodily fluid, blood', 'endocrine gland, thyroid gland', 'immune organ, spleen', 'epithelium, breast', 'connective tissue', 'embryo', 'bodily fluid, blood', 'heart', 'stomach', 'paraythroid gland', 'nerve, limb', 'musculature of body', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'lung, connective tissue', 'stomach', 'stomach', 'bone marrow, bone element', 'embryo', 'bodily fluid, blood, lymph node', 'heart', 'kidney', 'NA', 'connective tissue', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'epithelium, kidney', 'bodily fluid, blood', 'lung', 'NA', 'bodily fluid, blood', 'embryo', 'epithelium, kidney', 'embryo', 'bodily fluid, blood', 'vasculature, arterial blood vessel, blood vessel', 'bodily fluid, blood', 'prostate gland', 'embryo', 'heart', 'epithelium, mammary gland, exocrine gland', 'epithelium, endocrine gland, exocrine gland, liver', 'esophagus, musculature of body', 'epithelium, kidney', 'brain', 'bodily fluid, blood', 'vasculature, arterial blood vessel, heart, blood vessel', 'epithelium, endocrine gland, exocrine gland, liver', 'lung, connective tissue', 'NA', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'exocrine gland, endocrine gland, liver', 'colon, large intestine, intestine', 'bodily fluid, blood', 'embryo', 'stomach', 'large intestine, intestine', 'bodily fluid, blood', 'epithelium, kidney', 'immune organ, spleen', 'brain', 'connective tissue', 'bodily fluid, blood', 'NA', 'bone marrow, bone element', 'musculature of body, limb', 'extraembryonic component', 'pancreas', 'bodily fluid, blood', 'urinary bladder', 'epithelium, mammary gland, exocrine gland', 'adrenal gland, endocrine gland', 'esophagus, epithelium', 'epithelium, kidney', 'extraembryonic component, placenta', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'NA', 'musculature of body', 'small intestine, intestine', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'adrenal gland, endocrine gland', 'lung', 'bone marrow, bone element', 'exocrine gland, endocrine gland, liver', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'kidney', 'prostate gland', 'epithelium, kidney', 'exocrine gland, endocrine gland, liver', 'NA', 'epithelium, mammary gland, exocrine gland', 'prostate gland', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'embryo', 'NA', 'skin of body', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'immune organ, spleen', 'lung', 'epithelium, kidney', 'bodily fluid, blood', 'skin of body', 'epithelium, kidney', 'epithelium, mammary gland, exocrine gland', 'nerve, limb', 'lung', 'bodily fluid, blood', 'embryo', 'brain, spinal cord, eye, ear', 'colon, large intestine, intestine', 'embryo', 'embryo', 'lung', 'bodily fluid, blood, lymph node', 'embryo, extraembryonic component, placenta', 'bodily fluid, blood', 'epithelium, colon, large intestine, intestine', 'bone element', 'large intestine, musculature of body, intestine', 'epithelium, exocrine gland, mouth', 'epithelium, mammary gland, exocrine gland', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo', 'embryo', 'brain', 'epithelium, kidney', 'esophagus', 'extraembryonic component, placenta', 'brain', 'brain', 'nerve, limb', 'skin of body, limb, connective tissue', 'bodily fluid, blood', 'immune organ, endocrine gland, thymus', 'exocrine gland, endocrine gland, liver', 'heart', 'extraembryonic component, placenta', 'epithelium, kidney', 'paraythroid gland', 'extraembryonic component, placenta', 'penis', 'lung', 'epithelium, kidney', 'embryo', 'immune organ, spleen', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'pancreas', 'epithelium, endocrine gland, exocrine gland, liver', 'brain, spinal cord, eye, ear', 'endocrine gland, thyroid gland', 'small intestine, intestine', 'embryo, extraembryonic component', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'embryo', 'paraythroid gland', 'embryo', 'bodily fluid, blood', 'pancreas', 'embryo, extraembryonic component', 'brain', 'NA', 'epithelium, mammary gland, exocrine gland', 'heart', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'exocrine gland, endocrine gland, liver', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'stomach', 'bodily fluid, blood', 'immune organ, spleen', 'connective tissue', 'bodily fluid, blood', 'skin of body', 'connective tissue', 'lung', 'paraythroid gland', 'bodily fluid, blood', 'pancreas', 'endocrine gland, thyroid gland', 'ovary, gonad', 'musculature of body', 'epithelium, mammary gland, exocrine gland', 'NA', 'brain', 'brain', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'testis, gonad', 'bodily fluid, blood', 'extraembryonic component, placenta', 'embryo', 'embryo', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'large intestine, intestine', 'bodily fluid, blood', 'epithelium, skin of body, penis', 'extraembryonic component, placenta', 'embryo, extraembryonic component', 'prostate gland', 'extraembryonic component', 'bone element', 'skin of body', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'heart', 'bodily fluid, blood', 'adipose tissue, connective tissue', 'connective tissue', 'epithelium, breast', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'connective tissue', 'epithelium, kidney', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, colon, large intestine, intestine', 'musculature of body', 'epithelium, mammary gland, exocrine gland', 'heart', 'colon, large intestine, intestine', 'epithelium, kidney', 'skin of body', 'epithelium, mammary gland, exocrine gland', 'skin of prepuce of penis, skin of body, penis', 'penis', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'embryo', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'esophagus, epithelium', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'connective tissue', 'stomach, musculature of body', 'NA', 'adrenal gland, endocrine gland', 'NA', 'connective tissue, skin of body, penis', 'NA', 'extraembryonic component, placenta', 'bodily fluid, blood', 'lung', 'epithelium, kidney', 'small intestine, intestine', 'lung, connective tissue', 'lung', 'musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'skin of body', 'musculature of body', 'exocrine gland, endocrine gland, liver', 'embryo', 'epithelium, kidney', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'pancreas', 'bodily fluid, blood', 'NA', 'epithelium, endocrine gland, exocrine gland, liver', 'vasculature, arterial blood vessel, blood vessel', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'musculature of body, limb', 'pancreas', 'exocrine gland, endocrine gland, liver', 'bone marrow, bone element', 'bone element', 'epithelium, mammary gland, exocrine gland', 'lung', 'exocrine gland, endocrine gland, liver', 'musculature of body', 'epithelium, kidney', 'bodily fluid, blood', 'lung, connective tissue', 'pancreas', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'connective tissue', 'extraembryonic component, placenta', 'stomach', 'epithelium, endocrine gland, exocrine gland, liver', 'brain', 'epithelium, breast', 'epithelium, mammary gland, exocrine gland', 'epithelium, endocrine gland, exocrine gland, liver', 'large intestine, intestine', 'bodily fluid, blood', 'NA', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'stomach, musculature of body', 'bodily fluid, blood', 'kidney', 'pancreas', 'epithelium, kidney', 'skin of body', 'epithelium, kidney', 'brain', 'bone marrow, bone element', 'small intestine, intestine', 'NA', 'epithelium, kidney', 'bone element', 'lung', 'musculature of body', 'brain', 'lung', 'lung', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'small intestine, intestine', 'limb, arterial blood vessel, vasculature, blood vessel', 'skin of body, limb', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, breast', 'heart', 'epithelium, endocrine gland, exocrine gland, liver', 'stomach', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'ovary, gonad', 'heart', 'immune organ, bone marrow, lymph node, bone element', 'bodily fluid, blood', 'stomach', 'embryo', 'bodily fluid, blood', 'lung', 'lung', 'embryo', 'epithelium, kidney', 'epithelium, kidney', 'stomach, musculature of body', 'brain', 'epithelium, mammary gland, exocrine gland', 'stomach', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, breast', 'lung, connective tissue', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'pancreas', 'embryo', 'epithelium, mammary gland, exocrine gland', 'epithelium, colon, large intestine, intestine', 'epithelium, mammary gland, exocrine gland', 'connective tissue', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'heart', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bodily fluid, blood', 'endocrine gland, thyroid gland', 'colon, large intestine, intestine', 'kidney', 'skin of body', 'epithelium, skin of body, penis', 'brain', 'bone marrow, bone element', 'epithelium, kidney', 'esophagus, musculature of body', 'adipose tissue, connective tissue', 'epithelium, mammary gland, exocrine gland', 'musculature of body', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'testis, gonad', 'colon, large intestine, intestine', 'bone marrow, bone element', 'skin of body, limb, connective tissue', 'NA', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'lung', 'bodily fluid, blood', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'embryo, extraembryonic component', 'brain', 'colon, large intestine, intestine', 'bodily fluid, blood', 'epithelium, kidney', 'bodily fluid, blood', 'embryo', 'prostate gland', 'adipose tissue, connective tissue', 'extraembryonic component, placenta', 'lung', 'bodily fluid, blood', 'epithelium, kidney', 'adipose tissue, connective tissue', 'brain', 'NA', 'bodily fluid, blood', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'nerve, limb', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'embryo', 'bodily fluid, blood', 'penis', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'pancreas', 'NA', 'epithelium, mammary gland, exocrine gland', 'stomach', 'extraembryonic component, placenta', 'bodily fluid, blood', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'lung', 'embryo', 'lymphoid tissue, intestine', 'colon, large intestine, intestine', 'NA', 'colon, large intestine, intestine', 'bodily fluid, blood', 'esophagus', 'epithelium, endocrine gland, exocrine gland, liver', 'esophagus, musculature of body', 'epithelium, extraembryonic component, placenta, blood vessel, vein, vasculature', 'bodily fluid, blood', 'embryo, extraembryonic component, placenta', 'lung, connective tissue', 'breast', 'bodily fluid, blood', 'lung, connective tissue', 'bodily fluid, blood', 'nerve, limb', 'bodily fluid, blood', 'immune organ, bone marrow, lymph node, bone element', 'musculature of body', 'pancreas', 'skin of body', 'skin of body, limb', 'endocrine gland, thyroid gland', 'stomach', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'embryo', 'immune organ, bone marrow, lymph node, bone element', 'lung', 'large intestine, intestine', 'exocrine gland, endocrine gland, liver', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'NA', 'bodily fluid, blood', 'bodily fluid, blood', 'pancreas', 'vasculature, arterial blood vessel, blood vessel', 'epithelium, endocrine gland, exocrine gland, liver', 'immune organ, spleen', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'skin of body', 'epithelium, mammary gland, exocrine gland', 'musculature of body', 'large intestine, intestine', 'NA', 'brain', 'brain, spinal cord, eye, ear', 'embryo, extraembryonic component', 'epithelium, kidney', 'heart', 'connective tissue', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'breast', 'embryo', 'heart', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'musculature of body', 'pancreas', 'endocrine gland, thyroid gland', 'epithelium, mammary gland, exocrine gland', 'bone marrow, bone element', 'prostate gland, epithelium', 'bodily fluid, blood', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'extraembryonic component, placenta', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'bodily fluid, blood, lymph node', 'brain', 'immune organ, bone marrow, lymph node, bone element', 'connective tissue', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'epithelium, kidney', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'vagina', 'embryo, extraembryonic component, placenta', 'esophagus, musculature of body', 'immune organ, spleen', 'bodily fluid, blood', 'NA', 'colon, large intestine, intestine', 'brain', 'bodily fluid, blood', 'pancreas', 'bodily fluid, blood', 'skin of body, limb, connective tissue', 'testis, gonad', 'musculature of body', 'epithelium, uterus', 'nerve, limb', 'pancreas', 'embryo', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'brain', 'embryo', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'heart', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'prostate gland', 'lung', 'bodily fluid, blood', 'lung', 'stomach', 'paraythroid gland', 'bodily fluid, blood', 'brain, spinal cord, eye, ear', 'epithelium, kidney', 'embryo, extraembryonic component, placenta', 'epithelium, kidney', 'skin of body', 'bone marrow, bone element', 'epithelium, mammary gland, exocrine gland', 'adrenal gland, endocrine gland', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'lymphoid tissue, intestine', 'connective tissue, skin of body, penis', 'heart', 'NA', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'connective tissue, skin of body, penis', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'embryo', 'bodily fluid, blood', 'brain', 'NA', 'bodily fluid, blood', 'small intestine, intestine', 'extraembryonic component, placenta', 'brain', 'immune organ, bone marrow, lymph node, bone element', 'bodily fluid, blood, lymph node', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'epithelium, kidney', 'bodily fluid, blood', 'urinary bladder', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'colon, large intestine, intestine', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo, extraembryonic component', 'embryo', 'bone marrow, bone element', 'epithelium, uterus', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'exocrine gland, endocrine gland, liver', 'mammary gland, exocrine gland', 'lung', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'colon, large intestine, intestine', 'bodily fluid, blood', 'lung', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'immune organ, bone marrow, lymph node, bone element', 'brain', 'bodily fluid, blood', 'lung', 'lung', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'endocrine gland, thyroid gland', 'epithelium, mammary gland, exocrine gland', 'stomach', 'colon, large intestine, intestine', 'bodily fluid, blood', 'esophagus', 'adrenal gland, endocrine gland', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'colon, large intestine, intestine', 'embryo, extraembryonic component, placenta', 'kidney', 'bodily fluid, blood', 'NA', 'vasculature, arterial blood vessel, blood vessel', 'vagina', 'small intestine, intestine', 'immune organ, endocrine gland, thymus', 'esophagus', 'embryo, extraembryonic component, placenta', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo, extraembryonic component, placenta', 'adrenal gland, endocrine gland', 'musculature of body', 'embryo', 'heart, musculature of body', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'NA', 'vagina', 'small intestine, intestine', 'epithelium, endocrine gland, exocrine gland, liver', 'NA', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'large intestine, musculature of body, intestine', 'skin of body', 'bodily fluid, blood', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'endocrine gland, thyroid gland', 'bodily fluid, blood', 'embryo, extraembryonic component, placenta', 'lung', 'ovary, gonad', 'large intestine, intestine', 'immune organ, spleen', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood, lymph node', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo, extraembryonic component, placenta', 'bodily fluid, blood', 'epithelium, kidney', 'brain', 'epithelium, colon, large intestine, intestine', 'NA', 'epithelium, breast', 'stomach, musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo, epithelium', 'embryo', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'embryo', 'lung, connective tissue', 'adipose tissue, connective tissue', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'exocrine gland, endocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, skin of body, penis', 'musculature of body', 'colon, large intestine, intestine', 'vasculature, arterial blood vessel, blood vessel', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'bodily fluid, blood', 'musculature of body', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'heart', 'bodily fluid, blood', 'embryo, extraembryonic component, placenta', 'lung', 'NA', 'brain', 'musculature of body', 'lung, connective tissue', 'vasculature, arterial blood vessel, blood vessel', 'skin of body, limb, connective tissue', 'epithelium, kidney', 'prostate gland', 'embryo, extraembryonic component, placenta', 'lung', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'bodily fluid, blood', 'heart', 'epithelium, kidney', 'heart', 'embryo', 'adipose tissue, connective tissue', 'stomach, musculature of body', 'NA', 'bone marrow, bone element', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'epithelium, skin of body, penis', 'brain, epithelium', 'epithelium, kidney', 'esophagus', 'epithelium, kidney', 'epithelium, uterus', 'bodily fluid, blood', 'skin of prepuce of penis, skin of body, penis', 'bone marrow, bone element', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'colon, large intestine, intestine', 'exocrine gland, endocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'brain, spinal cord, eye, ear', 'bodily fluid, blood', 'stomach', 'bodily fluid, blood', 'musculature of body', 'epithelium, mammary gland, exocrine gland', 'embryo', 'NA', 'paraythroid gland', 'embryo, epithelium', 'epithelium, endocrine gland, exocrine gland, liver', 'pancreas', 'epithelium, kidney', 'embryo', 'bodily fluid, blood', 'brain', 'NA', 'immune organ, spleen', 'bone marrow, bone element', 'brain', 'epithelium, kidney', 'embryo', 'bodily fluid, blood', 'bone marrow, bone element', 'epithelium, kidney', 'bodily fluid, blood', 'immune organ, spleen', 'large intestine, musculature of body, intestine', 'brain', 'penis', 'bodily fluid, blood', 'embryo', 'NA', 'small intestine, intestine', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'vagina', 'ovary, gonad', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, mammary gland, exocrine gland', 'esophagus', 'musculature of body, limb', 'epithelium, breast', 'bodily fluid, blood', 'stomach', 'bodily fluid, blood', 'limb, arterial blood vessel, vasculature, blood vessel', 'endocrine gland, thyroid gland', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'heart', 'musculature of body', 'skin of body', 'epithelium, mammary gland, exocrine gland', 'connective tissue', 'epithelium, kidney', 'immune organ, bone marrow, lymph node, bone element', 'epithelium, mammary gland, exocrine gland', 'lung', 'bodily fluid, blood', 'adipose tissue, connective tissue', 'epithelium, skin of body, penis', 'bodily fluid, blood', 'embryo', 'epithelium, mammary gland, exocrine gland', 'skin of prepuce of penis, skin of body, penis', 'epithelium, endocrine gland, exocrine gland, liver', 'colon, large intestine, intestine', 'epithelium, kidney', 'lung', 'bodily fluid, blood', 'lung, connective tissue', 'bodily fluid, blood', 'vasculature, arterial blood vessel, blood vessel', 'epithelium, kidney', 'epithelium, uterus', 'bodily fluid, blood', 'penis', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'heart', 'brain', 'bodily fluid, blood', 'lung, connective tissue', 'heart, musculature of body', 'colon, large intestine, intestine', 'colon, large intestine, intestine', 'stomach', 'NA', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, kidney', 'musculature of body', 'musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'endocrine gland, thyroid gland', 'bodily fluid, blood', 'kidney', 'embryo', 'brain', 'brain', 'extraembryonic component, placenta', 'vagina', 'bodily fluid, blood', 'pancreas', 'bodily fluid, blood, lymph node', 'connective tissue', 'bodily fluid, blood', 'musculature of body', 'prostate gland', 'NA', 'colon, large intestine, intestine', 'embryo', 'epithelium, kidney', 'vasculature, arterial blood vessel, blood vessel', 'colon, large intestine, intestine', 'bodily fluid, blood', 'bodily fluid, blood', 'brain', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'immune organ, spleen', 'lung', 'brain', 'epithelium, exocrine gland, mouth', 'skin of body, limb', 'epithelium, kidney', 'NA', 'lung', 'lung', 'breast', 'epithelium, kidney', 'embryo', 'skin of body', 'skin of body', 'immune organ, spleen', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'embryo', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'large intestine, intestine', 'bodily fluid, blood', 'bone marrow, bone element', 'adipose tissue, connective tissue', 'embryo', 'bodily fluid, blood', 'bodily fluid, blood', 'bone marrow, bone element', 'connective tissue', 'embryo', 'embryo', 'esophagus, epithelium', 'exocrine gland, endocrine gland, liver', 'paraythroid gland', 'musculature of body, limb', 'exocrine gland, endocrine gland, liver', 'vasculature, arterial blood vessel, blood vessel', 'brain', 'epithelium, kidney', 'bodily fluid, blood', 'colon, large intestine, intestine', 'bodily fluid, blood', 'embryo', 'immune organ, endocrine gland, thymus', 'epithelium, kidney', 'lung', 'embryo', 'bodily fluid, blood', 'skin of body', 'bodily fluid, blood', 'embryo', 'NA', 'epithelium, exocrine gland, mouth', 'NA', 'bodily fluid, blood', 'bodily fluid, blood', 'stomach', 'skin of body', 'esophagus, musculature of body', 'bodily fluid, blood', 'endocrine gland, thyroid gland', 'epithelium, endocrine gland, exocrine gland, liver', 'connective tissue', 'embryo', 'small intestine, intestine', 'bodily fluid, blood', 'embryo, extraembryonic component, placenta', 'musculature of body', 'embryo', 'pancreas', 'bodily fluid, blood', 'endocrine gland, thyroid gland', 'prostate gland', 'pancreas', 'colon, large intestine, intestine', 'colon, large intestine, intestine', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'colon, large intestine, intestine', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'connective tissue', 'ovary, gonad', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'embryo', 'bodily fluid, blood', 'skin of body', 'colon, large intestine, intestine', 'esophagus, epithelium', 'immune organ, bone marrow, lymph node, bone element', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'pancreas', 'adrenal gland, endocrine gland', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'stomach, musculature of body', 'epithelium, mammary gland, exocrine gland', 'kidney', 'epithelium, mammary gland, exocrine gland', 'colon, large intestine, intestine', 'endocrine gland, thyroid gland', 'epithelium, kidney', 'adipose tissue, connective tissue', 'immune organ, endocrine gland, thymus', 'prostate gland', 'bodily fluid, blood', 'prostate gland', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'NA', 'musculature of body', 'embryo, extraembryonic component, placenta', 'extraembryonic component', 'epithelium, kidney', 'brain', 'embryo', 'epithelium, kidney', 'epithelium, kidney', 'bodily fluid, blood', 'epithelium, kidney', 'lung', 'connective tissue', 'epithelium, kidney', 'bodily fluid, blood', 'colon, large intestine, intestine', 'epithelium, endocrine gland, exocrine gland, liver', 'stomach', 'adrenal gland, endocrine gland', 'epithelium, kidney', 'epithelium, breast', 'epithelium, endocrine gland, exocrine gland, liver', 'NA', 'nerve, limb', 'bodily fluid, blood', 'esophagus, epithelium', 'skin of body', 'epithelium, kidney', 'small intestine, intestine', 'pancreas', 'bodily fluid, blood', 'musculature of body', 'embryo', 'epithelium, kidney', 'stomach', 'stomach', 'bodily fluid, blood', 'musculature of body, limb', 'immune organ, endocrine gland, thymus', 'epithelium, kidney', 'epithelium, kidney', 'prostate gland', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, kidney', 'bodily fluid, blood', 'epithelium, exocrine gland, mouth', 'immune organ, bone marrow, lymph node, bone element', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'epithelium, kidney', 'brain', 'paraythroid gland', 'epithelium, kidney', 'brain', 'epithelium, skin of body, penis', 'bodily fluid, blood', 'colon, large intestine, intestine', 'bodily fluid, blood', 'musculature of body', 'bodily fluid, blood', 'NA', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'embryo', 'musculature of body, limb', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'extraembryonic component, placenta', 'connective tissue, skin of body, penis', 'connective tissue', 'bodily fluid, blood', 'extraembryonic component', 'bodily fluid, blood', 'bodily fluid, blood', 'prostate gland', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'bone marrow, bone element', 'bone element', 'adipose tissue, connective tissue', 'epithelium, endocrine gland, exocrine gland, liver', 'heart', 'heart', 'brain', 'musculature of body', 'heart', 'colon, large intestine, intestine', 'bodily fluid, blood', 'embryo', 'small intestine, intestine', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'skin of body', 'bodily fluid, blood', 'heart', 'lung', 'epithelium, colon, large intestine, intestine', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'uterus', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'embryo', 'small intestine, intestine', 'lymphoid tissue, intestine', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'penis', 'epithelium, endocrine gland, exocrine gland, liver', 'musculature of body, limb', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'testis, gonad', 'epithelium, kidney', 'vasculature, arterial blood vessel, blood vessel', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo', 'NA', 'brain', 'lung, connective tissue', 'small intestine, intestine', 'bone element', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'connective tissue', 'epithelium, colon, large intestine, intestine', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'embryo', 'colon, large intestine, intestine', 'connective tissue, skin of body, penis', 'bodily fluid, blood', 'lung', 'epithelium, mammary gland, exocrine gland', 'colon, large intestine, intestine', 'bodily fluid, blood', 'embryo', 'NA', 'embryo', 'embryo, extraembryonic component', 'embryo', 'bodily fluid, blood', 'NA', 'bodily fluid, blood', 'NA', 'bodily fluid, blood', 'pancreas', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'musculature of body', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'brain, spinal cord, eye, ear', 'brain, spinal cord, eye, ear', 'bodily fluid, blood', 'bodily fluid, blood', 'NA', 'bodily fluid, blood', 'nerve, limb', 'connective tissue, skin of body, penis', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo', 'stomach', 'musculature of body', 'bodily fluid, blood', 'connective tissue', 'epithelium, endocrine gland, exocrine gland, liver', 'skin of body', 'prostate gland', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'large intestine, intestine', 'pancreas', 'epithelium, kidney', 'ovary, gonad', 'bodily fluid, blood', 'lung', 'bodily fluid, blood', 'prostate gland', 'brain', 'large intestine, intestine', 'epithelium, kidney', 'lung, connective tissue', 'colon, large intestine, intestine', 'bodily fluid, blood', 'connective tissue', 'extraembryonic component, placenta', 'bodily fluid, blood', 'colon, large intestine, intestine', 'musculature of body, limb', 'brain, epithelium', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bone element', 'bodily fluid, blood', 'musculature of body', 'embryo, extraembryonic component, placenta', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'lymphoid tissue, intestine', 'bodily fluid, blood', 'esophagus, epithelium', 'extraembryonic component, placenta', 'embryo', 'brain, spinal cord, eye, ear', 'bodily fluid, blood', 'brain', 'colon, large intestine, intestine', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'skin of body', 'embryo, epithelium', 'musculature of body', 'NA', 'embryo', 'epithelium, breast', 'bodily fluid, blood', 'embryo', 'embryo', 'adipose tissue, connective tissue', 'adrenal gland, endocrine gland', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'bone element', 'prostate gland', 'bodily fluid, blood', 'embryo', 'skin of body', 'vasculature, arterial blood vessel, blood vessel', 'epithelium, endocrine gland, exocrine gland, liver', 'prostate gland', 'epithelium, endocrine gland, exocrine gland, liver', 'pancreas', 'bodily fluid, blood', 'brain, spinal cord, eye, ear', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'nerve, limb', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo, extraembryonic component, placenta', 'exocrine gland, endocrine gland, liver', 'epithelium, skin of body, penis', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'epithelium, kidney', 'heart', 'spinal cord', 'endocrine gland, thyroid gland', 'prostate gland, epithelium', 'immune organ, bone marrow, lymph node, bone element', 'skin of prepuce of penis, skin of body, penis', 'prostate gland', 'adrenal gland, endocrine gland', 'embryo', 'epithelium, kidney', 'colon, large intestine, intestine', 'epithelium, kidney', 'small intestine, intestine', 'bodily fluid, blood', 'NA', 'epithelium, endocrine gland, exocrine gland, liver', 'bone marrow, bone element', 'lung', 'epithelium, kidney', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'bodily fluid, blood', 'skin of body', 'bone marrow, bone element', 'esophagus, musculature of body', 'epithelium, kidney', 'embryo', 'spinal cord', 'bodily fluid, blood', 'pancreas', 'epithelium, mammary gland, exocrine gland', 'heart, musculature of body', 'epithelium, kidney', 'skin of body, limb, connective tissue', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'immune organ, bone marrow, lymph node, bone element', 'bodily fluid, blood, lymph node', 'exocrine gland, endocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'lung', 'NA', 'bodily fluid, blood', 'brain', 'bodily fluid, blood, lymph node', 'embryo', 'skin of body', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'stomach, musculature of body', 'epithelium, endocrine gland, exocrine gland, liver', 'NA', 'bodily fluid, blood', 'bone marrow, bone element', 'embryo, extraembryonic component', 'epithelium, mammary gland, exocrine gland', 'epithelium, mammary gland, exocrine gland', 'skin of prepuce of penis, skin of body, penis', 'pancreas', 'bodily fluid, blood', 'embryo', 'epithelium, mammary gland, exocrine gland', 'esophagus, epithelium', 'small intestine, intestine', 'heart', 'vagina', 'bodily fluid, blood', 'epithelium, kidney', 'brain', 'bodily fluid, blood', 'lymphoid tissue, intestine', 'bodily fluid, blood, lymph node', 'embryo', 'prostate gland', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, kidney', 'embryo', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'pancreas', 'bodily fluid, blood', 'stomach', 'brain, spinal cord, eye, ear', 'bodily fluid, blood', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, uterus', 'embryo', 'skin of body, limb', 'brain', 'embryo, extraembryonic component', 'embryo', 'lung', 'skin of prepuce of penis, skin of body, penis', 'bodily fluid, blood', 'brain, spinal cord, eye, ear', 'connective tissue, skin of body, penis', 'embryo, epithelium', 'bodily fluid, blood', 'bone marrow, bone element', 'esophagus, musculature of body', 'brain', 'lung', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'epithelium, kidney', 'brain', 'small intestine, intestine', 'epithelium, kidney', 'brain', 'lung', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'bodily fluid, blood', 'embryo', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'embryo', 'connective tissue', 'epithelium, kidney', 'epithelium, exocrine gland, mouth', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'bodily fluid, blood', 'lung', 'epithelium, kidney', 'colon, large intestine, intestine', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'adrenal gland, endocrine gland', 'musculature of body, limb', 'skin of body, limb, connective tissue', 'embryo', 'bodily fluid, blood', 'colon, large intestine, intestine', 'bodily fluid, blood', 'endocrine gland, thyroid gland', 'large intestine, intestine', 'brain', 'heart', 'connective tissue', 'adipose tissue, connective tissue', 'breast', 'epithelium, endocrine gland, exocrine gland, liver', 'pancreas', 'stomach', 'exocrine gland, endocrine gland, liver', 'bodily fluid, blood', 'brain, spinal cord, eye, ear', 'skin of body, limb, connective tissue', 'stomach, musculature of body', 'epithelium, kidney', 'epithelium, kidney', 'colon, large intestine, intestine', 'endocrine gland, thyroid gland', 'colon, large intestine, intestine', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'endocrine gland, thyroid gland', 'skin of body', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, kidney', 'epithelium, kidney', 'esophagus, epithelium', 'vasculature, arterial blood vessel, blood vessel', 'extraembryonic component', 'bodily fluid, blood', 'epithelium, kidney', 'prostate gland, epithelium', 'bodily fluid, blood, lymph node', 'bodily fluid, blood', 'exocrine gland, endocrine gland, liver', 'prostate gland', 'brain', 'epithelium, mammary gland, exocrine gland', 'breast', 'epithelium, mammary gland, exocrine gland', 'brain', 'lung', 'skin of body, limb, connective tissue', 'bodily fluid, blood', 'brain', 'stomach, musculature of body', 'skin of prepuce of penis, skin of body, penis', 'connective tissue, skin of body, penis', 'exocrine gland, endocrine gland, liver', 'epithelium, kidney', 'embryo', 'vagina', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'colon, large intestine, intestine', 'bone marrow, bone element', 'NA', 'esophagus, musculature of body', 'adipose tissue, connective tissue', 'musculature of body, limb', 'adipose tissue, connective tissue', 'epithelium, endocrine gland, exocrine gland, liver', 'colon, large intestine, intestine', 'immune organ, endocrine gland, thymus', 'epithelium, kidney', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'epithelium, endocrine gland, exocrine gland, liver', 'colon, large intestine, intestine', 'embryo', 'epithelium, endocrine gland, exocrine gland, liver', 'musculature of body', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'heart', 'embryo', 'bodily fluid, blood', 'skin of body', 'NA', 'small intestine, intestine', 'colon, large intestine, intestine', 'vasculature, arterial blood vessel, blood vessel', 'musculature of body', 'embryo', 'bodily fluid, blood', 'embryo', 'skin of body', 'colon, large intestine, intestine', 'bodily fluid, blood', 'lung', 'epithelium, mammary gland, exocrine gland', 'NA', 'nerve, limb', 'lung', 'esophagus, musculature of body', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, breast', 'bodily fluid, blood', 'vasculature, arterial blood vessel, blood vessel', 'bodily fluid, blood', 'epithelium, mammary gland, exocrine gland', 'embryo', 'embryo, extraembryonic component', 'stomach, musculature of body', 'skin of body', 'lung, connective tissue', 'adrenal gland, endocrine gland', 'pancreas', 'prostate gland', 'colon, large intestine, intestine', 'small intestine, intestine', 'bodily fluid, blood', 'lung', 'brain', 'epithelium, endocrine gland, exocrine gland, liver', 'prostate gland', 'epithelium, kidney', 'bodily fluid, blood', 'bodily fluid, blood', 'bodily fluid, blood', 'musculature of body, limb', 'embryo, extraembryonic component, placenta', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'musculature of body', 'epithelium, kidney', 'immune organ, spleen', 'epithelium, endocrine gland, exocrine gland, liver', 'immune organ, endocrine gland, thymus', 'embryo', 'bodily fluid, blood', 'large intestine, musculature of body, intestine', 'brain', 'breast', 'lung', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, mammary gland, exocrine gland', 'musculature of body, limb', 'endocrine gland, thyroid gland', 'bone element', 'NA', 'embryo', 'brain', 'embryo', 'ovary, gonad', 'vasculature, arterial blood vessel, blood vessel', 'immune organ, bone marrow, lymph node, bone element', 'NA', 'embryo', 'lung, connective tissue', 'bodily fluid, blood', 'embryo, extraembryonic component, placenta', 'pancreas', 'bone marrow, bone element', 'bodily fluid, blood', 'small intestine, intestine', 'embryo', 'NA', 'epithelium, endocrine gland, exocrine gland, liver', 'immune organ, spleen', 'extraembryonic component', 'embryo, extraembryonic component', 'vasculature, arterial blood vessel, blood vessel', 'embryo, extraembryonic component', 'vasculature, arterial blood vessel, blood vessel', 'bone marrow, bone element', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'vagina', 'bodily fluid, blood, lymph node', 'embryo, extraembryonic component, placenta', 'bodily fluid, blood', 'lung', 'NA', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'epithelium, kidney', 'epithelium, mammary gland, exocrine gland', 'embryo', 'heart', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'bodily fluid, blood', 'epithelium, skin of body', 'bodily fluid, blood', 'lung', 'stomach, musculature of body', 'bodily fluid, blood', 'musculature of body, limb', 'lung', 'penis', 'heart', 'embryo', 'bodily fluid, blood', 'bodily fluid, blood', 'colon, large intestine, intestine', 'bodily fluid, blood', 'vasculature, arterial blood vessel, blood vessel', 'brain', 'endocrine gland, thyroid gland', 'vagina', 'brain', 'bodily fluid, blood', 'bone element', 'bodily fluid, blood', 'pancreas', 'epithelium, kidney', 'extraembryonic component, placenta', 'bodily fluid, blood, lymph node', 'brain', 'epithelium, kidney', 'colon, large intestine, intestine', 'pancreas', 'epithelium, mammary gland, exocrine gland', 'bodily fluid, blood', 'bone marrow, bone element', 'skin of body', 'adipose tissue, connective tissue', 'bodily fluid, blood', 'testis, gonad', 'exocrine gland, endocrine gland, liver', 'lymphoid tissue, intestine', 'vasculature, arterial blood vessel, blood vessel', 'brain, spinal cord, eye, ear', 'adipose tissue, connective tissue', 'vasculature, arterial blood vessel, blood vessel', 'epithelium, kidney', 'pancreas', 'epithelium, mammary gland, exocrine gland', 'epithelium, kidney', 'bodily fluid, blood', 'lung', 'epithelium, mammary gland, exocrine gland', 'skin of body', 'bodily fluid, blood', 'bodily fluid, blood', 'prostate gland, epithelium', 'vasculature, arterial blood vessel, blood vessel', 'musculature of body', 'heart', 'epithelium, endocrine gland, exocrine gland, liver', 'epithelium, endocrine gland, exocrine gland, liver', 'vasculature, arterial blood vessel, blood vessel', 'adipose tissue, connective tissue', 'skin of body', 'bodily fluid, blood', 'epithelium, endocrine gland, exocrine gland, liver', 'embryo', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'adrenal gland, endocrine gland', 'NA', 'epithelium, kidney', 'epithelium, endocrine gland, exocrine gland, liver', 'kidney', 'heart, musculature of body', 'exocrine gland, endocrine gland, liver', 'lymphoid tissue, intestine', 'musculature of body', 'lung', 'brain', 'bodily fluid, blood', 'skin of body', 'epithelium, kidney', 'immune organ, bone marrow, lymph node, bone element', 'epithelium, kidney', 'bodily fluid, blood', 'brain', 'bodily fluid, blood', 'musculature of body, limb', 'bodily fluid, blood', 'large intestine, intestine', 'uterus', 'epithelium, mammary gland, exocrine glandn['ectoderm', 'ectoderm', 'mesoderm', '', 'ectoderm', 'ectoderm', 'ectoderm', 'endoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', '', '', 'mesoderm', 'mesoderm', '', '', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'ectoderm', '', 'ectoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm, endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', '', 'ectoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'ectoderm, mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', '', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', '', 'ectoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'ectoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm, endoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm', 'endoderm', '', 'endoderm', 'mesoderm, endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm', 'endoderm', 'ectoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', '', 'mesoderm', 'mesoderm, endoderm', 'endoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm, endoderm', 'endoderm', 'mesoderm, endoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', '', 'mesoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm, endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm, endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', '', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', '', 'endoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', '', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm, endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm, endoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'NA', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm, endoderm', 'ectoderm', '', 'mesoderm, endoderm', 'ectoderm', 'ectoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm, endoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm, endoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm, ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm, endoderm', '', 'mesoderm', 'mesoderm, endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', '', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm, endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'ectoderm, mesoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', '', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', '', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm, endoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm, endoderm', 'mesoderm', 'ectoderm', '', 'mesoderm, endoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'ectoderm, mesoderm', 'endoderm', 'ectoderm, mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', '', 'ectoderm', 'mesoderm', '', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm, endoderm', 'endoderm', '', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', '', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', '', 'mesoderm', 'endoderm', 'mesoderm, ectoderm', 'ectoderm', '', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'mesoderm', 'mesoderm, endoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm, endoderm', 'mesoderm, endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm, mesoderm', '', 'endoderm', 'mesoderm, endoderm', 'NA', '', 'endoderm', '', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', '', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', '', '', '', '', '', '', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'endoderm', '', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', '', '', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'endoderm', '', '', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', '', '', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', '', '', '', 'mesoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', '', '', '', 'endoderm', '', '', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', '', '', '', '', '', '', '', '', '', '', '', '', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'ectoderm', 'endoderm', '', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', '', 'endoderm', 'mesoderm', '', 'mesoderm', '', '', 'mesoderm', 'mesoderm', 'ectoderm', '', '', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'endoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', '', 'endoderm', '', 'endoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', '', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', '', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'NA', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', '', 'endoderm, mesoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'endoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'ectoderm', 'ectoderm', '', '', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', 'NA', 'mesoderm', '', '', '', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', '', '', '', 'endoderm', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', '', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'ectoderm', '', '', '', '', '', '', '', '', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'NA', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'NA', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', '', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'NA', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'endoderm', '', 'endoderm, mesoderm', '', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', '', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'NA', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'ectoderm', 'endoderm, mesoderm', '', 'mesoderm', '', 'NA', 'mesoderm', 'ectoderm', 'endoderm', '', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'ectoderm, mesoderm', '', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'NA', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', '', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', '', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'ectoderm', '', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'NA', 'endoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', '', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'NA', 'endoderm', 'mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'NA', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'NA', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'ectoderm', 'mesoderm', 'NA', 'ectoderm', 'ectoderm', 'NA', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'NA', 'endoderm', 'NA', 'mesoderm', 'ectoderm', 'NA', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'NA', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'NA', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', '', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'NA', '', '', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', '', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', '', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'endoderm', '', 'endoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'ectoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm, mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', '', 'endoderm', '', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'ectoderm', '', 'endoderm, mesoderm', 'NA', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'endoderm', '', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', '', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'endoderm, mesoderm', 'endoderm', '', 'mesoderm', 'mesoderm', '', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'ectoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'ectoderm', '', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm', '', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'NA', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', '', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', '', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm, mesoderm', '', 'endoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', '', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'NA', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', '', 'endoderm, mesoderm', '', '', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'NA', 'mesoderm', 'endoderm, mesoderm', 'endoderm', '', 'mesoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm, mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'NA', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm, mesoderm', 'NA', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', '', 'ectoderm', 'ectoderm', '', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', '', '', '', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'NA', 'ectoderm, mesoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', 'endoderm', '', 'mesoderm', 'ectoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'ectoderm', 'NA', '', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'NA', '', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', '', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'endoderm', '', '', 'mesoderm', 'mesoderm', 'mesoderm', '', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', '', 'endoderm', '', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', '', 'endoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', '', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', '', 'ectoderm, mesoderm', 'mesoderm', '', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', '', 'ectoderm', 'mesoderm', 'ectoderm', '', 'endoderm', 'endoderm', '', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', '', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'mesoderm', 'endoderm', '', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'ectoderm', 'endoderm, mesoderm', 'endoderm', '', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'ectoderm', 'mesoderm', 'NA', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'ectoderm', 'endoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm', '', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm, mesoderm', 'ectoderm', 'endoderm, mesoderm', '', 'endoderm', 'NA', 'mesoderm', 'mesoderm', 'mesoderm', '', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'NA', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', '', '', 'endoderm', 'NA', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'ectoderm, mesoderm', 'endoderm', 'NA', 'ectoderm', 'ectoderm, mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'NA', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', '', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm, mesoderm', 'endoderm', 'ectoderm, mesoderm', '', 'NA', 'mesoderm', 'mesoderm', '', 'ectoderm', '', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'NA', 'endoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', '', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'NA', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm, mesoderm', 'NA', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'NA', 'ectoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'NA', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', '', 'ectoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', '', 'ectoderm', 'endoderm', 'ectoderm', '', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'endoderm', '', 'endoderm', 'endoderm, mesoderm', '', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', '', 'ectoderm', 'NA', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', '', 'mesoderm', 'ectoderm', 'NA', 'ectoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', '', '', 'mesoderm', 'endoderm', '', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', '', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', '', '', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'NA', 'ectoderm, mesoderm', 'NA', 'ectoderm, mesoderm', 'NA', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', '', 'NA', 'endoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', '', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'NA', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'NA', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', '', 'ectoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', '', 'endoderm', 'endoderm, mesoderm', '', 'endoderm', 'mesoderm', 'ectoderm', 'NA', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', '', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'NA', 'mesoderm', 'ectoderm', 'endoderm', 'ectoderm', 'ectoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'ectoderm, mesoderm', '', 'endoderm', 'endoderm', 'NA', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm', 'NA', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'endoderm', '', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', '', 'mesoderm', 'endoderm', '', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'endoderm', 'NA', 'ectoderm', 'ectoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', '', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'NA', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', '', 'mesoderm', '', 'ectoderm', 'endoderm', '', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', '', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'NA', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'NA', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', '', '', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'ectoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'NA', 'mesoderm', 'endoderm', 'endoderm', 'NA', '', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', '', 'endoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'ectoderm', 'endoderm', 'NA', '', 'endoderm', 'endoderm', '', '', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'NA', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'NA', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm, mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'NA', 'endoderm', '', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'NA', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'endoderm, mesoderm', 'ectoderm', 'NA', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', '', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', '', 'ectoderm', 'ectoderm, mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'NA', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', '', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'NA', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', '', 'ectoderm', 'mesoderm', 'NA', 'endoderm', 'endoderm', '', 'mesoderm', '', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm', '', '', 'endoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', '', '', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'endoderm, mesoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'ectoderm', 'mesoderm', '', 'NA', '', 'NA', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', '', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'mesoderm', '', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'NA', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', '', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', '', 'endoderm', 'NA', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', '', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'NA', 'endoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', '', 'ectoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', '', 'NA', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', '', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'NA', '', '', '', 'endoderm, mesoderm', 'NA', 'mesoderm', 'NA', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'NA', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', '', 'endoderm', 'mesoderm', '', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'ectoderm', '', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm', 'ectoderm', '', 'mesoderm', 'NA', '', '', 'mesoderm', '', '', 'mesoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', '', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'ectoderm', '', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'endoderm, mesoderm', 'ectoderm, mesoderm', '', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'NA', 'endoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'ectoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', 'endoderm', 'NA', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', '', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'endoderm', 'NA', 'mesoderm', 'mesoderm', '', 'ectoderm', 'ectoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', '', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'mesoderm', '', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', '', 'endoderm', '', 'mesoderm', 'ectoderm', 'ectoderm', '', '', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'ectoderm, mesoderm', '', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', '', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'ectoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm', '', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'endoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm, mesoderm', 'ectoderm', 'ectoderm', '', 'ectoderm', 'ectoderm', 'endoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'endoderm', 'ectoderm, mesoderm', 'ectoderm, mesoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'NA', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'endoderm', '', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm, mesoderm', 'mesoderm', 'endoderm', 'mesoderm', '', 'mesoderm', 'ectoderm', 'NA', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'endoderm', 'ectoderm', 'NA', 'ectoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', '', 'endoderm, mesoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'ectoderm', '', 'mesoderm', 'ectoderm', 'endoderm', 'ectoderm, mesoderm', 'endoderm', 'endoderm, mesoderm', 'endoderm', 'endoderm', '', 'endoderm', 'ectoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', '', 'mesoderm', 'mesoderm', 'ectoderm', '', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'NA', '', 'ectoderm', 'ectoderm', '', 'mesoderm', 'mesoderm', 'NA', '', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', '', 'NA', 'endoderm', 'mesoderm', 'mesoderm', '', 'mesoderm', '', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'NA', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'ectoderm', '', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'ectoderm, mesoderm', 'mesoderm', '', 'mesoderm', 'endoderm, mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'endoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'ectoderm', 'mesoderm', 'endoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', '', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'endoderm', '', 'mesoderm', 'ectoderm', 'mesoderm', 'ectoderm, mesoderm', 'NA', 'mesoderm', 'endoderm', 'mesoderm', 'mesoderm', 'endoderm', 'endoderm, mesoderm', 'mesoderm', 'endoderm', 'ectoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'mesoderm', 'ectoderm', 'mesoderm', 'mesoderm', 'endoderm, mesoderm', 'endoderm', '', 'ectodermn\n\n\ndf_targets.columns\n\nIndex(['index', 'genome', 'identifier', 'file', 'clip', 'scale', 'sum_stat',\n       'description', 'system', 'cell', 'organ', 'developmental'],\n      dtype='object')"
  },
  {
    "objectID": "posts/2023-08-14-updated-preparing-rat-vcf-inputs-for-enformer-pipeline/index.html",
    "href": "posts/2023-08-14-updated-preparing-rat-vcf-inputs-for-enformer-pipeline/index.html",
    "title": "Preparing rat VCFs for Enformer pipeline",
    "section": "",
    "text": "Download VCF\ncd enformer_rat_data\nwget https://ratgtex.org/data/geno/genotypes/Brain.rn7.vcf.gz\n\n\n\nChanging VCF CHROM notation\ngunzip genotypes/Brain.rn7.vcf.gz\nawk '{if($0 !~ /^#/) print \"chr\"$0; else print $0}' genotypes/Brain.rn7.vcf &gt; output.rn7.vcf\n\n\n\nReplace missing genotypes with reference alleles\nNote: There are a number of good reasons filling in missing genotypes with two reference alleles is discouraged. However, our goal is to predict the epigenome from a sequence of 393,216 base pairs, so we assume that changing a snp will have negligible effect on Enformer predictions. Additionally, we are not using allele frequency to draw any conclusions about our population.\nsed 's/\\.\\/\\./0\\/0/g' output.rn7.vcf &gt; Brain.rn7.no_missing.vcf\nbgzip Brain.rn7.no_missing.vcf\nbcftools index -t Brain.rn7.no_missing.vcf.gz\n\n\n\nSplit VCFs\nFirst by chromosome number:\n\nmkdir genotypes/BrainVCFs\n# Split VCF by chromosome\nvcf_in=Brain.rn7.no_missing.vcf.gz\n\nvcf_out_prefix=genotypes/BrainVCFs/chr\n\nfor i in {1..20}\ndo\n    echo \"Working on chromosome ${i}...\"\n    bcftools view ${vcf_in} --regions chr${i} -o ${vcf_out_prefix}${i}.vcf.gz -Oz\ndone\n\n\n# Index VCFs\nfor i in {1..20}\ndo\n    echo \"Indexing chromosome ${i}...\"\n    bcftools index -t genotypes/BrainVCFs/chr${i}.vcf.gz\ndone\nThen for the sex chromosomes:\nvcf_in=Brain.rn7.no_missing.vcf.gz\nvcf_out_prefix=genotypes/BrainVCFs/chr\n\nbcftools view ${vcf_in} --regions X -o ${vcf_out_prefix}X.vcf.gz -Oz\nbcftools view ${vcf_in} --regions Y -o ${vcf_out_prefix}Y.vcf.gz -Oz\n\nbcftools index -t genotypes/BrainVCFs/chrX.vcf.gz\nbcftools index -t genotypes/BrainVCFs/chrY.vcf.gz"
  },
  {
    "objectID": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/average_haplotype_test.html",
    "href": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/average_haplotype_test.html",
    "title": "Testing the Enformer pipeline’s handling of unphased VCFs",
    "section": "",
    "text": "Read in h5 prediction file\n\nimport numpy as np\nimport h5py\n\n\nf = h5py.File(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/predictions_folder/personalized_enformer_rat_single_gene/predictions_2023-08-16/enformer_predictions/000789972A/haplotype0/chr20_12118762_12118762_predictions.h5\", \"r\")\npredictions1 = f['chr20_12118762_12118762'][()]\nprint(predictions1)\n\n[[0.23258275 0.2962714  0.52013165 ... 0.19615567 1.1101408  0.25560504]\n [0.15570731 0.20205402 0.3755348  ... 0.04365927 0.24989623 0.08517855]\n [0.1536611  0.21689793 0.4510562  ... 0.05227472 0.2147567  0.08478698]\n ...\n [0.1794057  0.22463816 0.29514343 ... 0.01105995 0.02652512 0.03385386]\n [0.1694869  0.20448665 0.26207498 ... 0.01688805 0.04071837 0.06028533]\n [0.15269741 0.20196484 0.22278813 ... 0.02438667 0.03900523 0.05988767]]\n\n\n\n\nRun non-pipeline Enformer\n\nimport EnformerVCF\nimport kipoiseq\nfasta_file = '/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/reference_genome/rn7_genome.fasta'\nfasta_extractor = EnformerVCF.FastaStringExtractor(fasta_file)\n\n\n# read VCFs and encode haplotypes\ntarget_interval = kipoiseq.Interval(\"chr20\", 12118762, 12118762)\nchr20_vcf = EnformerVCF.read_vcf(\"/Users/sabrinami/enformer_rat_data/genotypes/BrainVCFs/chr20.vcf.gz\")\nhaplo1, haplo2 = EnformerVCF.vcf_to_seq(target_interval, '000789972A', chr20_vcf, fasta_extractor)\nhaplo1_enc = EnformerVCF.one_hot_encode(\"\".join(haplo1))[np.newaxis]\nhaplo2_enc = EnformerVCF.one_hot_encode(\"\".join(haplo2))[np.newaxis]\n\n\nmean_haplo = (haplo1_enc + haplo2_enc) / 2\npredictions2 = EnformerVCF.model.predict_on_batch(mean_haplo)['human'][0]\n\n\nprint(\"There are\", sum(sum(predictions1 != predictions2)), \"differences between the two matrices.\")\n\nThere are 0 differences between the two matrices.\n\n\nIt looks like our edits worked!"
  },
  {
    "objectID": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/index.html",
    "href": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/index.html",
    "title": "Testing the Enformer pipeline with added parameters for personalized prediction on rats",
    "section": "",
    "text": "We chose ENSRNOG00000054549, centered at the TSS chr20:12118762.\nconda activate enformer-predict-tools\n\ncd /Users/sabrinami/Github/shared_pipelines/enformer_pipeline\n\npython scripts/enformer_predict.py --parameters /Users/sabrinami/Github/deep-learning-in-genomics/posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/local_test_personalized.json"
  },
  {
    "objectID": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/index.html#test-for-a-single-individual-and-gene",
    "href": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/index.html#test-for-a-single-individual-and-gene",
    "title": "Testing the Enformer pipeline with added parameters for personalized prediction on rats",
    "section": "",
    "text": "We chose ENSRNOG00000054549, centered at the TSS chr20:12118762.\nconda activate enformer-predict-tools\n\ncd /Users/sabrinami/Github/shared_pipelines/enformer_pipeline\n\npython scripts/enformer_predict.py --parameters /Users/sabrinami/Github/deep-learning-in-genomics/posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/local_test_personalized.json"
  },
  {
    "objectID": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/index.html#compare-results-to-non-pipeline-method",
    "href": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/index.html#compare-results-to-non-pipeline-method",
    "title": "Testing the Enformer pipeline with added parameters for personalized prediction on rats",
    "section": "Compare results to non-pipeline method",
    "text": "Compare results to non-pipeline method\n\nRead in h5 prediction files\n\nimport h5py\nimport EnformerVCF\nimport kipoiseq\nimport numpy as np\n\n2023-08-26 14:55:53.212214: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\nTo enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n\n\n\nf = h5py.File('/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/predictions_folder/personalized_enformer_rat_single_gene/predictions_2023-08-15/enformer_predictions/000789972A/haplotype1/chr20_12118762_12118762_predictions.h5', 'r')\nhaplotype1 = f['chr20_12118762_12118762'][()]\nf = h5py.File('/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/predictions_folder/personalized_enformer_rat_single_gene/predictions_2023-08-15/enformer_predictions/000789972A/haplotype2/chr20_12118762_12118762_predictions.h5', 'r')\nhaplotype2 = f['chr20_12118762_12118762'][()]\n\n\nprint(\"haplotype1:\\n\", haplotype1)\nprint(\"haplotype2:\\n\", haplotype2)\n\nhaplotype1:\n [[0.24076067 0.30101207 0.5132549  ... 0.20521325 1.1217918  0.25558835]\n [0.15946281 0.20442429 0.37761706 ... 0.04465578 0.24607326 0.08344302]\n [0.15568599 0.21775411 0.4520394  ... 0.05306218 0.20978831 0.08246609]\n ...\n [0.17938398 0.22463004 0.29506153 ... 0.01107231 0.02651541 0.0338815 ]\n [0.16948122 0.2044945  0.2620006  ... 0.01690046 0.04069382 0.06031117]\n [0.15266503 0.201914   0.22262897 ... 0.02438843 0.03895664 0.05986918]]\nhaplotype2:\n [[0.23317184 0.29741773 0.5182305  ... 0.20385785 1.1424272  0.26008573]\n [0.15613721 0.20323968 0.37887666 ... 0.04524086 0.257699   0.08468267]\n [0.15380262 0.21736239 0.45358157 ... 0.05439655 0.22475001 0.08432709]\n ...\n [0.17942066 0.2246648  0.29515463 ... 0.01105907 0.02650285 0.03387856]\n [0.16946748 0.20452495 0.2621123  ... 0.0168827  0.04067391 0.06034191]\n [0.15272975 0.20209791 0.22299151 ... 0.0243816  0.03896997 0.05996798]]\n\n\n\n\nRun non-pipeline Enformer\n\nfasta_file = '/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/rn7_genome.fasta'\nfasta_extractor = EnformerVCF.FastaStringExtractor(fasta_file)\n\n\n## read vcf and encode haplotypes\ntarget_interval = kipoiseq.Interval(\"chr20\", 12118762, 12118762)\nchr20_vcf = EnformerVCF.read_vcf(\"/Users/sabrinami/enformer_pipeline_test/rn7_data/chr20.vcf.gz\")\nhaplo1, haplo2 = EnformerVCF.vcf_to_seq(target_interval, '000789972A', chr20_vcf, fasta_extractor)\nhaplo1_enc = EnformerVCF.one_hot_encode(\"\".join(haplo1))[np.newaxis]\nhaplo2_enc = EnformerVCF.one_hot_encode(\"\".join(haplo2))[np.newaxis]\n\n\n## run predictions\nprediction1 = EnformerVCF.model.predict_on_batch(haplo1_enc)['human'][0]\nprediction2 = EnformerVCF.model.predict_on_batch(haplo2_enc)['human'][0]\n\n\nprint(\"There are\", sum(sum(haplotype1 != prediction1)), \"differences between haplotype1 matrices and\", sum(sum(haplotype2 != prediction2)), \"differences between haplotype2 matrices.\")\n\nThere are 0 differences between haplotype1 matrices and 0 differences between haplotype2 matrices.\n\n\nThe pipeline outputs are the same!"
  },
  {
    "objectID": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/index.html#test-mouse-head-on-reference-genome",
    "href": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/index.html#test-mouse-head-on-reference-genome",
    "title": "Testing the Enformer pipeline with added parameters for personalized prediction on rats",
    "section": "Test mouse head on reference genome",
    "text": "Test mouse head on reference genome\nconda activate enformer-predict-tools\n\ncd /Users/sabrinami/Github/shared_pipelines/enformer_pipeline\n\npython scripts/enformer_predict.py --parameters /Users/sabrinami/Github/deep-learning-in-genomics/posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/local_test_reference.json"
  },
  {
    "objectID": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/index.html#compare-results-to-non-pipeline-method-1",
    "href": "posts/2023-08-15-test-run-of-personalized-enformer-pipeline-for-rats/index.html#compare-results-to-non-pipeline-method-1",
    "title": "Testing the Enformer pipeline with added parameters for personalized prediction on rats",
    "section": "Compare results to non-pipeline method",
    "text": "Compare results to non-pipeline method\n\nimport numpy as np\n## Read prediction file\nf = h5py.File(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/predictions_folder/reference_enformer_rat_single_gene/predictions_2023-08-26/enformer_predictions/reference_enformer_rat/haplotype0/chr20_12118762_12118762_predictions.h5\", \"r\")\nhaplotype0 = f[\"chr20_12118762_12118762\"][()]\nprint(\"shape:\", haplotype0.shape)\n\nshape: (896, 1643)\n\n\n\nSEQUENCE_LENGTH = 393216\ntarget_interval = kipoiseq.Interval(\"chr20\", 12118762, 12118762)\nsequence_one_hot = EnformerVCF.one_hot_encode(fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH)))\npredictions = EnformerVCF.model.predict_on_batch(sequence_one_hot[np.newaxis])['mouse'][0]\n\n\nprint(\"There are\", sum(sum(haplotype0 != predictions)), \"differences between pipeline and non-pipeline outputs.\")"
  },
  {
    "objectID": "posts/2023-09-13-all-correlation-across-genes-plots/index.html",
    "href": "posts/2023-09-13-all-correlation-across-genes-plots/index.html",
    "title": "Summary plots of Enformer performance across genes",
    "section": "",
    "text": "All rat reference predictions were calculated from Enformer runs with human output along rat reference genome."
  },
  {
    "objectID": "posts/2023-09-13-all-correlation-across-genes-plots/index.html#human-predicted-vs-human-observed",
    "href": "posts/2023-09-13-all-correlation-across-genes-plots/index.html#human-predicted-vs-human-observed",
    "title": "Summary plots of Enformer performance across genes",
    "section": "Human Predicted vs Human Observed",
    "text": "Human Predicted vs Human Observed\n\n\nCode\nimport pandas as pd\nfrom scipy import stats\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n\n\n\nCode\nhuman_brain_gex = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_all_GTEx_brain_tissues.csv\", index_col=0).dropna()\nx = human_brain_gex[\"cortex\"].values\ny = human_brain_gex[\"enformer\"].values\n\n\n\n\nCode\ncorr, pval = stats.pearsonr(x, y)\nplt.scatter(x, y, s=5, label=f'R = {corr:.3f}')\nplt.xlabel('Observed Expression in GTEx')\nplt.ylabel('Predicted Expression')\nplt.title(\"Human Reference Gene Expression in Brain Tissue\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\nCode\ncorr, pval = stats.spearmanr(x, y)\nplt.scatter(stats.rankdata(x), stats.rankdata(y), s=5, alpha=0.6, label=f'R = {corr:.3f}')\nplt.xlabel('Rank of Observed Expression in GTEx')\nplt.ylabel('Rank of Predicted Expression')\nplt.title(\"Human Reference Gene Expression in Brain Tissue\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\nCode\nthreshold = 5\noutliers_x = stats.zscore(x) &gt; threshold\noutliers_y = stats.zscore(y) &gt; threshold\nfiltered_x = x[~outliers_x & ~outliers_y]\nfiltered_y = y[~outliers_x & ~outliers_y]\nplt.scatter(filtered_x, filtered_y, s=5, alpha=0.6, marker='o')\n\n# Add labels and title\nplt.xlabel('Observed in GTEx')\nplt.ylabel('Predicted')\nplt.title('Human Reference Gene Expression in LCL Tissue (Outliers Removed)')\n\n# Show the plot\nplt.show()\n\n\n\n\n\nFor extra confirmation, we replicated Huang et al’s results with GEUVADIS reference gene expression in LCL tissue, and even saw improved results when we compared across all human genes.\n\n\nCode\nhuman_lcl_gex = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_GEUVADIS.csv\",index_col=0)\n\n# Sample data for x and y (including outliers)\nx = human_lcl_gex[\"geuvadis, mean\"].values\ny = human_lcl_gex[\"enformer, 3 bin\"].values\n\n\n\n\nCode\ncorr, pval = stats.spearmanr(x, y)\nplt.scatter(stats.rankdata(x), stats.rankdata(y), s=5, alpha=0.6, label=f'R = {corr:.3f}')\nplt.xlabel('Rank of Observed Expression in GEUVADIS')\nplt.ylabel('Rank of Predicted Expression')\nplt.title(\"Human Reference Gene Expression in LCL Tissue\")\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "posts/2023-09-13-all-correlation-across-genes-plots/index.html#rat-predicted-vs-rat-observed",
    "href": "posts/2023-09-13-all-correlation-across-genes-plots/index.html#rat-predicted-vs-rat-observed",
    "title": "Summary plots of Enformer performance across genes",
    "section": "Rat Predicted vs Rat Observed",
    "text": "Rat Predicted vs Rat Observed\n\n\nCode\nrat_brain_gex = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/rn7_reference_predicted_vs_observed_expression.csv\", index_col=0)\nx = rat_brain_gex[\"observed\"]\ny = rat_brain_gex[\"predicted\"]\n\n\n\n\nCode\ncorr, pval = stats.pearsonr(x, y)\nplt.scatter(x, y, s=5, label=f'R = {corr:.3f}')\nplt.xlabel('Observed Expression in Br Rats')\nplt.ylabel('Predicted Expression')\nplt.title(\"Rat Reference Gene Expression in Brain Tissue\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\nCode\ncorr, pval = stats.spearmanr(x, y)\nplt.scatter(stats.rankdata(x), stats.rankdata(y), s=5, alpha=0.6, label=f'R = {corr:.3f}')\nplt.xlabel('Rank of Observed Expression in Br Rats')\nplt.ylabel('Rank of Predicted Expression')\nplt.title(\"Rat Reference Gene Expression in Brain Tissue\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\nCode\nthreshold = 5\noutliers_x = stats.zscore(x) &gt; threshold\noutliers_y = stats.zscore(y) &gt; threshold\nfiltered_x = x[~outliers_x & ~outliers_y]\nfiltered_y = y[~outliers_x & ~outliers_y]\nplt.scatter(filtered_x, filtered_y, s=5, alpha=0.6, marker='o')\nplt.xlabel('Observed Expression in Br Rats')\nplt.ylabel('Predicted Expression')\nplt.title(\"Rat Reference Gene Expression in Brain Tissue (Outliers Removed)\")\nplt.show()"
  },
  {
    "objectID": "posts/2023-09-13-all-correlation-across-genes-plots/index.html#human-observed-vs-rat-observed",
    "href": "posts/2023-09-13-all-correlation-across-genes-plots/index.html#human-observed-vs-rat-observed",
    "title": "Summary plots of Enformer performance across genes",
    "section": "Human Observed vs Rat Observed",
    "text": "Human Observed vs Rat Observed\n\n\nCode\n## read rat observed gene expression data\nrat_tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\nrat_mean_tpm = rat_tpm.iloc[:,3:].mean(axis=1)\nrat_mean_tpm.name = \"rat mean tpm\"\n## read human gene expression data\nhuman_tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/gene_tpm_2017-06-05_v8_brain_cortex.gct.gz\", header=2, sep=\"\\t\")\nhuman_tpm['Name'] = human_tpm['Name'].apply(lambda gene: gene.split('.')[0])\nhuman_tpm.set_index('Name', inplace=True)\n# Calculate average gene expression\nhuman_mean_tpm = human_tpm.drop(columns=['id', 'Description']).mean(axis=1)\nhuman_mean_tpm.name = \"human mean tpm\"\n# Map to human genes\northo_genes = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt\", sep = \"\\t\", index_col=\"ensembl_gene_id\")\nmerged_df = ortho_genes.join(rat_mean_tpm, how=\"inner\")\nmerged_df.set_index(\"hsapiens_homolog_ensembl_gene\", inplace=True)\nexpr_df = merged_df.join(human_mean_tpm).dropna()\n\n\n/tmp/ipykernel_232432/2998070687.py:2: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  rat_tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\n\n\n\n\nCode\nx = expr_df[\"human mean tpm\"].values.astype(float)\ny = expr_df[\"rat mean tpm\"].values.astype(float)\n\n\n\n\nCode\ncorr, pval = stats.pearsonr(x, y)\nplt.scatter(x, y, s=5, label=f'R = {corr:.3f}')\nplt.xlabel('Observed in GTEx')\nplt.ylabel('Observed Br Rats')\nplt.title(\"Human and Rat Reference Gene Expression in Brain Tissue\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\nCode\ncorr, pval = stats.spearmanr(x, y)\nplt.scatter(stats.rankdata(x), stats.rankdata(y), s=5, alpha=0.6, label=f'R = {corr:.3f}')\nplt.xlabel('Rank of Observed Expression in GTEx')\nplt.ylabel('Rank of Observed Expression in Br Rats')\nplt.title(\"Human Reference Gene Expression in Brain Tissue\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\nCode\nthreshold = 5\noutliers_x = stats.zscore(x) &gt; threshold\noutliers_y = stats.zscore(y) &gt; threshold\nfiltered_x = x[~outliers_x & ~outliers_y]\nfiltered_y = y[~outliers_x & ~outliers_y]\nplt.scatter(filtered_x, filtered_y, s=5, alpha=0.6, marker='o')\nplt.xlabel('Observed Br Rats')\nplt.ylabel('Observed in GTEx')\nplt.title(\"Human and Rat Reference Gene Expression in Brain Tissue (Outliers Removed)\")\nplt.show()"
  },
  {
    "objectID": "posts/2023-08-14-install-bcftools/index.html",
    "href": "posts/2023-08-14-install-bcftools/index.html",
    "title": "How to install bcftools from source",
    "section": "",
    "text": "module load gcc/11.2.0\ncd Github\nINSTALL_DIR=/home/s1mi/bin\ngit clone https://github.com/madler/zlib.git\ncd zlib\n./configure --prefix=$INSTALL_DIR\nmake\nmake install\n\ncd ..\ncurl -L 'https://sourceforge.net/projects/bzip2/files/bzip2-1.0.6.tar.gz' &gt; bzip2-1.0.6.tar.gz\ntar xvzf bzip2-1.0.6.tar.gz\ncd bzip2-1.0.6\nmake -f Makefile-libbz2_so\n\ncd ..\ncurl -L 'https://tukaani.org/xz/xz-5.2.4.tar.gz' &gt; xz-5.2.4.tar.gz\ntar xvzf xz-5.2.4.tar.gz\ncd xz-5.2.4\n./configure --prefix=$INSTALL_DIR\nmake\nmake install\n\ncd ..\ngit clone --recurse-submodules https://github.com/samtools/htslib.git\ncd htslib/\nautoconf\nautoheader\n./configure --prefix=$INSTALL_DIR CPPFLAGS=\"-I$INSTALL_DIR/include\" LDFLAGS=\"-L$INSTALL_DIR/lib -Wl,-R$INSTALL_DIR/lib\"\nmake\nmake install\n\ncd ..\ngit clone https://github.com/samtools/bcftools.git\ncd bcftools\nautoconf\nautoheader\n./configure --prefix=$INSTALL_DIR CPPFLAGS=\"-I$INSTALL_DIR/include\" LDFLAGS=\"-L$INSTALL_DIR/lib -Wl,-R$INSTALL_DIR/lib\""
  },
  {
    "objectID": "posts/2023-09-01-comparing-human-vs-rat-mean-expression-across-genes/index.html",
    "href": "posts/2023-09-01-comparing-human-vs-rat-mean-expression-across-genes/index.html",
    "title": "Comparing human and rat reference gene expression",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n## read rat observed gene expression data\nrat_tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\nrat_mean_tpm = rat_tpm.iloc[:,3:].mean(axis=1)\nrat_mean_tpm.name = \"rat mean tpm\"\n\n/tmp/ipykernel_145300/1109491104.py:2: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  rat_tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\n\n\n\n## read human gene expression data\nhuman_tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/gene_tpm_2017-06-05_v8_brain_cortex.gct.gz\", header=2, sep=\"\\t\")\nhuman_tpm['Name'] = human_tpm['Name'].apply(lambda gene: gene.split('.')[0])\nhuman_tpm.set_index('Name', inplace=True)\n# Calculate average gene expression\nhuman_mean_tpm = human_tpm.drop(columns=['id', 'Description']).mean(axis=1)\nhuman_mean_tpm.name = \"human mean tpm\"\n\n\northo_genes = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt\", sep = \"\\t\", index_col=\"ensembl_gene_id\")\northo_genes.head()\n\n\n\n\n\n\n\n\nhsapiens_homolog_ensembl_gene\nexternal_gene_name\n\n\nensembl_gene_id\n\n\n\n\n\n\nENSRNOG00000033395\nENSG00000174937\nOr5m3\n\n\nENSRNOG00000070901\nENSG00000167378\nIrgq\n\n\nENSRNOG00000031391\nENSG00000213892\nCeacam16\n\n\nENSRNOG00000050129\nENSG00000164520\nAABR07000137.1\n\n\nENSRNOG00000056886\nENSG00000199095\nMir291b\n\n\n\n\n\n\n\n\nmerged_df = ortho_genes.join(rat_mean_tpm, how=\"inner\")\nmerged_df.set_index(\"hsapiens_homolog_ensembl_gene\", inplace=True)\nexpr_df = merged_df.join(human_mean_tpm)\nexpr_df.corr()\n\n\n\n\n\n\n\n\nrat mean tpm\nhuman mean tpm\n\n\n\n\nrat mean tpm\n1.000000\n0.886398\n\n\nhuman mean tpm\n0.886398\n1.000000\n\n\n\n\n\n\n\n\ncorr = expr_df.corr().iloc[0,1]\nplt.scatter(expr_df[\"rat mean tpm\"], expr_df[\"human mean tpm\"], label=f'Correlation: {corr:.2f}')\nplt.xlabel('rat mean tpm')\nplt.ylabel('human mean tpm')\nplt.title('Correlation between observed human and observed rat reference gene expression')\nplt.legend()\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "posts/2023-08-22-correlation-between-Enformer-and-GTEx-expression-across-genes-by-chromosome/index.html",
    "href": "posts/2023-08-22-correlation-between-Enformer-and-GTEx-expression-across-genes-by-chromosome/index.html",
    "title": "Correlation between Enformer reference CAGE prediction and GTEx brain tissue expression across genes",
    "section": "",
    "text": "import h5py\nimport pandas as pd\nimport numpy as np\n\nenfref_dir = \"/grand/TFXcan/imlab/users/lvairus/reftile_project/enformer-reference-epigenome\"\n\ndef query_epigenome(chr_num, center_bp, num_bins=3, tracks=-1):\n    \"\"\"\n    Parameters:\n        path_to_enfref (str): path to the directory containing the concatenated reference enformer files\n        chr_num (int/string): chromosome number\n        center_bp (int): center base pair position (1-indexed)\n        num_bins (int): number of bins to extract centered around center_bp (default: 896) \n            note: if the number of bins is even, the center bin will be in the second half of the array\n        tracks (int list): list of tracks to extract (default: all 5313 tracks)\n\n    Returns:\n        epigen (np.array): enformer predictions centered at center_bp of shape (num_bins, len(tracks))\n    \"\"\"\n\n    # from position choose center bin\n    center_ind = center_bp - 1\n    center_bin = center_ind // 128\n    \n    half_bins = num_bins // 2\n    start_bin = center_bin - half_bins\n    end_bin = center_bin + half_bins\n    if num_bins % 2 != 0: # if num_bins is odd\n        end_bin += 1\n\n    with h5py.File(f\"{enfref_dir}/chr{chr_num}_cat.h5\", \"r\") as f:\n        # get tracks if list provided\n        if tracks == -1:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, :] \n        else:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, tracks] \n\n    return epigen\n\n\n## create lists of genes on each chromomsome\nhg38_annot = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.protein_coding_TSS.txt\", header=0, sep=\"\\t\")\ngene_dict = hg38_annot.groupby('chromosome_name')['ensembl_gene_id'].apply(list).to_dict()\n\n\n## Initialize lists of CAGE predictions for each gene\nhg38_annot.set_index(\"ensembl_gene_id\", inplace=True)\nchr_list = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"X\"]\nCAGE_predictions = {key: [] for key in chr_list}\n\n\n## Function to put CAGE predictions in list (in the same order as gene list by chromosome)\ndef query_genes(chr):\n    gene_list = gene_dict[chr]\n    for gene in gene_list:\n        bins = query_epigenome(chr, hg38_annot.loc[gene]['transcription_start_site'], tracks=[4980])\n        CAGE_predictions[chr].append(np.average(bins))\n\n\nfor chr in chr_list:\n    query_genes(chr)\n    print(\"Queried chromosome\", chr, \"...,\", len(CAGE_predictions[chr]), \"genes\")\n\nQueried chromosome 1 ..., 2030 genes\nQueried chromosome 2 ..., 1227 genes\nQueried chromosome 3 ..., 1063 genes\nQueried chromosome 4 ..., 752 genes\nQueried chromosome 5 ..., 872 genes\nQueried chromosome 6 ..., 1031 genes\nQueried chromosome 7 ..., 919 genes\nQueried chromosome 8 ..., 693 genes\nQueried chromosome 9 ..., 766 genes\nQueried chromosome 10 ..., 715 genes\nQueried chromosome 11 ..., 1291 genes\nQueried chromosome 12 ..., 1018 genes\nQueried chromosome 13 ..., 320 genes\nQueried chromosome 14 ..., 602 genes\nQueried chromosome 15 ..., 589 genes\nQueried chromosome 16 ..., 842 genes\nQueried chromosome 17 ..., 1158 genes\nQueried chromosome 18 ..., 262 genes\nQueried chromosome 19 ..., 1432 genes\nQueried chromosome 20 ..., 537 genes\nQueried chromosome 21 ..., 219 genes\nQueried chromosome 22 ..., 434 genes\nQueried chromosome X ..., 853 genes"
  },
  {
    "objectID": "posts/2023-08-22-correlation-between-Enformer-and-GTEx-expression-across-genes-by-chromosome/index.html#collect-predicted-and-observed-reference-gene-expression-for-each-chromosome",
    "href": "posts/2023-08-22-correlation-between-Enformer-and-GTEx-expression-across-genes-by-chromosome/index.html#collect-predicted-and-observed-reference-gene-expression-for-each-chromosome",
    "title": "Correlation between Enformer reference CAGE prediction and GTEx brain tissue expression across genes",
    "section": "",
    "text": "import h5py\nimport pandas as pd\nimport numpy as np\n\nenfref_dir = \"/grand/TFXcan/imlab/users/lvairus/reftile_project/enformer-reference-epigenome\"\n\ndef query_epigenome(chr_num, center_bp, num_bins=3, tracks=-1):\n    \"\"\"\n    Parameters:\n        path_to_enfref (str): path to the directory containing the concatenated reference enformer files\n        chr_num (int/string): chromosome number\n        center_bp (int): center base pair position (1-indexed)\n        num_bins (int): number of bins to extract centered around center_bp (default: 896) \n            note: if the number of bins is even, the center bin will be in the second half of the array\n        tracks (int list): list of tracks to extract (default: all 5313 tracks)\n\n    Returns:\n        epigen (np.array): enformer predictions centered at center_bp of shape (num_bins, len(tracks))\n    \"\"\"\n\n    # from position choose center bin\n    center_ind = center_bp - 1\n    center_bin = center_ind // 128\n    \n    half_bins = num_bins // 2\n    start_bin = center_bin - half_bins\n    end_bin = center_bin + half_bins\n    if num_bins % 2 != 0: # if num_bins is odd\n        end_bin += 1\n\n    with h5py.File(f\"{enfref_dir}/chr{chr_num}_cat.h5\", \"r\") as f:\n        # get tracks if list provided\n        if tracks == -1:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, :] \n        else:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, tracks] \n\n    return epigen\n\n\n## create lists of genes on each chromomsome\nhg38_annot = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.protein_coding_TSS.txt\", header=0, sep=\"\\t\")\ngene_dict = hg38_annot.groupby('chromosome_name')['ensembl_gene_id'].apply(list).to_dict()\n\n\n## Initialize lists of CAGE predictions for each gene\nhg38_annot.set_index(\"ensembl_gene_id\", inplace=True)\nchr_list = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"X\"]\nCAGE_predictions = {key: [] for key in chr_list}\n\n\n## Function to put CAGE predictions in list (in the same order as gene list by chromosome)\ndef query_genes(chr):\n    gene_list = gene_dict[chr]\n    for gene in gene_list:\n        bins = query_epigenome(chr, hg38_annot.loc[gene]['transcription_start_site'], tracks=[4980])\n        CAGE_predictions[chr].append(np.average(bins))\n\n\nfor chr in chr_list:\n    query_genes(chr)\n    print(\"Queried chromosome\", chr, \"...,\", len(CAGE_predictions[chr]), \"genes\")\n\nQueried chromosome 1 ..., 2030 genes\nQueried chromosome 2 ..., 1227 genes\nQueried chromosome 3 ..., 1063 genes\nQueried chromosome 4 ..., 752 genes\nQueried chromosome 5 ..., 872 genes\nQueried chromosome 6 ..., 1031 genes\nQueried chromosome 7 ..., 919 genes\nQueried chromosome 8 ..., 693 genes\nQueried chromosome 9 ..., 766 genes\nQueried chromosome 10 ..., 715 genes\nQueried chromosome 11 ..., 1291 genes\nQueried chromosome 12 ..., 1018 genes\nQueried chromosome 13 ..., 320 genes\nQueried chromosome 14 ..., 602 genes\nQueried chromosome 15 ..., 589 genes\nQueried chromosome 16 ..., 842 genes\nQueried chromosome 17 ..., 1158 genes\nQueried chromosome 18 ..., 262 genes\nQueried chromosome 19 ..., 1432 genes\nQueried chromosome 20 ..., 537 genes\nQueried chromosome 21 ..., 219 genes\nQueried chromosome 22 ..., 434 genes\nQueried chromosome X ..., 853 genes"
  },
  {
    "objectID": "posts/2023-08-22-correlation-between-Enformer-and-GTEx-expression-across-genes-by-chromosome/index.html#count-missing-genes-in-reference-enformer",
    "href": "posts/2023-08-22-correlation-between-Enformer-and-GTEx-expression-across-genes-by-chromosome/index.html#count-missing-genes-in-reference-enformer",
    "title": "Correlation between Enformer reference CAGE prediction and GTEx brain tissue expression across genes",
    "section": "Count missing genes in reference Enformer",
    "text": "Count missing genes in reference Enformer\nWe are only missing TSS CAGE values for 12 genes, all on chromosome 12.\n\nfor chr in chr_list:\n    n_missing = np.sum(np.isnan(np.array(CAGE_predictions[chr])))\n    if n_missing &gt; 0:\n        print(\"Chromosome\", chr, \"missing\", n_missing, \"genes in the predicted human reference epigenome\")\n\nChromosome 12 missing 27 genes in the predicted human reference epigenome\n\n\n\nmerged_dict = {chr: pd.DataFrame(index=gene_dict[chr]) for chr in chr_list}\nfor chr in chr_list:\n    merged_dict[chr]['enformer'] = CAGE_predictions[chr]\n\n\nall_predicted = pd.concat(merged_dict.values())\nall_predicted.to_csv(\"/home/s1mi/enformer_rat_data/output/hg38_predicted_expression.csv\")\n\n\ngtex_tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/gene_tpm_2017-06-05_v8_brain_cortex.gct.gz\", header=2, sep=\"\\t\")\ngtex_tpm['Name'] = gtex_tpm['Name'].apply(lambda gene: gene.split('.')[0])\ngtex_tpm.set_index('Name', inplace=True)\n# Calculate average gene expression\ngtex_mean_tpm = gtex_tpm.drop(columns=['id', 'Description']).mean(axis=1)\ngtex_mean_tpm.name = 'gtex'\n\n\nfor chr in chr_list:\n    gene_list = merged_dict[chr].index.intersection(gtex_tpm.index)\n    merged_dict[chr] = merged_dict[chr].loc[gene_list]\n    merged_dict[chr] = merged_dict[chr].merge(gtex_mean_tpm, left_index=True, right_index=True, how='inner').dropna()\n    print(merged_dict[chr].shape[0], \"genes on chromosome\", chr, \"\\tCorrelation:\", merged_dict[chr].corr().iloc[0,1])\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nall_predicted = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/hg38_predicted_expression.csv\", index_col = 0)\nall_genes = all_predicted.merge(gtex_mean_tpm, left_index=True, right_index=True, how=\"inner\")\n\n\nprint(\"Pearson Correlation:\")\nall_genes.corr(method=\"pearson\")\n\nPearson Correlation:\n\n\n\n\n\n\n\n\n\nenformer\ngtex\n\n\n\n\nenformer\n1.000000\n0.539788\n\n\ngtex\n0.539788\n1.000000\n\n\n\n\n\n\n\n\nprint(\"Spearman Correlation:\")\nall_genes.corr(method=\"spearman\")\n\nSpearman Correlation:\n\n\n\n\n\n\n\n\n\nenformer\ngtex\n\n\n\n\nenformer\n1.000000\n0.794341\n\n\ngtex\n0.794341\n1.000000\n\n\n\n\n\n\n\n\ncorr = all_genes.corr(method=\"spearman\").iloc[0,1]\nplt.scatter(all_genes['enformer'], all_genes['gtex'], label=f'Correlation: {corr:.2f}')\nplt.xlabel('observed')\nplt.ylabel('predicted')\nplt.title(\"Enformer predictions across human genes\")\nplt.legend()\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "posts/llm-in-molecular-biology-article/index.html",
    "href": "posts/llm-in-molecular-biology-article/index.html",
    "title": "Overview of LLM in Molecular Biology article by Serafim Batzoglou",
    "section": "",
    "text": "Read the paper here"
  },
  {
    "objectID": "posts/llm-in-molecular-biology-article/index.html#introduction-to-large-language-models",
    "href": "posts/llm-in-molecular-biology-article/index.html#introduction-to-large-language-models",
    "title": "Overview of LLM in Molecular Biology article by Serafim Batzoglou",
    "section": "Introduction to Large Language Models",
    "text": "Introduction to Large Language Models\n\nLarge language models like GPT-3 are trained on extensive text data and excel at generating coherent and contextually relevant text.\nThese models can be adapted for molecular biology tasks by encoding molecular information and training them on relevant datasets."
  },
  {
    "objectID": "posts/llm-in-molecular-biology-article/index.html#protein-structure-prediction",
    "href": "posts/llm-in-molecular-biology-article/index.html#protein-structure-prediction",
    "title": "Overview of LLM in Molecular Biology article by Serafim Batzoglou",
    "section": "Protein Structure Prediction",
    "text": "Protein Structure Prediction\n\nLarge language models can assist in predicting protein structures from amino acid sequences.\nLanguage models can generate plausible protein structures, aiding in protein folding predictions and protein engineering.\nChallenges include the vast conformational space and the need for high-quality training data to improve accuracy."
  },
  {
    "objectID": "posts/llm-in-molecular-biology-article/index.html#analyzing-dna-sequences",
    "href": "posts/llm-in-molecular-biology-article/index.html#analyzing-dna-sequences",
    "title": "Overview of LLM in Molecular Biology article by Serafim Batzoglou",
    "section": "Analyzing DNA Sequences",
    "text": "Analyzing DNA Sequences\n\nLanguage models can be trained to recognize patterns in DNA sequences and identify regulatory elements.\nThey can predict the effects of genetic mutations, aiding in understanding genetic diseases and personalized medicine.\nLarge language models have the potential to improve upon existing methods for DNA sequence analysis."
  },
  {
    "objectID": "posts/llm-in-molecular-biology-article/index.html#molecular-design",
    "href": "posts/llm-in-molecular-biology-article/index.html#molecular-design",
    "title": "Overview of LLM in Molecular Biology article by Serafim Batzoglou",
    "section": "Molecular Design",
    "text": "Molecular Design\n\nLanguage models can generate novel molecules with desired properties, contributing to drug discovery and material science.\nThey can suggest potential compounds based on specified criteria, accelerating the search for new drugs.\nLarge language models in molecular design can assist in exploring the chemical space and generating molecules that were not previously considered."
  },
  {
    "objectID": "posts/llm-in-molecular-biology-article/index.html#limitations-and-challenges",
    "href": "posts/llm-in-molecular-biology-article/index.html#limitations-and-challenges",
    "title": "Overview of LLM in Molecular Biology article by Serafim Batzoglou",
    "section": "Limitations and Challenges",
    "text": "Limitations and Challenges\n\nObtaining high-quality training data for molecular biology tasks remains a challenge.\nInterpreting the outputs of language models and understanding the underlying biological mechanisms is essential.\nIncorporating domain-specific knowledge into language models is crucial for accurate and reliable results."
  },
  {
    "objectID": "posts/2023-09-12-processing-HS-founder-rat-genotypes/index.html",
    "href": "posts/2023-09-12-processing-HS-founder-rat-genotypes/index.html",
    "title": "Preparing HS founder rat genotypes for Enformer pipeline",
    "section": "",
    "text": "I downloaded the original VCF from TSCC to /home/s1mi/enformer_rat_data/genotypes/Palmer_HS_founders_mRatBN7_2.vcf.gz.\n\nConvert NCBI RefSeq ID to chromosome numbers\n\nDownload assembly report for NCBI names to chromosome mapping\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/015/227/675/GCF_015227675.2_mRatBN7.2/GCF_015227675.2_mRatBN7.2_assembly_report.txt -O /Users/sabrinami/Downloads/mRatBN7.2_assembly_report.txt\n\nWrite chromosome annotation file for bcftools\n\ngrep -e '^[^#]' /Users/sabrinami/Downloads/mRatBN7.2_assembly_report.txt | awk '{ print $7, \"chr\" $1 }' &gt; /Users/sabrinami/Downloads/mRatBN7.2_chromosome_names.txt\n\nThere are extra annotations than needed, later on we will filter to chromosomes 1 through 20 and X.\n\nAnnotate VCF\n\ncd /Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data\nbcftools annotate \\\n  --rename-chrs /Users/sabrinami/Downloads/mRatBN7.2_chromosome_names.txt \\\n  --threads 10 \\\n  -o Palmer_HS_founders_mRatBN7_annot.vcf.gz \\\n  -Oz Palmer_HS_founders_mRatBN7_2.vcf.gz\n\n\n\nReplace Missing Genotypes with Reference Alleles\ngunzip Palmer_HS_founders_mRatBN7_annot.vcf.gz\nsed 's/\\.\\/\\./0\\/0/g' Palmer_HS_founders_mRatBN7_annot.vcf &gt; Palmer_HS_founders_mRatBN7_no_missing.vcf\nbgzip Palmer_HS_founders_mRatBN7_no_missing.vcf\nbcftools index -t Palmer_HS_founders_mRatBN7_no_missing.vcf.gz\n\n\n\nFilter out Indels\nbcftools view --types snps Palmer_HS_founders_mRatBN7_no_missing.vcf.gz -o Palmer_HS_founders_mRatBN7_snps_only.vcf.gz -Oz\nbcftools index -t Palmer_HS_founders_mRatBN7_snps_only.vcf.gz\n\n\nSplit VCFs\nFirst by chromosome number:\nmkdir FounderVCFs\n# Split VCF by chromosome\nvcf_in=Palmer_HS_founders_mRatBN7_snps_only.vcf.gz\n\nvcf_out_prefix=FounderVCFs/chr\n\nfor i in {1..20}\ndo\n    echo \"Working on chromosome ${i}...\"\n    bcftools view --regions chr${i} ${vcf_in} -o ${vcf_out_prefix}${i}.vcf.gz -Oz\ndone\n\n\n# Index VCFs\nfor i in {1..20}\ndo\n    echo \"Indexing chromosome ${i}...\"\n    bcftools index -t FounderVCFs/chr${i}.vcf.gz\ndone\nThen separately for X chromosome:\nbcftools view ${vcf_in} --regions chrX -o ${vcf_out_prefix}X.vcf.gz -Oz\nbcftools index -t FounderVCFs/chrX.vcf.gz"
  },
  {
    "objectID": "posts/2023-08-17-querying-human-reference-epigenome/all_hg38_genes.html",
    "href": "posts/2023-08-17-querying-human-reference-epigenome/all_hg38_genes.html",
    "title": "Querying Human Reference Epigenome",
    "section": "",
    "text": "import h5py\nimport pandas as pd\nimport numpy as np\nfrom kipoiseq import Interval\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nenfref_dir = \"/grand/TFXcan/imlab/users/lvairus/reftile_project/enformer-reference-epigenome\"\n\ndef query_epigenome(chr_num, center_bp, num_bins=3, tracks=-1):\n    \"\"\"\n    Parameters:\n        path_to_enfref (str): path to the directory containing the concatenated reference enformer files\n        chr_num (int/string): chromosome number\n        center_bp (int): center base pair position (1-indexed)\n        num_bins (int): number of bins to extract centered around center_bp (default: 896) \n            note: if the number of bins is even, the center bin will be in the second half of the array\n        tracks (int list): list of tracks to extract (default: all 5313 tracks)\n\n    Returns:\n        epigen (np.array): enformer predictions centered at center_bp of shape (num_bins, len(tracks))\n    \"\"\"\n\n    # from position choose center bin\n    center_ind = center_bp - 1\n    center_bin = center_ind // 128\n    \n    half_bins = num_bins // 2\n    start_bin = center_bin - half_bins\n    end_bin = center_bin + half_bins\n    if num_bins % 2 != 0: # if num_bins is odd\n        end_bin += 1\n\n    with h5py.File(f\"{enfref_dir}/chr{chr_num}_cat.h5\", \"r\") as f:\n        # get tracks if list provided\n        if tracks == -1:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, :] \n        else:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, tracks] \n\n    return epigen"
  },
  {
    "objectID": "posts/2023-08-17-querying-human-reference-epigenome/all_hg38_genes.html#setup",
    "href": "posts/2023-08-17-querying-human-reference-epigenome/all_hg38_genes.html#setup",
    "title": "Querying Human Reference Epigenome",
    "section": "",
    "text": "import h5py\nimport pandas as pd\nimport numpy as np\nfrom kipoiseq import Interval\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nenfref_dir = \"/grand/TFXcan/imlab/users/lvairus/reftile_project/enformer-reference-epigenome\"\n\ndef query_epigenome(chr_num, center_bp, num_bins=3, tracks=-1):\n    \"\"\"\n    Parameters:\n        path_to_enfref (str): path to the directory containing the concatenated reference enformer files\n        chr_num (int/string): chromosome number\n        center_bp (int): center base pair position (1-indexed)\n        num_bins (int): number of bins to extract centered around center_bp (default: 896) \n            note: if the number of bins is even, the center bin will be in the second half of the array\n        tracks (int list): list of tracks to extract (default: all 5313 tracks)\n\n    Returns:\n        epigen (np.array): enformer predictions centered at center_bp of shape (num_bins, len(tracks))\n    \"\"\"\n\n    # from position choose center bin\n    center_ind = center_bp - 1\n    center_bin = center_ind // 128\n    \n    half_bins = num_bins // 2\n    start_bin = center_bin - half_bins\n    end_bin = center_bin + half_bins\n    if num_bins % 2 != 0: # if num_bins is odd\n        end_bin += 1\n\n    with h5py.File(f\"{enfref_dir}/chr{chr_num}_cat.h5\", \"r\") as f:\n        # get tracks if list provided\n        if tracks == -1:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, :] \n        else:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, tracks] \n\n    return epigen"
  },
  {
    "objectID": "posts/2023-08-17-querying-human-reference-epigenome/all_hg38_genes.html#collect-tss-for-all-human-genes",
    "href": "posts/2023-08-17-querying-human-reference-epigenome/all_hg38_genes.html#collect-tss-for-all-human-genes",
    "title": "Querying Human Reference Epigenome",
    "section": "Collect TSS for all human genes",
    "text": "Collect TSS for all human genes\nWe collected all protein-coding genes and their cannonical TSS using the biomaRt package.\n\n\nhg38_annot = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.protein_coding_TSS.txt\", header=0, sep=\"\\t\", index_col='ensembl_gene_id')\nprint(hg38_annot.shape[0], \"genes with TSS annotation\")\nhg38_annot.head()\n\n19688 genes with TSS annotation\n\n\n\n\n\n\n\n\n\nexternal_gene_name\nchromosome_name\ntranscription_start_site\n\n\nensembl_gene_id\n\n\n\n\n\n\n\nENSG00000142611\nPRDM16\n1\n3069203\n\n\nENSG00000157911\nPEX10\n1\n2412564\n\n\nENSG00000142655\nPEX14\n1\n10474950\n\n\nENSG00000149527\nPLCH2\n1\n2476289\n\n\nENSG00000171621\nSPSB1\n1\n9292894\n\n\n\n\n\n\n\nWe computed the predicted human reference epigenome by running Enformer on all intervals spanning the genome and concatenting the results. Now we extract the CAGE:Brain track at the bins where each gene’s TSS fall in order to quantify relative expression across genes."
  },
  {
    "objectID": "posts/2023-08-17-querying-human-reference-epigenome/all_hg38_genes.html#query-reference-epigenome-at-tss",
    "href": "posts/2023-08-17-querying-human-reference-epigenome/all_hg38_genes.html#query-reference-epigenome-at-tss",
    "title": "Querying Human Reference Epigenome",
    "section": "Query reference epigenome at TSS",
    "text": "Query reference epigenome at TSS\nI found that querying the epigenome at certain positions returned NA, so I investigated those positions further by querying a larger window and plotting the CAGE track 4980.\n\nCAGE_predictions = []\nfor gene in hg38_annot.index:\n    chr = hg38_annot.loc[gene]['chromosome_name']\n    tss = hg38_annot.loc[gene]['transcription_start_site']\n    bin = query_epigenome(chr,tss, num_bins = 1, tracks=[4980])\n    if np.isnan(bin):\n        print(\"Invalid query:\", gene, \"at\", f\"{chr}:{tss}\")\n        break\n    CAGE_predictions.append(bin)\n\nInvalid query: ENSG00000173451 at 12:71664301\n\n\n\nwith h5py.File(f\"{enfref_dir}/chr12_cat.h5\", \"r\") as f:\n    print(\"matrix shape:\", f['chr12'].shape)\n    center = 71664301//128\n    print(\"ENSG00000173451 TTS at bin\", center)\n    epigen = f['chr12'][center-448:center+448, 4980]\n    print(\"Number of NA along track:\", sum(np.isnan(epigen)))\n    \n\nmatrix shape: (1041214, 5313)\nENSG00000173451 TTS at bin 559877\nNumber of NA along track: 448\n\n\nWe adapted a function from the Enformer usage notebook to plot a single track.\n\ndef plot_track(title, y, interval, height=1.5):\n  fig, ax = plt.subplots(figsize=(20, height))\n  ax.fill_between(np.linspace(interval.start, interval.end, num=len(y)), y)\n  ax.set_title(title)\n  sns.despine(top=True, right=True, bottom=True)\n  ax.set_xlabel(str(interval))\n  plt.tight_layout()\n\n\ntss = Interval('chr12', 71664301, 71664301)\nplot_track('CAGE:Brain, ENSG00000173451', epigen, tss.resize(114688))"
  },
  {
    "objectID": "posts/enformer-rat-human-analysis-overview/index.html",
    "href": "posts/enformer-rat-human-analysis-overview/index.html",
    "title": "Home Page for Enformer Human and Rat Cross-species Analysis",
    "section": "",
    "text": "Found human head output (7,611 tracks)\nStarted running predictions on human reference genome for 981 genes\n\nNo results yet, waiting in the queue\nAverage GPU time per prediction doubled? (~2.5 -&gt; ~5 seconds)\n\nSet up personalized prediction pipeline"
  },
  {
    "objectID": "posts/enformer-rat-human-analysis-overview/index.html#updates-this-week",
    "href": "posts/enformer-rat-human-analysis-overview/index.html#updates-this-week",
    "title": "Home Page for Enformer Human and Rat Cross-species Analysis",
    "section": "",
    "text": "Found human head output (7,611 tracks)\nStarted running predictions on human reference genome for 981 genes\n\nNo results yet, waiting in the queue\nAverage GPU time per prediction doubled? (~2.5 -&gt; ~5 seconds)\n\nSet up personalized prediction pipeline"
  },
  {
    "objectID": "posts/enformer-rat-human-analysis-overview/index.html#introduction",
    "href": "posts/enformer-rat-human-analysis-overview/index.html#introduction",
    "title": "Home Page for Enformer Human and Rat Cross-species Analysis",
    "section": "Introduction",
    "text": "Introduction\n\nData Inventory\n\nGenotype and gene expression data for 340 rats in the Br study\n\nMean gene expression used as ground truth reference gene expression\n\nGTEx gene expression data used as ground truth reference gene expression\nRat reference genome as input to Enformer to predict reference gene expression\nHuman reference genome as input to Enformer to predict reference gene expression\n\n\n\nGoals\n\nDetermine whether Enformer models (human and mouse) can predict expression across genes\nUse genotypes to predict gene expression in the Br rats with the Enformer models"
  },
  {
    "objectID": "posts/enformer-rat-human-analysis-overview/index.html#correlation-across-genes",
    "href": "posts/enformer-rat-human-analysis-overview/index.html#correlation-across-genes",
    "title": "Home Page for Enformer Human and Rat Cross-species Analysis",
    "section": "Correlation across genes",
    "text": "Correlation across genes\nWe are currently using the CAGE:Brain human track at a gene’s TSS to estimate gene expression in rats. For all GTEx gene expression comparisons, we used mean TPM in brain cortex tissue. We want to make 3 types of comparison:\n\n\\(\\rho^h_{Hh}\\): Correlation between human reference gene expression predicted with Enformer human head and GTEx mean gene expression\n\\(\\rho^h_{Rr}\\): Correlation between rat reference gene expression predicted with Enformer human head and Br reference gene expression\n\\(\\rho^h_{HR}\\): Correlation between rat reference gene expression and human reference gene expression\n\nEnformer is optimized to predict variation across the genome, so we use \\(\\rho^h_{Hh}\\) as the baseline performance. Intuitively, we hope to see \\(\\rho^h_{Rr} = \\rho^h_{HR} \\rho^h_{Hh}\\).\nPersonal transcriptome variation is poorly explained by current genomic deep learning models, Huang et al performed the same analysis on GEUVADIS LCL gene expression data and found a correlation of 0.57\n\nAnalysis Summary\n\n\\(\\rho^h_{Hh} = 0.539\\)\n\\(\\rho^h_{Rr} = 0.453\\)\n\\(\\rho^h_{HR} = 0.886\\)\n\nOther analysis includes: 1. Validating Huang et al.’s correlation of 0.57 in human LCL tissues, I even obtained a higher correlation of 0.77 when I included all GEUVADIS genes"
  },
  {
    "objectID": "posts/enformer-rat-human-analysis-overview/index.html#correlation-across-individuals",
    "href": "posts/enformer-rat-human-analysis-overview/index.html#correlation-across-individuals",
    "title": "Home Page for Enformer Human and Rat Cross-species Analysis",
    "section": "Correlation across individuals",
    "text": "Correlation across individuals\nI added support for unphased VCFs, which cuts the number of Enformer runs in half by averaging the two haplotypes. I also added options to output mouse head predictions or both.\n\nResults for 868 genes selected for significant eQTLs and observed variation"
  },
  {
    "objectID": "posts/2023-08-10-correlation-across-genes/running-enformer-across-all-rat-genes.html",
    "href": "posts/2023-08-10-correlation-across-genes/running-enformer-across-all-rat-genes.html",
    "title": "Running Enformer across all rn7 genes",
    "section": "",
    "text": "import pandas as pd\nimport random\n\n\n# gene annotation\nannot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\nannot_df.head(3)\n\n/tmp/ipykernel_53672/1963999151.py:2: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\n\n\n\n\n\n\n\n\n\ngeneSymbol\nchromosome\nstart\nend\nstrand\ntss\ndescription\nhasEqtl\nexpr_BLA\nexpr_Brain\n...\nsqtl_BLA\nsqtl_Brain\nsqtl_Eye\nsqtl_IL\nsqtl_LHb\nsqtl_NAcc\nsqtl_NAcc2\nsqtl_OFC\nsqtl_PL\nsqtl_PL2\n\n\ngeneId\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENSRNOG00000066169\nENSRNOG00000066169\n1\n36112690\n36122387\n-\n36122387\nNaN\nTrue\nTrue\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nENSRNOG00000070168\nOlr56\n1\n157231467\n157232417\n+\n157231467\nolfactory receptor family 51 subfamily F membe...\nTrue\nFalse\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nENSRNOG00000070901\nIrgq\n1\n80123925\n80131881\n+\n80123925\nimmunity-related GTPase Q\nTrue\nTrue\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n\n\n3 rows × 68 columns\n\n\n\n\nobs_gene_expr = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\nobs_gene_expr.head()\n\n/tmp/ipykernel_53672/1989937044.py:1: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  obs_gene_expr = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\n\n\n\n\n\n\n\n\n\n#chr\nstart\nend\n000789972A\n0007899884\n000789FF64\n00079298B1\n00079299B5\n0007929A79\n0007929B36\n...\n0007899761\n0007899866\n00078A00E6\n0007929938\n0007929956\n00079FF7D6\n0007899826\n0007929917\n00077E82E3\n00078A18A7\n\n\ngene_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENSRNOG00000065394\n1\n31563\n31564\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n0.0\n0.0\n\n\nENSRNOG00000065356\n1\n41634\n41635\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n0.0\n0.0\n\n\nENSRNOG00000070568\n1\n76833\n76834\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.01\n0.0\n0.0\n0.0\n0.0\n\n\nENSRNOG00000065706\n1\n184235\n184236\n0.0\n0.0\n0.0\n0.0\n0.18\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n0.0\n0.0\n\n\nENSRNOG00000069644\n1\n272252\n272253\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n5 rows × 343 columns\n\n\n\n\nobs_gene_expr['#chr'].unique()\n\narray([1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 3, 4, 5, 6, 7, 8,\n       9, '9', 'JACYVU010000238.1', 'JACYVU010000315.1',\n       'JACYVU010000319.1', 'JACYVU010000493.1', 'JACYVU010000587.1',\n       'JACYVU010000589.1', 'JACYVU010000619.1', 'JACYVU010000634.1',\n       'JACYVU010000642.1', 'JACYVU010000653.1', 'JACYVU010000665.1',\n       'JACYVU010000706.1', 'JACYVU010000731.1', 'JACYVU010000732.1',\n       'JACYVU010000738.1', 'JACYVU010000744.1', 'JACYVU010000754.1',\n       'MT', 'MU150189.1', 'MU150193.1', 'MU150196.1', 'MU150200.1',\n       'MU150203.1', 'MU150220.1', 'MU150222.1', 'MU150223.1', 'X', 'Y'],\n      dtype=object)\n\n\nWe want to filter to genes on chromosomes 1 through 20 and X.\n\nkeys = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"X\"]\n\ngene_list = []\ninterval_list = []\n\nfor gene in obs_gene_expr.index:\n    gene_annot = annot_df.loc[gene]\n    chromosome = str(gene_annot['chromosome'])\n    if chromosome in keys:\n        tss = gene_annot['tss']\n        interval = f\"chr{chromosome}_{tss}_{tss}\"\n        gene_list.append(gene)\n        interval_list.append(interval)\n        \nwith open(\"metadata/intervals.txt\", \"w\") as f:\n    f.write('\\n'.join(interval_list))\n\nwith open(\"metadata/genes.txt\", \"w\") as f:\n    f.write('\\n'.join(gene_list))"
  },
  {
    "objectID": "posts/2023-08-10-correlation-across-genes/running-enformer-across-all-rat-genes.html#collect-gene-intervals",
    "href": "posts/2023-08-10-correlation-across-genes/running-enformer-across-all-rat-genes.html#collect-gene-intervals",
    "title": "Running Enformer across all rn7 genes",
    "section": "",
    "text": "import pandas as pd\nimport random\n\n\n# gene annotation\nannot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\nannot_df.head(3)\n\n/tmp/ipykernel_53672/1963999151.py:2: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\n\n\n\n\n\n\n\n\n\ngeneSymbol\nchromosome\nstart\nend\nstrand\ntss\ndescription\nhasEqtl\nexpr_BLA\nexpr_Brain\n...\nsqtl_BLA\nsqtl_Brain\nsqtl_Eye\nsqtl_IL\nsqtl_LHb\nsqtl_NAcc\nsqtl_NAcc2\nsqtl_OFC\nsqtl_PL\nsqtl_PL2\n\n\ngeneId\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENSRNOG00000066169\nENSRNOG00000066169\n1\n36112690\n36122387\n-\n36122387\nNaN\nTrue\nTrue\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nENSRNOG00000070168\nOlr56\n1\n157231467\n157232417\n+\n157231467\nolfactory receptor family 51 subfamily F membe...\nTrue\nFalse\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nENSRNOG00000070901\nIrgq\n1\n80123925\n80131881\n+\n80123925\nimmunity-related GTPase Q\nTrue\nTrue\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n\n\n3 rows × 68 columns\n\n\n\n\nobs_gene_expr = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\nobs_gene_expr.head()\n\n/tmp/ipykernel_53672/1989937044.py:1: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  obs_gene_expr = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\n\n\n\n\n\n\n\n\n\n#chr\nstart\nend\n000789972A\n0007899884\n000789FF64\n00079298B1\n00079299B5\n0007929A79\n0007929B36\n...\n0007899761\n0007899866\n00078A00E6\n0007929938\n0007929956\n00079FF7D6\n0007899826\n0007929917\n00077E82E3\n00078A18A7\n\n\ngene_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENSRNOG00000065394\n1\n31563\n31564\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n0.0\n0.0\n\n\nENSRNOG00000065356\n1\n41634\n41635\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n0.0\n0.0\n\n\nENSRNOG00000070568\n1\n76833\n76834\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.01\n0.0\n0.0\n0.0\n0.0\n\n\nENSRNOG00000065706\n1\n184235\n184236\n0.0\n0.0\n0.0\n0.0\n0.18\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n0.0\n0.0\n\n\nENSRNOG00000069644\n1\n272252\n272253\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.00\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n5 rows × 343 columns\n\n\n\n\nobs_gene_expr['#chr'].unique()\n\narray([1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 3, 4, 5, 6, 7, 8,\n       9, '9', 'JACYVU010000238.1', 'JACYVU010000315.1',\n       'JACYVU010000319.1', 'JACYVU010000493.1', 'JACYVU010000587.1',\n       'JACYVU010000589.1', 'JACYVU010000619.1', 'JACYVU010000634.1',\n       'JACYVU010000642.1', 'JACYVU010000653.1', 'JACYVU010000665.1',\n       'JACYVU010000706.1', 'JACYVU010000731.1', 'JACYVU010000732.1',\n       'JACYVU010000738.1', 'JACYVU010000744.1', 'JACYVU010000754.1',\n       'MT', 'MU150189.1', 'MU150193.1', 'MU150196.1', 'MU150200.1',\n       'MU150203.1', 'MU150220.1', 'MU150222.1', 'MU150223.1', 'X', 'Y'],\n      dtype=object)\n\n\nWe want to filter to genes on chromosomes 1 through 20 and X.\n\nkeys = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"X\"]\n\ngene_list = []\ninterval_list = []\n\nfor gene in obs_gene_expr.index:\n    gene_annot = annot_df.loc[gene]\n    chromosome = str(gene_annot['chromosome'])\n    if chromosome in keys:\n        tss = gene_annot['tss']\n        interval = f\"chr{chromosome}_{tss}_{tss}\"\n        gene_list.append(gene)\n        interval_list.append(interval)\n        \nwith open(\"metadata/intervals.txt\", \"w\") as f:\n    f.write('\\n'.join(interval_list))\n\nwith open(\"metadata/genes.txt\", \"w\") as f:\n    f.write('\\n'.join(gene_list))"
  },
  {
    "objectID": "posts/2023-08-10-correlation-across-genes/running-enformer-across-all-rat-genes.html#run-enformer-pipeline",
    "href": "posts/2023-08-10-correlation-across-genes/running-enformer-across-all-rat-genes.html#run-enformer-pipeline",
    "title": "Running Enformer across all rn7 genes",
    "section": "Run Enformer Pipeline",
    "text": "Run Enformer Pipeline\nmodule load conda\n\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\n\ncd /home/s1mi/Github/shared_pipelines/enformer_pipeline\n\npython3 scripts/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-10-correlation-across-genes/all_genes_reference_config.json"
  },
  {
    "objectID": "posts/2023-08-10-correlation-across-genes/running-enformer-across-all-rat-genes.html#rerun-for-missing-genes",
    "href": "posts/2023-08-10-correlation-across-genes/running-enformer-across-all-rat-genes.html#rerun-for-missing-genes",
    "title": "Running Enformer across all rn7 genes",
    "section": "Rerun for Missing Genes",
    "text": "Rerun for Missing Genes\nFor some reason, only ~19,000 genes in the rn7 reference epigenome were predicted on, and rerunning the same command above is not filling in the gaps. Instead, we’ll create a new intervals list with the missing genes.\n\nimport os\nsuccessful_predictions = os.listdir(\"/home/s1mi/Br_predictions/predictions_folder/reference_Br_all_genes/predictions_2023-08-29/enformer_predictions/reference_Br/haplotype0\")\nsuccessful_intervals = [file.replace(\"_predictions.h5\", \"\") for file in successful_predictions]\n\n\nwith open('metadata/intervals.txt', 'r') as file:\n    all_intervals = file.read().splitlines()\n\nunsuccessful_genes = [interval for interval in all_intervals if interval not in successful_intervals]\n\n\nwith open('metadata/intervals2.txt', 'w') as file:\n    file.write(\"\\n\".join(unsuccessful_genes))\n\nI ran with local provider on an interactive job so I could keep an eye on error messages.\nmodule load conda\n\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\n\ncd /home/s1mi/Github/shared_pipelines/enformer_pipeline\n\npython3 scripts/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-10-correlation-across-genes/remaining_genes_reference_config.json"
  },
  {
    "objectID": "posts/2023-08-10-correlation-across-genes/index.html",
    "href": "posts/2023-08-10-correlation-across-genes/index.html",
    "title": "Correlation of Enformer CAGE predictions and observed expression across all rn7 genes",
    "section": "",
    "text": "Our goal is to test whether Enformer can determine relative gene expression levels in rat Brain tissues. We used mean gene expression in Br rats as the ground truth, and predicted the CAGE Brain track at each gene’s TSS. We found a correlation of 0.45, which we still need to compare to the same experiment with human data to determine whether this is high or low."
  },
  {
    "objectID": "posts/2023-08-10-correlation-across-genes/index.html#reference-genome",
    "href": "posts/2023-08-10-correlation-across-genes/index.html#reference-genome",
    "title": "Correlation of Enformer CAGE predictions and observed expression across all rn7 genes",
    "section": "Reference Genome",
    "text": "Reference Genome\n\nRead in expression files\n\nimport os\nimport h5py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ntpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\n\n/tmp/ipykernel_129963/1140758785.py:1: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\n\n\n\n\nCalculate average gene expression\n\nmean_tpm = tpm.iloc[:,3:].mean(axis=1)\nprint(mean_tpm)\n\ngene_id\nENSRNOG00000065394    0.000000\nENSRNOG00000065356    0.000000\nENSRNOG00000070568    0.000912\nENSRNOG00000065706    0.005029\nENSRNOG00000069644    0.000265\n                        ...   \nENSRNOG00000067420    0.000000\nENSRNOG00000069298    0.000559\nENSRNOG00000066131    0.000529\nENSRNOG00000068239    0.000500\nENSRNOG00000069552    0.001088\nLength: 30231, dtype: float64\n\n\n\n## Put both means into dataframe\ncorr_df = pd.DataFrame({'tpm': mean_tpm, 'predicted': np.full(30231, np.nan), 'chr': np.full(30231, np.nan)})\ncorr_df.head()\n\n\n\n\n\n\n\n\ntpm\niqn\npredicted\nchr\n\n\ngene_id\n\n\n\n\n\n\n\n\nENSRNOG00000065394\n0.000000\n0.000000\nNaN\nNaN\n\n\nENSRNOG00000065356\n0.000000\n0.000000\nNaN\nNaN\n\n\nENSRNOG00000070568\n0.000912\n0.052617\nNaN\nNaN\n\n\nENSRNOG00000065706\n0.005029\n0.022574\nNaN\nNaN\n\n\nENSRNOG00000069644\n0.000265\n0.011569\nNaN\nNaN\n\n\n\n\n\n\n\n\n\nCalculate gene expression from Enformer predictions on reference genome\n\nreference_predictions=\"/home/s1mi/Br_predictions/predictions_folder/reference_Br_all_genes/predictions_2023-08-11/enformer_predictions/reference_Br/haplotype0\"\n\nannot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\nannot_df.head(3)\n\n/tmp/ipykernel_36254/3273646084.py:3: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\n\n\n\n\n\n\n\n\n\ngeneSymbol\nchromosome\nstart\nend\nstrand\ntss\ndescription\nhasEqtl\nexpr_BLA\nexpr_Brain\n...\nsqtl_BLA\nsqtl_Brain\nsqtl_Eye\nsqtl_IL\nsqtl_LHb\nsqtl_NAcc\nsqtl_NAcc2\nsqtl_OFC\nsqtl_PL\nsqtl_PL2\n\n\ngeneId\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENSRNOG00000066169\nENSRNOG00000066169\n1\n36112690\n36122387\n-\n36122387\nNaN\nTrue\nTrue\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nENSRNOG00000070168\nOlr56\n1\n157231467\n157232417\n+\n157231467\nolfactory receptor family 51 subfamily F membe...\nTrue\nFalse\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nENSRNOG00000070901\nIrgq\n1\n80123925\n80131881\n+\n80123925\nimmunity-related GTPase Q\nTrue\nTrue\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n\n\n3 rows × 68 columns\n\n\n\n\n# for gene in corr_df.index:\n#     gene_annot = annot_df.loc[gene]\n#     corr_df['chr'].loc[gene] = gene_annot['chromosome']\n#     interval = f\"chr{gene_annot['chromosome']}_{gene_annot['tss']}_{gene_annot['tss']}\"\n#     path = os.path.join(predictions_dir, f\"{interval}_predictions.h5\")\n#     if os.path.isfile(path):\n#         predictions = h5py.File(path, \"r\")\n#         pred_expr = np.average(predictions[interval][446:450, 4980])\n#         corr_df['predicted'].loc[gene] = pred_expr\n#     else:\n#         continue\n\n\n# corr_df.dropna().to_csv(\"reference_epigenome_predicted_vs_observed.csv\", index=True)\n\ncorr_df = pd.read_csv(\"reference_epigenome_predicted_vs_observed.csv\", header = 0, index_col = 'gene_id')\nprint(corr_df)\n\n                         tpm  predicted  chr\ngene_id                                     \nENSRNOG00000065394  0.000000   0.002946  1.0\nENSRNOG00000065356  0.000000   0.004051  1.0\nENSRNOG00000070568  0.000912   0.003553  1.0\nENSRNOG00000065706  0.005029   0.005847  1.0\nENSRNOG00000069644  0.000265   0.001334  1.0\n...                      ...        ...  ...\nENSRNOG00000067420  0.000000   0.001928    Y\nENSRNOG00000069298  0.000559   0.003280    Y\nENSRNOG00000066131  0.000529   0.003569    Y\nENSRNOG00000068239  0.000500   0.001887    Y\nENSRNOG00000069552  0.001088   0.001822    Y\n\n[19493 rows x 3 columns]\n\n\nI ran Enformer on roughly ~30,000 intervals, but it looks like we only have predictions for 2/3 of them. I’ll investigate in another post.\n\n# Drop rows with NaN values\ncorr_df = corr_df.dropna()\n\n# Create a scatter plot with colors based on column z\nplt.scatter(corr_df['tpm'], corr_df['predicted'])\n\n# Set labels and title\nplt.xlabel('Br Mean TPM Gene Expression')\nplt.ylabel('Predicted Rat Reference Gene Expression')\nplt.title('Predicted vs Observed Gene Expression')\n\n# Show the plot\nplt.show()\n\n\n\n\n\ncorr_df[['tpm', 'predicted']].corr()\n\n\n\n\n\n\n\n\ntpm\npredicted\n\n\n\n\ntpm\n1.000000\n0.433632\n\n\npredicted\n0.433632\n1.000000\n\n\n\n\n\n\n\nThe correlation between CAGE predictions and gene expression measured by relative abundance of transcripts is lower than we wanted. We’ll compare it with average gene expression in human brain tissue.\n\ngtex_tpm = pd.read_csv(\"gene_tpm_2017-06-05_v8_brain_cortex.gct.gz\", header=2, sep=\"\\t\")\ngtex_tpm.head()\n\nLastly, we’ll concatenate all the prediction matrices into one h5 file."
  },
  {
    "objectID": "posts/2023-08-10-correlation-across-genes/index.html#concatenate-predictions",
    "href": "posts/2023-08-10-correlation-across-genes/index.html#concatenate-predictions",
    "title": "Correlation of Enformer CAGE predictions and observed expression across all rn7 genes",
    "section": "Concatenate Predictions",
    "text": "Concatenate Predictions\n\ndef concatenate_predictions(predictions_dir, output_path):\n    with h5py.File(output_path, \"w\") as output_file:\n        files = os.listdir(predictions_dir)\n        for file in files:\n            interval = file.replace(\"_predictions.h5\", \"\")\n            with h5py.File(os.path.join(predictions_dir, file), \"r\") as input_file:\n                output_file.create_dataset(interval, data=input_file[interval][()], shape=(896,5313))\n\n\nconcatenate_predictions(reference_predictions, \"/home/s1mi/Br_predictions/2023-08-16_predictions_some_missing_genes.h5\")"
  },
  {
    "objectID": "posts/2023-08-30-comparing-predicted-reference-expression-to-various-GTEx-brain-tissues/index.html",
    "href": "posts/2023-08-30-comparing-predicted-reference-expression-to-various-GTEx-brain-tissues/index.html",
    "title": "Correlation between Enformer CAGE:Brain predictions and mean TPM in various GTEx brain tissues",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nbrain_tissues = [\"amygdala\", \"anterior_cingulate_cortex_ba24\", \"caudate_basal_ganglia\", \"cerebellar_hemisphere\", \"cerebellum\", \"cortex\", \"frontal_cortex_ba9\", \"hippocampus\", \"hypothalamus\", \"nucleus_accumbens_basal_ganglia\", \"putamen_basal_ganglia\", \"spinal_cord_cervical_c-1\", \"substantia_nigra\"]\ndf = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/hg38_predicted_expression.csv\", index_col=0)\nfor tissue in brain_tissues:\n    tpm = pd.read_csv(f\"https://storage.googleapis.com/gtex_analysis_v8/rna_seq_data/gene_tpm/gene_tpm_2017-06-05_v8_brain_{tissue}.gct.gz\", header=2, sep=\"\\t\")\n    tpm['Name'] = tpm['Name'].apply(lambda gene: gene.split('.')[0])\n    # some genes are repeated (different ensembl version), remove second occurrence\n    tpm = tpm[~tpm.duplicated(subset=['Name'], keep='first')]\n    tpm.set_index('Name', inplace=True)\n    # Calculate average gene expression\n    mean_tpm = tpm.drop(columns=['id', 'Description']).mean(axis=1)\n    mean_tpm.name = tissue.replace(\"_\", \" \")\n    df = df.merge(mean_tpm, left_index = True, right_index = True, how = \"inner\")\n\n\ndf.to_csv(\"/home/s1mi/enformer_rat_data/output/hg38_predicted_vs_observed_expression_all_GTEx_brain_tissues.csv\")\n\n\ncorr_df = df.corr()\ncorr_df\n\n\n\n\n\n\n\n\nenformer\namygdala\nanterior cingulate cortex ba24\ncaudate basal ganglia\ncerebellar hemisphere\ncerebellum\ncortex\nfrontal cortex ba9\nhippocampus\nhypothalamus\nnucleus accumbens basal ganglia\nputamen basal ganglia\nspinal cord cervical c-1\nsubstantia nigra\n\n\n\n\nenformer\n1.000000\n0.467619\n0.537760\n0.475759\n0.525852\n0.523848\n0.539825\n0.557909\n0.472233\n0.410200\n0.487022\n0.463762\n0.246135\n0.380836\n\n\namygdala\n0.467619\n1.000000\n0.954906\n0.932110\n0.699623\n0.720513\n0.908948\n0.896015\n0.967708\n0.802080\n0.935692\n0.934127\n0.713773\n0.896603\n\n\nanterior cingulate cortex ba24\n0.537760\n0.954906\n1.000000\n0.918404\n0.766384\n0.779114\n0.975494\n0.978834\n0.919471\n0.763097\n0.929791\n0.905958\n0.570054\n0.783233\n\n\ncaudate basal ganglia\n0.475759\n0.932110\n0.918404\n1.000000\n0.683751\n0.714650\n0.900610\n0.880568\n0.900796\n0.752087\n0.977106\n0.989579\n0.616714\n0.820553\n\n\ncerebellar hemisphere\n0.525852\n0.699623\n0.766384\n0.683751\n1.000000\n0.977913\n0.759456\n0.783059\n0.698800\n0.609139\n0.725290\n0.664395\n0.386328\n0.581458\n\n\ncerebellum\n0.523848\n0.720513\n0.779114\n0.714650\n0.977913\n1.000000\n0.789908\n0.782710\n0.717366\n0.626874\n0.749312\n0.697112\n0.410336\n0.611442\n\n\ncortex\n0.539825\n0.908948\n0.975494\n0.900610\n0.759456\n0.789908\n1.000000\n0.981027\n0.887993\n0.730072\n0.895736\n0.893500\n0.538779\n0.742445\n\n\nfrontal cortex ba9\n0.557909\n0.896015\n0.978834\n0.880568\n0.783059\n0.782710\n0.981027\n1.000000\n0.877334\n0.722115\n0.884639\n0.870592\n0.514861\n0.719960\n\n\nhippocampus\n0.472233\n0.967708\n0.919471\n0.900796\n0.698800\n0.717366\n0.887993\n0.877334\n1.000000\n0.814058\n0.899047\n0.915272\n0.812031\n0.934632\n\n\nhypothalamus\n0.410200\n0.802080\n0.763097\n0.752087\n0.609139\n0.626874\n0.730072\n0.722115\n0.814058\n1.000000\n0.763480\n0.745192\n0.681446\n0.806814\n\n\nnucleus accumbens basal ganglia\n0.487022\n0.935692\n0.929791\n0.977106\n0.725290\n0.749312\n0.895736\n0.884639\n0.899047\n0.763480\n1.000000\n0.962463\n0.588651\n0.808008\n\n\nputamen basal ganglia\n0.463762\n0.934127\n0.905958\n0.989579\n0.664395\n0.697112\n0.893500\n0.870592\n0.915272\n0.745192\n0.962463\n1.000000\n0.655825\n0.844448\n\n\nspinal cord cervical c-1\n0.246135\n0.713773\n0.570054\n0.616714\n0.386328\n0.410336\n0.538779\n0.514861\n0.812031\n0.681446\n0.588651\n0.655825\n1.000000\n0.916613\n\n\nsubstantia nigra\n0.380836\n0.896603\n0.783233\n0.820553\n0.581458\n0.611442\n0.742445\n0.719960\n0.934632\n0.806814\n0.808008\n0.844448\n0.916613\n1.000000\n\n\n\n\n\n\n\n\ndef plot_predicted_vs_observed(tissue):\n    corr = corr_df.loc[tissue, \"enformer\"]\n    plt.scatter(df['enformer'], df[tissue], label=f'Correlation: {corr:.2f}')\n    plt.xlabel('enformer')\n    plt.ylabel('gtex')\n    plt.title(tissue.replace(\"_\", \" \"))\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n\nfor tissue in brain_tissues:\n    plot_predicted_vs_observed(tissue.replace(\"_\", \" \"))"
  },
  {
    "objectID": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/compare-CAGE-expression.html",
    "href": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/compare-CAGE-expression.html",
    "title": "Generating plots of Enformer CAGE predictions centered at TSS",
    "section": "",
    "text": "Last time, we tried to generate plots of predicted vs observed expression, but we saw very little variance in the enformer predictions, resulting in the plots showing no association between the two. I reran the enformer pipeline again but with more genes and centering intervals at gene TSS. The steps are documented here\nIn this notebook, I started to develop a pipeline to generate plots. We observed that only around half of genes showed tracks that peak where we’d expect in the center. In addition, there was even less variance in predicted expression across the population than when we centered intervals around the start and end of the gene.\nOverall, it looks like centering intervals at the TSS leads worsened prediction performance because expression levels looked more uniform.\nTomorrow, I will calculate variance in gene expression across individuals for each gene to refine the gene selection process. Hopefully, using genes with high R2 performance in elastic net models and high variation across individuals will all us to try to capture more variance in CAGE prediction.\n\nimport pandas as pd\nimport numpy as np\nimport kipoiseq \nfrom kipoiseq import Interval \nimport sys\nimport h5py\nimport matplotlib.pyplot as plt\nimport random\nimport seaborn as sns\nimport os\n\n\npredictions_dir = \"/home/s1mi/enformer_rat_pipeline/predictions_folder/personalized_Br_genes/predictions_2023-08-08/enformer_predictions\"\n\n\nRead Observed Gene Expression\n\ngene_expr_bed = \"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\"\nobs_gene_expr = pd.read_csv(gene_expr_bed, sep=\"\\t\", header=0, index_col='gene_id')\n\nwith open(\"gene_list.txt\") as f:\n    gene_list = f.read().splitlines()\n\n/tmp/ipykernel_15456/2188858492.py:2: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  obs_gene_expr = pd.read_csv(gene_expr_bed, sep=\"\\t\", header=0, index_col='gene_id')\n\n\n\npred_vs_obs = {}\nfor gene in gene_list:\n    obs = obs_gene_expr.loc[gene][3:]\n    pred_vs_obs[gene] = pd.DataFrame({\"observed\": obs, \"predicted\": np.zeros(obs.shape)})\n\n\n\nQuantify Gene Expression\n\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\nfor gene in gene_list:\n    print(gene)\n    gene_annot = annot_df.loc[gene]\n    start = gene_annot['tss'] - 57344\n    end = gene_annot['tss'] + 57344\n    interval = f\"chr{gene_annot['chromosome']}_{start}_{end}\"\n    for individual in pred_vs_obs[gene].index:\n        predictions = h5py.File(f\"{predictions_dir}/{individual}/haplotype1/{interval}_predictions.h5\", \"r\")\n        matrix = predictions[interval][()]\n        pred_expr = np.average(matrix[[447,448], 4980])\n        pred_vs_obs[gene].loc[individual, \"predicted\"] = pred_expr\n\n/tmp/ipykernel_15456/1723122919.py:1: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\n\nENSRNOG00000001342\nENSRNOG00000020624\nENSRNOG00000058006\nENSRNOG00000060045\nENSRNOG00000047706\nENSRNOG00000029386\nENSRNOG00000011944\n\n\n\n\nPlot Tracks\nCollect all predictions along 896 bins for CAGE:Brain track.\n\npredictions = {}\n\nfor gene in gene_list:\n    gene_annot = annot_df.loc[gene]\n    start = gene_annot['tss'] - 57344\n    end = gene_annot['tss'] + 57344\n    gene_predictions = {}\n    for individual in os.listdir(predictions_dir):\n        interval = f\"chr{gene_annot['chromosome']}_{start}_{end}\"\n        predictions_file = h5py.File(f\"{predictions_dir}/{individual}/haplotype1/{interval}_predictions.h5\", \"r\")\n        gene_predictions[individual] = predictions_file[interval][()]\n    predictions[gene] = gene_predictions\n\n\ndef plot_tracks(tracks, interval, height=1.5):\n  fig, axes = plt.subplots(len(tracks), 1, figsize=(20, height * len(tracks)), sharex=True)\n  for ax, (title, y) in zip(axes, tracks.items()):\n    ax.fill_between(np.linspace(interval.start, interval.end, num=len(y)), y)\n    ax.set_title(title)\n    sns.despine(top=True, right=True, bottom=True)\n  ax.set_xlabel(str(interval))\n  plt.tight_layout()\n\n\ndef plot_individual_tracks(gene):\n    gene_annot = annot_df.loc[gene]\n    start = gene_annot['tss'] - 57344\n    end = gene_annot['tss'] + 57344\n\n    target_interval = kipoiseq.Interval(f\"chr{gene_annot['chromosome']}\", start, end)\n    tracks = {}\n    individuals = list(pred_vs_obs[gene].index)\n    sample = random.sample(individuals, 3)\n    for individual in sample:\n        tracks['CAGE:Brain, ' + individual] = np.log10(1 + predictions[gene][individual][:, 4980])\n    plot_tracks(tracks, target_interval)\n\n\nfor gene in gene_list:\n    plot_individual_tracks(gene)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef plot_predicted_vs_observed(gene):\n    df = pred_vs_obs[gene]\n\n    x = df['observed']\n    y = df['predicted']\n    # Create the dot plot\n    plt.scatter(x, y, color='blue', marker='o', s=100)\n\n    # Add labels and title\n    plt.xlabel('Observed')\n    plt.ylabel('Predicted')\n    plt.title('Enformed Predicted vs Observed Gene Expression')\n\n    # Show the plot\n    plt.show()\n\n\nfor gene in gene_list:\n    plot_predicted_vs_observed(gene)"
  },
  {
    "objectID": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/pipeline.html",
    "href": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/pipeline.html",
    "title": "Preparing pipeline inputs for Enformer predictions centered at canonical TSS”",
    "section": "",
    "text": "Write Gene Intervals\n\nimport pandas as pd\n\nmodel_genes = pd.read_csv(\"highestR2genes.csv\", header=0)\nmodel_genes.head()\n\n\n\n\n\n\n\n\ngene\ngenename\npred.perf.R2\nn.snps.in.model\npred.perf.pval\ncor\npred.perf.qval\n\n\n\n\n0\nENSRNOG00000001342\nWdr66\n0.844361\n3\n7.502608e-93\n0.918891\n1.243114e-89\n\n\n1\nENSRNOG00000020624\nAcadsb\n0.829218\n3\n2.602032e-88\n0.910614\n2.155665e-85\n\n\n2\nENSRNOG00000060523\nAABR07044362.6\n0.820292\n8\n8.068512e-86\n0.905700\n4.456263e-83\n\n\n3\nENSRNOG00000058006\nSncg\n0.816705\n6\n7.472730e-85\n0.903717\n3.095408e-82\n\n\n4\nENSRNOG00000060045\nPi4ka\n0.815282\n3\n1.784460e-84\n0.902930\n5.913374e-82\n\n\n\n\n\n\n\n\n# gene annotation\nannot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\nannot_df.head(3)\n\n/tmp/ipykernel_164253/1218160640.py:2: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\n\n\n\n\n\n\n\n\n\ngeneSymbol\nchromosome\nstart\nend\nstrand\ntss\ndescription\nhasEqtl\nexpr_BLA\nexpr_Brain\n...\nsqtl_BLA\nsqtl_Brain\nsqtl_Eye\nsqtl_IL\nsqtl_LHb\nsqtl_NAcc\nsqtl_NAcc2\nsqtl_OFC\nsqtl_PL\nsqtl_PL2\n\n\ngeneId\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENSRNOG00000066169\nENSRNOG00000066169\n1\n36112690\n36122387\n-\n36122387\nNaN\nTrue\nTrue\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nENSRNOG00000070168\nOlr56\n1\n157231467\n157232417\n+\n157231467\nolfactory receptor family 51 subfamily F membe...\nTrue\nFalse\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nENSRNOG00000070901\nIrgq\n1\n80123925\n80131881\n+\n80123925\nimmunity-related GTPase Q\nTrue\nTrue\nTrue\n...\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n\n\n3 rows × 68 columns\n\n\n\n\ndef write_intervals(gene_list, file):\n    with open(file, 'a') as f:\n        for gene in gene_list:\n            gene_annot = annot_df.loc[gene]\n            tss = gene_annot['tss']\n            start = tss - 57344\n            end = tss + 57344\n            interval = f\"chr{gene_annot['chromosome']}_{start}_{end}\"\n            f.write(interval + '\\n')\n\n\ngene_list = [gene for gene in model_genes['gene'][:10] if gene in annot_df.index]\nwith open(\"gene_list.txt\", \"w\") as f:\n    f.write(\"\\n\".join(gene_list))\nwrite_intervals(gene_list, \"metadata/intervals.txt\")\n\n\n\nWrite Individuals List\n\n!bcftools query -l /home/s1mi/enformer_rat_data/genotypes/Brain.rn7.vcf.gz &gt; metadata/individuals.txt\n\nI added these parameters to the config file: /home/s1mi/Github/deep-learning-in-genomics/posts/running-enformer-on-rat-genes-at-TSS/run_on_polaris_personalized.json\n\n\nRun Enformer\nmodule load conda\n\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\n\ncd /home/s1mi/Github/shared_pipelines/enformer_pipeline\npython3 scripts/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/running-enformer-on-rat-genes-at-TSS/run_on_polaris_personalized.json\n\n\n\nConcatenate Predictions\n\nimport os\nimport h5py\n\ndef concatenate_predictions(predictions_dir, output_path):\n    with h5py.File(output_path, \"w\") as output_file:\n        individuals = os.listdir(predictions_dir)\n        for individual in individuals:\n            group = output_file.create_group(individual)\n\n            dir = os.path.join(predictions_dir, individual, \"haplotype1\")\n            filenames = os.listdir(dir)\n\n            for file in filenames:\n                interval = file.replace(\"_predictions.h5\", \"\")\n                with h5py.File(os.path.join(dir, file), \"r\") as input_file:\n                    group.create_dataset(interval, data=input_file[interval][()], shape=(896,5313))\n\n\n\npredictions_dir=\"/home/s1mi/Github/deep-learning-in-genomics/posts/running-enformer-on-rat-genes-at-TSS/predictions_folder/personalized_Br_genes/predictions_2023-08-08/enformer_predictions\"\nconcatenate_predictions(predictions_dir, \"Br_2023-08-08_predictions.h5\")"
  },
  {
    "objectID": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/variance_at_peaks.html",
    "href": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/variance_at_peaks.html",
    "title": "Debugging the issue of low variance in Enformer CAGE prediction",
    "section": "",
    "text": "import h5py\nimport pandas as pd\nimport os\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow_hub as hub\nimport kipoiseq \nfrom kipoiseq import Interval\nimport pyfaidx\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\npredictions_dir = \"/home/s1mi/enformer_rat_pipeline/predictions_folder/personalized_Br_genes/predictions_2023-08-08/enformer_predictions\"\n\n\ntransform_path = 'gs://dm-enformer/models/enformer.finetuned.SAD.robustscaler-PCA500-robustscaler.transform.pkl'\nmodel_path = 'https://tfhub.dev/deepmind/enformer/1'\nfasta_file = '/home/s1mi/enformer_rat_data/reference_genome/rn7_genome.fasta'\n\n\n\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\n/tmp/ipykernel_14448/515731113.py:1: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\n\n\n# @title `Enformer`, `EnformerScoreVariantsNormalized`, `EnformerScoreVariantsPCANormalized`,\nSEQUENCE_LENGTH = 393216\n\nclass Enformer:\n\n  def __init__(self, tfhub_url):\n    self._model = hub.load(tfhub_url).model\n\n  def predict_on_batch(self, inputs):\n    predictions = self._model.predict_on_batch(inputs)\n    return {k: v.numpy() for k, v in predictions.items()}\n\n  @tf.function\n  def contribution_input_grad(self, input_sequence,\n                              target_mask, output_head='human'):\n    input_sequence = input_sequence[tf.newaxis]\n\n    target_mask_mass = tf.reduce_sum(target_mask)\n    with tf.GradientTape() as tape:\n      tape.watch(input_sequence)\n      prediction = tf.reduce_sum(\n          target_mask[tf.newaxis] *\n          self._model.predict_on_batch(input_sequence)[output_head]) / target_mask_mass\n\n    input_grad = tape.gradient(prediction, input_sequence) * input_sequence\n    input_grad = tf.squeeze(input_grad, axis=0)\n    return tf.reduce_sum(input_grad, axis=-1)\n\n\nclass EnformerScoreVariantsRaw:\n\n  def __init__(self, tfhub_url, organism='human'):\n    self._model = Enformer(tfhub_url)\n    self._organism = organism\n\n  def predict_on_batch(self, inputs):\n    ref_prediction = self._model.predict_on_batch(inputs['ref'])[self._organism]\n    alt_prediction = self._model.predict_on_batch(inputs['alt'])[self._organism]\n\n    return alt_prediction.mean(axis=1) - ref_prediction.mean(axis=1)\n\n\nclass EnformerScoreVariantsNormalized:\n\n  def __init__(self, tfhub_url, transform_pkl_path,\n               organism='human'):\n    assert organism == 'human', 'Transforms only compatible with organism=human'\n    self._model = EnformerScoreVariantsRaw(tfhub_url, organism)\n    with tf.io.gfile.GFile(transform_pkl_path, 'rb') as f:\n      transform_pipeline = joblib.load(f)\n    self._transform = transform_pipeline.steps[0][1]  # StandardScaler.\n\n  def predict_on_batch(self, inputs):\n    scores = self._model.predict_on_batch(inputs)\n    return self._transform.transform(scores)\n\n\nclass EnformerScoreVariantsPCANormalized:\n\n  def __init__(self, tfhub_url, transform_pkl_path,\n               organism='human', num_top_features=500):\n    self._model = EnformerScoreVariantsRaw(tfhub_url, organism)\n    with tf.io.gfile.GFile(transform_pkl_path, 'rb') as f:\n      self._transform = joblib.load(f)\n    self._num_top_features = num_top_features\n\n  def predict_on_batch(self, inputs):\n    scores = self._model.predict_on_batch(inputs)\n    return self._transform.transform(scores)[:, :self._num_top_features]\n\n\n# TODO(avsec): Add feature description: Either PCX, or full names.\n\n\n# @title `variant_centered_sequences`\n\nclass FastaStringExtractor:\n\n    def __init__(self, fasta_file):\n        self.fasta = pyfaidx.Fasta(fasta_file)\n        self._chromosome_sizes = {k: len(v) for k, v in self.fasta.items()}\n    #import pd.Interval as Interval\n    def extract(self, interval: Interval, **kwargs) -&gt; str:\n        # Truncate interval if it extends beyond the chromosome lengths.\n        chromosome_length = self._chromosome_sizes[interval.chrom]\n        trimmed_interval = Interval(interval.chrom,\n                                    max(interval.start, 0),\n                                    min(interval.end, chromosome_length),\n                                    )\n        # pyfaidx wants a 1-based interval\n        sequence = str(self.fasta.get_seq(trimmed_interval.chrom,\n                                          trimmed_interval.start + 1,\n                                          trimmed_interval.stop).seq).upper()\n        # Fill truncated values with N's.\n        pad_upstream = 'N' * max(-interval.start, 0)\n        pad_downstream = 'N' * max(interval.end - chromosome_length, 0)\n        return pad_upstream + sequence + pad_downstream\n\n    def close(self):\n        return self.fasta.close()\n\n\ndef one_hot_encode(sequence):\n  return kipoiseq.transforms.functional.one_hot_dna(sequence).astype(np.float32)\n\n\n\n# @title `plot_tracks`\n\ndef plot_tracks(tracks, interval, height=1.5):\n  fig, axes = plt.subplots(len(tracks), 1, figsize=(20, height * len(tracks)), sharex=True)\n  for ax, (title, y) in zip(axes, tracks.items()):\n    ax.fill_between(np.linspace(interval.start, interval.end, num=len(y)), y)\n    ax.set_title(title)\n    sns.despine(top=True, right=True, bottom=True)\n  ax.set_xlabel(str(interval))\n  plt.tight_layout()\n\n\n  def plot_track(title, y, interval, height=1.5):\n    fig, ax = plt.subplots(figsize=(20, height))\n    ax.fill_between(np.linspace(interval.start, interval.end, num=len(y)), y)\n    ax.set_title(title)\n    sns.despine(top=True, right=True, bottom=True)\n    ax.set_xlabel(str(interval))\n    plt.tight_layout()\n\n\nmodel = Enformer(model_path)\n\nfasta_extractor = FastaStringExtractor(fasta_file)\n\n\ndef compute_tss_bin(output_window_coords_resized, tss_position, output_length=114688, bin_length=128, rc=False):\n    '''\n    Computes the bin index of the enformer output bin containing the TSS\n    Inputs:\n    output_window_coords_resized: Kipoiseq interval for the output window of Enformer, should already be resized to the model output window size\n    tss_position: absolute location of TSS\n    output_length: Length of output window in base pairs\n    bin_size: Length of output bins in base pairs\n    Outputs:\n    tss_bin: Index of bin containing TSS\n    '''\n    try:\n        relative_position = int(tss_position) - int(output_window_coords_resized.start)\n    except:\n    # print(tss_position)\n    # print(output_window_coords_resized.start)\n        sys.exit()\n\n    if relative_position &lt; 0 or relative_position &gt; output_length:\n        # print(tss_position, \"appears to be out of bounds for output window: \",output_window_coords_resized)\n        return None \n    else:\n        center = relative_position // bin_length\n\n        \n        if rc:\n            number_of_bins = int(output_length/bin_length)\n            new_center = number_of_bins - 1 - center\n            # print(new_center)\n            return [new_center-1,new_center,new_center+1]\n        else:\n            # print(center)\n            return [center-1,center,center+1]"
  },
  {
    "objectID": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/variance_at_peaks.html#check-reference-genome-for-peaks",
    "href": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/variance_at_peaks.html#check-reference-genome-for-peaks",
    "title": "Debugging the issue of low variance in Enformer CAGE prediction",
    "section": "Check reference genome for peaks",
    "text": "Check reference genome for peaks\nWe selected 7 genes based of prediction performance in elastic training, and ran Enformer on 340 individuals centered at the TSS for each gene. Since we did not see any association between predicted and observed expression, we run Enformer with the reference genome to consider their relative expression levels compared in a transcriptome-wide context.\n\nwith open(\"gene_list.txt\") as f:\n    gene_list = f.read().splitlines()\n\nCAGE_predictions = {}\n\nfor gene in gene_list:\n    gene_annot = annot_df.loc[gene]\n    tss = kipoiseq.Interval(f\"chr{gene_annot['chromosome']}\", gene_annot['tss'], gene_annot['tss'])\n    sequence_one_hot = one_hot_encode(fasta_extractor.extract(tss.resize(SEQUENCE_LENGTH)))\n    prediction = model.predict_on_batch(sequence_one_hot[np.newaxis])['human'][0]\n    CAGE_predictions[gene] = prediction[:,4980]\n    plot_track('CAGE:Brain, ' + gene, np.log10(1 + CAGE_predictions[gene]), tss.resize(114688))\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeveral genes have peaks at the center of the interval, where we fixed the TSS. This indicates that Enformer is correctly identifying TSS, even if some genes don’t show peaks at the TSS."
  },
  {
    "objectID": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/variance_at_peaks.html#variance-across-interval",
    "href": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/variance_at_peaks.html#variance-across-interval",
    "title": "Debugging the issue of low variance in Enformer CAGE prediction",
    "section": "Variance across Interval",
    "text": "Variance across Interval\nWe have two genes with CAGE:Brain peaks at the TSS, now we take a closer look at the predictions generated from the pipeline compared to the original usage notebook.\n\ngenes_of_interest = ['ENSRNOG00000020624', 'ENSRNOG00000058006']\nindividuals = os.listdir(predictions_dir)\n\n\nold_predictions_dir = \"/home/s1mi/enformer_rat_pipeline/predictions_folder/personalized_enformer_minimal_some_regions/predictions_2023-07-26/enformer_predictions\"\npredictions = {}\n\n\nfor gene in genes_of_interest:\n    print(gene)\n    predictions[gene] = pd.DataFrame(index = individuals)\n    gene_annot = annot_df.loc[gene]\n    interval_obj = Interval(\"chr\" + str(gene_annot['chromosome']), gene_annot['start'], gene_annot['end'])\n    tss_bins = compute_tss_bin(interval_obj.resize(114688), gene_annot['tss'])\n    interval = f\"chr{gene_annot['chromosome']}_{gene_annot['start']}_{gene_annot['end']}\"\n    for individual in individuals:\n        predictions_file = h5py.File(f\"{old_predictions_dir}/{individual}/haplotype1/{interval}_predictions.h5\", \"r\")\n        matrix = predictions_file[interval][()]\n        pred_expr = np.average(matrix[tss_bins, 4980])\n        predictions[gene].loc[individual, 0] = pred_expr\n\nENSRNOG00000020624\nENSRNOG00000058006\n\n\n\nfor gene in genes_of_interest:\n    gene_annot = annot_df.loc[gene]\n    start = gene_annot['tss'] - 57344\n    end = gene_annot['tss'] + 57344\n    for individual in individuals:\n        interval = f\"chr{gene_annot['chromosome']}_{start}_{end}\"\n        predictions_file = h5py.File(f\"{predictions_dir}/{individual}/haplotype1/{interval}_predictions.h5\", \"r\")\n        matrix = predictions_file[interval][()]\n        pred_expr = np.average(matrix[447:449, 4980])\n        predictions[gene].loc[individual,1] = pred_expr\n\n\nfor gene in genes_of_interest:\n    print(gene)\n    print(\"Old Range:\", predictions[gene][0].unique())\n    print(\"New Range:\", predictions[gene][1].unique())\n\nENSRNOG00000020624\nOld Range: [4.09390497 4.09556913 4.09526396]\nNew Range: [6.03277731 6.03283596]\nENSRNOG00000058006\nOld Range: [0.0266992  0.0266884  0.02666909]\nNew Range: [0.01251906 0.01252023]"
  },
  {
    "objectID": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/variance_at_peaks.html#conclusions",
    "href": "posts/2023-08-08-running-enformer-on-rat-genes-at-TSS/variance_at_peaks.html#conclusions",
    "title": "Debugging the issue of low variance in Enformer CAGE prediction",
    "section": "Conclusions",
    "text": "Conclusions\nFor both genes, centering enformer predictions at the TSS, rather than the start and end of genes, reduces variation in CAGE predictions. It is unclear to me why shifting the center increases CAGE values around the TSS for one gene but decreases them for the other gene. I think I should focus on picking genes with (1) more variation in observed expression, (2) CAGE peaks at the TSS, and (3) high R2 in elasticnet models, and continue centering our intervals around the start and end of our genes."
  },
  {
    "objectID": "posts/week-1/index.html",
    "href": "posts/week-1/index.html",
    "title": "Week 1",
    "section": "",
    "text": "Here’s my notes from the w3 NumPy tutorial:"
  },
  {
    "objectID": "posts/week-1/index.html#data-types-in-numpy",
    "href": "posts/week-1/index.html#data-types-in-numpy",
    "title": "Week 1",
    "section": "Data Types in Numpy:",
    "text": "Data Types in Numpy:\nBy default, Python has strings, integer, float, boolean, and complex. NumPy has extra data types:\n\ni: integer\nb: boolean\nu: unsigned integer\nf: float\nc: complex float\nm: timedelta\nM: datetime\nO: object\nS: string\nU: unicode string\nV: void"
  },
  {
    "objectID": "posts/polaris-intro/index.html",
    "href": "posts/polaris-intro/index.html",
    "title": "Getting started on Polaris",
    "section": "",
    "text": "More info can be found on:\n\nMain Page\nExample Job Scripts"
  },
  {
    "objectID": "posts/polaris-intro/index.html#references",
    "href": "posts/polaris-intro/index.html#references",
    "title": "Getting started on Polaris",
    "section": "",
    "text": "More info can be found on:\n\nMain Page\nExample Job Scripts"
  },
  {
    "objectID": "posts/polaris-intro/index.html#shortcuts",
    "href": "posts/polaris-intro/index.html#shortcuts",
    "title": "Getting started on Polaris",
    "section": "Shortcuts",
    "text": "Shortcuts\n\nLogin: ssh s1mi@polaris.alcf.anl.gov\nMain project storage: /lus/grand/projects/TFXcan\nInteractive Job: qsub -I -A TFXcan -l select=1 -l filesystems=home:grand -l walltime=1:00:00 -q debug"
  },
  {
    "objectID": "posts/polaris-intro/index.html#basic-job-script",
    "href": "posts/polaris-intro/index.html#basic-job-script",
    "title": "Getting started on Polaris",
    "section": "Basic Job Script",
    "text": "Basic Job Script\n#!/bin/bash\n#PBS -A $PROJECT\n#PBS -lwalltime=01:00:00\n#PBS -lselect=4\n#PBS -lsystem=polaris\n#PBS -lfilesystems=home:eagle\n\nrpn=4 # assume 1 process per GPU\nprocs=$((PBS_NODES*rpn))\n\n# job to “run” from your submission directory\ncd $PBS_O_WORKDIR\n\nmodule load &lt;something&gt;\n\nset +x # report all commands to stderr\nenv\nmpiexec -n $procs -ppn $rpn --cpu-bind core -genvall ./bin &lt;opts&gt;"
  },
  {
    "objectID": "posts/polaris-intro/index.html#conda-environments",
    "href": "posts/polaris-intro/index.html#conda-environments",
    "title": "Getting started on Polaris",
    "section": "Conda Environments",
    "text": "Conda Environments\nBefore activating and deactivating environments, we need to run module load conda.\nTo create an environment:\nmodule load conda\n\nexport http_proxy=http://proxy.alcf.anl.gov:3128\nexport https_proxy=$http_proxy\n\nconda create -n ml-python python=3.10\nconda activate ml-python\nconda install -y jupyter nb_conda ipykernel mpi\nconda install -y pytorch torchvision -c pytorch\nconda install -c conda-forge tensorflow\npython -m ipykernel install --user --name ml-python\nThe last line creates a new directory ~/.local/share/jupyter/kernels/ml-python. We add a couple lines to kernel.json so that we can use the new environment in the our Jupyter notebooks:\n{\n  \"argv\": [\n    \"/home/s1mi/.conda/envs/ml-python/bin/python\",\n    \"-m\",\n    \"ipykernel_launcher\",\n    \"-f\",\n    \"{connection_file}\"\n  ],\n  \"display_name\": \"ml-python\",\n  \"language\": \"python\",\n  \"env\": {\n    \"CONDA_PREFIX\": \"/home/s1mi/.conda/envs/ml-python\",\n    \"PATH\": \"/home/s1mi/.conda/envs/ml-python:${PATH}\",\n    \"http_proxy\": \"http://proxy.alcf.anl.gov:3128\",\n    \"https_proxy\": \"http://proxy.alcf.anl.gov:3128\"\n  },\n  \"metadata\": {\n    \"debugger\": true\n  }\n}"
  },
  {
    "objectID": "posts/2023-09-26-borzoi-personalized-test/geuvadis_personalized_test.html",
    "href": "posts/2023-09-26-borzoi-personalized-test/geuvadis_personalized_test.html",
    "title": "Code Snippets for Borzoi Personalized Prediction",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport cyvcf2\nimport pysam\nimport h5py\nimport os\nfrom borzoi_helpers import process_sequence, predict_tracks\n\n\nwith open(f\"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/gene_list.txt\", \"r\") as file:\n    rn7_gene_list = file.read().splitlines()\nrn7_hg38_ortho = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt\", sep=\"\\t\", index_col=\"ensembl_gene_id\")\nhg38_annot = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt\", sep=\"\\t\")\n\n\northo_genes = list(set(rn7_gene_list).intersection(rn7_hg38_ortho.index))\n## convert to hg38\ngene_df = rn7_hg38_ortho.loc[ortho_genes]\n## annotate hg38 genes\ngene_df = gene_df.merge(hg38_annot, left_on=\"hsapiens_homolog_ensembl_gene\", right_on=\"ensembl_gene_id\", how=\"inner\")\ngene_df = gene_df[[\"ensembl_gene_id\", \"chromosome_name\", \"transcript_start\", \"transcript_end\"]]\n\n\ndef find_variants_in_vcf_file(cyvcf2_object, interval_object, samples, mode=\"phased\"):\n    start = max(interval_object['start'], 0)\n    query = f\"{interval_object['chr']}:{start}-{interval_object['end']}\"\n    variants_dictionary = {}\n    variants_dictionary['chr'] = interval_object['chr']\n    variants_dictionary['positions'] = tuple(variant.POS for variant in cyvcf2_object(query))\n    if mode == 'phased':\n        delim = '|'\n    elif mode == 'unphased':\n        delim = '/'\n    for i, sample in enumerate(samples):\n        if sample in cyvcf2_object.samples:\n            variants_dictionary[sample] = tuple([variant.genotypes[i][0:2], variant.gt_bases[i].split(delim)] for variant in cyvcf2_object(query))\n    return variants_dictionary\n\n\ndef create_mapping_dictionary(variants_array, samples, interval_start):\n    import numpy as np\n    A = np.array([1,0,0,0], dtype=np.float32)\n    C = np.array([0,1,0,0], dtype=np.float32)\n    G = np.array([0,0,1,0], dtype=np.float32)\n    T = np.array([0,0,0,1], dtype=np.float32)\n    seq_dict = {'A': A, 'C': C, 'G': G, 'T': T}\n\n    # collect common information\n    samples_haplotype_map = {}\n    samples_haplotype_map['positions'] = tuple((variants_array['positions'][i]) - interval_start for i in range(len(variants_array['positions'])))\n    for sample in samples:\n        samples_haplotype_map[sample] = {}\n        samples_haplotype_map[sample]['haplotype1'] = tuple(seq_dict[variants_array[sample][i][1][0]] for i in range(0, len(variants_array[sample])))\n        samples_haplotype_map[sample]['haplotype2'] = tuple(seq_dict[variants_array[sample][i][1][1]] for i in range(0, len(variants_array[sample])))\n    return samples_haplotype_map\n\n\ndef resize(region, seq_len=524288):\n    center_bp = (region['end'] + region['start']) // 2\n    start = center_bp - seq_len // 2\n    end = center_bp + seq_len // 2\n    return {\"chr\": region['chr'], \"start\": start, \"end\": end}\n\n\ndef replace_variants_in_reference_sequence(query_sequences_encoded, mapping_dict, samples):\n    import copy\n    import numpy as np\n    positions = mapping_dict['positions']\n    variant_encoded = {}\n    for sample in samples:\n        haplotype1_encoded = np.copy(query_sequences_encoded)\n        haplotype2_encoded = np.copy(query_sequences_encoded)\n        for i, position in enumerate(positions):\n            haplotype1_encoded[position] = mapping_dict[sample][\"haplotype1\"][i]\n            haplotype2_encoded[position] = mapping_dict[sample][\"haplotype2\"][i]\n        variant_encoded[sample] = {\"haplotype1\": haplotype1_encoded, \"haplotype2\": haplotype2_encoded}\n    return variant_encoded\n\n\ndef get_model(model_dir):\n    import os\n    import h5py\n    import numpy as np\n    import pandas as pd\n    import tensorflow as tf\n\n    import baskerville\n    from baskerville import seqnn\n    from baskerville import dna\n    from baskerville import gene as bgene\n\n    import json\n\n    import pysam\n    params_file = os.path.join(model_dir, 'params_pred.json') \n    targets_file = os.path.join(model_dir, 'targets_human.txt') \n\n    n_folds = 4       #To use only one model fold, change to 'n_folds = 1'\n    rc = True         #Average across reverse-complement prediction\n    #Read model parameters\n\n    with open(params_file) as params_open :\n        \n        params = json.load(params_open)\n        \n        params_model = params['model']\n\n    #Read targets\n\n    targets_df = pd.read_csv(targets_file, index_col=0, sep='\\t')\n    target_index = targets_df.index\n\n    #Create local index of strand_pair (relative to sliced targets)\n    if rc :\n        strand_pair = targets_df.strand_pair\n        \n        target_slice_dict = {ix : i for i, ix in enumerate(target_index.values.tolist())}\n        slice_pair = np.array([\n            target_slice_dict[ix] if ix in target_slice_dict else ix for ix in strand_pair.values.tolist()\n        ], dtype='int32')\n\n    #Initialize model ensemble\n\n    models = []\n    for fold_ix in range(n_folds) :\n        \n        model_file = os.path.join(model_dir, \"saved_models/f\" + str(fold_ix) + \"/model0_best.h5\")\n\n        seqnn_model = seqnn.SeqNN(params_model)\n        seqnn_model.restore(model_file, 0)\n        seqnn_model.build_slice(target_index)\n        if rc :\n            seqnn_model.strand_pair.append(slice_pair)\n        seqnn_model.build_ensemble(rc, '0')\n        \n        models.append(seqnn_model)\n    return models\n\n\ndef predict_on_sequence(models, sample_input):\n    prediction_output = {}\n    for haplotype, sequence_encoding in sample_input.items():\n        prediction = predict_tracks(models, sequence_encoding)\n        prediction_output[haplotype] = prediction\n    return prediction_output\n\n\nfasta_open = pysam.Fastafile('/home/s1mi/borzoi_tutorial/hg38.fa')\nmodel_dir = '/home/s1mi/borzoi_tutorial'\n\n\ndef enformer_predict_on_region(target_interval, samples, path_to_vcf, output_dir):\n    models = get_model(model_dir)\n    sequence_one_hot_ref = process_sequence(fasta_open, target_interval[\"chr\"], target_interval[\"start\"], target_interval[\"end\"])\n    vcf_chr = cyvcf2.cyvcf2.VCF(path_to_vcf, samples=samples)\n    variants_array = find_variants_in_vcf_file(vcf_chr, target_interval, samples, mode=\"phased\")\n    mapping_dict = create_mapping_dictionary(variants_array, samples, target_interval[\"start\"])\n    samples_variants_encoded = replace_variants_in_reference_sequence(sequence_one_hot_ref, mapping_dict, samples)\n    for sample in samples:\n        sample_input = samples_variants_encoded[sample]\n        sample_predictions = predict_on_sequence(models, sample_input)\n        sample_output = {}\n        sample_dir = os.path.join(output_dir, sample)\n        output_path = os.path.join(sample_dir, f'{target_interval[\"chr\"]}_{target_interval[\"start\"]}_{target_interval[\"end\"]}_predictions.h5')\n        if not os.path.exists(sample_dir): os.makedirs(sample_dir, exist_ok=True)\n        with h5py.File(output_path, \"w\") as hf:\n            for hap in sample_predictions.keys():\n                sample_output[hap]= np.squeeze(sample_predictions[hap], axis=0)\n\n\ngene_annot = gene_df.iloc[0]\nsamples = [\"NA21143\", \"NA21144\"]\nvcf_dir = \"/grand/TFXcan/imlab/data/1000G/vcf_snps_only\"\noutput_dir = \"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-09-26-borzoi-personalized-test/\"\ninterval_object = {'chr': 'chr' + gene_annot[\"chromosome_name\"], 'start': gene_annot[\"transcript_start\"], 'end': gene_annot[\"transcript_end\"]}\ntarget_interval = resize(interval_object)\npath_to_vcf = os.path.join(vcf_dir, f\"ALL.{interval_object['chr']}.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz\")\nenformer_predict_on_region(interval_object, samples, path_to_vcf, output_dir)"
  },
  {
    "objectID": "posts/2023-09-26-borzoi-personalized-test/geuvadis_personalized_test.html#step-1-vcf-to-one-hot-encode",
    "href": "posts/2023-09-26-borzoi-personalized-test/geuvadis_personalized_test.html#step-1-vcf-to-one-hot-encode",
    "title": "Code Snippets for Borzoi Personalized Prediction",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport cyvcf2\nimport pysam\nimport h5py\nimport os\nfrom borzoi_helpers import process_sequence, predict_tracks\n\n\nwith open(f\"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/gene_list.txt\", \"r\") as file:\n    rn7_gene_list = file.read().splitlines()\nrn7_hg38_ortho = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7_hg38.ortholog_genes.txt\", sep=\"\\t\", index_col=\"ensembl_gene_id\")\nhg38_annot = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.gene.txt\", sep=\"\\t\")\n\n\northo_genes = list(set(rn7_gene_list).intersection(rn7_hg38_ortho.index))\n## convert to hg38\ngene_df = rn7_hg38_ortho.loc[ortho_genes]\n## annotate hg38 genes\ngene_df = gene_df.merge(hg38_annot, left_on=\"hsapiens_homolog_ensembl_gene\", right_on=\"ensembl_gene_id\", how=\"inner\")\ngene_df = gene_df[[\"ensembl_gene_id\", \"chromosome_name\", \"transcript_start\", \"transcript_end\"]]\n\n\ndef find_variants_in_vcf_file(cyvcf2_object, interval_object, samples, mode=\"phased\"):\n    start = max(interval_object['start'], 0)\n    query = f\"{interval_object['chr']}:{start}-{interval_object['end']}\"\n    variants_dictionary = {}\n    variants_dictionary['chr'] = interval_object['chr']\n    variants_dictionary['positions'] = tuple(variant.POS for variant in cyvcf2_object(query))\n    if mode == 'phased':\n        delim = '|'\n    elif mode == 'unphased':\n        delim = '/'\n    for i, sample in enumerate(samples):\n        if sample in cyvcf2_object.samples:\n            variants_dictionary[sample] = tuple([variant.genotypes[i][0:2], variant.gt_bases[i].split(delim)] for variant in cyvcf2_object(query))\n    return variants_dictionary\n\n\ndef create_mapping_dictionary(variants_array, samples, interval_start):\n    import numpy as np\n    A = np.array([1,0,0,0], dtype=np.float32)\n    C = np.array([0,1,0,0], dtype=np.float32)\n    G = np.array([0,0,1,0], dtype=np.float32)\n    T = np.array([0,0,0,1], dtype=np.float32)\n    seq_dict = {'A': A, 'C': C, 'G': G, 'T': T}\n\n    # collect common information\n    samples_haplotype_map = {}\n    samples_haplotype_map['positions'] = tuple((variants_array['positions'][i]) - interval_start for i in range(len(variants_array['positions'])))\n    for sample in samples:\n        samples_haplotype_map[sample] = {}\n        samples_haplotype_map[sample]['haplotype1'] = tuple(seq_dict[variants_array[sample][i][1][0]] for i in range(0, len(variants_array[sample])))\n        samples_haplotype_map[sample]['haplotype2'] = tuple(seq_dict[variants_array[sample][i][1][1]] for i in range(0, len(variants_array[sample])))\n    return samples_haplotype_map\n\n\ndef resize(region, seq_len=524288):\n    center_bp = (region['end'] + region['start']) // 2\n    start = center_bp - seq_len // 2\n    end = center_bp + seq_len // 2\n    return {\"chr\": region['chr'], \"start\": start, \"end\": end}\n\n\ndef replace_variants_in_reference_sequence(query_sequences_encoded, mapping_dict, samples):\n    import copy\n    import numpy as np\n    positions = mapping_dict['positions']\n    variant_encoded = {}\n    for sample in samples:\n        haplotype1_encoded = np.copy(query_sequences_encoded)\n        haplotype2_encoded = np.copy(query_sequences_encoded)\n        for i, position in enumerate(positions):\n            haplotype1_encoded[position] = mapping_dict[sample][\"haplotype1\"][i]\n            haplotype2_encoded[position] = mapping_dict[sample][\"haplotype2\"][i]\n        variant_encoded[sample] = {\"haplotype1\": haplotype1_encoded, \"haplotype2\": haplotype2_encoded}\n    return variant_encoded\n\n\ndef get_model(model_dir):\n    import os\n    import h5py\n    import numpy as np\n    import pandas as pd\n    import tensorflow as tf\n\n    import baskerville\n    from baskerville import seqnn\n    from baskerville import dna\n    from baskerville import gene as bgene\n\n    import json\n\n    import pysam\n    params_file = os.path.join(model_dir, 'params_pred.json') \n    targets_file = os.path.join(model_dir, 'targets_human.txt') \n\n    n_folds = 4       #To use only one model fold, change to 'n_folds = 1'\n    rc = True         #Average across reverse-complement prediction\n    #Read model parameters\n\n    with open(params_file) as params_open :\n        \n        params = json.load(params_open)\n        \n        params_model = params['model']\n\n    #Read targets\n\n    targets_df = pd.read_csv(targets_file, index_col=0, sep='\\t')\n    target_index = targets_df.index\n\n    #Create local index of strand_pair (relative to sliced targets)\n    if rc :\n        strand_pair = targets_df.strand_pair\n        \n        target_slice_dict = {ix : i for i, ix in enumerate(target_index.values.tolist())}\n        slice_pair = np.array([\n            target_slice_dict[ix] if ix in target_slice_dict else ix for ix in strand_pair.values.tolist()\n        ], dtype='int32')\n\n    #Initialize model ensemble\n\n    models = []\n    for fold_ix in range(n_folds) :\n        \n        model_file = os.path.join(model_dir, \"saved_models/f\" + str(fold_ix) + \"/model0_best.h5\")\n\n        seqnn_model = seqnn.SeqNN(params_model)\n        seqnn_model.restore(model_file, 0)\n        seqnn_model.build_slice(target_index)\n        if rc :\n            seqnn_model.strand_pair.append(slice_pair)\n        seqnn_model.build_ensemble(rc, '0')\n        \n        models.append(seqnn_model)\n    return models\n\n\ndef predict_on_sequence(models, sample_input):\n    prediction_output = {}\n    for haplotype, sequence_encoding in sample_input.items():\n        prediction = predict_tracks(models, sequence_encoding)\n        prediction_output[haplotype] = prediction\n    return prediction_output\n\n\nfasta_open = pysam.Fastafile('/home/s1mi/borzoi_tutorial/hg38.fa')\nmodel_dir = '/home/s1mi/borzoi_tutorial'\n\n\ndef enformer_predict_on_region(target_interval, samples, path_to_vcf, output_dir):\n    models = get_model(model_dir)\n    sequence_one_hot_ref = process_sequence(fasta_open, target_interval[\"chr\"], target_interval[\"start\"], target_interval[\"end\"])\n    vcf_chr = cyvcf2.cyvcf2.VCF(path_to_vcf, samples=samples)\n    variants_array = find_variants_in_vcf_file(vcf_chr, target_interval, samples, mode=\"phased\")\n    mapping_dict = create_mapping_dictionary(variants_array, samples, target_interval[\"start\"])\n    samples_variants_encoded = replace_variants_in_reference_sequence(sequence_one_hot_ref, mapping_dict, samples)\n    for sample in samples:\n        sample_input = samples_variants_encoded[sample]\n        sample_predictions = predict_on_sequence(models, sample_input)\n        sample_output = {}\n        sample_dir = os.path.join(output_dir, sample)\n        output_path = os.path.join(sample_dir, f'{target_interval[\"chr\"]}_{target_interval[\"start\"]}_{target_interval[\"end\"]}_predictions.h5')\n        if not os.path.exists(sample_dir): os.makedirs(sample_dir, exist_ok=True)\n        with h5py.File(output_path, \"w\") as hf:\n            for hap in sample_predictions.keys():\n                sample_output[hap]= np.squeeze(sample_predictions[hap], axis=0)\n\n\ngene_annot = gene_df.iloc[0]\nsamples = [\"NA21143\", \"NA21144\"]\nvcf_dir = \"/grand/TFXcan/imlab/data/1000G/vcf_snps_only\"\noutput_dir = \"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-09-26-borzoi-personalized-test/\"\ninterval_object = {'chr': 'chr' + gene_annot[\"chromosome_name\"], 'start': gene_annot[\"transcript_start\"], 'end': gene_annot[\"transcript_end\"]}\ntarget_interval = resize(interval_object)\npath_to_vcf = os.path.join(vcf_dir, f\"ALL.{interval_object['chr']}.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz\")\nenformer_predict_on_region(interval_object, samples, path_to_vcf, output_dir)"
  },
  {
    "objectID": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/debugging.html",
    "href": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/debugging.html",
    "title": "Rerunning Enformer pipeline on missing individuals, intervals",
    "section": "",
    "text": "import os\nimport pandas as pd\n\n\npredictions_dir = \"/home/s1mi/Br_predictions/predictions_folder/personalized_Br_selected_genes/predictions_2023-09-02/enformer_predictions\"\nsuccessful_predictions = {}\nfor individual in os.listdir(predictions_dir):\n    n_intervals = len(os.listdir(os.path.join(predictions_dir, individual, \"haplotype0\")))\n    if n_intervals &lt; 868:\n        if n_intervals not in successful_predictions.keys():\n            successful_predictions[n_intervals] = [individual]\n        else:\n            successful_predictions[n_intervals].append(individual)\nfor n_intervals in successful_predictions.keys():\n    print(\"n individuals with\", n_intervals, \"predictions:\", len(successful_predictions[n_intervals]))\n\n\n\nwith open(\"metadata/intervals.txt\", \"r\") as f:\n    all_intervals = f.read().splitlines()"
  },
  {
    "objectID": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/debugging.html#write-metadata",
    "href": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/debugging.html#write-metadata",
    "title": "Rerunning Enformer pipeline on missing individuals, intervals",
    "section": "Write Metadata",
    "text": "Write Metadata\n\nfor index, n_intervals in enumerate(successful_predictions.keys()):\n    individuals = successful_predictions[n_intervals]\n    with open(f\"metadata/individuals{index}.txt\", \"w\") as f:\n        f.write(\"\\n\".join(individuals))\n    individual = individuals[0]\n    files = os.listdir(os.path.join(predictions_dir, individual, \"haplotype0\"))\n    intervals = [file.replace(\"_predictions.h5\", \"\") for file in files]\n    missing_intervals = [interval for interval in all_intervals if interval not in intervals]\n    with open(f\"metadata/intervals{index}.txt\", \"w\") as f:\n        f.write(\"\\n\".join(missing_intervals))"
  },
  {
    "objectID": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/debugging.html#write-config-files",
    "href": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/debugging.html#write-config-files",
    "title": "Rerunning Enformer pipeline on missing individuals, intervals",
    "section": "Write Config Files",
    "text": "Write Config Files\n\nimport json\n\nwith open(\"personalized_config.json\", \"r\") as input_json:\n    parameters = json.load(input_json)\n\nfor index, n_intervals in enumerate(successful_predictions.keys()):\n    parameters[\"individuals\"] = f\"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/metadata/individuals{index}.txt\"\n    parameters[\"interval_list_file\"] = f\"/home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/metadata/intervals{index}.txt\"\n    parameters[\"n_individuals\"] = len(successful_predictions[n_intervals])\n    parameters[\"batch_individuals\"] = 5\n    parameters[\"n_regions\"] = 868 - n_intervals\n    parameters[\"batch_regions\"] = 5\n    parameters[\"date\"] = \"2023-09-02\"\n    parameters[\"parsl_parameters\"][\"walltime\"] = \"00:30:00\"\n    with open(f\"personalized_config{index}.json\", \"w\") as output_json:\n        json.dump(parameters, output_json, indent=2)"
  },
  {
    "objectID": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/debugging.html#run-pipeline",
    "href": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/debugging.html#run-pipeline",
    "title": "Rerunning Enformer pipeline on missing individuals, intervals",
    "section": "Run Pipeline",
    "text": "Run Pipeline\nmodule load conda\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\n\nfor i in {0..2}; do\n    python /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/personalized_config${i}.json &\n    sleep 20\ndone"
  },
  {
    "objectID": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/pipeline.html",
    "href": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/pipeline.html",
    "title": "Running personalized Enformer pipeline on Br rats for many more genes",
    "section": "",
    "text": "We are aiming for ~1,000 genes at the end of the selection process\n\nimport pandas as pd\nimport numpy as np\n\n\ntpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\ntpm_var = tpm.iloc[:, 3:].var(axis=1)\ntpm_threshold = tpm_var.quantile(0.8)\n## subset of genes with high observed expression variation\nhigh_tpm_var_genes = set(tpm[tpm_var&gt; tpm_threshold].index)\n\n/tmp/ipykernel_14438/1587770446.py:1: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\n\n\n\neqtl = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/Brain.rn7.cis_qtl_signif.txt\", sep=\"\\t\")\ncounts = eqtl['gene_id'].value_counts()\ncounts.describe()\n\ncount    11238.000000\nmean      2312.935398\nstd       1490.079008\nmin          1.000000\n25%       1160.250000\n50%       2236.000000\n75%       3277.750000\nmax      10799.000000\nName: gene_id, dtype: float64\n\n\n\neqtl_threshold = counts.quantile(0.8)\neqtl_genes = counts[counts &gt; eqtl_threshold].index\n\n\ngene_list = high_tpm_var_genes.intersection(set(eqtl_genes))\nprint(len(gene_list), \"candidate genes for enformer prediction experiments\")\n\n868 candidate genes for enformer prediction experiments"
  },
  {
    "objectID": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/pipeline.html#selecting-genes",
    "href": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/pipeline.html#selecting-genes",
    "title": "Running personalized Enformer pipeline on Br rats for many more genes",
    "section": "",
    "text": "We are aiming for ~1,000 genes at the end of the selection process\n\nimport pandas as pd\nimport numpy as np\n\n\ntpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\ntpm_var = tpm.iloc[:, 3:].var(axis=1)\ntpm_threshold = tpm_var.quantile(0.8)\n## subset of genes with high observed expression variation\nhigh_tpm_var_genes = set(tpm[tpm_var&gt; tpm_threshold].index)\n\n/tmp/ipykernel_14438/1587770446.py:1: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", header = 0, sep=\"\\t\",  index_col= 'gene_id')\n\n\n\neqtl = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/Brain.rn7.cis_qtl_signif.txt\", sep=\"\\t\")\ncounts = eqtl['gene_id'].value_counts()\ncounts.describe()\n\ncount    11238.000000\nmean      2312.935398\nstd       1490.079008\nmin          1.000000\n25%       1160.250000\n50%       2236.000000\n75%       3277.750000\nmax      10799.000000\nName: gene_id, dtype: float64\n\n\n\neqtl_threshold = counts.quantile(0.8)\neqtl_genes = counts[counts &gt; eqtl_threshold].index\n\n\ngene_list = high_tpm_var_genes.intersection(set(eqtl_genes))\nprint(len(gene_list), \"candidate genes for enformer prediction experiments\")\n\n868 candidate genes for enformer prediction experiments"
  },
  {
    "objectID": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/pipeline.html#run-the-pipeline",
    "href": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/pipeline.html#run-the-pipeline",
    "title": "Running personalized Enformer pipeline on Br rats for many more genes",
    "section": "Run the Pipeline",
    "text": "Run the Pipeline\n\nWrite Metadata\n\n## write intervals.txt\nannot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\n\ndef write_intervals(gene_list, file):\n    with open(file, 'a') as f:\n        for gene in gene_list:\n            gene_annot = annot_df.loc[gene]\n            tss = gene_annot['tss']\n            interval = f\"chr{gene_annot['chromosome']}_{tss}_{tss}\"\n            f.write(interval + '\\n')\n\n/tmp/ipykernel_14438/1105297742.py:2: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\n\n\n\nwith open(\"gene_list.txt\", \"w\") as f:\n    f.write(\"\\n\".join(gene_list))\nwrite_intervals(gene_list, \"metadata/intervals.txt\")\n\n\n\nSubmit Jobs\nmodule load conda\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\n\npython /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/personalized_config.json\n\n\n\n\nSubmit Jobs\nmodule load conda\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\n\npython /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-Br-personalized-prediction-on-more-genes/personalized_config.json"
  },
  {
    "objectID": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/index.html",
    "href": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/index.html",
    "title": "Personalized Prediction Correlations for 868 rn7 genes",
    "section": "",
    "text": "We ran the personalized Enformer pipeline 868 genes for high variation in Br rats and number of eQTLs. There are too many predictions to concatenate iteratively, so I wrote collect_predictions.py to parallelize in a submitted job.\nNote: This script appends predictions to the h5 in parallel, I first initialized the h5 file with individuals list to be paired with all gene expression datasets.\nCode\nimport h5py\nimport pandas as pd\nproject_dir = \"/home/s1mi/Br_predictions/predictions_folder/personalized_Br_selected_genes\"\n\nobs_gene_expr = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", nrows=1)\nwith h5py.File(f\"{project_dir}/selected_genes_mouse_and_human_predictions.h5\", \"w\") as file:\n    file.attrs[\"index\"] = obs_gene_expr.columns.to_list()[4:]\n\nimport seaborn as sns\ncolors = sns.color_palette(\"pastel\")\nAfter my parsl job was stuck in the queue for two days, I decided to forgo parsl and append the predictions from the login node. This took many interrupted attempts, but was sadly the better option. The non-parallelized code is below:\nCode\n#### LIBRARIES AND DEFINITIONS\nimport pandas as pd\nimport numpy as np\nimport h5py\nproject_dir = \"/grand/TFXcan/imlab/users/sabrina/Br_predictions/predictions_folder/personalized_Br_selected_genes\"\npredictions_dir = f\"{project_dir}/predictions_2023-09-02/enformer_predictions\"\nobs_gene_expr = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", header= 0, index_col='geneId')\n#### GET LIST OF GENES\nwith open(f\"gene_list.txt\", \"r\") as file:\n    gene_list = file.read().splitlines()\nprint(len(gene_list), \"genes with enformer predictions\")\n#### JOIN WITH ENFORMER PREDICTIONS FUNCTION\ndef collect_predictions(gene):\n    with h5py.File(f\"{project_dir}/selected_genes_mouse_and_human_predictions.h5\", \"a\") as output_file:\n        if gene not in output_file.keys():\n            ### INITIALIZE EXPRESSION MATRIX WITH OBSERVED DATA\n            expr_df = pd.DataFrame({\"observed\": obs_gene_expr.loc[gene][3:].astype(\"float32\")})    \n\n            ### READ PREDICTIONS\n            gene_annot = annot_df.loc[gene]\n            interval = f\"chr{gene_annot['chromosome']}_{gene_annot['tss']}_{gene_annot['tss']}\"\n            human_predicted = []\n            mouse_predicted = []\n            for individual in expr_df.index:\n                with h5py.File(f\"{predictions_dir}/{individual}/haplotype0/{interval}_predictions.h5\", \"r\") as input_file:\n                    human_prediction = input_file[\"human\"][446:450, 4980]\n                    mouse_prediction = input_file[\"mouse\"][446:450, 1300]\n                    human_predicted.append(np.average(human_prediction))\n                    mouse_predicted.append(np.average(mouse_prediction))\n            \n            ### JOIN IN DATAFRAME\n            expr_df[\"human predicted\"] = human_predicted\n            expr_df[\"mouse predicted\"] = mouse_predicted\n            ### WRITE TO h5\n            output_file[gene] = expr_df\n#### JOIN CONCURRENTLY ACROSS GENES\nfor gene in gene_list:\n    collect_predictions(gene)\nprint(\"Finished writing expression matrices for\", len(gene_list), \"genes\")"
  },
  {
    "objectID": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/index.html#read-processed-predictions",
    "href": "posts/2023-08-31-Br-personalized-prediction-on-more-genes/index.html#read-processed-predictions",
    "title": "Personalized Prediction Correlations for 868 rn7 genes",
    "section": "Read Processed Predictions",
    "text": "Read Processed Predictions\n\n\nCode\nimport h5py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy import stats\nproject_dir = \"/grand/TFXcan/imlab/users/sabrina/Br_predictions/predictions_folder/personalized_Br_selected_genes\"\nwith open(f\"gene_list.txt\", \"r\") as file:\n    gene_list = file.read().splitlines()\nexpr_dict = {}\nwith h5py.File(f\"{project_dir}/selected_genes_mouse_and_human_predictions.h5\", \"r\") as file:\n    index = file.attrs[\"index\"]\n    for gene in file.keys():\n        matrix = file[gene][:]\n        expr_dict[gene] = pd.DataFrame(matrix, index = index, columns = [\"observed\", \"human predicted\", \"mouse predicted\"])\n\n\n\n\nCode\npearson_corr_by_gene = pd.DataFrame(columns = [\"human\", \"mouse\"], index = gene_list)\npearson_pval_by_gene = pd.DataFrame(columns = [\"human\", \"mouse\"], index = gene_list)\nfor gene in gene_list:\n    human_corr, human_pval = stats.pearsonr(expr_dict[gene][\"observed\"], expr_dict[gene][\"human predicted\"])\n    mouse_corr, mouse_pval = stats.pearsonr(expr_dict[gene][\"observed\"], expr_dict[gene][\"mouse predicted\"])\n    pearson_corr_by_gene.loc[gene] = [human_corr, mouse_corr]\n    pearson_pval_by_gene.loc[gene] = [human_pval, mouse_pval]\n    \n\nspearman_corr_by_gene = pd.DataFrame(columns = [\"human\", \"mouse\"], index = gene_list)\nspearman_pval_by_gene = pd.DataFrame(columns = [\"human\", \"mouse\"], index = gene_list)\nfor gene in gene_list:\n    human_corr, human_pval = stats.spearmanr(expr_dict[gene][\"observed\"], expr_dict[gene][\"human predicted\"])\n    mouse_corr, mouse_pval = stats.spearmanr(expr_dict[gene][\"observed\"], expr_dict[gene][\"mouse predicted\"])\n    spearman_corr_by_gene.loc[gene] = [human_corr, mouse_corr]\n    spearman_pval_by_gene.loc[gene] = [human_pval, mouse_pval]\n\n\n/soft/datascience/conda/2022-09-08/mconda3/lib/python3.8/site-packages/scipy/stats/_stats_py.py:4424: ConstantInputWarning: An input array is constant; the correlation coefficient is not defined.\n  warnings.warn(stats.ConstantInputWarning(msg))\n/soft/datascience/conda/2022-09-08/mconda3/lib/python3.8/site-packages/scipy/stats/_stats_py.py:4878: ConstantInputWarning: An input array is constant; the correlation coefficient is not defined.\n  warnings.warn(stats.ConstantInputWarning(warn_msg))\n\n\n\n\nCode\npearson_corr_human = pd.DataFrame(columns = [\"pearson r\", \"pvalue\"], index = gene_list)\npearson_corr_mouse = pd.DataFrame(columns = [\"pearson r\", \"pvalue\"], index = gene_list)\nfor gene in gene_list:\n    human_corr, human_pval = stats.pearsonr(expr_dict[gene][\"observed\"], expr_dict[gene][\"human predicted\"])\n    mouse_corr, mouse_pval = stats.pearsonr(expr_dict[gene][\"observed\"], expr_dict[gene][\"mouse predicted\"])\n    pearson_corr_human.loc[gene] = [human_corr, human_pval]\n    pearson_corr_mouse.loc[gene] = [mouse_corr, mouse_pval]\n    \nspearman_corr_human = pd.DataFrame(columns = [\"spearman r\", \"pvalue\"], index = gene_list)\nspearman_corr_mouse = pd.DataFrame(columns = [\"spearman r\", \"pvalue\"], index = gene_list)\nfor gene in gene_list:\n    human_corr, human_pval = stats.spearmanr(expr_dict[gene][\"observed\"], expr_dict[gene][\"human predicted\"])\n    mouse_corr, mouse_pval = stats.spearmanr(expr_dict[gene][\"observed\"], expr_dict[gene][\"mouse predicted\"])\n    spearman_corr_human.loc[gene] = [human_corr, human_pval]\n    spearman_corr_mouse.loc[gene] = [mouse_corr, mouse_pval]\npearson_corr_human.dropna().to_csv(\"/home/s1mi/enformer_rat_data/output/Br_personalized_pearson_corr_human.csv\")\npearson_corr_mouse.dropna().to_csv(\"/home/s1mi/enformer_rat_data/output/Br_personalized_pearson_corr_mouse.csv\")\nspearman_corr_human.dropna().to_csv(\"/home/s1mi/enformer_rat_data/output/Br_personalized_spearman_corr_human.csv\")\nspearman_corr_mouse.dropna().to_csv(\"/home/s1mi/enformer_rat_data/output/Br_personalized_spearman_corr_mouse.csv\")\n    \n\n\n/soft/datascience/conda/2022-09-08/mconda3/lib/python3.8/site-packages/scipy/stats/_stats_py.py:4424: ConstantInputWarning: An input array is constant; the correlation coefficient is not defined.\n  warnings.warn(stats.ConstantInputWarning(msg))\n/soft/datascience/conda/2022-09-08/mconda3/lib/python3.8/site-packages/scipy/stats/_stats_py.py:4878: ConstantInputWarning: An input array is constant; the correlation coefficient is not defined.\n  warnings.warn(stats.ConstantInputWarning(warn_msg))\n\n\nENSRNOG00000053502 is the only gene with NaN correlations, so we can still plot results from 867 genes.\n\n\nCode\npearson_corr_by_gene = pearson_corr_by_gene.dropna().astype(float)\nspearman_corr_by_gene = spearman_corr_by_gene.dropna().astype(float)\n\n\n\nPlot Genome-wide Correlations\n\n\nCode\n# Plot a histogram\nplt.hist(pearson_corr_by_gene[\"human\"], bins=50, edgecolor='black', color=colors[0])  # 'bins' determines the number of bins or bars\nplt.title('Correlations between Enformer human head predictions and observed expression for 868 genes')\nplt.xlabel('Pearson Correlations')\nplt.ylabel('Frequency')\nmean = np.mean(pearson_corr_by_gene[\"human\"])\nplt.axvline(mean, color='black', linestyle='dashed', linewidth=2, label=f'Mean: {mean:.3f}')\nplt.legend()\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\nCode\n# Plot a histogram\nplt.hist(pearson_corr_by_gene[\"mouse\"], bins=50, edgecolor='black', color=colors[0])  # 'bins' determines the number of bins or bars\nplt.title('Correlations between Enformer mouse head predictions and observed expression for 868 genes')\n\nplt.xlabel('Pearson Correlations')\nplt.ylabel('Frequency')\n\nmean = np.mean(pearson_corr_by_gene[\"mouse\"])\nplt.axvline(mean, color='black', linestyle='dashed', linewidth=2, label=f'Mean: {mean:.3f}')\nplt.legend()\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\nCode\n# Plot a histogram\nplt.hist(spearman_corr_by_gene[\"human\"], bins=50, edgecolor='black', color=colors[0])  # 'bins' determines the number of bins or bars\nplt.title('Correlations between Enformer human head predictions and observed expression for 868 genes')\nplt.xlabel('Spearman Correlations')\nplt.ylabel('Frequency')\nmean = np.mean(spearman_corr_by_gene[\"human\"])\nplt.axvline(mean, color='black', linestyle='dashed', linewidth=2, label=f'Mean: {mean:.3f}')\nplt.legend()\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\nCode\n# Plot a histogram\nplt.hist(spearman_corr_by_gene[\"mouse\"], bins=50, edgecolor='black', color=colors[0])  # 'bins' determines the number of bins or bars\nplt.title('Correlations between Enformer mouse head predictions and observed expression for 868 genes')\nplt.xlabel('Spearman Correlations')\nplt.ylabel('Frequency')\nmean = np.mean(spearman_corr_by_gene[\"mouse\"])\nplt.axvline(mean, color='black', linestyle='dashed', linewidth=2, label=f'Mean: {mean:.3f}')\nplt.legend()\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\nCompare Human and Mouse Model Correlations\n\n\nCode\n# Fit a linear regression line to the data (calculate slope)\nx = spearman_corr_by_gene[\"human\"].values\ny = spearman_corr_by_gene[\"mouse\"].values\nslope, intercept = np.polyfit(x, y, 1)\n# Create the plot\nplt.scatter(x, y, label='Genes', marker='o', color=colors[0])\nplt.plot(x, slope * x + intercept, '--', color=\"black\", label=f'Best Fit Line: y = {slope:.3f}x + {intercept:.3f}')\nplt.plot(x, x, '--', color=\"grey\", label=f'One-to-One Line')\nplt.title(\"Predicted vs Observed Spearman Correlations \")\n# Add labels and legend\nplt.xlabel('Human Head')\nplt.ylabel('Mouse Head')\nplt.legend()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\nCode\nhuman_sign_genes = spearman_pval_by_gene.index[spearman_pval_by_gene[\"human\"] &lt; 0.05/868]\nmouse_sign_genes = spearman_pval_by_gene.index[spearman_pval_by_gene[\"mouse\"] &lt; 0.05/868]\nhuman_unique = human_sign_genes.difference(mouse_sign_genes)\nmouse_unique = mouse_sign_genes.difference(human_sign_genes)\noverlap = human_sign_genes.intersection(mouse_sign_genes)\n# Data for the bar chart\ncategories = ['Overlap', 'Unique to Human', 'Unique to mouse']\ncounts = [len(overlap), len(human_unique), len(mouse_unique)]\n\n# Create the bar chart\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, counts, color=colors, width=0.4)\nplt.xlabel('Model')\nplt.ylabel('Counts')\nplt.title('Genes with Significant Prediction Performance')\n\n# Add numbers over each bar\nfor bar, count in zip(bars, counts):\n    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 1, str(count), ha='center', va='bottom')\n\nplt.show()\n\n\n\n\n\n\n\nPlot Predicted vs Observed Expression\nFirst, we’ll plot the best and worst genes, and then a random sample.\n\n\nCode\ndef plot_pearson_corr(gene):\n    corr = pearson_corr_by_gene.loc[gene][\"human\"]\n    plt.scatter(expr_dict[gene][\"observed\"], expr_dict[gene][\"human predicted\"], marker='o', color=colors[0], label=f\"Correlation: {corr:.3f}\")\n\n    # Add labels and title\n    plt.xlabel('Observed')\n    plt.ylabel('Predicted')\n    plt.title(gene)\n\n    # Show the plot\n    plt.legend()\n    plt.show()\n\ndef plot_spearman_corr(gene):\n    x = expr_dict[gene][\"observed\"]\n    y = expr_dict[gene][\"human predicted\"]\n    corr, pval = stats.spearmanr(x, y)\n    #plt.scatter(x, y, marker='o', color='blue', label=f\"Correlation: {corr:.3f}\\nP-value: {pval}\")\n    plt.scatter(stats.rankdata(x), stats.rankdata(y), marker='o', color=colors[1], label=f\"Correlation: {corr:.3f}\")\n\n    # Add labels and title\n    plt.xlabel('Observed Ranks')\n    plt.ylabel('Predicted Ranks')\n    plt.title(gene)\n\n    # Show the plot\n    plt.legend()\n    plt.show()\n\n\n\n\nCode\ngene = pearson_corr_by_gene[\"human\"].idxmax()\nplot_pearson_corr(gene)\n\n\nNameError: name 'pearson_corr_by_gene' is not defined\n\n\n\n\nCode\ngene = pearson_corr_by_gene[\"human\"].idxmin()\nplot_pearson_corr(gene)\n\n\n\n\n\n\n\nCode\ngene = spearman_corr_by_gene[\"human\"].idxmax()\nplot_spearman_corr(gene)\n\n\n\n\n\n\n\nCode\ngene = spearman_corr_by_gene[\"human\"].idxmin()\nplot_spearman_corr(gene)\n\n\n\n\n\n\n\nCode\ngene_sample = pearson_corr_by_gene.sample(n=3).index\nfor gene in gene_sample:\n    plot_pearson_corr(gene)"
  },
  {
    "objectID": "posts/2023-08-14-cyvcf2-tutorial/test_vcf_query.html",
    "href": "posts/2023-08-14-cyvcf2-tutorial/test_vcf_query.html",
    "title": "An introduction to cyvcf2",
    "section": "",
    "text": "import cyvcf2\nvcf_rn7 = cyvcf2.cyvcf2.VCF(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/chr20.vcf.gz\")\nvcf_hg38 = cyvcf2.cyvcf2.VCF(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/hg38_data/ALL.chr22.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz\")"
  },
  {
    "objectID": "posts/2023-08-14-cyvcf2-tutorial/test_vcf_query.html#read-vcf",
    "href": "posts/2023-08-14-cyvcf2-tutorial/test_vcf_query.html#read-vcf",
    "title": "An introduction to cyvcf2",
    "section": "",
    "text": "import cyvcf2\nvcf_rn7 = cyvcf2.cyvcf2.VCF(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/chr20.vcf.gz\")\nvcf_hg38 = cyvcf2.cyvcf2.VCF(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/hg38_data/ALL.chr22.shapeit2_integrated_SNPs_v2a_27022019.GRCh38.phased.vcf.gz\")"
  },
  {
    "objectID": "posts/2023-08-14-cyvcf2-tutorial/test_vcf_query.html#query-snps-in-interval",
    "href": "posts/2023-08-14-cyvcf2-tutorial/test_vcf_query.html#query-snps-in-interval",
    "title": "An introduction to cyvcf2",
    "section": "Query SNPs in Interval",
    "text": "Query SNPs in Interval\nWe query the VCF for all snp positions and put it into a list.\n\nsnps = []\nfor variant in vcf_rn7:\n    snps.append(variant.POS)\nregion = [snp for snp in snps if 11922155 &lt; snp &lt; 12315371]\n\nOur region of interest is centered at the TSS for gene ENSRNOG00000054549. We subset to all snps within 196608 bp of position 12118763 on chromosome 20.\n\n#print(region)\nprint(len(region), \"snps found in interval\")\n\n1957 snps found in interval\n\n\nWe’ll print the first lines from both human and rat VCFs.\n\nfor variant in vcf_rn7:\n    print(variant)\n    break\nfor variant in vcf_hg38:\n    print(variant)\n    break\n\n20  7226    chr20:7226  A   G   .   PASS    AC=17763;AN=27342   GT  0/1 1/1 0/1 1/1 0/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 1/1 0/1 1/1 0/1 0/1 0/1 0/0 0/0 1/1 0/1 1/1 0/0 1/1 0/1 0/0 0/0 0/1 1/1 0/1 1/1 0/0 1/1 1/1 0/0 0/1 0/1 1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/1 1/1 0/1 0/1 0/0 1/1 1/1 1/1 1/1 0/0 0/0 0/1 0/1 0/0 1/1 0/1 0/1 0/1 0/0 1/1 1/1 1/1 1/1 0/1 1/1 0/1 0/1 0/1 1/1 1/1 1/1 1/1 0/0 1/1 0/1 0/1 1/1 0/1 0/0 0/1 0/1 1/1 1/1 1/1 0/1 0/1 1/1 0/1 0/1 0/1 0/1 0/1 1/1 0/1 0/1 0/0 1/1 0/1 0/1 1/1 0/0 0/0 1/1 0/1 1/1 1/1 0/0 0/0 1/1 1/1 1/1 0/1 0/1 1/1 0/1 0/1 0/0 0/1 0/1 1/1 0/1 0/1 0/1 0/0 0/1 0/1 0/0 1/1 0/1 0/1 0/1 1/1 0/0 0/0 0/0 1/1 0/1 0/1 0/1 0/0 0/1 0/1 1/1 1/1 1/1 0/1 0/1 1/1 1/1 0/0 0/1 0/1 1/1 0/0 0/0 1/1 0/0 0/1 0/0 0/1 0/1 0/1 0/1 0/1 0/0 0/1 0/0 0/0 0/0 0/1 1/1 0/1 0/1 0/1 0/0 0/1 1/1 1/1 1/1 1/1 0/1 0/1 1/1 0/1 0/0 1/1 0/0 1/1 1/1 0/1 ./. 1/1 1/1 0/0 0/1 1/1 0/1 1/1 1/1 1/1 1/1 0/1 1/1 0/1 0/1 0/1 0/1 1/1 1/1 1/1 0/0 1/1 1/1 1/1 1/1 1/1 0/1 1/1 1/1 1/1 0/1 0/1 1/1 1/1 1/1 1/1 0/1 0/1 0/1 1/1 1/1 1/1 0/1 0/1 0/1 1/1 1/1 1/1 1/1 1/1 0/0 0/1 0/1 1/1 1/1 1/1 1/1 0/0 1/1 0/1 0/1 0/1 1/1 1/1 1/1 0/1 0/1 1/1 1/1 0/0 0/0 1/1 0/1 0/1 0/0 1/1 0/1 1/1 1/1 0/1 0/0 0/0 0/0 0/0 0/1 0/0 0/1 0/1 1/1 0/1 0/1 0/0 ./. 0/0 0/1 1/1 0/1 1/1 1/1 1/1 0/1 0/0 0/0 1/1 0/0 0/1 0/1 0/1 0/1 0/1 0/1 0/0 1/1 0/1 1/1 0/1 1/1 0/1 1/1 1/1 1/1 1/1 0/1 1/1 0/0 0/1 1/1 0/1 1/1 1/1 1/1 1/1 0/1 0/1 1/1 0/1 0/0 0/1 1/1 1/1 0/1 0/0 1/1 0/1 0/0\n\nchr22   10522217    .   G   A   .   PASS    AC=89;AF=0.02;AFR_AF=0.07;AMR_AF=0;AN=5096;DP=9085;EAS_AF=0;EUR_AF=0;NS=2548;SAS_AF=0;VT=SNP    GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 1|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 1|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|1 0|0 0|0 1|1 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 1|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|1 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 1|1 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|1 1|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 1|0 1|1 0|0 0|0 0|0 0|0 0|0 0|1 0|1 0|0 0|0 0|0 0|0 1|0 1|0 0|0 0|1 1|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|1 0|1 0|0 1|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 1|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 1|0 0|0 0|0 0|1 0|0 1|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0\n\n\n\nThe first three columns look different, which might explain our bugs with our rat VCFs when running the Enformer pipeline. We’ll try querying these regions from the VCFs.\n\nfor variant in vcf_hg38(\"chr22:10516173-10909389\"):\n    print(variant)\n    break\n\nchr22   10516173    .   A   G   .   PASS    AC=121;AF=0.02;AFR_AF=0.06;AMR_AF=0.02;AN=5096;DP=8203;EAS_AF=0;EUR_AF=0.02;NS=2548;SAS_AF=0;VT=SNP GT  0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 1|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|1 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|1 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 1|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|1 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|1 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|1 0|0 1|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 1|0 0|0 0|0 1|0 0|0 0|0 1|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|1 0|0 0|0 1|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|1 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 1|0 0|1 0|0 0|0 0|0 0|0 0|1 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 1|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|1 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0 0|0\n\n\n\n\nfor variant in vcf_rn7(\"20:11922155-12315371\"):\n    print(variant)\n    break\n\n20  11922570    chr20:11922570  G   A   .   PASS    AC=10302;AN=28910   GT  0/0 0/1 0/0 1/1 0/1 0/0 ./. 0/1 0/0 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/1 1/1 0/1 0/1 0/0 0/1 0/1 0/0 0/1 0/0 0/1 0/0 0/1 0/0 1/1 0/1 0/1 0/1 0/0 0/1 1/1 0/1 0/0 0/0 0/0 1/1 0/0 0/1 0/0 0/1 1/1 0/1 0/0 1/1 0/0 0/0 0/0 0/1 0/0 0/1 0/1 0/1 0/0 0/0 1/1 0/1 0/1 0/0 0/0 0/0 0/0 1/1 0/0 0/0 0/1 0/0 0/1 0/1 0/0 0/1 0/1 0/0 0/0 0/0 0/1 0/0 1/1 0/1 0/1 0/1 0/1 0/1 0/1 0/0 0/0 1/1 0/0 0/1 0/0 0/0 0/0 0/1 0/1 0/0 0/0 0/1 0/0 0/0 0/0 0/0 0/1 0/1 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/1 0/1 0/0 0/0 1/1 0/1 0/0 0/0 1/1 0/1 0/0 0/1 1/1 0/0 0/1 0/0 0/0 0/1 0/0 0/1 1/1 0/0 0/0 0/1 0/1 0/1 0/0 0/0 0/1 0/0 1/1 0/0 0/0 0/1 0/0 0/1 1/1 0/0 0/0 0/0 0/1 0/1 0/0 0/1 0/0 0/1 1/1 0/1 0/1 0/1 0/1 1/1 0/1 0/0 0/0 0/0 0/0 0/0 1/1 0/1 1/1 0/0 0/1 0/1 0/0 0/0 0/0 0/0 0/0 1/1 0/1 1/1 0/1 0/1 0/1 0/1 0/1 0/1 1/1 0/0 0/0 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/0 1/1 0/1 0/0 0/0 0/0 0/0 0/1 1/1 0/0 0/0 0/1 0/1 0/0 0/0 0/0 0/1 0/0 0/1 0/1 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/0 0/0 0/1 0/1 0/1 0/1 0/1 0/1 0/0 0/0 0/1 0/0 0/1 0/0 0/1 0/0 0/0 1/1 0/1 0/0 0/0 0/0 0/1 0/0 0/0 0/0 1/1 1/1 0/1 0/1 0/1 0/1 0/1 0/0 0/0 0/1 1/1 0/0 1/1 0/0 0/1 0/1 1/1 0/0 1/1 0/1 0/1 0/1 0/0 0/0 0/1 1/1 0/1 0/1 0/0 0/1 0/0 0/1 0/1 0/0 0/0 0/1 0/0 0/1 0/1 0/0 0/1 0/1 0/0 0/0 0/0 0/0 0/1 0/1 1/1 0/0 0/0 0/0 0/1 0/1 0/0 0/0 0/0 0/0 0/0 0/1 0/1 0/0 0/1 0/0 1/1 0/1 0/1 0/0\n\n\n\nBecause of the difference in chromosome notations, we have to query the rat VCFs without the extra “chr” string at the start. Unfortunately, we need the “chr” string for other parts of the pipeline, so we cannot just remove the “chr” prefix from our intervals.txt file, but rather we need to add “chr” to the CHROM column of our rn7 VCFs.\nawk '{if($0 !~ /^#/) print \"chr\"$0; else print $0}' genotypes/Brain.rn7.vcf &gt; output.vcf\n\n\nI will update the Preparing Rat VCFs for Enformer blog post.\nWe will also compare to the founder rats VCF: /home/s1mi/enformer_rat_data/genotypes/Palmer_HS_founders_mRatBN7_2.vcf.gz\n\nimport cyvcf2\nvcf_Br = cyvcf2.cyvcf2.VCF(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/chr20.vcf.gz\")\nvcf_founder = cyvcf2.cyvcf2.VCF(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/Palmer_HS_founders_mRatBN7_2.vcf.gz\")\n\n\nfor variant in vcf_Br:\n    print(variant)\n    print(\"first Br rat dosage:\", variant.genotypes[0][0:2], variant.gt_bases[0].split(\"/\"))\n    break\nfor variant in vcf_founder:\n    print(variant)\n    print(\"first founder rat dosage:\", variant.genotypes[0][0:2], variant.gt_bases[0].split(\"/\"))\n    break\n\nchr20   12595810    chr20:12595810  T   C   .   PASS    AC=6551;AN=28956    GT  0/0 0/1 0/0 0/1 0/1 0/0 0/1 0/1 0/0 0/1 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/1 0/1 0/1 0/0 0/0 0/0 0/1 0/0 0/1 0/0 0/1 0/0 0/0 0/0 0/1 0/0 0/0 0/1 0/0 0/0 1/1 0/0 0/0 0/0 0/0 0/1 0/0 0/1 0/0 0/0 1/1 0/0 0/0 1/1 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/1 0/0 0/1 0/0 0/0 0/0 0/0 1/1 0/0 0/0 0/1 0/0 0/1 0/1 0/0 0/0 0/1 0/0 0/0 0/0 0/1 0/0 0/1 0/1 0/1 0/0 0/0 0/1 0/0 0/0 0/0 1/1 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/1 0/0 0/0 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/0 0/1 0/0 0/1 0/1 0/0 0/0 0/0 0/1 0/1 0/0 0/0 0/0 0/0 1/1 0/0 0/0 0/1 0/0 0/1 1/1 0/0 0/0 0/0 0/1 0/0 0/0 0/1 0/0 0/0 1/1 0/0 0/1 0/1 0/0 1/1 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 1/1 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/1 0/0 0/0 1/1 0/1 0/0 0/0 0/0 0/0 0/1 1/1 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/0 0/1 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/1 1/1 1/1 0/1 0/0 0/0 0/0 0/1 0/0 0/1 0/1 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/0 1/1 1/1 0/0 0/1 0/0 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/1 1/1 0/0 0/0 0/1 0/1 0/1 0/1 0/0 0/0 0/0 0/1 0/0 0/0 0/0 0/1 0/0 0/1 0/1 0/0 0/0 0/0 0/0 0/1 0/1 0/0 0/1 0/1 0/0 0/0 0/0 0/0 0/1 0/0 1/1 0/0 0/0 0/1 0/1 0/0 0/1 0/0 0/0 0/0 0/0 0/0 0/1 0/0 0/1 0/0 0/1 0/1 0/1 0/0\n\nfirst Br rat dosage: [0, 0] ['T', 'T']\nNC_051336.1 606 .   T   C   589.07  PASS    AC=1;AF=0.063;AN=16;BaseQRankSum=0.978;DP=385;ExcessHet=3.0103;FS=5.363;MLEAC=1;MLEAF=0.063;MQ=49.97;MQRankSum=-4.041;QD=12.02;ReadPosRankSum=-0.166;SOR=0.943  GT:AD:DP:GQ:PL  0/0:35,0:35:99:0,104,1062   0/0:91,0:91:99:0,268,2737   0/0:39,0:39:99:0,117,1293   0/0:52,0:52:99:0,155,1663   0/0:36,0:36:99:0,107,1103   0/0:39,0:39:99:0,117,1255   0/1:25,24:49:99:600,0,645   0/0:31,0:31:93:0,93,936\n\nfirst founder rat dosage: [0, 0] ['T', 'T']\n\n\nEven though the founder VCF has additional information attached to GT, we still only query dosage informations with cyvcf2. This means we won’t have to modify our founder VCF any further than changing the CHROM column to chromosome numbers."
  },
  {
    "objectID": "posts/2023-08-24-Cisd2-correlation-across-rats/index.html",
    "href": "posts/2023-08-24-Cisd2-correlation-across-rats/index.html",
    "title": "Cisd2 Correlation across rats",
    "section": "",
    "text": "We picked Cisd2 out the selection process.\n\nRun Pipeline\nWe centered the interval at Cisd2’s TSS chr2:223868946.\nmodule load conda\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\ncd /home/s1mi/Github/shared_pipelines/enformer_pipeline\npython scripts/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-24-Cisd2-correlation-across-rats/Cisd2_personalized.json\n\n\nCompare to Observed\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport h5py\n\n\ngene = \"ENSRNOG00000048258\"\ngene_expr_bed = \"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\"\npredictions_dir = \"/home/s1mi/Br_predictions/predictions_folder/personalized_Br_genes/predictions_2023-08-24/enformer_predictions\"\nobs_gene_expr = pd.read_csv(gene_expr_bed, sep=\"\\t\", header=0, index_col='gene_id')\n\n/tmp/ipykernel_174805/3252868614.py:4: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  obs_gene_expr = pd.read_csv(gene_expr_bed, sep=\"\\t\", header=0, index_col='gene_id')\n\n\n\nobs = obs_gene_expr.loc[gene][3:]\ndf = pd.DataFrame({\"observed\": obs, \"predicted\": np.zeros(obs.shape)})\n\n\nfor individual in df.index:\n    haplo0 = h5py.File(f\"{predictions_dir}/{individual}/haplotype0/chr2_223868946_223868946_predictions.h5\", \"r\")\n    predictions = haplo0[\"chr2_223868946_223868946\"][446:450, 0]\n    df.loc[individual, \"predicted\"] = np.average(predictions)\n\n\ndf.corr()\n\n\n\n\n\n\n\n\nobserved\npredicted\n\n\n\n\nobserved\n1.000000\n0.318211\n\n\npredicted\n0.318211\n1.000000\n\n\n\n\n\n\n\n\n\nx = df['observed']\ny = df['predicted']\n# Create the dot plot\nplt.scatter(x, y, color='blue', marker='o', s=100)\n\n# Add labels and title\nplt.xlabel('Observed')\nplt.ylabel('Predicted')\nplt.title('Cisd2')\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html",
    "href": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html",
    "title": "Comparing two methods of averaging Enformer results for personalized prediction",
    "section": "",
    "text": "import tensorflow as tf\n# Make sure the GPU is enabled \nassert tf.config.list_physical_devices('GPU'), 'Start the colab kernel with GPU: Runtime -&gt; Change runtime type -&gt; GPU'\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\nimport tensorflow_hub as hub # for interacting with saved models and tensorflow hub\nimport joblib\nimport gzip # for manipulating compressed files\nimport kipoiseq # for manipulating fasta files\nfrom kipoiseq import Interval # same as above, really\nimport pyfaidx # to index our reference genome file\nimport pandas as pd # for manipulating dataframes\nimport numpy as np # for numerical computations\nimport matplotlib.pyplot as plt # for plotting\nimport matplotlib as mpl # for plotting\nimport seaborn as sns # for plotting\nimport pickle # for saving large objects\nimport os, sys # functions for interacting with the operating system\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nNum GPUs Available:  1"
  },
  {
    "objectID": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#import-libraries",
    "href": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#import-libraries",
    "title": "Comparing two methods of averaging Enformer results for personalized prediction",
    "section": "",
    "text": "import tensorflow as tf\n# Make sure the GPU is enabled \nassert tf.config.list_physical_devices('GPU'), 'Start the colab kernel with GPU: Runtime -&gt; Change runtime type -&gt; GPU'\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\nimport tensorflow_hub as hub # for interacting with saved models and tensorflow hub\nimport joblib\nimport gzip # for manipulating compressed files\nimport kipoiseq # for manipulating fasta files\nfrom kipoiseq import Interval # same as above, really\nimport pyfaidx # to index our reference genome file\nimport pandas as pd # for manipulating dataframes\nimport numpy as np # for numerical computations\nimport matplotlib.pyplot as plt # for plotting\nimport matplotlib as mpl # for plotting\nimport seaborn as sns # for plotting\nimport pickle # for saving large objects\nimport os, sys # functions for interacting with the operating system\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nNum GPUs Available:  1"
  },
  {
    "objectID": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#define-paths",
    "href": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#define-paths",
    "title": "Comparing two methods of averaging Enformer results for personalized prediction",
    "section": "Define Paths",
    "text": "Define Paths\n\ntransform_path = 'gs://dm-enformer/models/enformer.finetuned.SAD.robustscaler-PCA500-robustscaler.transform.pkl'\nmodel_path = 'https://tfhub.dev/deepmind/enformer/1'\nfasta_file = '/home/s1mi/enformer-tutorial/genome.fa'\ntargets_txt = 'https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_human.txt'\ndf_targets = pd.read_csv(targets_txt, sep='\\t')"
  },
  {
    "objectID": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#define-functions",
    "href": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#define-functions",
    "title": "Comparing two methods of averaging Enformer results for personalized prediction",
    "section": "Define Functions",
    "text": "Define Functions\n\n# @title `Enformer`, `EnformerScoreVariantsNormalized`, `EnformerScoreVariantsPCANormalized`,\nSEQUENCE_LENGTH = 393216\n\nclass Enformer:\n\n  def __init__(self, tfhub_url):\n    self._model = hub.load(tfhub_url).model\n\n  def predict_on_batch(self, inputs):\n    predictions = self._model.predict_on_batch(inputs)\n    return {k: v.numpy() for k, v in predictions.items()}\n\n  @tf.function\n  def contribution_input_grad(self, input_sequence,\n                              target_mask, output_head='human'):\n    input_sequence = input_sequence[tf.newaxis]\n\n    target_mask_mass = tf.reduce_sum(target_mask)\n    with tf.GradientTape() as tape:\n      tape.watch(input_sequence)\n      prediction = tf.reduce_sum(\n          target_mask[tf.newaxis] *\n          self._model.predict_on_batch(input_sequence)[output_head]) / target_mask_mass\n\n    input_grad = tape.gradient(prediction, input_sequence) * input_sequence\n    input_grad = tf.squeeze(input_grad, axis=0)\n    return tf.reduce_sum(input_grad, axis=-1)\n\n\nclass EnformerScoreVariantsRaw:\n\n  def __init__(self, tfhub_url, organism='human'):\n    self._model = Enformer(tfhub_url)\n    self._organism = organism\n\n  def predict_on_batch(self, inputs):\n    ref_prediction = self._model.predict_on_batch(inputs['ref'])[self._organism]\n    alt_prediction = self._model.predict_on_batch(inputs['alt'])[self._organism]\n\n    return alt_prediction.mean(axis=1) - ref_prediction.mean(axis=1)\n\n\nclass EnformerScoreVariantsNormalized:\n\n  def __init__(self, tfhub_url, transform_pkl_path,\n               organism='human'):\n    assert organism == 'human', 'Transforms only compatible with organism=human'\n    self._model = EnformerScoreVariantsRaw(tfhub_url, organism)\n    with tf.io.gfile.GFile(transform_pkl_path, 'rb') as f:\n      transform_pipeline = joblib.load(f)\n    self._transform = transform_pipeline.steps[0][1]  # StandardScaler.\n\n  def predict_on_batch(self, inputs):\n    scores = self._model.predict_on_batch(inputs)\n    return self._transform.transform(scores)\n\n\nclass EnformerScoreVariantsPCANormalized:\n\n  def __init__(self, tfhub_url, transform_pkl_path,\n               organism='human', num_top_features=500):\n    self._model = EnformerScoreVariantsRaw(tfhub_url, organism)\n    with tf.io.gfile.GFile(transform_pkl_path, 'rb') as f:\n      self._transform = joblib.load(f)\n    self._num_top_features = num_top_features\n\n  def predict_on_batch(self, inputs):\n    scores = self._model.predict_on_batch(inputs)\n    return self._transform.transform(scores)[:, :self._num_top_features]\n\n\n# TODO(avsec): Add feature description: Either PCX, or full names.\n\n\n# @title `variant_centered_sequences`\n\nclass FastaStringExtractor:\n\n    def __init__(self, fasta_file):\n        self.fasta = pyfaidx.Fasta(fasta_file)\n        self._chromosome_sizes = {k: len(v) for k, v in self.fasta.items()}\n    #import pd.Interval as Interval\n    def extract(self, interval: Interval, **kwargs) -&gt; str:\n        # Truncate interval if it extends beyond the chromosome lengths.\n        chromosome_length = self._chromosome_sizes[interval.chrom]\n        trimmed_interval = Interval(interval.chrom,\n                                    max(interval.start, 0),\n                                    min(interval.end, chromosome_length),\n                                    )\n        # pyfaidx wants a 1-based interval\n        sequence = str(self.fasta.get_seq(trimmed_interval.chrom,\n                                          trimmed_interval.start + 1,\n                                          trimmed_interval.stop).seq).upper()\n        # Fill truncated values with N's.\n        pad_upstream = 'N' * max(-interval.start, 0)\n        pad_downstream = 'N' * max(interval.end - chromosome_length, 0)\n        return pad_upstream + sequence + pad_downstream\n\n    def close(self):\n        return self.fasta.close()\n\n\ndef one_hot_encode(sequence):\n  return kipoiseq.transforms.functional.one_hot_dna(sequence).astype(np.float32)\n\n\n\n# @title `plot_tracks`\n\ndef plot_tracks(tracks, interval, height=1.5):\n  fig, axes = plt.subplots(len(tracks), 1, figsize=(20, height * len(tracks)), sharex=True)\n  for ax, (title, y) in zip(axes, tracks.items()):\n    ax.fill_between(np.linspace(interval.start, interval.end, num=len(y)), y)\n    ax.set_title(title)\n    sns.despine(top=True, right=True, bottom=True)\n  ax.set_xlabel(str(interval))\n  plt.tight_layout()\n\n\nimport Bio\n\nfrom Bio.Seq import Seq\ndef create_rev_complement(dna_string):\n    return(str(Seq(dna_string).reverse_complement()))\n\n\ndef prepare_for_quantify_prediction_per_TSS(predictions, gene, tss_df):\n\n  '''\n\n  Parameters:\n          predicitions (A numpy array): All predictions from the track\n          gene (a gene name, character): a gene\n          tss_df: a list of dataframe of genes and their transcription start sites\n  Returns:\n          A dictionary of cage experiment predictions and a list of transcription start sites\n\n  '''\n\n  output = dict()\n  for tdf in tss_df:\n    if gene not in tdf.genes.values:\n      continue\n    gene_tss_list = tdf[tdf.genes == gene].txStart_Sites.apply(str).values\n    gene_tss_list = [t.split(', ') for t in gene_tss_list]\n    gene_tss_list = [int(item) for nestedlist in gene_tss_list for item in nestedlist]\n    gene_tss_list = list(set(gene_tss_list))\n  output['cage_predictions'] = predictions[:, 5110] # a numpy array\n  output['gene_TSS'] = gene_tss_list # a list\n\n\n  return(output) # a dictionary\n\ndef quantify_prediction_per_TSS(low_range, TSS, cage_predictions):\n\n  '''\n  Parameters:\n          low_range (int): The lower interval\n          TSS (list of integers): A list of TSS for a gene\n          cage_predictions: A 1D numpy array or a vector of predictions from enformer corresponding to track 5110 or CAGE predictions\n  Returns:\n          A dictionary of gene expression predictions for each TSS for a gene\n    '''\n  tss_predictions = dict()\n  for tss in TSS:\n    bin_start = low_range + ((768 + 320) * 128)\n    count = -1\n    while bin_start &lt; tss:\n      bin_start = bin_start + 128\n      count += 1\n    if count &gt;= len(cage_predictions)-1:\n      continue\n    cage_preds = cage_predictions[count - 1] + cage_predictions[count] + cage_predictions[count + 1]\n    tss_predictions[tss] = cage_preds\n\n  return(tss_predictions)\n\ndef collect_intervals(chromosomes = [\"22\"], gene_list=None):\n\n  '''\n    Parameters :\n      chromosomes : a list of chromosome numbers; each element should be a string format\n      gene_list : a list of genes; the genes should be located on those chromosomes\n\n    Returns :\n      A dictionary of genes (from gene_list) and their intervals within their respective chromosomes\n  '''\n\n  gene_intervals = {} # Collect intervals for our genes of interest\n\n  for chrom in chromosomes:\n    with open(\"/home/s1mi/enformer-tutorial/gene_chroms/gene_\"+ chrom + \".txt\", \"r\") as chrom_genes:\n      for line in chrom_genes:\n        split_line = line.strip().split(\"\\t\")\n        gene_intervals[split_line[2]] = [\n                                          split_line[0],\n                                          int(split_line[3]),\n                                          int(split_line[4])\n                                        ]\n\n  if isinstance(gene_list, list): # if the user has supplied a list of genes they are interested in\n    use_genes = dict((k, gene_intervals[k]) for k in gene_list if k in gene_intervals)\n    return(use_genes)\n  elif isinstance(gene_list, type(None)):\n    return(gene_intervals)\n\n\ndef run_predictions(gene_intervals, tss_dataframe, individuals_list=None):\n  '''\n  Parameters :\n    gene_intervals : the results from calling `collect_intervals`\n    tss_dataframe : a list of the TSSs dataframes i.e. the TSS for the genes in the chromosomes\n    individuals_list : a list of individuals on which we want to make predictions; defaults to None\n\n  Returns :\n    A list of predictions; the first element is the predictions around the TSS for each gene. The second is the prediction across CAGE tracks\n  '''\n\n  gene_output = dict()\n  gene_predictions = dict()\n\n  for gene in gene_intervals.keys():\n    gene_interval = gene_intervals[gene]\n    target_interval = kipoiseq.Interval(\"chr\" + gene_interval[0],\n                                        gene_interval[1],\n                                        gene_interval[2]) # creates an interval to select the right sequences\n    target_fa = fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))  # extracts the fasta sequences, and resizes such that it is compatible with the sequence_length\n    window_coords = target_interval.resize(SEQUENCE_LENGTH) # we also need information about the start and end locations after resizing\n    try:\n      cur_gene_vars = pd.read_csv(\"/home/s1mi/enformer-tutorial/individual_beds/chr\" + gene_interval[0] + \"/chr\" + gene_interval[0] + \"_\"+ gene + \".bed\", sep=\"\\t\", header=0) # read in the appropriate bed file for the gene\n    except:\n      continue\n    individual_results = dict()\n    individual_prediction = dict()\n\n    if isinstance(individuals_list, list) or isinstance(individuals_list, type(np.empty([1, 1]))):\n      use_individuals = individuals_list\n    elif isinstance(individuals_list, type(None)):\n      use_individuals = cur_gene_vars.columns[4:]\n\n    for individual in use_individuals:\n      print('Currently on gene {}, and predicting on individual {}...'.format(gene, individual))\n      # two haplotypes per individual\n      haplo_1 = list(target_fa[:])\n      haplo_2 = list(target_fa[:])\n\n      ref_mismatch_count = 0\n      for i,row in cur_gene_vars.iterrows():\n\n        geno = row[individual].split(\"|\")\n        if (row[\"POS\"]-window_coords.start-1) &gt;= len(haplo_2):\n          continue\n        if (row[\"POS\"]-window_coords.start-1) &lt; 0:\n          continue\n        if geno[0] == \"1\":\n          haplo_1[row[\"POS\"]-window_coords.start-1] = row[\"ALT\"]\n        if geno[1] == \"1\":\n          haplo_2[row[\"POS\"]-window_coords.start-1] = row[\"ALT\"]\n\n      # predict on the individual's two haplotypes\n      prediction_1 = model.predict_on_batch(one_hot_encode(\"\".join(haplo_1))[np.newaxis])['human'][0]\n      prediction_2 = model.predict_on_batch(one_hot_encode(\"\".join(haplo_2))[np.newaxis])['human'][0]\n\n      temp_predictions = [prediction_1[:, 5110], prediction_2[:, 5110]] # CAGE predictions we are interested in\n      individual_prediction[individual] = temp_predictions\n\n      # Calculate TSS CAGE expression which correspond to column 5110 of the predictions above\n      temp_list = list()\n\n      pred_prepared_1 = prepare_for_quantify_prediction_per_TSS(predictions=prediction_1, gene=gene, tss_df=tss_dataframe)\n      tss_predictions_1 = quantify_prediction_per_TSS(low_range = window_coords.start, TSS=pred_prepared_1['gene_TSS'], cage_predictions=pred_prepared_1['cage_predictions'])\n\n      pred_prepared_2 = prepare_for_quantify_prediction_per_TSS(predictions=prediction_2, gene=gene, tss_df=tss_dataframe)\n      tss_predictions_2 = quantify_prediction_per_TSS(low_range = window_coords.start, TSS=pred_prepared_2['gene_TSS'], cage_predictions=pred_prepared_2['cage_predictions'])\n\n      temp_list.append(tss_predictions_1)\n      temp_list.append(tss_predictions_2) # results here are a dictionary for each TSS for each haplotype\n\n      individual_results[individual] = temp_list # save for the individual\n\n    gene_output[gene] = individual_results\n    gene_predictions[gene] = individual_prediction\n\n  return([gene_output, gene_predictions])\n\n\ndef collect_target_intervals(gene_intervals):\n\n  '''\n  Returns a dictionary of Interval objects (from kipoiseq) for each gene corresponding to the locations of the gene\n  '''\n\n  target_intervals_dict = dict()\n\n  for gene in gene_intervals.keys():\n    gene_interval = gene_intervals[gene]\n    target_interval = kipoiseq.Interval(\"chr\" + gene_interval[0],\n                                        gene_interval[1],\n                                        gene_interval[2])\n    target_intervals_dict[gene] = target_interval\n\n  return(target_intervals_dict)\n\ndef prepare_for_plot_tracks(gene, individual, all_predictions, chromosome=['22']):\n\n  '''\n  This returns a dictionary of gene tracks and gene intervals, prepared for the function plot_tracks.\n\n  Parameters:\n    - gene\n    - individual\n    - all_predictions\n  '''\n\n  haplo_predictions = all_predictions[gene][individual]\n  gene_tracks = {gene + ' | ' + individual + ' | haplotype 1': np.log10(1 + haplo_predictions[0]),\n                gene + ' | ' + individual + ' | haplotype 2': np.log10(1 + haplo_predictions[1])}\n\n  gene_intervals = collect_intervals(chromosomes=chromosome, gene_list=[gene])\n  gene_intervals = collect_target_intervals(gene_intervals)\n\n  output = dict()\n  output['gene_tracks'] = gene_tracks\n  output['gene_intervals'] = gene_intervals[gene]\n\n  return(output)\n\ndef check_individuals(path_to_bed_file, list_of_individuals):\n\n  '''\n  Checks if an individual is missing in bed variation files.\n  These individuals should be removed prior to training\n  '''\n\n  myfile = open(path_to_bed_file, 'r')\n  myline = myfile.readline()\n  bed_names = myline.split('\\t')[4:]\n  myfile.close()\n\n  if set(list_of_individuals).issubset(set(bed_names)) == False:\n    missing = list(set(list_of_individuals).difference(bed_names))\n    print('This (or these) individual(s) is/are not present: {}'.format(missing))\n  else:\n    missing = []\n    print('All individuals are present in the bed file.')\n\n  return(missing)\n\n\ndef geno_to_seq(gene, individual):\n      # two haplotypes per individual\n  haplo_1 = list(target_fa[:])\n  haplo_2 = list(target_fa[:])\n\n  ref_mismatch_count = 0\n  for i,row in cur_gene_vars.iterrows():\n\n    geno = row[individual].split(\"|\")\n    if (row[\"POS\"]-window_coords.start-1) &gt;= len(haplo_2):\n      continue\n    if (row[\"POS\"]-window_coords.start-1) &lt; 0:\n      continue\n    if geno[0] == \"1\":\n      haplo_1[row[\"POS\"]-window_coords.start-1] = row[\"ALT\"]\n    if geno[1] == \"1\":\n      haplo_2[row[\"POS\"]-window_coords.start-1] = row[\"ALT\"]\n  return haplo_1, haplo_2\n\n      # predict on the individual's two haplotypes"
  },
  {
    "objectID": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#prepare-input-data",
    "href": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#prepare-input-data",
    "title": "Comparing two methods of averaging Enformer results for personalized prediction",
    "section": "Prepare input data",
    "text": "Prepare input data\nWe want to predict epigenome around ERAP2 TSS on chromosome 5.\n\nchr5_tss = pd.read_table('/home/s1mi/enformer-tutorial/tss_by_chr/chr5_tss_by_gene.txt', sep='\\t')\nerap2_variations = pd.read_table('/home/s1mi/enformer-tutorial/individual_beds/chr5/chr5_ERAP2.bed', sep='\\t')\ngeuvadis_gene_expression = pd.read_table('https://uchicago.box.com/shared/static/5vwc7pjw9qmtv7298c4rc7bcuicoyemt.gz', sep='\\t',\n                                         dtype={'gene_id': str, 'gene_name':str, 'TargetID':str, 'Chr':str})\ngeuvadis_gene_expression.head(5)\n\n\n\n\n\n\n\n\ngene_id\ngene_name\nTargetID\nChr\nCoord\nHG00096\nHG00097\nHG00099\nHG00100\nHG00101\n...\nNA20810\nNA20811\nNA20812\nNA20813\nNA20814\nNA20815\nNA20816\nNA20819\nNA20826\nNA20828\n\n\n\n\n0\nENSG00000223972.4\nDDX11L1\nENSG00000223972.4\n1\n11869\n0.320818\n0.344202\n0.354225\n0.478064\n-0.102815\n...\n1.008605\n0.384489\n0.581284\n0.513981\n0.667449\n0.350890\n0.186103\n-0.037976\n0.405439\n0.199143\n\n\n1\nENSG00000227232.3\nWASH7P\nENSG00000227232.3\n1\n29806\n33.714457\n20.185174\n18.095407\n24.100871\n29.018719\n...\n30.980194\n34.086207\n39.678442\n29.643513\n27.120420\n29.121624\n31.117198\n32.047074\n22.798959\n23.563874\n\n\n2\nENSG00000243485.1\nMIR1302-11\nENSG00000243485.1\n1\n29554\n0.240408\n0.157456\n0.218806\n0.320878\n0.067833\n...\n0.065940\n0.228784\n0.140642\n0.283905\n0.273821\n0.286311\n0.324060\n0.049574\n0.255288\n0.157440\n\n\n3\nENSG00000238009.2\nRP11-34P13.7\nENSG00000238009.2\n1\n133566\n0.328272\n0.327932\n0.090064\n0.420443\n0.220269\n...\n0.274071\n0.384179\n0.533693\n0.307221\n0.307367\n0.400278\n0.612321\n0.666633\n0.281138\n1.346129\n\n\n4\nENSG00000239945.1\nRP11-34P13.8\nENSG00000239945.1\n1\n91105\n0.332171\n-0.032164\n0.017323\n0.424677\n0.214025\n...\n0.347323\n0.346744\n0.073580\n0.400396\n0.470517\n0.069749\n0.299353\n0.090019\n0.282554\n-0.157170\n\n\n\n\n5 rows × 467 columns\n\n\n\n\ngene_intervals = collect_intervals(chromosomes=['5'], gene_list=['ERAP2'])\n\n\nmodel = Enformer(model_path) # here we load the model architecture.\n\nfasta_extractor = FastaStringExtractor(fasta_file) # we define a class called fasta_extractor to help us extra raw sequence data"
  },
  {
    "objectID": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#run-predictions",
    "href": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#run-predictions",
    "title": "Comparing two methods of averaging Enformer results for personalized prediction",
    "section": "Run Predictions",
    "text": "Run Predictions\nWe’ll pick one individual at random.\n\nrand_individual = np.random.choice(a=geuvadis_gene_expression.columns[6:-1], replace=False) # individuals we are interested in\nrand_individual\n\n'NA19160'\n\n\n\ngene = 'ERAP2'\ngene_interval = gene_intervals[gene]\ntarget_interval = kipoiseq.Interval(\"chr\" + gene_interval[0],\n                                        gene_interval[1],\n                                        gene_interval[2])\ntarget_fa = fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))\nwindow_coords = target_interval.resize(SEQUENCE_LENGTH)\ncur_gene_vars = pd.read_csv(\"/home/s1mi/enformer-tutorial/individual_beds/chr\" + gene_interval[0] + \"/chr\" + gene_interval[0] + \"_\"+ gene + \".bed\", sep=\"\\t\", header=0) # read in the appropriate bed file for the gene\n\n\nhaplo_1, haplo_2 = geno_to_seq('ERAP2', rand_individual)\n\nhaplo_1_enc = one_hot_encode(\"\".join(haplo_1))[np.newaxis]\nhaplo_2_enc = one_hot_encode(\"\".join(haplo_2))[np.newaxis]\naverage_enc = np.add(haplo_1_enc, haplo_2_enc) / 2\n\n\nprediction_1 = model.predict_on_batch(haplo_1_enc)['human'][0]\nprediction_2 = model.predict_on_batch(haplo_2_enc)['human'][0]\n\npre_average = model.predict_on_batch(average_enc)['human'][0]\npost_average = (prediction_1 + prediction_2) / 2\n\n\nprint(pre_average)\nprint(post_average)\n\n[[0.09901776 0.09164002 0.0699944  ... 0.00303012 0.00990325 0.01237618]\n [0.05784911 0.05089986 0.03969494 ... 0.00734875 0.02510322 0.0280255 ]\n [0.00580059 0.00483631 0.00361973 ... 0.0036824  0.00902823 0.01077321]\n ...\n [0.00023449 0.00016057 0.00016778 ... 0.00083343 0.0026698  0.00314449]\n [0.00304364 0.00254643 0.00265122 ... 0.00092347 0.00226813 0.00265463]\n [0.05069465 0.03909001 0.03585194 ... 0.00824723 0.03236783 0.0296576 ]]\n[[0.09910323 0.09164958 0.07005598 ... 0.00303381 0.00984134 0.01238221]\n [0.05783322 0.05087575 0.03971903 ... 0.00735789 0.02497963 0.0280641 ]\n [0.00579469 0.00483093 0.00361714 ... 0.00366731 0.00894659 0.01073787]\n ...\n [0.00024071 0.00016465 0.00017168 ... 0.0007882  0.00254766 0.00304421]\n [0.0030893  0.00256867 0.00267111 ... 0.00086807 0.0020461  0.00242939]\n [0.05074473 0.03918105 0.03594471 ... 0.00819363 0.03179348 0.02920263]]"
  },
  {
    "objectID": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#comparing-across-tracks",
    "href": "posts/2023-07-13-comparing-enformer-averages/Compare_averages.html#comparing-across-tracks",
    "title": "Comparing two methods of averaging Enformer results for personalized prediction",
    "section": "Comparing across tracks",
    "text": "Comparing across tracks\n\nres = []\nfor i in range(5313):\n    pre_track = pre_average[:, i]\n    post_track = post_average[:, i]\n    corr = np.corrcoef(pre_track, post_track)[0][1]\n    res.append(corr)\n\nThe results from both methods are nearly identical.\n\nprint(min(res), max(res))\n\n0.9910764472374001 0.999995405486603"
  },
  {
    "objectID": "posts/2023-08-21-comparing-enformer-CAGE-prediction-to-GTEx-brain-cortex-expression-across-genes/index.html",
    "href": "posts/2023-08-21-comparing-enformer-CAGE-prediction-to-GTEx-brain-cortex-expression-across-genes/index.html",
    "title": "Correlation between human reference CAGE predictions to mean expression across GTEx genes",
    "section": "",
    "text": "We learned that pieces of the hg38 reference epigenome are missing, including all gene regions on chromosomes 5, 6, and 7, and a handful (27 out of 1018) on chromosome 12. Based off the genes we could query, the correlation between predicted expression from human reference genome and mean expression in GTEx brain cortex tissues is 0.536, which is too low, even when we consider the missing genes.\nWe will definitely need to rerun Enformer on chromosomes 5-7, but I’m still stuck on how we’ll debug the low correlation. I double checked that the fasta file and gene annotation were both in hg38.\n\nimport h5py\nimport pandas as pd\nimport numpy as np\n\nenfref_dir = \"/grand/TFXcan/imlab/users/lvairus/reftile_project/enformer-reference-epigenome\"\n\ndef query_epigenome(chr_num, center_bp, num_bins=3, tracks=-1):\n    \"\"\"\n    Parameters:\n        path_to_enfref (str): path to the directory containing the concatenated reference enformer files\n        chr_num (int/string): chromosome number\n        center_bp (int): center base pair position (1-indexed)\n        num_bins (int): number of bins to extract centered around center_bp (default: 896) \n            note: if the number of bins is even, the center bin will be in the second half of the array\n        tracks (int list): list of tracks to extract (default: all 5313 tracks)\n\n    Returns:\n        epigen (np.array): enformer predictions centered at center_bp of shape (num_bins, len(tracks))\n    \"\"\"\n\n    # from position choose center bin\n    center_ind = center_bp - 1\n    center_bin = center_ind // 128\n    \n    half_bins = num_bins // 2\n    start_bin = center_bin - half_bins\n    end_bin = center_bin + half_bins\n    if num_bins % 2 != 0: # if num_bins is odd\n        end_bin += 1\n\n    with h5py.File(f\"{enfref_dir}/chr{chr_num}_cat.h5\", \"r\") as f:\n        # get tracks if list provided\n        if tracks == -1:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, :] \n        else:\n            epigen = f[f'chr{chr_num}'][start_bin:end_bin, tracks] \n\n    return epigen\n\n\nhg38_annot = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/hg38.protein_coding_TSS.txt\", header=0, sep=\"\\t\", index_col='ensembl_gene_id')\nhg38_annot.head()\n\n\n\n\n\n\n\n\nexternal_gene_name\nchromosome_name\ntranscription_start_site\n\n\nensembl_gene_id\n\n\n\n\n\n\n\nENSG00000142611\nPRDM16\n1\n3069203\n\n\nENSG00000157911\nPEX10\n1\n2412564\n\n\nENSG00000142655\nPEX14\n1\n10474950\n\n\nENSG00000149527\nPLCH2\n1\n2476289\n\n\nENSG00000171621\nSPSB1\n1\n9292894\n\n\n\n\n\n\n\n\ngene_list = hg38_annot[hg38_annot[\"chromosome_name\"] != \"Y\"].index\nCAGE_predictions = []\ninvalid_queries = []\nfor gene in gene_list:\n    chr = hg38_annot.loc[gene]['chromosome_name']\n    tss = hg38_annot.loc[gene]['transcription_start_site']\n    bins = query_epigenome(chr,tss, num_bins = 1, tracks=[4980])\n    if np.any(np.isnan(bins)):\n        invalid_queries.append(f\"{chr}:{tss}\")\n    CAGE_predictions.append(np.average(bins))\n\n\nprint(len(invalid_queries), \"out of\", len(CAGE_predictions), \"TSS regions missing from reference epigenome\")\n\n2849 out of 19625 TSS regions missing from reference epigenome\n\n\n\nfrom collections import Counter\nprint(\"Number of missing regions by chromosme:\")\nprint(Counter(map(lambda x: x.split(\":\")[0], invalid_queries)))\n\nNumber of missing regions by chromosme:\nCounter({'6': 1031, '7': 919, '5': 872, '12': 27})\n\n\n\nprint(\"Total number of genes on those chromosome:\")\nprint({key: Counter(hg38_annot['chromosome_name'])[key] for key in [\"6\", \"7\", \"5\", \"12\"]})\n\nTotal number of genes on those chromosome:\n{'6': 1031, '7': 919, '5': 872, '12': 1018}\n\n\n\ngex_df = pd.DataFrame({\"enformer\": CAGE_predictions}, index=gene_list)\ngex_df.head()\n\n\n\n\n\n\n\n\nenformer\n\n\nensembl_gene_id\n\n\n\n\n\nENSG00000142611\n4.474399\n\n\nENSG00000157911\n6.886287\n\n\nENSG00000142655\n21.222824\n\n\nENSG00000149527\n0.027461\n\n\nENSG00000171621\n10.673162\n\n\n\n\n\n\n\n\ngtex_tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/gene_tpm_2017-06-05_v8_brain_cortex.gct.gz\", header=2, sep=\"\\t\")\ngtex_tpm['Name'] = gtex_tpm['Name'].apply(lambda gene: gene.split('.')[0])\ngtex_tpm.set_index('Name', inplace=True)\n\n\ngene_list = gex_df.index.intersection(gtex_tpm.index)\ngtex_tpm = gtex_tpm.loc[gene_list]\nprint(gtex_tpm.shape[0], \"genes in both GTEx and BioMart datasets\")\n\n19107 genes in both GTEx and BioMart datasets\n\n\n\n# Calculate average gene expression\ngtex_mean_tpm = gtex_tpm.drop(columns=['id', 'Description']).mean(axis=1)\ngtex_mean_tpm.name = 'gtex'\n# Join observed gene expression with Enformer CAGE predicted\nmerged_gex_df = gex_df.merge(gtex_mean_tpm, left_index=True, right_index=True, how='inner').dropna()\nmerged_gex_df.head()\nmerged_gex_df.to_csv(\"observed_vs_predicted_expression_hg38_genes.csv\")\n\n\n\n\n\n\n\n\nenformer\ngtex\n\n\n\n\nENSG00000000003\n0.318157\n4.587454\n\n\nENSG00000000005\n2.456774\n0.208880\n\n\nENSG00000000419\n36.233582\n26.515365\n\n\nENSG00000000457\n6.147785\n2.538695\n\n\nENSG00000000460\n3.142622\n0.840966\n\n\n\n\n\n\n\n\nmerged_gex_df.corr()\n\n\n\n\n\n\n\n\nenformer\ngtex\n\n\n\n\nenformer\n1.000000\n0.535759\n\n\ngtex\n0.535759\n1.000000"
  },
  {
    "objectID": "posts/2023-07-21-comparing-enformer-predictions-in-overlapping-intervals/results.html",
    "href": "posts/2023-07-21-comparing-enformer-predictions-in-overlapping-intervals/results.html",
    "title": "Comparing Enformer results on an arbitrary interval in different positions relative to window coordinates",
    "section": "",
    "text": "Check predictions for a single individual, region, and haplotype\n\n# Import Libraries\nimport numpy as np\nimport h5py\n\n\nwith open(\"metadata/intervals.txt\", \"r\") as f:\n    lines = f.readlines()\n    intervals = [line.strip().strip('\"') for line in lines]\n\npredictions_dir = \"/lus/grand/projects/TFXcan/imlab/users/sabrina/enformer_test/predictions_folder/reference_enformer_minimal_chr2_region/predictions_2023-07-20/enformer_predictions/reference_enformer_minimal/haplotype0/\"\n\n\npredictions = {}\nfor interval in intervals:\n        f = h5py.File(predictions_dir + interval +'_predictions.h5', 'r')\n        predictions[interval] = f[interval][()]"
  },
  {
    "objectID": "posts/2023-09-01-selecting-mouse-track-for-CAGE-brain-prediction/index.html",
    "href": "posts/2023-09-01-selecting-mouse-track-for-CAGE-brain-prediction/index.html",
    "title": "Investigating the various CAGE brain tissue mouse tracks",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport h5py\n\n\n## subset to all brain-specific CAGE targets\ntargets = pd.read_csv(\"https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_mouse.txt\", sep = \"\\t\")\nCAGE_targets = targets[targets['index'].isin([6612, 6613, 6622, 6627])]\ntrack_indices = list(CAGE_targets.index)\nCAGE_targets.head()\n\n\n\n\n\n\n\n\nindex\ngenome\nidentifier\nfile\nclip\nscale\nsum_stat\ndescription\n\n\n\n\n1299\n6612\n1\nCNhs10477\n/home/drk/tillage/datasets/mouse/cage/fantom/C...\n384\n1\nsum\nCAGE:medulla oblongata, adult\n\n\n1300\n6613\n1\nCNhs10478\n/home/drk/tillage/datasets/mouse/cage/fantom/C...\n384\n1\nsum\nCAGE:hippocampus, adult\n\n\n1309\n6622\n1\nCNhs10489\n/home/drk/tillage/datasets/mouse/cage/fantom/C...\n384\n1\nsum\nCAGE:olfactory brain, adult\n\n\n1314\n6627\n1\nCNhs10494\n/home/drk/tillage/datasets/mouse/cage/fantom/C...\n384\n1\nsum\nCAGE:cerebellum, adult\n\n\n\n\n\n\n\n\npredictions_dir = \"/home/s1mi/Br_predictions/predictions_folder/personalized_Br_selected_genes/predictions_2023-09-01/enformer_predictions\"\ngene_expr_bed = \"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\"\nobs_gene_expr = pd.read_csv(gene_expr_bed, sep=\"\\t\", header=0, index_col='gene_id')\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", header= 0, index_col='geneId')\ngene_list = [\"ENSRNOG00000060185\", \"ENSRNOG00000022448\", \"ENSRNOG00000006331\", \"ENSRNOG00000000435\", \"ENSRNOG00000001336\", \"ENSRNOG00000016623\", \"ENSRNOG00000025324\", \"ENSRNOG00000012087\", \"ENSRNOG00000021663\", \"ENSRNOG00000012333\"]\n\n/tmp/ipykernel_120274/1359220184.py:3: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  obs_gene_expr = pd.read_csv(gene_expr_bed, sep=\"\\t\", header=0, index_col='gene_id')\n/tmp/ipykernel_120274/1359220184.py:4: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", header= 0, index_col='geneId')\n\n\n\nexpr_dict = {}\nfor gene in gene_list:\n    obs = obs_gene_expr.loc[gene][3:]\n    expr_dict[gene] = pd.DataFrame({\"observed\": obs})\n            \n\n\nimport os\nfor gene in gene_list:\n    gene_annot = annot_df.loc[gene]\n    interval = f\"chr{gene_annot['chromosome']}_{gene_annot['tss']}_{gene_annot['tss']}\"\n    medulla_oblongata = []\n    hippocampus = []\n    olfactory_brain = []\n    cerebellum = []\n    for individual in expr_dict[gene].index:\n        haplo0 = h5py.File(f\"{predictions_dir}/{individual}/haplotype0/{interval}_predictions.h5\", \"r\")\n        predictions = haplo0[\"mouse\"][446:450, track_indices]\n        medulla_oblongata.append(np.average(predictions[:,0]))\n        hippocampus.append(np.average(predictions[:,1]))\n        olfactory_brain.append(np.average(predictions[:,2]))\n        cerebellum.append(np.average(predictions[:,3]))\n    expr_dict[gene][\"medulla oblongata\"] = medulla_oblongata\n    expr_dict[gene][\"hippocampus\"] = hippocampus\n    expr_dict[gene][\"olfactory brain\"] = olfactory_brain\n    expr_dict[gene][\"cerebellum\"] = cerebellum\n\n\ncorr_by_gene_and_track = pd.DataFrame(columns = [\"medulla oblongata\", \"hippocampus\", \"olfactory brain\", \"cerebellum\"], index = gene_list)\n\nfor gene in gene_list:\n    corr_df = expr_dict[gene].corr()\n    corr_by_gene_and_track.loc[gene] = pd.to_numeric(corr_df.iloc[0,1:])\nprint(corr_by_gene_and_track)\n\n                   medulla oblongata hippocampus olfactory brain cerebellum\nENSRNOG00000060185          0.340841    0.339026        0.340439   0.338799\nENSRNOG00000022448          0.176105    0.183011        0.179076   0.176374\nENSRNOG00000006331          0.284351    0.326806        0.327064    0.32246\nENSRNOG00000000435          0.212012    0.233529        0.171748   0.097784\nENSRNOG00000001336          0.550703    0.540987         0.54114   0.551966\nENSRNOG00000016623          0.060619    0.170785        0.153715  -0.109455\nENSRNOG00000025324         -0.315003   -0.223645       -0.240727  -0.174633\nENSRNOG00000012087          0.285358    0.309409        0.312098   0.312001\nENSRNOG00000021663         -0.325343   -0.430207       -0.426303  -0.014811\nENSRNOG00000012333         -0.081875    0.098419        0.077553   0.038098\n\n\nBased off a row-wise look at the table, I’ve decided to use the CAGE:hippocampus mouse track as a representative of brain tissue."
  },
  {
    "objectID": "posts/2023-07-26-running-enformer-on-high-R2-rat-gene-target-intervals/index.html",
    "href": "posts/2023-07-26-running-enformer-on-high-R2-rat-gene-target-intervals/index.html",
    "title": "Running Enformer pipeline on 3 well-predicted genes",
    "section": "",
    "text": "Select Well-Predicted Genes\nWe used R2 values from ElasticNet training\n\n\n\nWell-Predicted Genes\n\n\n\n\nCollect Gene Intervals\n\nimport pandas as pd\ngene_annot = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\ngene_list = ['ENSRNOG00000001342', 'ENSRNOG00000020624', 'ENSRNOG00000058006', 'ENSRNOG00000060045']\n\ndef write_intervals(gene_list, file):\n    with open(file, 'a') as f:\n        for gene in gene_list:\n            print(gene)\n            row = gene_annot.loc[gene]\n            interval = f\"chr{row['chromosome']}_{row['start']}_{row['end']}\"\n            f.write(interval + '\\n')\n\nwrite_intervals(gene_list, \"metadata/intervals.txt\")\n\n    \n\nENSRNOG00000001342\nENSRNOG00000020624\nENSRNOG00000058006\nENSRNOG00000060045\n\n\n/tmp/ipykernel_71445/1580764274.py:2: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  gene_annot = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t',  index_col='geneId')\n\n\n\n\nConcatenate h5 outputs\n\npredictions_dir=\"/home/s1mi/enformer_rat_pipeline/predictions_folder/personalized_enformer_minimal_some_regions/predictions_2023-07-26/enformer_predictions\"\nimport os\nimport h5py\n\n\ndef concatenate_predictions(predictions_dir, output_path):\n    with h5py.File(output_path, \"w\") as output_file:\n        individuals = os.listdir(predictions_dir)\n        for individual in individuals:\n            group = output_file.create_group(individual)\n\n            dir = os.path.join(predictions_dir, individual, \"haplotype1\")\n            filenames = os.listdir(dir)\n\n            for file in filenames:\n                interval = file.replace(\"_predictions.h5\", \"\")\n                with h5py.File(os.path.join(dir, file), \"r\") as input_file:\n                    group.create_dataset(interval, data=input_file[interval][()], shape=(896,5313))\n            \n\n\n    \n\n\nconcatenate_predictions(predictions_dir, \"/home/s1mi/enformer_rat_pipeline/Br_enformer_predictions.h5\")\n\n\n\nCalculate predicted gene expression\n\ndef calculate_gene_expression(matrix, target_interval, tss):\n    window_coords = target_interval.resize(SEQUENCE_LENGTH)\n    low_range = window_coords.start\n    CAGE_predictions = matrix[:, 4980]\n    \n    bin_start = low_range + ((768 + 320) * 128)\n    count = -1\n    while bin_start &lt; tss:\n      bin_start = bin_start + 128\n      count += 1\n    if count &gt;= len(cage_predictions)-1:\n      continue\n    cage_preds = cage_predictions[count - 1] + cage_predictions[count] + cage_predictions[count + 1]"
  },
  {
    "objectID": "posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C.html",
    "href": "posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C.html",
    "title": "Borzoi eQTL Example",
    "section": "",
    "text": "import os\nimport time\n\n#os.environ['CUDA_VISIBLE_DEVICES'] = '-1'\n\nimport h5py\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nimport baskerville\nfrom baskerville import seqnn\nfrom baskerville import gene as bgene\nfrom baskerville import dna\n\nimport json\n\nimport pysam\n\nimport pyfaidx\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nfrom borzoi_helpers import *\n\n2023-09-20 21:36:27.557905: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\nTo enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n2023-09-20 21:36:30.375102: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n2023-09-20 21:36:34.863088: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1956] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.\nSkipping registering GPU devices...\n\n\n\n#Download model files and other dependencies (skip this cell if already executed once)\n\n#Create model file structure\n!mkdir saved_models\n!mkdir saved_models/f0\n!mkdir saved_models/f1\n!mkdir saved_models/f2\n!mkdir saved_models/f3\n\n#Download model weights\n!wget https://storage.googleapis.com/seqnn-share/borzoi/f0/model0_best.h5 -O saved_models/f0/model0_best.h5\n!wget https://storage.googleapis.com/seqnn-share/borzoi/f1/model0_best.h5 -O saved_models/f1/model0_best.h5\n!wget https://storage.googleapis.com/seqnn-share/borzoi/f2/model0_best.h5 -O saved_models/f2/model0_best.h5\n!wget https://storage.googleapis.com/seqnn-share/borzoi/f3/model0_best.h5 -O saved_models/f3/model0_best.h5\n\n#Download and uncompress annotation files\n!wget -O - https://storage.googleapis.com/seqnn-share/helper/gencode41_basic_nort.gtf.gz | gunzip -c &gt; gencode41_basic_nort.gtf\n!wget https://storage.googleapis.com/seqnn-share/helper/gencode41_basic_protein_splice.csv.gz\n!wget https://storage.googleapis.com/seqnn-share/helper/polyadb_human_v3.csv.gz\n\n#Download and index hg38 genome\n!wget -O - http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz | gunzip -c &gt; hg38.fa\npyfaidx.Faidx('hg38.fa')\n\n--2023-09-19 17:48:11--  https://storage.googleapis.com/seqnn-share/borzoi/f0/model0_best.h5\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 744112468 (710M) [application/octet-stream]\nSaving to: ‘saved_models/f0/model0_best.h5’\n\nsaved_models/f0/mod 100%[===================&gt;] 709.64M  25.8MB/s    in 27s     \n\n2023-09-19 17:48:39 (26.0 MB/s) - ‘saved_models/f0/model0_best.h5’ saved [744112468/744112468]\n\n--2023-09-19 17:48:39--  https://storage.googleapis.com/seqnn-share/borzoi/f1/model0_best.h5\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 744112468 (710M) [application/octet-stream]\nSaving to: ‘saved_models/f1/model0_best.h5’\n\nsaved_models/f1/mod 100%[===================&gt;] 709.64M  28.1MB/s    in 28s     \n\n2023-09-19 17:49:08 (25.1 MB/s) - ‘saved_models/f1/model0_best.h5’ saved [744112468/744112468]\n\n--2023-09-19 17:49:08--  https://storage.googleapis.com/seqnn-share/borzoi/f2/model0_best.h5\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 744112468 (710M) [application/octet-stream]\nSaving to: ‘saved_models/f2/model0_best.h5’\n\nsaved_models/f2/mod 100%[===================&gt;] 709.64M  22.8MB/s    in 29s     \n\n2023-09-19 17:49:36 (24.8 MB/s) - ‘saved_models/f2/model0_best.h5’ saved [744112468/744112468]\n\n--2023-09-19 17:49:37--  https://storage.googleapis.com/seqnn-share/borzoi/f3/model0_best.h5\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 744112468 (710M) [application/octet-stream]\nSaving to: ‘saved_models/f3/model0_best.h5’\n\nsaved_models/f3/mod 100%[===================&gt;] 709.64M  23.9MB/s    in 28s     \n\n2023-09-19 17:50:05 (25.3 MB/s) - ‘saved_models/f3/model0_best.h5’ saved [744112468/744112468]\n\n--2023-09-19 17:50:05--  https://storage.googleapis.com/seqnn-share/helper/gencode41_basic_nort.gtf.gz\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 30909907 (29M) [application/octet-stream]\nSaving to: ‘STDOUT’\n\n-                   100%[===================&gt;]  29.48M  8.28MB/s    in 3.7s    \n\n2023-09-19 17:50:09 (8.03 MB/s) - written to stdout [30909907/30909907]\n\n--2023-09-19 17:50:09--  https://storage.googleapis.com/seqnn-share/helper/gencode41_basic_protein_splice.csv.gz\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 3729563 (3.6M) [text/csv]\nSaving to: ‘gencode41_basic_protein_splice.csv.gz’\n\ngencode41_basic_pro 100%[===================&gt;]   3.56M  --.-KB/s    in 0.1s    \n\n2023-09-19 17:50:10 (29.2 MB/s) - ‘gencode41_basic_protein_splice.csv.gz’ saved [3729563/3729563]\n\n--2023-09-19 17:50:10--  https://storage.googleapis.com/seqnn-share/helper/polyadb_human_v3.csv.gz\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 5889770 (5.6M) [text/csv]\nSaving to: ‘polyadb_human_v3.csv.gz’\n\npolyadb_human_v3.cs 100%[===================&gt;]   5.62M  --.-KB/s    in 0.1s    \n\n2023-09-19 17:50:10 (58.6 MB/s) - ‘polyadb_human_v3.csv.gz’ saved [5889770/5889770]\n\n--2023-09-19 17:50:10--  http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz\nResolving hgdownload.cse.ucsc.edu (hgdownload.cse.ucsc.edu)... 128.114.119.163\nConnecting to hgdownload.cse.ucsc.edu (hgdownload.cse.ucsc.edu)|128.114.119.163|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 983659424 (938M) [application/x-gzip]\nSaving to: ‘STDOUT’\n\n-                   100%[===================&gt;] 938.09M  44.0MB/s    in 20s     \n\n2023-09-19 17:50:30 (48.1 MB/s) - written to stdout [983659424/983659424]\n\n\n\nFaidx(\"hg38.fa\")\n\n\n\n#Model configuration\n\nparams_file = 'params_pred.json'\ntargets_file = 'targets_gtex.txt' #Subset of targets_human.txt\n\nseq_len = 524288\nn_folds = 4       #To use only one model fold, change to 'n_folds = 1'\nrc = True         #Average across reverse-complement prediction\n\n#Read model parameters\n\nwith open(params_file) as params_open :\n    \n    params = json.load(params_open)\n    \n    params_model = params['model']\n    params_train = params['train']\n\n#Read targets\n\ntargets_df = pd.read_csv(targets_file, index_col=0, sep='\\t')\ntarget_index = targets_df.index\n\n#Create local index of strand_pair (relative to sliced targets)\nif rc :\n    strand_pair = targets_df.strand_pair\n    \n    target_slice_dict = {ix : i for i, ix in enumerate(target_index.values.tolist())}\n    slice_pair = np.array([\n        target_slice_dict[ix] if ix in target_slice_dict else ix for ix in strand_pair.values.tolist()\n    ], dtype='int32')\n\n#Initialize model ensemble\n\nmodels = []\nfor fold_ix in range(n_folds) :\n    \n    model_file = \"saved_models/f\" + str(fold_ix) + \"/model0_best.h5\"\n\n    seqnn_model = seqnn.SeqNN(params_model)\n    seqnn_model.restore(model_file, 0)\n    seqnn_model.build_slice(target_index)\n    if rc :\n        seqnn_model.strand_pair.append(slice_pair)\n    seqnn_model.build_ensemble(rc, '0')\n    \n    models.append(seqnn_model)\n\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nModel: \"model_1\"\n__________________________________________________________________________________________________\n Layer (type)                   Output Shape         Param #     Connected to                     \n==================================================================================================\n sequence (InputLayer)          [(None, 524288, 4)]  0           []                               \n                                                                                                  \n stochastic_reverse_complement   ((None, 524288, 4),  0          ['sequence[0][0]']               \n (StochasticReverseComplement)   ())                                                              \n                                                                                                  \n stochastic_shift (StochasticSh  (None, 524288, 4)   0           ['stochastic_reverse_complement[0\n ift)                                                            ][0]']                           \n                                                                                                  \n conv1d (Conv1D)                (None, 524288, 512)  31232       ['stochastic_shift[0][0]']       \n                                                                                                  \n max_pooling1d (MaxPooling1D)   (None, 262144, 512)  0           ['conv1d[0][0]']                 \n                                                                                                  \n sync_batch_normalization (Sync  (None, 262144, 512)  2048       ['max_pooling1d[0][0]']          \n BatchNormalization)                                                                              \n                                                                                                  \n tf.nn.gelu (TFOpLambda)        (None, 262144, 512)  0           ['sync_batch_normalization[0][0]'\n                                                                 ]                                \n                                                                                                  \n conv1d_1 (Conv1D)              (None, 262144, 608)  1557088     ['tf.nn.gelu[0][0]']             \n                                                                                                  \n max_pooling1d_1 (MaxPooling1D)  (None, 131072, 608)  0          ['conv1d_1[0][0]']               \n                                                                                                  \n sync_batch_normalization_1 (Sy  (None, 131072, 608)  2432       ['max_pooling1d_1[0][0]']        \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_1 (TFOpLambda)      (None, 131072, 608)  0           ['sync_batch_normalization_1[0][0\n                                                                 ]']                              \n                                                                                                  \n conv1d_2 (Conv1D)              (None, 131072, 736)  2238176     ['tf.nn.gelu_1[0][0]']           \n                                                                                                  \n max_pooling1d_2 (MaxPooling1D)  (None, 65536, 736)  0           ['conv1d_2[0][0]']               \n                                                                                                  \n sync_batch_normalization_2 (Sy  (None, 65536, 736)  2944        ['max_pooling1d_2[0][0]']        \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_2 (TFOpLambda)      (None, 65536, 736)   0           ['sync_batch_normalization_2[0][0\n                                                                 ]']                              \n                                                                                                  \n conv1d_3 (Conv1D)              (None, 65536, 896)   3298176     ['tf.nn.gelu_2[0][0]']           \n                                                                                                  \n max_pooling1d_3 (MaxPooling1D)  (None, 32768, 896)  0           ['conv1d_3[0][0]']               \n                                                                                                  \n sync_batch_normalization_3 (Sy  (None, 32768, 896)  3584        ['max_pooling1d_3[0][0]']        \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_3 (TFOpLambda)      (None, 32768, 896)   0           ['sync_batch_normalization_3[0][0\n                                                                 ]']                              \n                                                                                                  \n conv1d_4 (Conv1D)              (None, 32768, 1056)  4731936     ['tf.nn.gelu_3[0][0]']           \n                                                                                                  \n max_pooling1d_4 (MaxPooling1D)  (None, 16384, 1056)  0          ['conv1d_4[0][0]']               \n                                                                                                  \n sync_batch_normalization_4 (Sy  (None, 16384, 1056)  4224       ['max_pooling1d_4[0][0]']        \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_4 (TFOpLambda)      (None, 16384, 1056)  0           ['sync_batch_normalization_4[0][0\n                                                                 ]']                              \n                                                                                                  \n conv1d_5 (Conv1D)              (None, 16384, 1280)  6759680     ['tf.nn.gelu_4[0][0]']           \n                                                                                                  \n max_pooling1d_5 (MaxPooling1D)  (None, 8192, 1280)  0           ['conv1d_5[0][0]']               \n                                                                                                  \n sync_batch_normalization_5 (Sy  (None, 8192, 1280)  5120        ['max_pooling1d_5[0][0]']        \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_5 (TFOpLambda)      (None, 8192, 1280)   0           ['sync_batch_normalization_5[0][0\n                                                                 ]']                              \n                                                                                                  \n conv1d_6 (Conv1D)              (None, 8192, 1536)   9831936     ['tf.nn.gelu_5[0][0]']           \n                                                                                                  \n max_pooling1d_6 (MaxPooling1D)  (None, 4096, 1536)  0           ['conv1d_6[0][0]']               \n                                                                                                  \n layer_normalization (LayerNorm  (None, 4096, 1536)  3072        ['max_pooling1d_6[0][0]']        \n alization)                                                                                       \n                                                                                                  \n multihead_attention (Multihead  (None, 4096, 1536)  6310400     ['layer_normalization[0][0]']    \n Attention)                                                                                       \n                                                                                                  \n dropout (Dropout)              (None, 4096, 1536)   0           ['multihead_attention[0][0]']    \n                                                                                                  \n add (Add)                      (None, 4096, 1536)   0           ['max_pooling1d_6[0][0]',        \n                                                                  'dropout[0][0]']                \n                                                                                                  \n layer_normalization_1 (LayerNo  (None, 4096, 1536)  3072        ['add[0][0]']                    \n rmalization)                                                                                     \n                                                                                                  \n dense (Dense)                  (None, 4096, 3072)   4721664     ['layer_normalization_1[0][0]']  \n                                                                                                  \n dropout_1 (Dropout)            (None, 4096, 3072)   0           ['dense[0][0]']                  \n                                                                                                  \n re_lu (ReLU)                   (None, 4096, 3072)   0           ['dropout_1[0][0]']              \n                                                                                                  \n dense_1 (Dense)                (None, 4096, 1536)   4720128     ['re_lu[0][0]']                  \n                                                                                                  \n dropout_2 (Dropout)            (None, 4096, 1536)   0           ['dense_1[0][0]']                \n                                                                                                  \n add_1 (Add)                    (None, 4096, 1536)   0           ['add[0][0]',                    \n                                                                  'dropout_2[0][0]']              \n                                                                                                  \n layer_normalization_2 (LayerNo  (None, 4096, 1536)  3072        ['add_1[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n multihead_attention_1 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_2[0][0]']  \n adAttention)                                                                                     \n                                                                                                  \n dropout_3 (Dropout)            (None, 4096, 1536)   0           ['multihead_attention_1[0][0]']  \n                                                                                                  \n add_2 (Add)                    (None, 4096, 1536)   0           ['add_1[0][0]',                  \n                                                                  'dropout_3[0][0]']              \n                                                                                                  \n layer_normalization_3 (LayerNo  (None, 4096, 1536)  3072        ['add_2[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n dense_2 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_3[0][0]']  \n                                                                                                  \n dropout_4 (Dropout)            (None, 4096, 3072)   0           ['dense_2[0][0]']                \n                                                                                                  \n re_lu_1 (ReLU)                 (None, 4096, 3072)   0           ['dropout_4[0][0]']              \n                                                                                                  \n dense_3 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_1[0][0]']                \n                                                                                                  \n dropout_5 (Dropout)            (None, 4096, 1536)   0           ['dense_3[0][0]']                \n                                                                                                  \n add_3 (Add)                    (None, 4096, 1536)   0           ['add_2[0][0]',                  \n                                                                  'dropout_5[0][0]']              \n                                                                                                  \n layer_normalization_4 (LayerNo  (None, 4096, 1536)  3072        ['add_3[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n multihead_attention_2 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_4[0][0]']  \n adAttention)                                                                                     \n                                                                                                  \n dropout_6 (Dropout)            (None, 4096, 1536)   0           ['multihead_attention_2[0][0]']  \n                                                                                                  \n add_4 (Add)                    (None, 4096, 1536)   0           ['add_3[0][0]',                  \n                                                                  'dropout_6[0][0]']              \n                                                                                                  \n layer_normalization_5 (LayerNo  (None, 4096, 1536)  3072        ['add_4[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n dense_4 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_5[0][0]']  \n                                                                                                  \n dropout_7 (Dropout)            (None, 4096, 3072)   0           ['dense_4[0][0]']                \n                                                                                                  \n re_lu_2 (ReLU)                 (None, 4096, 3072)   0           ['dropout_7[0][0]']              \n                                                                                                  \n dense_5 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_2[0][0]']                \n                                                                                                  \n dropout_8 (Dropout)            (None, 4096, 1536)   0           ['dense_5[0][0]']                \n                                                                                                  \n add_5 (Add)                    (None, 4096, 1536)   0           ['add_4[0][0]',                  \n                                                                  'dropout_8[0][0]']              \n                                                                                                  \n layer_normalization_6 (LayerNo  (None, 4096, 1536)  3072        ['add_5[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n multihead_attention_3 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_6[0][0]']  \n adAttention)                                                                                     \n                                                                                                  \n dropout_9 (Dropout)            (None, 4096, 1536)   0           ['multihead_attention_3[0][0]']  \n                                                                                                  \n add_6 (Add)                    (None, 4096, 1536)   0           ['add_5[0][0]',                  \n                                                                  'dropout_9[0][0]']              \n                                                                                                  \n layer_normalization_7 (LayerNo  (None, 4096, 1536)  3072        ['add_6[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n dense_6 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_7[0][0]']  \n                                                                                                  \n dropout_10 (Dropout)           (None, 4096, 3072)   0           ['dense_6[0][0]']                \n                                                                                                  \n re_lu_3 (ReLU)                 (None, 4096, 3072)   0           ['dropout_10[0][0]']             \n                                                                                                  \n dense_7 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_3[0][0]']                \n                                                                                                  \n dropout_11 (Dropout)           (None, 4096, 1536)   0           ['dense_7[0][0]']                \n                                                                                                  \n add_7 (Add)                    (None, 4096, 1536)   0           ['add_6[0][0]',                  \n                                                                  'dropout_11[0][0]']             \n                                                                                                  \n layer_normalization_8 (LayerNo  (None, 4096, 1536)  3072        ['add_7[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n multihead_attention_4 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_8[0][0]']  \n adAttention)                                                                                     \n                                                                                                  \n dropout_12 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_4[0][0]']  \n                                                                                                  \n add_8 (Add)                    (None, 4096, 1536)   0           ['add_7[0][0]',                  \n                                                                  'dropout_12[0][0]']             \n                                                                                                  \n layer_normalization_9 (LayerNo  (None, 4096, 1536)  3072        ['add_8[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n dense_8 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_9[0][0]']  \n                                                                                                  \n dropout_13 (Dropout)           (None, 4096, 3072)   0           ['dense_8[0][0]']                \n                                                                                                  \n re_lu_4 (ReLU)                 (None, 4096, 3072)   0           ['dropout_13[0][0]']             \n                                                                                                  \n dense_9 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_4[0][0]']                \n                                                                                                  \n dropout_14 (Dropout)           (None, 4096, 1536)   0           ['dense_9[0][0]']                \n                                                                                                  \n add_9 (Add)                    (None, 4096, 1536)   0           ['add_8[0][0]',                  \n                                                                  'dropout_14[0][0]']             \n                                                                                                  \n layer_normalization_10 (LayerN  (None, 4096, 1536)  3072        ['add_9[0][0]']                  \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_5 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_10[0][0]'] \n adAttention)                                                                                     \n                                                                                                  \n dropout_15 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_5[0][0]']  \n                                                                                                  \n add_10 (Add)                   (None, 4096, 1536)   0           ['add_9[0][0]',                  \n                                                                  'dropout_15[0][0]']             \n                                                                                                  \n layer_normalization_11 (LayerN  (None, 4096, 1536)  3072        ['add_10[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_10 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_11[0][0]'] \n                                                                                                  \n dropout_16 (Dropout)           (None, 4096, 3072)   0           ['dense_10[0][0]']               \n                                                                                                  \n re_lu_5 (ReLU)                 (None, 4096, 3072)   0           ['dropout_16[0][0]']             \n                                                                                                  \n dense_11 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_5[0][0]']                \n                                                                                                  \n dropout_17 (Dropout)           (None, 4096, 1536)   0           ['dense_11[0][0]']               \n                                                                                                  \n add_11 (Add)                   (None, 4096, 1536)   0           ['add_10[0][0]',                 \n                                                                  'dropout_17[0][0]']             \n                                                                                                  \n layer_normalization_12 (LayerN  (None, 4096, 1536)  3072        ['add_11[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_6 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_12[0][0]'] \n adAttention)                                                                                     \n                                                                                                  \n dropout_18 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_6[0][0]']  \n                                                                                                  \n add_12 (Add)                   (None, 4096, 1536)   0           ['add_11[0][0]',                 \n                                                                  'dropout_18[0][0]']             \n                                                                                                  \n layer_normalization_13 (LayerN  (None, 4096, 1536)  3072        ['add_12[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_12 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_13[0][0]'] \n                                                                                                  \n dropout_19 (Dropout)           (None, 4096, 3072)   0           ['dense_12[0][0]']               \n                                                                                                  \n re_lu_6 (ReLU)                 (None, 4096, 3072)   0           ['dropout_19[0][0]']             \n                                                                                                  \n dense_13 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_6[0][0]']                \n                                                                                                  \n dropout_20 (Dropout)           (None, 4096, 1536)   0           ['dense_13[0][0]']               \n                                                                                                  \n add_13 (Add)                   (None, 4096, 1536)   0           ['add_12[0][0]',                 \n                                                                  'dropout_20[0][0]']             \n                                                                                                  \n layer_normalization_14 (LayerN  (None, 4096, 1536)  3072        ['add_13[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_7 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_14[0][0]'] \n adAttention)                                                                                     \n                                                                                                  \n dropout_21 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_7[0][0]']  \n                                                                                                  \n add_14 (Add)                   (None, 4096, 1536)   0           ['add_13[0][0]',                 \n                                                                  'dropout_21[0][0]']             \n                                                                                                  \n layer_normalization_15 (LayerN  (None, 4096, 1536)  3072        ['add_14[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_14 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_15[0][0]'] \n                                                                                                  \n dropout_22 (Dropout)           (None, 4096, 3072)   0           ['dense_14[0][0]']               \n                                                                                                  \n re_lu_7 (ReLU)                 (None, 4096, 3072)   0           ['dropout_22[0][0]']             \n                                                                                                  \n dense_15 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_7[0][0]']                \n                                                                                                  \n dropout_23 (Dropout)           (None, 4096, 1536)   0           ['dense_15[0][0]']               \n                                                                                                  \n add_15 (Add)                   (None, 4096, 1536)   0           ['add_14[0][0]',                 \n                                                                  'dropout_23[0][0]']             \n                                                                                                  \n sync_batch_normalization_6 (Sy  (None, 4096, 1536)  6144        ['add_15[0][0]']                 \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_6 (TFOpLambda)      (None, 4096, 1536)   0           ['sync_batch_normalization_6[0][0\n                                                                 ]']                              \n                                                                                                  \n sync_batch_normalization_7 (Sy  (None, 8192, 1536)  6144        ['conv1d_6[0][0]']               \n ncBatchNormalization)                                                                            \n                                                                                                  \n dense_16 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_6[0][0]']           \n                                                                                                  \n tf.nn.gelu_7 (TFOpLambda)      (None, 8192, 1536)   0           ['sync_batch_normalization_7[0][0\n                                                                 ]']                              \n                                                                                                  \n up_sampling1d (UpSampling1D)   (None, 8192, 1536)   0           ['dense_16[0][0]']               \n                                                                                                  \n dense_17 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_7[0][0]']           \n                                                                                                  \n add_16 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d[0][0]',          \n                                                                  'dense_17[0][0]']               \n                                                                                                  \n separable_conv1d (SeparableCon  (None, 8192, 1536)  2365440     ['add_16[0][0]']                 \n v1D)                                                                                             \n                                                                                                  \n sync_batch_normalization_8 (Sy  (None, 8192, 1536)  6144        ['separable_conv1d[0][0]']       \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_8 (TFOpLambda)      (None, 8192, 1536)   0           ['sync_batch_normalization_8[0][0\n                                                                 ]']                              \n                                                                                                  \n sync_batch_normalization_9 (Sy  (None, 16384, 1280)  5120       ['conv1d_5[0][0]']               \n ncBatchNormalization)                                                                            \n                                                                                                  \n dense_18 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_8[0][0]']           \n                                                                                                  \n tf.nn.gelu_9 (TFOpLambda)      (None, 16384, 1280)  0           ['sync_batch_normalization_9[0][0\n                                                                 ]']                              \n                                                                                                  \n up_sampling1d_1 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_18[0][0]']               \n                                                                                                  \n dense_19 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_9[0][0]']           \n                                                                                                  \n add_17 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_1[0][0]',        \n                                                                  'dense_19[0][0]']               \n                                                                                                  \n separable_conv1d_1 (SeparableC  (None, 16384, 1536)  2365440    ['add_17[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n cropping1d (Cropping1D)        (None, 16352, 1536)  0           ['separable_conv1d_1[0][0]']     \n                                                                                                  \n sync_batch_normalization_10 (S  (None, 16352, 1536)  6144       ['cropping1d[0][0]']             \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_10 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_10[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_7 (Conv1D)              (None, 16352, 1920)  2951040     ['tf.nn.gelu_10[0][0]']          \n                                                                                                  \n dropout_24 (Dropout)           (None, 16352, 1920)  0           ['conv1d_7[0][0]']               \n                                                                                                  \n tf.nn.gelu_11 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_24[0][0]']             \n                                                                                                  \n dense_20 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_11[0][0]']          \n                                                                                                  \n switch_reverse (SwitchReverse)  (None, 16352, 7611)  0          ['dense_20[0][0]',               \n                                                                  'stochastic_reverse_complement[0\n                                                                 ][1]']                           \n                                                                                                  \n==================================================================================================\nTotal params: 185,917,723\nTrainable params: 185,892,699\nNon-trainable params: 25,024\n__________________________________________________________________________________________________\nNone\nmodel_strides [32, 32]\ntarget_lengths [16352, 16352]\ntarget_crops [16, 16]\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nModel: \"model_6\"\n__________________________________________________________________________________________________\n Layer (type)                   Output Shape         Param #     Connected to                     \n==================================================================================================\n sequence (InputLayer)          [(None, 524288, 4)]  0           []                               \n                                                                                                  \n stochastic_reverse_complement_  ((None, 524288, 4),  0          ['sequence[0][0]']               \n 1 (StochasticReverseComplement   ())                                                             \n )                                                                                                \n                                                                                                  \n stochastic_shift_1 (Stochastic  (None, 524288, 4)   0           ['stochastic_reverse_complement_1\n Shift)                                                          [0][0]']                         \n                                                                                                  \n conv1d_8 (Conv1D)              (None, 524288, 512)  31232       ['stochastic_shift_1[0][0]']     \n                                                                                                  \n max_pooling1d_7 (MaxPooling1D)  (None, 262144, 512)  0          ['conv1d_8[0][0]']               \n                                                                                                  \n sync_batch_normalization_11 (S  (None, 262144, 512)  2048       ['max_pooling1d_7[0][0]']        \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_12 (TFOpLambda)     (None, 262144, 512)  0           ['sync_batch_normalization_11[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_9 (Conv1D)              (None, 262144, 608)  1557088     ['tf.nn.gelu_12[0][0]']          \n                                                                                                  \n max_pooling1d_8 (MaxPooling1D)  (None, 131072, 608)  0          ['conv1d_9[0][0]']               \n                                                                                                  \n sync_batch_normalization_12 (S  (None, 131072, 608)  2432       ['max_pooling1d_8[0][0]']        \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_13 (TFOpLambda)     (None, 131072, 608)  0           ['sync_batch_normalization_12[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_10 (Conv1D)             (None, 131072, 736)  2238176     ['tf.nn.gelu_13[0][0]']          \n                                                                                                  \n max_pooling1d_9 (MaxPooling1D)  (None, 65536, 736)  0           ['conv1d_10[0][0]']              \n                                                                                                  \n sync_batch_normalization_13 (S  (None, 65536, 736)  2944        ['max_pooling1d_9[0][0]']        \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_14 (TFOpLambda)     (None, 65536, 736)   0           ['sync_batch_normalization_13[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_11 (Conv1D)             (None, 65536, 896)   3298176     ['tf.nn.gelu_14[0][0]']          \n                                                                                                  \n max_pooling1d_10 (MaxPooling1D  (None, 32768, 896)  0           ['conv1d_11[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_14 (S  (None, 32768, 896)  3584        ['max_pooling1d_10[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_15 (TFOpLambda)     (None, 32768, 896)   0           ['sync_batch_normalization_14[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_12 (Conv1D)             (None, 32768, 1056)  4731936     ['tf.nn.gelu_15[0][0]']          \n                                                                                                  \n max_pooling1d_11 (MaxPooling1D  (None, 16384, 1056)  0          ['conv1d_12[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_15 (S  (None, 16384, 1056)  4224       ['max_pooling1d_11[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_16 (TFOpLambda)     (None, 16384, 1056)  0           ['sync_batch_normalization_15[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_13 (Conv1D)             (None, 16384, 1280)  6759680     ['tf.nn.gelu_16[0][0]']          \n                                                                                                  \n max_pooling1d_12 (MaxPooling1D  (None, 8192, 1280)  0           ['conv1d_13[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_16 (S  (None, 8192, 1280)  5120        ['max_pooling1d_12[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_17 (TFOpLambda)     (None, 8192, 1280)   0           ['sync_batch_normalization_16[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_14 (Conv1D)             (None, 8192, 1536)   9831936     ['tf.nn.gelu_17[0][0]']          \n                                                                                                  \n max_pooling1d_13 (MaxPooling1D  (None, 4096, 1536)  0           ['conv1d_14[0][0]']              \n )                                                                                                \n                                                                                                  \n layer_normalization_16 (LayerN  (None, 4096, 1536)  3072        ['max_pooling1d_13[0][0]']       \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_8 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_16[0][0]'] \n adAttention)                                                                                     \n                                                                                                  \n dropout_25 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_8[0][0]']  \n                                                                                                  \n add_18 (Add)                   (None, 4096, 1536)   0           ['max_pooling1d_13[0][0]',       \n                                                                  'dropout_25[0][0]']             \n                                                                                                  \n layer_normalization_17 (LayerN  (None, 4096, 1536)  3072        ['add_18[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_22 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_17[0][0]'] \n                                                                                                  \n dropout_26 (Dropout)           (None, 4096, 3072)   0           ['dense_22[0][0]']               \n                                                                                                  \n re_lu_8 (ReLU)                 (None, 4096, 3072)   0           ['dropout_26[0][0]']             \n                                                                                                  \n dense_23 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_8[0][0]']                \n                                                                                                  \n dropout_27 (Dropout)           (None, 4096, 1536)   0           ['dense_23[0][0]']               \n                                                                                                  \n add_19 (Add)                   (None, 4096, 1536)   0           ['add_18[0][0]',                 \n                                                                  'dropout_27[0][0]']             \n                                                                                                  \n layer_normalization_18 (LayerN  (None, 4096, 1536)  3072        ['add_19[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_9 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_18[0][0]'] \n adAttention)                                                                                     \n                                                                                                  \n dropout_28 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_9[0][0]']  \n                                                                                                  \n add_20 (Add)                   (None, 4096, 1536)   0           ['add_19[0][0]',                 \n                                                                  'dropout_28[0][0]']             \n                                                                                                  \n layer_normalization_19 (LayerN  (None, 4096, 1536)  3072        ['add_20[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_24 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_19[0][0]'] \n                                                                                                  \n dropout_29 (Dropout)           (None, 4096, 3072)   0           ['dense_24[0][0]']               \n                                                                                                  \n re_lu_9 (ReLU)                 (None, 4096, 3072)   0           ['dropout_29[0][0]']             \n                                                                                                  \n dense_25 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_9[0][0]']                \n                                                                                                  \n dropout_30 (Dropout)           (None, 4096, 1536)   0           ['dense_25[0][0]']               \n                                                                                                  \n add_21 (Add)                   (None, 4096, 1536)   0           ['add_20[0][0]',                 \n                                                                  'dropout_30[0][0]']             \n                                                                                                  \n layer_normalization_20 (LayerN  (None, 4096, 1536)  3072        ['add_21[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_10 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_20[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_31 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_10[0][0]'] \n                                                                                                  \n add_22 (Add)                   (None, 4096, 1536)   0           ['add_21[0][0]',                 \n                                                                  'dropout_31[0][0]']             \n                                                                                                  \n layer_normalization_21 (LayerN  (None, 4096, 1536)  3072        ['add_22[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_26 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_21[0][0]'] \n                                                                                                  \n dropout_32 (Dropout)           (None, 4096, 3072)   0           ['dense_26[0][0]']               \n                                                                                                  \n re_lu_10 (ReLU)                (None, 4096, 3072)   0           ['dropout_32[0][0]']             \n                                                                                                  \n dense_27 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_10[0][0]']               \n                                                                                                  \n dropout_33 (Dropout)           (None, 4096, 1536)   0           ['dense_27[0][0]']               \n                                                                                                  \n add_23 (Add)                   (None, 4096, 1536)   0           ['add_22[0][0]',                 \n                                                                  'dropout_33[0][0]']             \n                                                                                                  \n layer_normalization_22 (LayerN  (None, 4096, 1536)  3072        ['add_23[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_11 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_22[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_34 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_11[0][0]'] \n                                                                                                  \n add_24 (Add)                   (None, 4096, 1536)   0           ['add_23[0][0]',                 \n                                                                  'dropout_34[0][0]']             \n                                                                                                  \n layer_normalization_23 (LayerN  (None, 4096, 1536)  3072        ['add_24[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_28 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_23[0][0]'] \n                                                                                                  \n dropout_35 (Dropout)           (None, 4096, 3072)   0           ['dense_28[0][0]']               \n                                                                                                  \n re_lu_11 (ReLU)                (None, 4096, 3072)   0           ['dropout_35[0][0]']             \n                                                                                                  \n dense_29 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_11[0][0]']               \n                                                                                                  \n dropout_36 (Dropout)           (None, 4096, 1536)   0           ['dense_29[0][0]']               \n                                                                                                  \n add_25 (Add)                   (None, 4096, 1536)   0           ['add_24[0][0]',                 \n                                                                  'dropout_36[0][0]']             \n                                                                                                  \n layer_normalization_24 (LayerN  (None, 4096, 1536)  3072        ['add_25[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_12 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_24[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_37 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_12[0][0]'] \n                                                                                                  \n add_26 (Add)                   (None, 4096, 1536)   0           ['add_25[0][0]',                 \n                                                                  'dropout_37[0][0]']             \n                                                                                                  \n layer_normalization_25 (LayerN  (None, 4096, 1536)  3072        ['add_26[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_30 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_25[0][0]'] \n                                                                                                  \n dropout_38 (Dropout)           (None, 4096, 3072)   0           ['dense_30[0][0]']               \n                                                                                                  \n re_lu_12 (ReLU)                (None, 4096, 3072)   0           ['dropout_38[0][0]']             \n                                                                                                  \n dense_31 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_12[0][0]']               \n                                                                                                  \n dropout_39 (Dropout)           (None, 4096, 1536)   0           ['dense_31[0][0]']               \n                                                                                                  \n add_27 (Add)                   (None, 4096, 1536)   0           ['add_26[0][0]',                 \n                                                                  'dropout_39[0][0]']             \n                                                                                                  \n layer_normalization_26 (LayerN  (None, 4096, 1536)  3072        ['add_27[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_13 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_26[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_40 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_13[0][0]'] \n                                                                                                  \n add_28 (Add)                   (None, 4096, 1536)   0           ['add_27[0][0]',                 \n                                                                  'dropout_40[0][0]']             \n                                                                                                  \n layer_normalization_27 (LayerN  (None, 4096, 1536)  3072        ['add_28[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_32 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_27[0][0]'] \n                                                                                                  \n dropout_41 (Dropout)           (None, 4096, 3072)   0           ['dense_32[0][0]']               \n                                                                                                  \n re_lu_13 (ReLU)                (None, 4096, 3072)   0           ['dropout_41[0][0]']             \n                                                                                                  \n dense_33 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_13[0][0]']               \n                                                                                                  \n dropout_42 (Dropout)           (None, 4096, 1536)   0           ['dense_33[0][0]']               \n                                                                                                  \n add_29 (Add)                   (None, 4096, 1536)   0           ['add_28[0][0]',                 \n                                                                  'dropout_42[0][0]']             \n                                                                                                  \n layer_normalization_28 (LayerN  (None, 4096, 1536)  3072        ['add_29[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_14 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_28[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_43 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_14[0][0]'] \n                                                                                                  \n add_30 (Add)                   (None, 4096, 1536)   0           ['add_29[0][0]',                 \n                                                                  'dropout_43[0][0]']             \n                                                                                                  \n layer_normalization_29 (LayerN  (None, 4096, 1536)  3072        ['add_30[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_34 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_29[0][0]'] \n                                                                                                  \n dropout_44 (Dropout)           (None, 4096, 3072)   0           ['dense_34[0][0]']               \n                                                                                                  \n re_lu_14 (ReLU)                (None, 4096, 3072)   0           ['dropout_44[0][0]']             \n                                                                                                  \n dense_35 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_14[0][0]']               \n                                                                                                  \n dropout_45 (Dropout)           (None, 4096, 1536)   0           ['dense_35[0][0]']               \n                                                                                                  \n add_31 (Add)                   (None, 4096, 1536)   0           ['add_30[0][0]',                 \n                                                                  'dropout_45[0][0]']             \n                                                                                                  \n layer_normalization_30 (LayerN  (None, 4096, 1536)  3072        ['add_31[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_15 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_30[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_46 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_15[0][0]'] \n                                                                                                  \n add_32 (Add)                   (None, 4096, 1536)   0           ['add_31[0][0]',                 \n                                                                  'dropout_46[0][0]']             \n                                                                                                  \n layer_normalization_31 (LayerN  (None, 4096, 1536)  3072        ['add_32[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_36 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_31[0][0]'] \n                                                                                                  \n dropout_47 (Dropout)           (None, 4096, 3072)   0           ['dense_36[0][0]']               \n                                                                                                  \n re_lu_15 (ReLU)                (None, 4096, 3072)   0           ['dropout_47[0][0]']             \n                                                                                                  \n dense_37 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_15[0][0]']               \n                                                                                                  \n dropout_48 (Dropout)           (None, 4096, 1536)   0           ['dense_37[0][0]']               \n                                                                                                  \n add_33 (Add)                   (None, 4096, 1536)   0           ['add_32[0][0]',                 \n                                                                  'dropout_48[0][0]']             \n                                                                                                  \n sync_batch_normalization_17 (S  (None, 4096, 1536)  6144        ['add_33[0][0]']                 \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_18 (TFOpLambda)     (None, 4096, 1536)   0           ['sync_batch_normalization_17[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_18 (S  (None, 8192, 1536)  6144        ['conv1d_14[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_38 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_18[0][0]']          \n                                                                                                  \n tf.nn.gelu_19 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_18[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_2 (UpSampling1D)  (None, 8192, 1536)  0           ['dense_38[0][0]']               \n                                                                                                  \n dense_39 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_19[0][0]']          \n                                                                                                  \n add_34 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d_2[0][0]',        \n                                                                  'dense_39[0][0]']               \n                                                                                                  \n separable_conv1d_2 (SeparableC  (None, 8192, 1536)  2365440     ['add_34[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n sync_batch_normalization_19 (S  (None, 8192, 1536)  6144        ['separable_conv1d_2[0][0]']     \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_20 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_19[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_20 (S  (None, 16384, 1280)  5120       ['conv1d_13[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_40 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_20[0][0]']          \n                                                                                                  \n tf.nn.gelu_21 (TFOpLambda)     (None, 16384, 1280)  0           ['sync_batch_normalization_20[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_3 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_40[0][0]']               \n                                                                                                  \n dense_41 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_21[0][0]']          \n                                                                                                  \n add_35 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_3[0][0]',        \n                                                                  'dense_41[0][0]']               \n                                                                                                  \n separable_conv1d_3 (SeparableC  (None, 16384, 1536)  2365440    ['add_35[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n cropping1d_1 (Cropping1D)      (None, 16352, 1536)  0           ['separable_conv1d_3[0][0]']     \n                                                                                                  \n sync_batch_normalization_21 (S  (None, 16352, 1536)  6144       ['cropping1d_1[0][0]']           \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_22 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_21[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_15 (Conv1D)             (None, 16352, 1920)  2951040     ['tf.nn.gelu_22[0][0]']          \n                                                                                                  \n dropout_49 (Dropout)           (None, 16352, 1920)  0           ['conv1d_15[0][0]']              \n                                                                                                  \n tf.nn.gelu_23 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_49[0][0]']             \n                                                                                                  \n dense_42 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_23[0][0]']          \n                                                                                                  \n switch_reverse_4 (SwitchRevers  (None, 16352, 7611)  0          ['dense_42[0][0]',               \n e)                                                               'stochastic_reverse_complement_1\n                                                                 [0][1]']                         \n                                                                                                  \n==================================================================================================\nTotal params: 185,917,723\nTrainable params: 185,892,699\nNon-trainable params: 25,024\n__________________________________________________________________________________________________\nNone\nmodel_strides [32, 32]\ntarget_lengths [16352, 16352]\ntarget_crops [16, 16]\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nModel: \"model_11\"\n__________________________________________________________________________________________________\n Layer (type)                   Output Shape         Param #     Connected to                     \n==================================================================================================\n sequence (InputLayer)          [(None, 524288, 4)]  0           []                               \n                                                                                                  \n stochastic_reverse_complement_  ((None, 524288, 4),  0          ['sequence[0][0]']               \n 2 (StochasticReverseComplement   ())                                                             \n )                                                                                                \n                                                                                                  \n stochastic_shift_2 (Stochastic  (None, 524288, 4)   0           ['stochastic_reverse_complement_2\n Shift)                                                          [0][0]']                         \n                                                                                                  \n conv1d_16 (Conv1D)             (None, 524288, 512)  31232       ['stochastic_shift_2[0][0]']     \n                                                                                                  \n max_pooling1d_14 (MaxPooling1D  (None, 262144, 512)  0          ['conv1d_16[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_22 (S  (None, 262144, 512)  2048       ['max_pooling1d_14[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_24 (TFOpLambda)     (None, 262144, 512)  0           ['sync_batch_normalization_22[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_17 (Conv1D)             (None, 262144, 608)  1557088     ['tf.nn.gelu_24[0][0]']          \n                                                                                                  \n max_pooling1d_15 (MaxPooling1D  (None, 131072, 608)  0          ['conv1d_17[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_23 (S  (None, 131072, 608)  2432       ['max_pooling1d_15[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_25 (TFOpLambda)     (None, 131072, 608)  0           ['sync_batch_normalization_23[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_18 (Conv1D)             (None, 131072, 736)  2238176     ['tf.nn.gelu_25[0][0]']          \n                                                                                                  \n max_pooling1d_16 (MaxPooling1D  (None, 65536, 736)  0           ['conv1d_18[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_24 (S  (None, 65536, 736)  2944        ['max_pooling1d_16[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_26 (TFOpLambda)     (None, 65536, 736)   0           ['sync_batch_normalization_24[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_19 (Conv1D)             (None, 65536, 896)   3298176     ['tf.nn.gelu_26[0][0]']          \n                                                                                                  \n max_pooling1d_17 (MaxPooling1D  (None, 32768, 896)  0           ['conv1d_19[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_25 (S  (None, 32768, 896)  3584        ['max_pooling1d_17[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_27 (TFOpLambda)     (None, 32768, 896)   0           ['sync_batch_normalization_25[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_20 (Conv1D)             (None, 32768, 1056)  4731936     ['tf.nn.gelu_27[0][0]']          \n                                                                                                  \n max_pooling1d_18 (MaxPooling1D  (None, 16384, 1056)  0          ['conv1d_20[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_26 (S  (None, 16384, 1056)  4224       ['max_pooling1d_18[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_28 (TFOpLambda)     (None, 16384, 1056)  0           ['sync_batch_normalization_26[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_21 (Conv1D)             (None, 16384, 1280)  6759680     ['tf.nn.gelu_28[0][0]']          \n                                                                                                  \n max_pooling1d_19 (MaxPooling1D  (None, 8192, 1280)  0           ['conv1d_21[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_27 (S  (None, 8192, 1280)  5120        ['max_pooling1d_19[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_29 (TFOpLambda)     (None, 8192, 1280)   0           ['sync_batch_normalization_27[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_22 (Conv1D)             (None, 8192, 1536)   9831936     ['tf.nn.gelu_29[0][0]']          \n                                                                                                  \n max_pooling1d_20 (MaxPooling1D  (None, 4096, 1536)  0           ['conv1d_22[0][0]']              \n )                                                                                                \n                                                                                                  \n layer_normalization_32 (LayerN  (None, 4096, 1536)  3072        ['max_pooling1d_20[0][0]']       \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_16 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_32[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_50 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_16[0][0]'] \n                                                                                                  \n add_36 (Add)                   (None, 4096, 1536)   0           ['max_pooling1d_20[0][0]',       \n                                                                  'dropout_50[0][0]']             \n                                                                                                  \n layer_normalization_33 (LayerN  (None, 4096, 1536)  3072        ['add_36[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_44 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_33[0][0]'] \n                                                                                                  \n dropout_51 (Dropout)           (None, 4096, 3072)   0           ['dense_44[0][0]']               \n                                                                                                  \n re_lu_16 (ReLU)                (None, 4096, 3072)   0           ['dropout_51[0][0]']             \n                                                                                                  \n dense_45 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_16[0][0]']               \n                                                                                                  \n dropout_52 (Dropout)           (None, 4096, 1536)   0           ['dense_45[0][0]']               \n                                                                                                  \n add_37 (Add)                   (None, 4096, 1536)   0           ['add_36[0][0]',                 \n                                                                  'dropout_52[0][0]']             \n                                                                                                  \n layer_normalization_34 (LayerN  (None, 4096, 1536)  3072        ['add_37[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_17 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_34[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_53 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_17[0][0]'] \n                                                                                                  \n add_38 (Add)                   (None, 4096, 1536)   0           ['add_37[0][0]',                 \n                                                                  'dropout_53[0][0]']             \n                                                                                                  \n layer_normalization_35 (LayerN  (None, 4096, 1536)  3072        ['add_38[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_46 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_35[0][0]'] \n                                                                                                  \n dropout_54 (Dropout)           (None, 4096, 3072)   0           ['dense_46[0][0]']               \n                                                                                                  \n re_lu_17 (ReLU)                (None, 4096, 3072)   0           ['dropout_54[0][0]']             \n                                                                                                  \n dense_47 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_17[0][0]']               \n                                                                                                  \n dropout_55 (Dropout)           (None, 4096, 1536)   0           ['dense_47[0][0]']               \n                                                                                                  \n add_39 (Add)                   (None, 4096, 1536)   0           ['add_38[0][0]',                 \n                                                                  'dropout_55[0][0]']             \n                                                                                                  \n layer_normalization_36 (LayerN  (None, 4096, 1536)  3072        ['add_39[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_18 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_36[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_56 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_18[0][0]'] \n                                                                                                  \n add_40 (Add)                   (None, 4096, 1536)   0           ['add_39[0][0]',                 \n                                                                  'dropout_56[0][0]']             \n                                                                                                  \n layer_normalization_37 (LayerN  (None, 4096, 1536)  3072        ['add_40[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_48 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_37[0][0]'] \n                                                                                                  \n dropout_57 (Dropout)           (None, 4096, 3072)   0           ['dense_48[0][0]']               \n                                                                                                  \n re_lu_18 (ReLU)                (None, 4096, 3072)   0           ['dropout_57[0][0]']             \n                                                                                                  \n dense_49 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_18[0][0]']               \n                                                                                                  \n dropout_58 (Dropout)           (None, 4096, 1536)   0           ['dense_49[0][0]']               \n                                                                                                  \n add_41 (Add)                   (None, 4096, 1536)   0           ['add_40[0][0]',                 \n                                                                  'dropout_58[0][0]']             \n                                                                                                  \n layer_normalization_38 (LayerN  (None, 4096, 1536)  3072        ['add_41[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_19 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_38[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_59 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_19[0][0]'] \n                                                                                                  \n add_42 (Add)                   (None, 4096, 1536)   0           ['add_41[0][0]',                 \n                                                                  'dropout_59[0][0]']             \n                                                                                                  \n layer_normalization_39 (LayerN  (None, 4096, 1536)  3072        ['add_42[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_50 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_39[0][0]'] \n                                                                                                  \n dropout_60 (Dropout)           (None, 4096, 3072)   0           ['dense_50[0][0]']               \n                                                                                                  \n re_lu_19 (ReLU)                (None, 4096, 3072)   0           ['dropout_60[0][0]']             \n                                                                                                  \n dense_51 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_19[0][0]']               \n                                                                                                  \n dropout_61 (Dropout)           (None, 4096, 1536)   0           ['dense_51[0][0]']               \n                                                                                                  \n add_43 (Add)                   (None, 4096, 1536)   0           ['add_42[0][0]',                 \n                                                                  'dropout_61[0][0]']             \n                                                                                                  \n layer_normalization_40 (LayerN  (None, 4096, 1536)  3072        ['add_43[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_20 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_40[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_62 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_20[0][0]'] \n                                                                                                  \n add_44 (Add)                   (None, 4096, 1536)   0           ['add_43[0][0]',                 \n                                                                  'dropout_62[0][0]']             \n                                                                                                  \n layer_normalization_41 (LayerN  (None, 4096, 1536)  3072        ['add_44[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_52 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_41[0][0]'] \n                                                                                                  \n dropout_63 (Dropout)           (None, 4096, 3072)   0           ['dense_52[0][0]']               \n                                                                                                  \n re_lu_20 (ReLU)                (None, 4096, 3072)   0           ['dropout_63[0][0]']             \n                                                                                                  \n dense_53 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_20[0][0]']               \n                                                                                                  \n dropout_64 (Dropout)           (None, 4096, 1536)   0           ['dense_53[0][0]']               \n                                                                                                  \n add_45 (Add)                   (None, 4096, 1536)   0           ['add_44[0][0]',                 \n                                                                  'dropout_64[0][0]']             \n                                                                                                  \n layer_normalization_42 (LayerN  (None, 4096, 1536)  3072        ['add_45[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_21 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_42[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_65 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_21[0][0]'] \n                                                                                                  \n add_46 (Add)                   (None, 4096, 1536)   0           ['add_45[0][0]',                 \n                                                                  'dropout_65[0][0]']             \n                                                                                                  \n layer_normalization_43 (LayerN  (None, 4096, 1536)  3072        ['add_46[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_54 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_43[0][0]'] \n                                                                                                  \n dropout_66 (Dropout)           (None, 4096, 3072)   0           ['dense_54[0][0]']               \n                                                                                                  \n re_lu_21 (ReLU)                (None, 4096, 3072)   0           ['dropout_66[0][0]']             \n                                                                                                  \n dense_55 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_21[0][0]']               \n                                                                                                  \n dropout_67 (Dropout)           (None, 4096, 1536)   0           ['dense_55[0][0]']               \n                                                                                                  \n add_47 (Add)                   (None, 4096, 1536)   0           ['add_46[0][0]',                 \n                                                                  'dropout_67[0][0]']             \n                                                                                                  \n layer_normalization_44 (LayerN  (None, 4096, 1536)  3072        ['add_47[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_22 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_44[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_68 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_22[0][0]'] \n                                                                                                  \n add_48 (Add)                   (None, 4096, 1536)   0           ['add_47[0][0]',                 \n                                                                  'dropout_68[0][0]']             \n                                                                                                  \n layer_normalization_45 (LayerN  (None, 4096, 1536)  3072        ['add_48[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_56 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_45[0][0]'] \n                                                                                                  \n dropout_69 (Dropout)           (None, 4096, 3072)   0           ['dense_56[0][0]']               \n                                                                                                  \n re_lu_22 (ReLU)                (None, 4096, 3072)   0           ['dropout_69[0][0]']             \n                                                                                                  \n dense_57 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_22[0][0]']               \n                                                                                                  \n dropout_70 (Dropout)           (None, 4096, 1536)   0           ['dense_57[0][0]']               \n                                                                                                  \n add_49 (Add)                   (None, 4096, 1536)   0           ['add_48[0][0]',                 \n                                                                  'dropout_70[0][0]']             \n                                                                                                  \n layer_normalization_46 (LayerN  (None, 4096, 1536)  3072        ['add_49[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_23 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_46[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_71 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_23[0][0]'] \n                                                                                                  \n add_50 (Add)                   (None, 4096, 1536)   0           ['add_49[0][0]',                 \n                                                                  'dropout_71[0][0]']             \n                                                                                                  \n layer_normalization_47 (LayerN  (None, 4096, 1536)  3072        ['add_50[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_58 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_47[0][0]'] \n                                                                                                  \n dropout_72 (Dropout)           (None, 4096, 3072)   0           ['dense_58[0][0]']               \n                                                                                                  \n re_lu_23 (ReLU)                (None, 4096, 3072)   0           ['dropout_72[0][0]']             \n                                                                                                  \n dense_59 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_23[0][0]']               \n                                                                                                  \n dropout_73 (Dropout)           (None, 4096, 1536)   0           ['dense_59[0][0]']               \n                                                                                                  \n add_51 (Add)                   (None, 4096, 1536)   0           ['add_50[0][0]',                 \n                                                                  'dropout_73[0][0]']             \n                                                                                                  \n sync_batch_normalization_28 (S  (None, 4096, 1536)  6144        ['add_51[0][0]']                 \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_30 (TFOpLambda)     (None, 4096, 1536)   0           ['sync_batch_normalization_28[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_29 (S  (None, 8192, 1536)  6144        ['conv1d_22[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_60 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_30[0][0]']          \n                                                                                                  \n tf.nn.gelu_31 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_29[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_4 (UpSampling1D)  (None, 8192, 1536)  0           ['dense_60[0][0]']               \n                                                                                                  \n dense_61 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_31[0][0]']          \n                                                                                                  \n add_52 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d_4[0][0]',        \n                                                                  'dense_61[0][0]']               \n                                                                                                  \n separable_conv1d_4 (SeparableC  (None, 8192, 1536)  2365440     ['add_52[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n sync_batch_normalization_30 (S  (None, 8192, 1536)  6144        ['separable_conv1d_4[0][0]']     \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_32 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_30[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_31 (S  (None, 16384, 1280)  5120       ['conv1d_21[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_62 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_32[0][0]']          \n                                                                                                  \n tf.nn.gelu_33 (TFOpLambda)     (None, 16384, 1280)  0           ['sync_batch_normalization_31[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_5 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_62[0][0]']               \n                                                                                                  \n dense_63 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_33[0][0]']          \n                                                                                                  \n add_53 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_5[0][0]',        \n                                                                  'dense_63[0][0]']               \n                                                                                                  \n separable_conv1d_5 (SeparableC  (None, 16384, 1536)  2365440    ['add_53[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n cropping1d_2 (Cropping1D)      (None, 16352, 1536)  0           ['separable_conv1d_5[0][0]']     \n                                                                                                  \n sync_batch_normalization_32 (S  (None, 16352, 1536)  6144       ['cropping1d_2[0][0]']           \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_34 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_32[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_23 (Conv1D)             (None, 16352, 1920)  2951040     ['tf.nn.gelu_34[0][0]']          \n                                                                                                  \n dropout_74 (Dropout)           (None, 16352, 1920)  0           ['conv1d_23[0][0]']              \n                                                                                                  \n tf.nn.gelu_35 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_74[0][0]']             \n                                                                                                  \n dense_64 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_35[0][0]']          \n                                                                                                  \n switch_reverse_8 (SwitchRevers  (None, 16352, 7611)  0          ['dense_64[0][0]',               \n e)                                                               'stochastic_reverse_complement_2\n                                                                 [0][1]']                         \n                                                                                                  \n==================================================================================================\nTotal params: 185,917,723\nTrainable params: 185,892,699\nNon-trainable params: 25,024\n__________________________________________________________________________________________________\nNone\nmodel_strides [32, 32]\ntarget_lengths [16352, 16352]\ntarget_crops [16, 16]\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nModel: \"model_16\"\n__________________________________________________________________________________________________\n Layer (type)                   Output Shape         Param #     Connected to                     \n==================================================================================================\n sequence (InputLayer)          [(None, 524288, 4)]  0           []                               \n                                                                                                  \n stochastic_reverse_complement_  ((None, 524288, 4),  0          ['sequence[0][0]']               \n 3 (StochasticReverseComplement   ())                                                             \n )                                                                                                \n                                                                                                  \n stochastic_shift_3 (Stochastic  (None, 524288, 4)   0           ['stochastic_reverse_complement_3\n Shift)                                                          [0][0]']                         \n                                                                                                  \n conv1d_24 (Conv1D)             (None, 524288, 512)  31232       ['stochastic_shift_3[0][0]']     \n                                                                                                  \n max_pooling1d_21 (MaxPooling1D  (None, 262144, 512)  0          ['conv1d_24[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_33 (S  (None, 262144, 512)  2048       ['max_pooling1d_21[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_36 (TFOpLambda)     (None, 262144, 512)  0           ['sync_batch_normalization_33[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_25 (Conv1D)             (None, 262144, 608)  1557088     ['tf.nn.gelu_36[0][0]']          \n                                                                                                  \n max_pooling1d_22 (MaxPooling1D  (None, 131072, 608)  0          ['conv1d_25[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_34 (S  (None, 131072, 608)  2432       ['max_pooling1d_22[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_37 (TFOpLambda)     (None, 131072, 608)  0           ['sync_batch_normalization_34[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_26 (Conv1D)             (None, 131072, 736)  2238176     ['tf.nn.gelu_37[0][0]']          \n                                                                                                  \n max_pooling1d_23 (MaxPooling1D  (None, 65536, 736)  0           ['conv1d_26[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_35 (S  (None, 65536, 736)  2944        ['max_pooling1d_23[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_38 (TFOpLambda)     (None, 65536, 736)   0           ['sync_batch_normalization_35[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_27 (Conv1D)             (None, 65536, 896)   3298176     ['tf.nn.gelu_38[0][0]']          \n                                                                                                  \n max_pooling1d_24 (MaxPooling1D  (None, 32768, 896)  0           ['conv1d_27[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_36 (S  (None, 32768, 896)  3584        ['max_pooling1d_24[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_39 (TFOpLambda)     (None, 32768, 896)   0           ['sync_batch_normalization_36[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_28 (Conv1D)             (None, 32768, 1056)  4731936     ['tf.nn.gelu_39[0][0]']          \n                                                                                                  \n max_pooling1d_25 (MaxPooling1D  (None, 16384, 1056)  0          ['conv1d_28[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_37 (S  (None, 16384, 1056)  4224       ['max_pooling1d_25[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_40 (TFOpLambda)     (None, 16384, 1056)  0           ['sync_batch_normalization_37[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_29 (Conv1D)             (None, 16384, 1280)  6759680     ['tf.nn.gelu_40[0][0]']          \n                                                                                                  \n max_pooling1d_26 (MaxPooling1D  (None, 8192, 1280)  0           ['conv1d_29[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_38 (S  (None, 8192, 1280)  5120        ['max_pooling1d_26[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_41 (TFOpLambda)     (None, 8192, 1280)   0           ['sync_batch_normalization_38[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_30 (Conv1D)             (None, 8192, 1536)   9831936     ['tf.nn.gelu_41[0][0]']          \n                                                                                                  \n max_pooling1d_27 (MaxPooling1D  (None, 4096, 1536)  0           ['conv1d_30[0][0]']              \n )                                                                                                \n                                                                                                  \n layer_normalization_48 (LayerN  (None, 4096, 1536)  3072        ['max_pooling1d_27[0][0]']       \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_24 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_48[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_75 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_24[0][0]'] \n                                                                                                  \n add_54 (Add)                   (None, 4096, 1536)   0           ['max_pooling1d_27[0][0]',       \n                                                                  'dropout_75[0][0]']             \n                                                                                                  \n layer_normalization_49 (LayerN  (None, 4096, 1536)  3072        ['add_54[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_66 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_49[0][0]'] \n                                                                                                  \n dropout_76 (Dropout)           (None, 4096, 3072)   0           ['dense_66[0][0]']               \n                                                                                                  \n re_lu_24 (ReLU)                (None, 4096, 3072)   0           ['dropout_76[0][0]']             \n                                                                                                  \n dense_67 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_24[0][0]']               \n                                                                                                  \n dropout_77 (Dropout)           (None, 4096, 1536)   0           ['dense_67[0][0]']               \n                                                                                                  \n add_55 (Add)                   (None, 4096, 1536)   0           ['add_54[0][0]',                 \n                                                                  'dropout_77[0][0]']             \n                                                                                                  \n layer_normalization_50 (LayerN  (None, 4096, 1536)  3072        ['add_55[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_25 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_50[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_78 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_25[0][0]'] \n                                                                                                  \n add_56 (Add)                   (None, 4096, 1536)   0           ['add_55[0][0]',                 \n                                                                  'dropout_78[0][0]']             \n                                                                                                  \n layer_normalization_51 (LayerN  (None, 4096, 1536)  3072        ['add_56[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_68 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_51[0][0]'] \n                                                                                                  \n dropout_79 (Dropout)           (None, 4096, 3072)   0           ['dense_68[0][0]']               \n                                                                                                  \n re_lu_25 (ReLU)                (None, 4096, 3072)   0           ['dropout_79[0][0]']             \n                                                                                                  \n dense_69 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_25[0][0]']               \n                                                                                                  \n dropout_80 (Dropout)           (None, 4096, 1536)   0           ['dense_69[0][0]']               \n                                                                                                  \n add_57 (Add)                   (None, 4096, 1536)   0           ['add_56[0][0]',                 \n                                                                  'dropout_80[0][0]']             \n                                                                                                  \n layer_normalization_52 (LayerN  (None, 4096, 1536)  3072        ['add_57[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_26 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_52[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_81 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_26[0][0]'] \n                                                                                                  \n add_58 (Add)                   (None, 4096, 1536)   0           ['add_57[0][0]',                 \n                                                                  'dropout_81[0][0]']             \n                                                                                                  \n layer_normalization_53 (LayerN  (None, 4096, 1536)  3072        ['add_58[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_70 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_53[0][0]'] \n                                                                                                  \n dropout_82 (Dropout)           (None, 4096, 3072)   0           ['dense_70[0][0]']               \n                                                                                                  \n re_lu_26 (ReLU)                (None, 4096, 3072)   0           ['dropout_82[0][0]']             \n                                                                                                  \n dense_71 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_26[0][0]']               \n                                                                                                  \n dropout_83 (Dropout)           (None, 4096, 1536)   0           ['dense_71[0][0]']               \n                                                                                                  \n add_59 (Add)                   (None, 4096, 1536)   0           ['add_58[0][0]',                 \n                                                                  'dropout_83[0][0]']             \n                                                                                                  \n layer_normalization_54 (LayerN  (None, 4096, 1536)  3072        ['add_59[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_27 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_54[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_84 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_27[0][0]'] \n                                                                                                  \n add_60 (Add)                   (None, 4096, 1536)   0           ['add_59[0][0]',                 \n                                                                  'dropout_84[0][0]']             \n                                                                                                  \n layer_normalization_55 (LayerN  (None, 4096, 1536)  3072        ['add_60[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_72 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_55[0][0]'] \n                                                                                                  \n dropout_85 (Dropout)           (None, 4096, 3072)   0           ['dense_72[0][0]']               \n                                                                                                  \n re_lu_27 (ReLU)                (None, 4096, 3072)   0           ['dropout_85[0][0]']             \n                                                                                                  \n dense_73 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_27[0][0]']               \n                                                                                                  \n dropout_86 (Dropout)           (None, 4096, 1536)   0           ['dense_73[0][0]']               \n                                                                                                  \n add_61 (Add)                   (None, 4096, 1536)   0           ['add_60[0][0]',                 \n                                                                  'dropout_86[0][0]']             \n                                                                                                  \n layer_normalization_56 (LayerN  (None, 4096, 1536)  3072        ['add_61[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_28 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_56[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_87 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_28[0][0]'] \n                                                                                                  \n add_62 (Add)                   (None, 4096, 1536)   0           ['add_61[0][0]',                 \n                                                                  'dropout_87[0][0]']             \n                                                                                                  \n layer_normalization_57 (LayerN  (None, 4096, 1536)  3072        ['add_62[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_74 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_57[0][0]'] \n                                                                                                  \n dropout_88 (Dropout)           (None, 4096, 3072)   0           ['dense_74[0][0]']               \n                                                                                                  \n re_lu_28 (ReLU)                (None, 4096, 3072)   0           ['dropout_88[0][0]']             \n                                                                                                  \n dense_75 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_28[0][0]']               \n                                                                                                  \n dropout_89 (Dropout)           (None, 4096, 1536)   0           ['dense_75[0][0]']               \n                                                                                                  \n add_63 (Add)                   (None, 4096, 1536)   0           ['add_62[0][0]',                 \n                                                                  'dropout_89[0][0]']             \n                                                                                                  \n layer_normalization_58 (LayerN  (None, 4096, 1536)  3072        ['add_63[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_29 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_58[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_90 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_29[0][0]'] \n                                                                                                  \n add_64 (Add)                   (None, 4096, 1536)   0           ['add_63[0][0]',                 \n                                                                  'dropout_90[0][0]']             \n                                                                                                  \n layer_normalization_59 (LayerN  (None, 4096, 1536)  3072        ['add_64[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_76 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_59[0][0]'] \n                                                                                                  \n dropout_91 (Dropout)           (None, 4096, 3072)   0           ['dense_76[0][0]']               \n                                                                                                  \n re_lu_29 (ReLU)                (None, 4096, 3072)   0           ['dropout_91[0][0]']             \n                                                                                                  \n dense_77 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_29[0][0]']               \n                                                                                                  \n dropout_92 (Dropout)           (None, 4096, 1536)   0           ['dense_77[0][0]']               \n                                                                                                  \n add_65 (Add)                   (None, 4096, 1536)   0           ['add_64[0][0]',                 \n                                                                  'dropout_92[0][0]']             \n                                                                                                  \n layer_normalization_60 (LayerN  (None, 4096, 1536)  3072        ['add_65[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_30 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_60[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_93 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_30[0][0]'] \n                                                                                                  \n add_66 (Add)                   (None, 4096, 1536)   0           ['add_65[0][0]',                 \n                                                                  'dropout_93[0][0]']             \n                                                                                                  \n layer_normalization_61 (LayerN  (None, 4096, 1536)  3072        ['add_66[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_78 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_61[0][0]'] \n                                                                                                  \n dropout_94 (Dropout)           (None, 4096, 3072)   0           ['dense_78[0][0]']               \n                                                                                                  \n re_lu_30 (ReLU)                (None, 4096, 3072)   0           ['dropout_94[0][0]']             \n                                                                                                  \n dense_79 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_30[0][0]']               \n                                                                                                  \n dropout_95 (Dropout)           (None, 4096, 1536)   0           ['dense_79[0][0]']               \n                                                                                                  \n add_67 (Add)                   (None, 4096, 1536)   0           ['add_66[0][0]',                 \n                                                                  'dropout_95[0][0]']             \n                                                                                                  \n layer_normalization_62 (LayerN  (None, 4096, 1536)  3072        ['add_67[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_31 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_62[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_96 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_31[0][0]'] \n                                                                                                  \n add_68 (Add)                   (None, 4096, 1536)   0           ['add_67[0][0]',                 \n                                                                  'dropout_96[0][0]']             \n                                                                                                  \n layer_normalization_63 (LayerN  (None, 4096, 1536)  3072        ['add_68[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_80 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_63[0][0]'] \n                                                                                                  \n dropout_97 (Dropout)           (None, 4096, 3072)   0           ['dense_80[0][0]']               \n                                                                                                  \n re_lu_31 (ReLU)                (None, 4096, 3072)   0           ['dropout_97[0][0]']             \n                                                                                                  \n dense_81 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_31[0][0]']               \n                                                                                                  \n dropout_98 (Dropout)           (None, 4096, 1536)   0           ['dense_81[0][0]']               \n                                                                                                  \n add_69 (Add)                   (None, 4096, 1536)   0           ['add_68[0][0]',                 \n                                                                  'dropout_98[0][0]']             \n                                                                                                  \n sync_batch_normalization_39 (S  (None, 4096, 1536)  6144        ['add_69[0][0]']                 \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_42 (TFOpLambda)     (None, 4096, 1536)   0           ['sync_batch_normalization_39[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_40 (S  (None, 8192, 1536)  6144        ['conv1d_30[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_82 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_42[0][0]']          \n                                                                                                  \n tf.nn.gelu_43 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_40[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_6 (UpSampling1D)  (None, 8192, 1536)  0           ['dense_82[0][0]']               \n                                                                                                  \n dense_83 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_43[0][0]']          \n                                                                                                  \n add_70 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d_6[0][0]',        \n                                                                  'dense_83[0][0]']               \n                                                                                                  \n separable_conv1d_6 (SeparableC  (None, 8192, 1536)  2365440     ['add_70[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n sync_batch_normalization_41 (S  (None, 8192, 1536)  6144        ['separable_conv1d_6[0][0]']     \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_44 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_41[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_42 (S  (None, 16384, 1280)  5120       ['conv1d_29[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_84 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_44[0][0]']          \n                                                                                                  \n tf.nn.gelu_45 (TFOpLambda)     (None, 16384, 1280)  0           ['sync_batch_normalization_42[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_7 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_84[0][0]']               \n                                                                                                  \n dense_85 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_45[0][0]']          \n                                                                                                  \n add_71 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_7[0][0]',        \n                                                                  'dense_85[0][0]']               \n                                                                                                  \n separable_conv1d_7 (SeparableC  (None, 16384, 1536)  2365440    ['add_71[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n cropping1d_3 (Cropping1D)      (None, 16352, 1536)  0           ['separable_conv1d_7[0][0]']     \n                                                                                                  \n sync_batch_normalization_43 (S  (None, 16352, 1536)  6144       ['cropping1d_3[0][0]']           \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_46 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_43[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_31 (Conv1D)             (None, 16352, 1920)  2951040     ['tf.nn.gelu_46[0][0]']          \n                                                                                                  \n dropout_99 (Dropout)           (None, 16352, 1920)  0           ['conv1d_31[0][0]']              \n                                                                                                  \n tf.nn.gelu_47 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_99[0][0]']             \n                                                                                                  \n dense_86 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_47[0][0]']          \n                                                                                                  \n switch_reverse_12 (SwitchRever  (None, 16352, 7611)  0          ['dense_86[0][0]',               \n se)                                                              'stochastic_reverse_complement_3\n                                                                 [0][1]']                         \n                                                                                                  \n==================================================================================================\nTotal params: 185,917,723\nTrainable params: 185,892,699\nNon-trainable params: 25,024\n__________________________________________________________________________________________________\nNone\nmodel_strides [32, 32]\ntarget_lengths [16352, 16352]\ntarget_crops [16, 16]\n\n\n\n#Initialize fasta sequence extractor\n\nfasta_open = pysam.Fastafile('hg38.fa')\n\n#Load splice site annotation\n\nsplice_df = pd.read_csv('gencode41_basic_protein_splice.csv.gz', sep='\\t', compression='gzip')\n\nprint(\"len(splice_df) = \" + str(len(splice_df)))\n\nlen(splice_df) = 404837"
  },
  {
    "objectID": "posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C.html#setup",
    "href": "posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C.html#setup",
    "title": "Borzoi eQTL Example",
    "section": "",
    "text": "import os\nimport time\n\n#os.environ['CUDA_VISIBLE_DEVICES'] = '-1'\n\nimport h5py\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nimport baskerville\nfrom baskerville import seqnn\nfrom baskerville import gene as bgene\nfrom baskerville import dna\n\nimport json\n\nimport pysam\n\nimport pyfaidx\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nfrom borzoi_helpers import *\n\n2023-09-20 21:36:27.557905: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\nTo enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n2023-09-20 21:36:30.375102: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n2023-09-20 21:36:34.863088: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1956] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.\nSkipping registering GPU devices...\n\n\n\n#Download model files and other dependencies (skip this cell if already executed once)\n\n#Create model file structure\n!mkdir saved_models\n!mkdir saved_models/f0\n!mkdir saved_models/f1\n!mkdir saved_models/f2\n!mkdir saved_models/f3\n\n#Download model weights\n!wget https://storage.googleapis.com/seqnn-share/borzoi/f0/model0_best.h5 -O saved_models/f0/model0_best.h5\n!wget https://storage.googleapis.com/seqnn-share/borzoi/f1/model0_best.h5 -O saved_models/f1/model0_best.h5\n!wget https://storage.googleapis.com/seqnn-share/borzoi/f2/model0_best.h5 -O saved_models/f2/model0_best.h5\n!wget https://storage.googleapis.com/seqnn-share/borzoi/f3/model0_best.h5 -O saved_models/f3/model0_best.h5\n\n#Download and uncompress annotation files\n!wget -O - https://storage.googleapis.com/seqnn-share/helper/gencode41_basic_nort.gtf.gz | gunzip -c &gt; gencode41_basic_nort.gtf\n!wget https://storage.googleapis.com/seqnn-share/helper/gencode41_basic_protein_splice.csv.gz\n!wget https://storage.googleapis.com/seqnn-share/helper/polyadb_human_v3.csv.gz\n\n#Download and index hg38 genome\n!wget -O - http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz | gunzip -c &gt; hg38.fa\npyfaidx.Faidx('hg38.fa')\n\n--2023-09-19 17:48:11--  https://storage.googleapis.com/seqnn-share/borzoi/f0/model0_best.h5\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 744112468 (710M) [application/octet-stream]\nSaving to: ‘saved_models/f0/model0_best.h5’\n\nsaved_models/f0/mod 100%[===================&gt;] 709.64M  25.8MB/s    in 27s     \n\n2023-09-19 17:48:39 (26.0 MB/s) - ‘saved_models/f0/model0_best.h5’ saved [744112468/744112468]\n\n--2023-09-19 17:48:39--  https://storage.googleapis.com/seqnn-share/borzoi/f1/model0_best.h5\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 744112468 (710M) [application/octet-stream]\nSaving to: ‘saved_models/f1/model0_best.h5’\n\nsaved_models/f1/mod 100%[===================&gt;] 709.64M  28.1MB/s    in 28s     \n\n2023-09-19 17:49:08 (25.1 MB/s) - ‘saved_models/f1/model0_best.h5’ saved [744112468/744112468]\n\n--2023-09-19 17:49:08--  https://storage.googleapis.com/seqnn-share/borzoi/f2/model0_best.h5\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 744112468 (710M) [application/octet-stream]\nSaving to: ‘saved_models/f2/model0_best.h5’\n\nsaved_models/f2/mod 100%[===================&gt;] 709.64M  22.8MB/s    in 29s     \n\n2023-09-19 17:49:36 (24.8 MB/s) - ‘saved_models/f2/model0_best.h5’ saved [744112468/744112468]\n\n--2023-09-19 17:49:37--  https://storage.googleapis.com/seqnn-share/borzoi/f3/model0_best.h5\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 744112468 (710M) [application/octet-stream]\nSaving to: ‘saved_models/f3/model0_best.h5’\n\nsaved_models/f3/mod 100%[===================&gt;] 709.64M  23.9MB/s    in 28s     \n\n2023-09-19 17:50:05 (25.3 MB/s) - ‘saved_models/f3/model0_best.h5’ saved [744112468/744112468]\n\n--2023-09-19 17:50:05--  https://storage.googleapis.com/seqnn-share/helper/gencode41_basic_nort.gtf.gz\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 30909907 (29M) [application/octet-stream]\nSaving to: ‘STDOUT’\n\n-                   100%[===================&gt;]  29.48M  8.28MB/s    in 3.7s    \n\n2023-09-19 17:50:09 (8.03 MB/s) - written to stdout [30909907/30909907]\n\n--2023-09-19 17:50:09--  https://storage.googleapis.com/seqnn-share/helper/gencode41_basic_protein_splice.csv.gz\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 3729563 (3.6M) [text/csv]\nSaving to: ‘gencode41_basic_protein_splice.csv.gz’\n\ngencode41_basic_pro 100%[===================&gt;]   3.56M  --.-KB/s    in 0.1s    \n\n2023-09-19 17:50:10 (29.2 MB/s) - ‘gencode41_basic_protein_splice.csv.gz’ saved [3729563/3729563]\n\n--2023-09-19 17:50:10--  https://storage.googleapis.com/seqnn-share/helper/polyadb_human_v3.csv.gz\nResolving storage.googleapis.com (storage.googleapis.com)... 172.217.4.59, 142.250.190.123, 142.250.190.59, ...\nConnecting to storage.googleapis.com (storage.googleapis.com)|172.217.4.59|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 5889770 (5.6M) [text/csv]\nSaving to: ‘polyadb_human_v3.csv.gz’\n\npolyadb_human_v3.cs 100%[===================&gt;]   5.62M  --.-KB/s    in 0.1s    \n\n2023-09-19 17:50:10 (58.6 MB/s) - ‘polyadb_human_v3.csv.gz’ saved [5889770/5889770]\n\n--2023-09-19 17:50:10--  http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz\nResolving hgdownload.cse.ucsc.edu (hgdownload.cse.ucsc.edu)... 128.114.119.163\nConnecting to hgdownload.cse.ucsc.edu (hgdownload.cse.ucsc.edu)|128.114.119.163|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 983659424 (938M) [application/x-gzip]\nSaving to: ‘STDOUT’\n\n-                   100%[===================&gt;] 938.09M  44.0MB/s    in 20s     \n\n2023-09-19 17:50:30 (48.1 MB/s) - written to stdout [983659424/983659424]\n\n\n\nFaidx(\"hg38.fa\")\n\n\n\n#Model configuration\n\nparams_file = 'params_pred.json'\ntargets_file = 'targets_gtex.txt' #Subset of targets_human.txt\n\nseq_len = 524288\nn_folds = 4       #To use only one model fold, change to 'n_folds = 1'\nrc = True         #Average across reverse-complement prediction\n\n#Read model parameters\n\nwith open(params_file) as params_open :\n    \n    params = json.load(params_open)\n    \n    params_model = params['model']\n    params_train = params['train']\n\n#Read targets\n\ntargets_df = pd.read_csv(targets_file, index_col=0, sep='\\t')\ntarget_index = targets_df.index\n\n#Create local index of strand_pair (relative to sliced targets)\nif rc :\n    strand_pair = targets_df.strand_pair\n    \n    target_slice_dict = {ix : i for i, ix in enumerate(target_index.values.tolist())}\n    slice_pair = np.array([\n        target_slice_dict[ix] if ix in target_slice_dict else ix for ix in strand_pair.values.tolist()\n    ], dtype='int32')\n\n#Initialize model ensemble\n\nmodels = []\nfor fold_ix in range(n_folds) :\n    \n    model_file = \"saved_models/f\" + str(fold_ix) + \"/model0_best.h5\"\n\n    seqnn_model = seqnn.SeqNN(params_model)\n    seqnn_model.restore(model_file, 0)\n    seqnn_model.build_slice(target_index)\n    if rc :\n        seqnn_model.strand_pair.append(slice_pair)\n    seqnn_model.build_ensemble(rc, '0')\n    \n    models.append(seqnn_model)\n\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nModel: \"model_1\"\n__________________________________________________________________________________________________\n Layer (type)                   Output Shape         Param #     Connected to                     \n==================================================================================================\n sequence (InputLayer)          [(None, 524288, 4)]  0           []                               \n                                                                                                  \n stochastic_reverse_complement   ((None, 524288, 4),  0          ['sequence[0][0]']               \n (StochasticReverseComplement)   ())                                                              \n                                                                                                  \n stochastic_shift (StochasticSh  (None, 524288, 4)   0           ['stochastic_reverse_complement[0\n ift)                                                            ][0]']                           \n                                                                                                  \n conv1d (Conv1D)                (None, 524288, 512)  31232       ['stochastic_shift[0][0]']       \n                                                                                                  \n max_pooling1d (MaxPooling1D)   (None, 262144, 512)  0           ['conv1d[0][0]']                 \n                                                                                                  \n sync_batch_normalization (Sync  (None, 262144, 512)  2048       ['max_pooling1d[0][0]']          \n BatchNormalization)                                                                              \n                                                                                                  \n tf.nn.gelu (TFOpLambda)        (None, 262144, 512)  0           ['sync_batch_normalization[0][0]'\n                                                                 ]                                \n                                                                                                  \n conv1d_1 (Conv1D)              (None, 262144, 608)  1557088     ['tf.nn.gelu[0][0]']             \n                                                                                                  \n max_pooling1d_1 (MaxPooling1D)  (None, 131072, 608)  0          ['conv1d_1[0][0]']               \n                                                                                                  \n sync_batch_normalization_1 (Sy  (None, 131072, 608)  2432       ['max_pooling1d_1[0][0]']        \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_1 (TFOpLambda)      (None, 131072, 608)  0           ['sync_batch_normalization_1[0][0\n                                                                 ]']                              \n                                                                                                  \n conv1d_2 (Conv1D)              (None, 131072, 736)  2238176     ['tf.nn.gelu_1[0][0]']           \n                                                                                                  \n max_pooling1d_2 (MaxPooling1D)  (None, 65536, 736)  0           ['conv1d_2[0][0]']               \n                                                                                                  \n sync_batch_normalization_2 (Sy  (None, 65536, 736)  2944        ['max_pooling1d_2[0][0]']        \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_2 (TFOpLambda)      (None, 65536, 736)   0           ['sync_batch_normalization_2[0][0\n                                                                 ]']                              \n                                                                                                  \n conv1d_3 (Conv1D)              (None, 65536, 896)   3298176     ['tf.nn.gelu_2[0][0]']           \n                                                                                                  \n max_pooling1d_3 (MaxPooling1D)  (None, 32768, 896)  0           ['conv1d_3[0][0]']               \n                                                                                                  \n sync_batch_normalization_3 (Sy  (None, 32768, 896)  3584        ['max_pooling1d_3[0][0]']        \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_3 (TFOpLambda)      (None, 32768, 896)   0           ['sync_batch_normalization_3[0][0\n                                                                 ]']                              \n                                                                                                  \n conv1d_4 (Conv1D)              (None, 32768, 1056)  4731936     ['tf.nn.gelu_3[0][0]']           \n                                                                                                  \n max_pooling1d_4 (MaxPooling1D)  (None, 16384, 1056)  0          ['conv1d_4[0][0]']               \n                                                                                                  \n sync_batch_normalization_4 (Sy  (None, 16384, 1056)  4224       ['max_pooling1d_4[0][0]']        \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_4 (TFOpLambda)      (None, 16384, 1056)  0           ['sync_batch_normalization_4[0][0\n                                                                 ]']                              \n                                                                                                  \n conv1d_5 (Conv1D)              (None, 16384, 1280)  6759680     ['tf.nn.gelu_4[0][0]']           \n                                                                                                  \n max_pooling1d_5 (MaxPooling1D)  (None, 8192, 1280)  0           ['conv1d_5[0][0]']               \n                                                                                                  \n sync_batch_normalization_5 (Sy  (None, 8192, 1280)  5120        ['max_pooling1d_5[0][0]']        \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_5 (TFOpLambda)      (None, 8192, 1280)   0           ['sync_batch_normalization_5[0][0\n                                                                 ]']                              \n                                                                                                  \n conv1d_6 (Conv1D)              (None, 8192, 1536)   9831936     ['tf.nn.gelu_5[0][0]']           \n                                                                                                  \n max_pooling1d_6 (MaxPooling1D)  (None, 4096, 1536)  0           ['conv1d_6[0][0]']               \n                                                                                                  \n layer_normalization (LayerNorm  (None, 4096, 1536)  3072        ['max_pooling1d_6[0][0]']        \n alization)                                                                                       \n                                                                                                  \n multihead_attention (Multihead  (None, 4096, 1536)  6310400     ['layer_normalization[0][0]']    \n Attention)                                                                                       \n                                                                                                  \n dropout (Dropout)              (None, 4096, 1536)   0           ['multihead_attention[0][0]']    \n                                                                                                  \n add (Add)                      (None, 4096, 1536)   0           ['max_pooling1d_6[0][0]',        \n                                                                  'dropout[0][0]']                \n                                                                                                  \n layer_normalization_1 (LayerNo  (None, 4096, 1536)  3072        ['add[0][0]']                    \n rmalization)                                                                                     \n                                                                                                  \n dense (Dense)                  (None, 4096, 3072)   4721664     ['layer_normalization_1[0][0]']  \n                                                                                                  \n dropout_1 (Dropout)            (None, 4096, 3072)   0           ['dense[0][0]']                  \n                                                                                                  \n re_lu (ReLU)                   (None, 4096, 3072)   0           ['dropout_1[0][0]']              \n                                                                                                  \n dense_1 (Dense)                (None, 4096, 1536)   4720128     ['re_lu[0][0]']                  \n                                                                                                  \n dropout_2 (Dropout)            (None, 4096, 1536)   0           ['dense_1[0][0]']                \n                                                                                                  \n add_1 (Add)                    (None, 4096, 1536)   0           ['add[0][0]',                    \n                                                                  'dropout_2[0][0]']              \n                                                                                                  \n layer_normalization_2 (LayerNo  (None, 4096, 1536)  3072        ['add_1[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n multihead_attention_1 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_2[0][0]']  \n adAttention)                                                                                     \n                                                                                                  \n dropout_3 (Dropout)            (None, 4096, 1536)   0           ['multihead_attention_1[0][0]']  \n                                                                                                  \n add_2 (Add)                    (None, 4096, 1536)   0           ['add_1[0][0]',                  \n                                                                  'dropout_3[0][0]']              \n                                                                                                  \n layer_normalization_3 (LayerNo  (None, 4096, 1536)  3072        ['add_2[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n dense_2 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_3[0][0]']  \n                                                                                                  \n dropout_4 (Dropout)            (None, 4096, 3072)   0           ['dense_2[0][0]']                \n                                                                                                  \n re_lu_1 (ReLU)                 (None, 4096, 3072)   0           ['dropout_4[0][0]']              \n                                                                                                  \n dense_3 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_1[0][0]']                \n                                                                                                  \n dropout_5 (Dropout)            (None, 4096, 1536)   0           ['dense_3[0][0]']                \n                                                                                                  \n add_3 (Add)                    (None, 4096, 1536)   0           ['add_2[0][0]',                  \n                                                                  'dropout_5[0][0]']              \n                                                                                                  \n layer_normalization_4 (LayerNo  (None, 4096, 1536)  3072        ['add_3[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n multihead_attention_2 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_4[0][0]']  \n adAttention)                                                                                     \n                                                                                                  \n dropout_6 (Dropout)            (None, 4096, 1536)   0           ['multihead_attention_2[0][0]']  \n                                                                                                  \n add_4 (Add)                    (None, 4096, 1536)   0           ['add_3[0][0]',                  \n                                                                  'dropout_6[0][0]']              \n                                                                                                  \n layer_normalization_5 (LayerNo  (None, 4096, 1536)  3072        ['add_4[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n dense_4 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_5[0][0]']  \n                                                                                                  \n dropout_7 (Dropout)            (None, 4096, 3072)   0           ['dense_4[0][0]']                \n                                                                                                  \n re_lu_2 (ReLU)                 (None, 4096, 3072)   0           ['dropout_7[0][0]']              \n                                                                                                  \n dense_5 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_2[0][0]']                \n                                                                                                  \n dropout_8 (Dropout)            (None, 4096, 1536)   0           ['dense_5[0][0]']                \n                                                                                                  \n add_5 (Add)                    (None, 4096, 1536)   0           ['add_4[0][0]',                  \n                                                                  'dropout_8[0][0]']              \n                                                                                                  \n layer_normalization_6 (LayerNo  (None, 4096, 1536)  3072        ['add_5[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n multihead_attention_3 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_6[0][0]']  \n adAttention)                                                                                     \n                                                                                                  \n dropout_9 (Dropout)            (None, 4096, 1536)   0           ['multihead_attention_3[0][0]']  \n                                                                                                  \n add_6 (Add)                    (None, 4096, 1536)   0           ['add_5[0][0]',                  \n                                                                  'dropout_9[0][0]']              \n                                                                                                  \n layer_normalization_7 (LayerNo  (None, 4096, 1536)  3072        ['add_6[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n dense_6 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_7[0][0]']  \n                                                                                                  \n dropout_10 (Dropout)           (None, 4096, 3072)   0           ['dense_6[0][0]']                \n                                                                                                  \n re_lu_3 (ReLU)                 (None, 4096, 3072)   0           ['dropout_10[0][0]']             \n                                                                                                  \n dense_7 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_3[0][0]']                \n                                                                                                  \n dropout_11 (Dropout)           (None, 4096, 1536)   0           ['dense_7[0][0]']                \n                                                                                                  \n add_7 (Add)                    (None, 4096, 1536)   0           ['add_6[0][0]',                  \n                                                                  'dropout_11[0][0]']             \n                                                                                                  \n layer_normalization_8 (LayerNo  (None, 4096, 1536)  3072        ['add_7[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n multihead_attention_4 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_8[0][0]']  \n adAttention)                                                                                     \n                                                                                                  \n dropout_12 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_4[0][0]']  \n                                                                                                  \n add_8 (Add)                    (None, 4096, 1536)   0           ['add_7[0][0]',                  \n                                                                  'dropout_12[0][0]']             \n                                                                                                  \n layer_normalization_9 (LayerNo  (None, 4096, 1536)  3072        ['add_8[0][0]']                  \n rmalization)                                                                                     \n                                                                                                  \n dense_8 (Dense)                (None, 4096, 3072)   4721664     ['layer_normalization_9[0][0]']  \n                                                                                                  \n dropout_13 (Dropout)           (None, 4096, 3072)   0           ['dense_8[0][0]']                \n                                                                                                  \n re_lu_4 (ReLU)                 (None, 4096, 3072)   0           ['dropout_13[0][0]']             \n                                                                                                  \n dense_9 (Dense)                (None, 4096, 1536)   4720128     ['re_lu_4[0][0]']                \n                                                                                                  \n dropout_14 (Dropout)           (None, 4096, 1536)   0           ['dense_9[0][0]']                \n                                                                                                  \n add_9 (Add)                    (None, 4096, 1536)   0           ['add_8[0][0]',                  \n                                                                  'dropout_14[0][0]']             \n                                                                                                  \n layer_normalization_10 (LayerN  (None, 4096, 1536)  3072        ['add_9[0][0]']                  \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_5 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_10[0][0]'] \n adAttention)                                                                                     \n                                                                                                  \n dropout_15 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_5[0][0]']  \n                                                                                                  \n add_10 (Add)                   (None, 4096, 1536)   0           ['add_9[0][0]',                  \n                                                                  'dropout_15[0][0]']             \n                                                                                                  \n layer_normalization_11 (LayerN  (None, 4096, 1536)  3072        ['add_10[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_10 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_11[0][0]'] \n                                                                                                  \n dropout_16 (Dropout)           (None, 4096, 3072)   0           ['dense_10[0][0]']               \n                                                                                                  \n re_lu_5 (ReLU)                 (None, 4096, 3072)   0           ['dropout_16[0][0]']             \n                                                                                                  \n dense_11 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_5[0][0]']                \n                                                                                                  \n dropout_17 (Dropout)           (None, 4096, 1536)   0           ['dense_11[0][0]']               \n                                                                                                  \n add_11 (Add)                   (None, 4096, 1536)   0           ['add_10[0][0]',                 \n                                                                  'dropout_17[0][0]']             \n                                                                                                  \n layer_normalization_12 (LayerN  (None, 4096, 1536)  3072        ['add_11[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_6 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_12[0][0]'] \n adAttention)                                                                                     \n                                                                                                  \n dropout_18 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_6[0][0]']  \n                                                                                                  \n add_12 (Add)                   (None, 4096, 1536)   0           ['add_11[0][0]',                 \n                                                                  'dropout_18[0][0]']             \n                                                                                                  \n layer_normalization_13 (LayerN  (None, 4096, 1536)  3072        ['add_12[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_12 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_13[0][0]'] \n                                                                                                  \n dropout_19 (Dropout)           (None, 4096, 3072)   0           ['dense_12[0][0]']               \n                                                                                                  \n re_lu_6 (ReLU)                 (None, 4096, 3072)   0           ['dropout_19[0][0]']             \n                                                                                                  \n dense_13 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_6[0][0]']                \n                                                                                                  \n dropout_20 (Dropout)           (None, 4096, 1536)   0           ['dense_13[0][0]']               \n                                                                                                  \n add_13 (Add)                   (None, 4096, 1536)   0           ['add_12[0][0]',                 \n                                                                  'dropout_20[0][0]']             \n                                                                                                  \n layer_normalization_14 (LayerN  (None, 4096, 1536)  3072        ['add_13[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_7 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_14[0][0]'] \n adAttention)                                                                                     \n                                                                                                  \n dropout_21 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_7[0][0]']  \n                                                                                                  \n add_14 (Add)                   (None, 4096, 1536)   0           ['add_13[0][0]',                 \n                                                                  'dropout_21[0][0]']             \n                                                                                                  \n layer_normalization_15 (LayerN  (None, 4096, 1536)  3072        ['add_14[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_14 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_15[0][0]'] \n                                                                                                  \n dropout_22 (Dropout)           (None, 4096, 3072)   0           ['dense_14[0][0]']               \n                                                                                                  \n re_lu_7 (ReLU)                 (None, 4096, 3072)   0           ['dropout_22[0][0]']             \n                                                                                                  \n dense_15 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_7[0][0]']                \n                                                                                                  \n dropout_23 (Dropout)           (None, 4096, 1536)   0           ['dense_15[0][0]']               \n                                                                                                  \n add_15 (Add)                   (None, 4096, 1536)   0           ['add_14[0][0]',                 \n                                                                  'dropout_23[0][0]']             \n                                                                                                  \n sync_batch_normalization_6 (Sy  (None, 4096, 1536)  6144        ['add_15[0][0]']                 \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_6 (TFOpLambda)      (None, 4096, 1536)   0           ['sync_batch_normalization_6[0][0\n                                                                 ]']                              \n                                                                                                  \n sync_batch_normalization_7 (Sy  (None, 8192, 1536)  6144        ['conv1d_6[0][0]']               \n ncBatchNormalization)                                                                            \n                                                                                                  \n dense_16 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_6[0][0]']           \n                                                                                                  \n tf.nn.gelu_7 (TFOpLambda)      (None, 8192, 1536)   0           ['sync_batch_normalization_7[0][0\n                                                                 ]']                              \n                                                                                                  \n up_sampling1d (UpSampling1D)   (None, 8192, 1536)   0           ['dense_16[0][0]']               \n                                                                                                  \n dense_17 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_7[0][0]']           \n                                                                                                  \n add_16 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d[0][0]',          \n                                                                  'dense_17[0][0]']               \n                                                                                                  \n separable_conv1d (SeparableCon  (None, 8192, 1536)  2365440     ['add_16[0][0]']                 \n v1D)                                                                                             \n                                                                                                  \n sync_batch_normalization_8 (Sy  (None, 8192, 1536)  6144        ['separable_conv1d[0][0]']       \n ncBatchNormalization)                                                                            \n                                                                                                  \n tf.nn.gelu_8 (TFOpLambda)      (None, 8192, 1536)   0           ['sync_batch_normalization_8[0][0\n                                                                 ]']                              \n                                                                                                  \n sync_batch_normalization_9 (Sy  (None, 16384, 1280)  5120       ['conv1d_5[0][0]']               \n ncBatchNormalization)                                                                            \n                                                                                                  \n dense_18 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_8[0][0]']           \n                                                                                                  \n tf.nn.gelu_9 (TFOpLambda)      (None, 16384, 1280)  0           ['sync_batch_normalization_9[0][0\n                                                                 ]']                              \n                                                                                                  \n up_sampling1d_1 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_18[0][0]']               \n                                                                                                  \n dense_19 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_9[0][0]']           \n                                                                                                  \n add_17 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_1[0][0]',        \n                                                                  'dense_19[0][0]']               \n                                                                                                  \n separable_conv1d_1 (SeparableC  (None, 16384, 1536)  2365440    ['add_17[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n cropping1d (Cropping1D)        (None, 16352, 1536)  0           ['separable_conv1d_1[0][0]']     \n                                                                                                  \n sync_batch_normalization_10 (S  (None, 16352, 1536)  6144       ['cropping1d[0][0]']             \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_10 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_10[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_7 (Conv1D)              (None, 16352, 1920)  2951040     ['tf.nn.gelu_10[0][0]']          \n                                                                                                  \n dropout_24 (Dropout)           (None, 16352, 1920)  0           ['conv1d_7[0][0]']               \n                                                                                                  \n tf.nn.gelu_11 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_24[0][0]']             \n                                                                                                  \n dense_20 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_11[0][0]']          \n                                                                                                  \n switch_reverse (SwitchReverse)  (None, 16352, 7611)  0          ['dense_20[0][0]',               \n                                                                  'stochastic_reverse_complement[0\n                                                                 ][1]']                           \n                                                                                                  \n==================================================================================================\nTotal params: 185,917,723\nTrainable params: 185,892,699\nNon-trainable params: 25,024\n__________________________________________________________________________________________________\nNone\nmodel_strides [32, 32]\ntarget_lengths [16352, 16352]\ntarget_crops [16, 16]\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nModel: \"model_6\"\n__________________________________________________________________________________________________\n Layer (type)                   Output Shape         Param #     Connected to                     \n==================================================================================================\n sequence (InputLayer)          [(None, 524288, 4)]  0           []                               \n                                                                                                  \n stochastic_reverse_complement_  ((None, 524288, 4),  0          ['sequence[0][0]']               \n 1 (StochasticReverseComplement   ())                                                             \n )                                                                                                \n                                                                                                  \n stochastic_shift_1 (Stochastic  (None, 524288, 4)   0           ['stochastic_reverse_complement_1\n Shift)                                                          [0][0]']                         \n                                                                                                  \n conv1d_8 (Conv1D)              (None, 524288, 512)  31232       ['stochastic_shift_1[0][0]']     \n                                                                                                  \n max_pooling1d_7 (MaxPooling1D)  (None, 262144, 512)  0          ['conv1d_8[0][0]']               \n                                                                                                  \n sync_batch_normalization_11 (S  (None, 262144, 512)  2048       ['max_pooling1d_7[0][0]']        \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_12 (TFOpLambda)     (None, 262144, 512)  0           ['sync_batch_normalization_11[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_9 (Conv1D)              (None, 262144, 608)  1557088     ['tf.nn.gelu_12[0][0]']          \n                                                                                                  \n max_pooling1d_8 (MaxPooling1D)  (None, 131072, 608)  0          ['conv1d_9[0][0]']               \n                                                                                                  \n sync_batch_normalization_12 (S  (None, 131072, 608)  2432       ['max_pooling1d_8[0][0]']        \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_13 (TFOpLambda)     (None, 131072, 608)  0           ['sync_batch_normalization_12[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_10 (Conv1D)             (None, 131072, 736)  2238176     ['tf.nn.gelu_13[0][0]']          \n                                                                                                  \n max_pooling1d_9 (MaxPooling1D)  (None, 65536, 736)  0           ['conv1d_10[0][0]']              \n                                                                                                  \n sync_batch_normalization_13 (S  (None, 65536, 736)  2944        ['max_pooling1d_9[0][0]']        \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_14 (TFOpLambda)     (None, 65536, 736)   0           ['sync_batch_normalization_13[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_11 (Conv1D)             (None, 65536, 896)   3298176     ['tf.nn.gelu_14[0][0]']          \n                                                                                                  \n max_pooling1d_10 (MaxPooling1D  (None, 32768, 896)  0           ['conv1d_11[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_14 (S  (None, 32768, 896)  3584        ['max_pooling1d_10[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_15 (TFOpLambda)     (None, 32768, 896)   0           ['sync_batch_normalization_14[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_12 (Conv1D)             (None, 32768, 1056)  4731936     ['tf.nn.gelu_15[0][0]']          \n                                                                                                  \n max_pooling1d_11 (MaxPooling1D  (None, 16384, 1056)  0          ['conv1d_12[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_15 (S  (None, 16384, 1056)  4224       ['max_pooling1d_11[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_16 (TFOpLambda)     (None, 16384, 1056)  0           ['sync_batch_normalization_15[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_13 (Conv1D)             (None, 16384, 1280)  6759680     ['tf.nn.gelu_16[0][0]']          \n                                                                                                  \n max_pooling1d_12 (MaxPooling1D  (None, 8192, 1280)  0           ['conv1d_13[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_16 (S  (None, 8192, 1280)  5120        ['max_pooling1d_12[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_17 (TFOpLambda)     (None, 8192, 1280)   0           ['sync_batch_normalization_16[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_14 (Conv1D)             (None, 8192, 1536)   9831936     ['tf.nn.gelu_17[0][0]']          \n                                                                                                  \n max_pooling1d_13 (MaxPooling1D  (None, 4096, 1536)  0           ['conv1d_14[0][0]']              \n )                                                                                                \n                                                                                                  \n layer_normalization_16 (LayerN  (None, 4096, 1536)  3072        ['max_pooling1d_13[0][0]']       \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_8 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_16[0][0]'] \n adAttention)                                                                                     \n                                                                                                  \n dropout_25 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_8[0][0]']  \n                                                                                                  \n add_18 (Add)                   (None, 4096, 1536)   0           ['max_pooling1d_13[0][0]',       \n                                                                  'dropout_25[0][0]']             \n                                                                                                  \n layer_normalization_17 (LayerN  (None, 4096, 1536)  3072        ['add_18[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_22 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_17[0][0]'] \n                                                                                                  \n dropout_26 (Dropout)           (None, 4096, 3072)   0           ['dense_22[0][0]']               \n                                                                                                  \n re_lu_8 (ReLU)                 (None, 4096, 3072)   0           ['dropout_26[0][0]']             \n                                                                                                  \n dense_23 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_8[0][0]']                \n                                                                                                  \n dropout_27 (Dropout)           (None, 4096, 1536)   0           ['dense_23[0][0]']               \n                                                                                                  \n add_19 (Add)                   (None, 4096, 1536)   0           ['add_18[0][0]',                 \n                                                                  'dropout_27[0][0]']             \n                                                                                                  \n layer_normalization_18 (LayerN  (None, 4096, 1536)  3072        ['add_19[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_9 (Multihe  (None, 4096, 1536)  6310400     ['layer_normalization_18[0][0]'] \n adAttention)                                                                                     \n                                                                                                  \n dropout_28 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_9[0][0]']  \n                                                                                                  \n add_20 (Add)                   (None, 4096, 1536)   0           ['add_19[0][0]',                 \n                                                                  'dropout_28[0][0]']             \n                                                                                                  \n layer_normalization_19 (LayerN  (None, 4096, 1536)  3072        ['add_20[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_24 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_19[0][0]'] \n                                                                                                  \n dropout_29 (Dropout)           (None, 4096, 3072)   0           ['dense_24[0][0]']               \n                                                                                                  \n re_lu_9 (ReLU)                 (None, 4096, 3072)   0           ['dropout_29[0][0]']             \n                                                                                                  \n dense_25 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_9[0][0]']                \n                                                                                                  \n dropout_30 (Dropout)           (None, 4096, 1536)   0           ['dense_25[0][0]']               \n                                                                                                  \n add_21 (Add)                   (None, 4096, 1536)   0           ['add_20[0][0]',                 \n                                                                  'dropout_30[0][0]']             \n                                                                                                  \n layer_normalization_20 (LayerN  (None, 4096, 1536)  3072        ['add_21[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_10 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_20[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_31 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_10[0][0]'] \n                                                                                                  \n add_22 (Add)                   (None, 4096, 1536)   0           ['add_21[0][0]',                 \n                                                                  'dropout_31[0][0]']             \n                                                                                                  \n layer_normalization_21 (LayerN  (None, 4096, 1536)  3072        ['add_22[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_26 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_21[0][0]'] \n                                                                                                  \n dropout_32 (Dropout)           (None, 4096, 3072)   0           ['dense_26[0][0]']               \n                                                                                                  \n re_lu_10 (ReLU)                (None, 4096, 3072)   0           ['dropout_32[0][0]']             \n                                                                                                  \n dense_27 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_10[0][0]']               \n                                                                                                  \n dropout_33 (Dropout)           (None, 4096, 1536)   0           ['dense_27[0][0]']               \n                                                                                                  \n add_23 (Add)                   (None, 4096, 1536)   0           ['add_22[0][0]',                 \n                                                                  'dropout_33[0][0]']             \n                                                                                                  \n layer_normalization_22 (LayerN  (None, 4096, 1536)  3072        ['add_23[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_11 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_22[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_34 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_11[0][0]'] \n                                                                                                  \n add_24 (Add)                   (None, 4096, 1536)   0           ['add_23[0][0]',                 \n                                                                  'dropout_34[0][0]']             \n                                                                                                  \n layer_normalization_23 (LayerN  (None, 4096, 1536)  3072        ['add_24[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_28 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_23[0][0]'] \n                                                                                                  \n dropout_35 (Dropout)           (None, 4096, 3072)   0           ['dense_28[0][0]']               \n                                                                                                  \n re_lu_11 (ReLU)                (None, 4096, 3072)   0           ['dropout_35[0][0]']             \n                                                                                                  \n dense_29 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_11[0][0]']               \n                                                                                                  \n dropout_36 (Dropout)           (None, 4096, 1536)   0           ['dense_29[0][0]']               \n                                                                                                  \n add_25 (Add)                   (None, 4096, 1536)   0           ['add_24[0][0]',                 \n                                                                  'dropout_36[0][0]']             \n                                                                                                  \n layer_normalization_24 (LayerN  (None, 4096, 1536)  3072        ['add_25[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_12 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_24[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_37 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_12[0][0]'] \n                                                                                                  \n add_26 (Add)                   (None, 4096, 1536)   0           ['add_25[0][0]',                 \n                                                                  'dropout_37[0][0]']             \n                                                                                                  \n layer_normalization_25 (LayerN  (None, 4096, 1536)  3072        ['add_26[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_30 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_25[0][0]'] \n                                                                                                  \n dropout_38 (Dropout)           (None, 4096, 3072)   0           ['dense_30[0][0]']               \n                                                                                                  \n re_lu_12 (ReLU)                (None, 4096, 3072)   0           ['dropout_38[0][0]']             \n                                                                                                  \n dense_31 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_12[0][0]']               \n                                                                                                  \n dropout_39 (Dropout)           (None, 4096, 1536)   0           ['dense_31[0][0]']               \n                                                                                                  \n add_27 (Add)                   (None, 4096, 1536)   0           ['add_26[0][0]',                 \n                                                                  'dropout_39[0][0]']             \n                                                                                                  \n layer_normalization_26 (LayerN  (None, 4096, 1536)  3072        ['add_27[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_13 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_26[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_40 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_13[0][0]'] \n                                                                                                  \n add_28 (Add)                   (None, 4096, 1536)   0           ['add_27[0][0]',                 \n                                                                  'dropout_40[0][0]']             \n                                                                                                  \n layer_normalization_27 (LayerN  (None, 4096, 1536)  3072        ['add_28[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_32 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_27[0][0]'] \n                                                                                                  \n dropout_41 (Dropout)           (None, 4096, 3072)   0           ['dense_32[0][0]']               \n                                                                                                  \n re_lu_13 (ReLU)                (None, 4096, 3072)   0           ['dropout_41[0][0]']             \n                                                                                                  \n dense_33 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_13[0][0]']               \n                                                                                                  \n dropout_42 (Dropout)           (None, 4096, 1536)   0           ['dense_33[0][0]']               \n                                                                                                  \n add_29 (Add)                   (None, 4096, 1536)   0           ['add_28[0][0]',                 \n                                                                  'dropout_42[0][0]']             \n                                                                                                  \n layer_normalization_28 (LayerN  (None, 4096, 1536)  3072        ['add_29[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_14 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_28[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_43 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_14[0][0]'] \n                                                                                                  \n add_30 (Add)                   (None, 4096, 1536)   0           ['add_29[0][0]',                 \n                                                                  'dropout_43[0][0]']             \n                                                                                                  \n layer_normalization_29 (LayerN  (None, 4096, 1536)  3072        ['add_30[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_34 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_29[0][0]'] \n                                                                                                  \n dropout_44 (Dropout)           (None, 4096, 3072)   0           ['dense_34[0][0]']               \n                                                                                                  \n re_lu_14 (ReLU)                (None, 4096, 3072)   0           ['dropout_44[0][0]']             \n                                                                                                  \n dense_35 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_14[0][0]']               \n                                                                                                  \n dropout_45 (Dropout)           (None, 4096, 1536)   0           ['dense_35[0][0]']               \n                                                                                                  \n add_31 (Add)                   (None, 4096, 1536)   0           ['add_30[0][0]',                 \n                                                                  'dropout_45[0][0]']             \n                                                                                                  \n layer_normalization_30 (LayerN  (None, 4096, 1536)  3072        ['add_31[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_15 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_30[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_46 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_15[0][0]'] \n                                                                                                  \n add_32 (Add)                   (None, 4096, 1536)   0           ['add_31[0][0]',                 \n                                                                  'dropout_46[0][0]']             \n                                                                                                  \n layer_normalization_31 (LayerN  (None, 4096, 1536)  3072        ['add_32[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_36 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_31[0][0]'] \n                                                                                                  \n dropout_47 (Dropout)           (None, 4096, 3072)   0           ['dense_36[0][0]']               \n                                                                                                  \n re_lu_15 (ReLU)                (None, 4096, 3072)   0           ['dropout_47[0][0]']             \n                                                                                                  \n dense_37 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_15[0][0]']               \n                                                                                                  \n dropout_48 (Dropout)           (None, 4096, 1536)   0           ['dense_37[0][0]']               \n                                                                                                  \n add_33 (Add)                   (None, 4096, 1536)   0           ['add_32[0][0]',                 \n                                                                  'dropout_48[0][0]']             \n                                                                                                  \n sync_batch_normalization_17 (S  (None, 4096, 1536)  6144        ['add_33[0][0]']                 \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_18 (TFOpLambda)     (None, 4096, 1536)   0           ['sync_batch_normalization_17[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_18 (S  (None, 8192, 1536)  6144        ['conv1d_14[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_38 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_18[0][0]']          \n                                                                                                  \n tf.nn.gelu_19 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_18[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_2 (UpSampling1D)  (None, 8192, 1536)  0           ['dense_38[0][0]']               \n                                                                                                  \n dense_39 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_19[0][0]']          \n                                                                                                  \n add_34 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d_2[0][0]',        \n                                                                  'dense_39[0][0]']               \n                                                                                                  \n separable_conv1d_2 (SeparableC  (None, 8192, 1536)  2365440     ['add_34[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n sync_batch_normalization_19 (S  (None, 8192, 1536)  6144        ['separable_conv1d_2[0][0]']     \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_20 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_19[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_20 (S  (None, 16384, 1280)  5120       ['conv1d_13[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_40 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_20[0][0]']          \n                                                                                                  \n tf.nn.gelu_21 (TFOpLambda)     (None, 16384, 1280)  0           ['sync_batch_normalization_20[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_3 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_40[0][0]']               \n                                                                                                  \n dense_41 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_21[0][0]']          \n                                                                                                  \n add_35 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_3[0][0]',        \n                                                                  'dense_41[0][0]']               \n                                                                                                  \n separable_conv1d_3 (SeparableC  (None, 16384, 1536)  2365440    ['add_35[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n cropping1d_1 (Cropping1D)      (None, 16352, 1536)  0           ['separable_conv1d_3[0][0]']     \n                                                                                                  \n sync_batch_normalization_21 (S  (None, 16352, 1536)  6144       ['cropping1d_1[0][0]']           \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_22 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_21[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_15 (Conv1D)             (None, 16352, 1920)  2951040     ['tf.nn.gelu_22[0][0]']          \n                                                                                                  \n dropout_49 (Dropout)           (None, 16352, 1920)  0           ['conv1d_15[0][0]']              \n                                                                                                  \n tf.nn.gelu_23 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_49[0][0]']             \n                                                                                                  \n dense_42 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_23[0][0]']          \n                                                                                                  \n switch_reverse_4 (SwitchRevers  (None, 16352, 7611)  0          ['dense_42[0][0]',               \n e)                                                               'stochastic_reverse_complement_1\n                                                                 [0][1]']                         \n                                                                                                  \n==================================================================================================\nTotal params: 185,917,723\nTrainable params: 185,892,699\nNon-trainable params: 25,024\n__________________________________________________________________________________________________\nNone\nmodel_strides [32, 32]\ntarget_lengths [16352, 16352]\ntarget_crops [16, 16]\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nModel: \"model_11\"\n__________________________________________________________________________________________________\n Layer (type)                   Output Shape         Param #     Connected to                     \n==================================================================================================\n sequence (InputLayer)          [(None, 524288, 4)]  0           []                               \n                                                                                                  \n stochastic_reverse_complement_  ((None, 524288, 4),  0          ['sequence[0][0]']               \n 2 (StochasticReverseComplement   ())                                                             \n )                                                                                                \n                                                                                                  \n stochastic_shift_2 (Stochastic  (None, 524288, 4)   0           ['stochastic_reverse_complement_2\n Shift)                                                          [0][0]']                         \n                                                                                                  \n conv1d_16 (Conv1D)             (None, 524288, 512)  31232       ['stochastic_shift_2[0][0]']     \n                                                                                                  \n max_pooling1d_14 (MaxPooling1D  (None, 262144, 512)  0          ['conv1d_16[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_22 (S  (None, 262144, 512)  2048       ['max_pooling1d_14[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_24 (TFOpLambda)     (None, 262144, 512)  0           ['sync_batch_normalization_22[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_17 (Conv1D)             (None, 262144, 608)  1557088     ['tf.nn.gelu_24[0][0]']          \n                                                                                                  \n max_pooling1d_15 (MaxPooling1D  (None, 131072, 608)  0          ['conv1d_17[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_23 (S  (None, 131072, 608)  2432       ['max_pooling1d_15[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_25 (TFOpLambda)     (None, 131072, 608)  0           ['sync_batch_normalization_23[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_18 (Conv1D)             (None, 131072, 736)  2238176     ['tf.nn.gelu_25[0][0]']          \n                                                                                                  \n max_pooling1d_16 (MaxPooling1D  (None, 65536, 736)  0           ['conv1d_18[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_24 (S  (None, 65536, 736)  2944        ['max_pooling1d_16[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_26 (TFOpLambda)     (None, 65536, 736)   0           ['sync_batch_normalization_24[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_19 (Conv1D)             (None, 65536, 896)   3298176     ['tf.nn.gelu_26[0][0]']          \n                                                                                                  \n max_pooling1d_17 (MaxPooling1D  (None, 32768, 896)  0           ['conv1d_19[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_25 (S  (None, 32768, 896)  3584        ['max_pooling1d_17[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_27 (TFOpLambda)     (None, 32768, 896)   0           ['sync_batch_normalization_25[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_20 (Conv1D)             (None, 32768, 1056)  4731936     ['tf.nn.gelu_27[0][0]']          \n                                                                                                  \n max_pooling1d_18 (MaxPooling1D  (None, 16384, 1056)  0          ['conv1d_20[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_26 (S  (None, 16384, 1056)  4224       ['max_pooling1d_18[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_28 (TFOpLambda)     (None, 16384, 1056)  0           ['sync_batch_normalization_26[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_21 (Conv1D)             (None, 16384, 1280)  6759680     ['tf.nn.gelu_28[0][0]']          \n                                                                                                  \n max_pooling1d_19 (MaxPooling1D  (None, 8192, 1280)  0           ['conv1d_21[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_27 (S  (None, 8192, 1280)  5120        ['max_pooling1d_19[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_29 (TFOpLambda)     (None, 8192, 1280)   0           ['sync_batch_normalization_27[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_22 (Conv1D)             (None, 8192, 1536)   9831936     ['tf.nn.gelu_29[0][0]']          \n                                                                                                  \n max_pooling1d_20 (MaxPooling1D  (None, 4096, 1536)  0           ['conv1d_22[0][0]']              \n )                                                                                                \n                                                                                                  \n layer_normalization_32 (LayerN  (None, 4096, 1536)  3072        ['max_pooling1d_20[0][0]']       \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_16 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_32[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_50 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_16[0][0]'] \n                                                                                                  \n add_36 (Add)                   (None, 4096, 1536)   0           ['max_pooling1d_20[0][0]',       \n                                                                  'dropout_50[0][0]']             \n                                                                                                  \n layer_normalization_33 (LayerN  (None, 4096, 1536)  3072        ['add_36[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_44 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_33[0][0]'] \n                                                                                                  \n dropout_51 (Dropout)           (None, 4096, 3072)   0           ['dense_44[0][0]']               \n                                                                                                  \n re_lu_16 (ReLU)                (None, 4096, 3072)   0           ['dropout_51[0][0]']             \n                                                                                                  \n dense_45 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_16[0][0]']               \n                                                                                                  \n dropout_52 (Dropout)           (None, 4096, 1536)   0           ['dense_45[0][0]']               \n                                                                                                  \n add_37 (Add)                   (None, 4096, 1536)   0           ['add_36[0][0]',                 \n                                                                  'dropout_52[0][0]']             \n                                                                                                  \n layer_normalization_34 (LayerN  (None, 4096, 1536)  3072        ['add_37[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_17 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_34[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_53 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_17[0][0]'] \n                                                                                                  \n add_38 (Add)                   (None, 4096, 1536)   0           ['add_37[0][0]',                 \n                                                                  'dropout_53[0][0]']             \n                                                                                                  \n layer_normalization_35 (LayerN  (None, 4096, 1536)  3072        ['add_38[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_46 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_35[0][0]'] \n                                                                                                  \n dropout_54 (Dropout)           (None, 4096, 3072)   0           ['dense_46[0][0]']               \n                                                                                                  \n re_lu_17 (ReLU)                (None, 4096, 3072)   0           ['dropout_54[0][0]']             \n                                                                                                  \n dense_47 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_17[0][0]']               \n                                                                                                  \n dropout_55 (Dropout)           (None, 4096, 1536)   0           ['dense_47[0][0]']               \n                                                                                                  \n add_39 (Add)                   (None, 4096, 1536)   0           ['add_38[0][0]',                 \n                                                                  'dropout_55[0][0]']             \n                                                                                                  \n layer_normalization_36 (LayerN  (None, 4096, 1536)  3072        ['add_39[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_18 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_36[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_56 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_18[0][0]'] \n                                                                                                  \n add_40 (Add)                   (None, 4096, 1536)   0           ['add_39[0][0]',                 \n                                                                  'dropout_56[0][0]']             \n                                                                                                  \n layer_normalization_37 (LayerN  (None, 4096, 1536)  3072        ['add_40[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_48 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_37[0][0]'] \n                                                                                                  \n dropout_57 (Dropout)           (None, 4096, 3072)   0           ['dense_48[0][0]']               \n                                                                                                  \n re_lu_18 (ReLU)                (None, 4096, 3072)   0           ['dropout_57[0][0]']             \n                                                                                                  \n dense_49 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_18[0][0]']               \n                                                                                                  \n dropout_58 (Dropout)           (None, 4096, 1536)   0           ['dense_49[0][0]']               \n                                                                                                  \n add_41 (Add)                   (None, 4096, 1536)   0           ['add_40[0][0]',                 \n                                                                  'dropout_58[0][0]']             \n                                                                                                  \n layer_normalization_38 (LayerN  (None, 4096, 1536)  3072        ['add_41[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_19 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_38[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_59 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_19[0][0]'] \n                                                                                                  \n add_42 (Add)                   (None, 4096, 1536)   0           ['add_41[0][0]',                 \n                                                                  'dropout_59[0][0]']             \n                                                                                                  \n layer_normalization_39 (LayerN  (None, 4096, 1536)  3072        ['add_42[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_50 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_39[0][0]'] \n                                                                                                  \n dropout_60 (Dropout)           (None, 4096, 3072)   0           ['dense_50[0][0]']               \n                                                                                                  \n re_lu_19 (ReLU)                (None, 4096, 3072)   0           ['dropout_60[0][0]']             \n                                                                                                  \n dense_51 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_19[0][0]']               \n                                                                                                  \n dropout_61 (Dropout)           (None, 4096, 1536)   0           ['dense_51[0][0]']               \n                                                                                                  \n add_43 (Add)                   (None, 4096, 1536)   0           ['add_42[0][0]',                 \n                                                                  'dropout_61[0][0]']             \n                                                                                                  \n layer_normalization_40 (LayerN  (None, 4096, 1536)  3072        ['add_43[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_20 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_40[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_62 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_20[0][0]'] \n                                                                                                  \n add_44 (Add)                   (None, 4096, 1536)   0           ['add_43[0][0]',                 \n                                                                  'dropout_62[0][0]']             \n                                                                                                  \n layer_normalization_41 (LayerN  (None, 4096, 1536)  3072        ['add_44[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_52 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_41[0][0]'] \n                                                                                                  \n dropout_63 (Dropout)           (None, 4096, 3072)   0           ['dense_52[0][0]']               \n                                                                                                  \n re_lu_20 (ReLU)                (None, 4096, 3072)   0           ['dropout_63[0][0]']             \n                                                                                                  \n dense_53 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_20[0][0]']               \n                                                                                                  \n dropout_64 (Dropout)           (None, 4096, 1536)   0           ['dense_53[0][0]']               \n                                                                                                  \n add_45 (Add)                   (None, 4096, 1536)   0           ['add_44[0][0]',                 \n                                                                  'dropout_64[0][0]']             \n                                                                                                  \n layer_normalization_42 (LayerN  (None, 4096, 1536)  3072        ['add_45[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_21 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_42[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_65 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_21[0][0]'] \n                                                                                                  \n add_46 (Add)                   (None, 4096, 1536)   0           ['add_45[0][0]',                 \n                                                                  'dropout_65[0][0]']             \n                                                                                                  \n layer_normalization_43 (LayerN  (None, 4096, 1536)  3072        ['add_46[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_54 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_43[0][0]'] \n                                                                                                  \n dropout_66 (Dropout)           (None, 4096, 3072)   0           ['dense_54[0][0]']               \n                                                                                                  \n re_lu_21 (ReLU)                (None, 4096, 3072)   0           ['dropout_66[0][0]']             \n                                                                                                  \n dense_55 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_21[0][0]']               \n                                                                                                  \n dropout_67 (Dropout)           (None, 4096, 1536)   0           ['dense_55[0][0]']               \n                                                                                                  \n add_47 (Add)                   (None, 4096, 1536)   0           ['add_46[0][0]',                 \n                                                                  'dropout_67[0][0]']             \n                                                                                                  \n layer_normalization_44 (LayerN  (None, 4096, 1536)  3072        ['add_47[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_22 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_44[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_68 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_22[0][0]'] \n                                                                                                  \n add_48 (Add)                   (None, 4096, 1536)   0           ['add_47[0][0]',                 \n                                                                  'dropout_68[0][0]']             \n                                                                                                  \n layer_normalization_45 (LayerN  (None, 4096, 1536)  3072        ['add_48[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_56 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_45[0][0]'] \n                                                                                                  \n dropout_69 (Dropout)           (None, 4096, 3072)   0           ['dense_56[0][0]']               \n                                                                                                  \n re_lu_22 (ReLU)                (None, 4096, 3072)   0           ['dropout_69[0][0]']             \n                                                                                                  \n dense_57 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_22[0][0]']               \n                                                                                                  \n dropout_70 (Dropout)           (None, 4096, 1536)   0           ['dense_57[0][0]']               \n                                                                                                  \n add_49 (Add)                   (None, 4096, 1536)   0           ['add_48[0][0]',                 \n                                                                  'dropout_70[0][0]']             \n                                                                                                  \n layer_normalization_46 (LayerN  (None, 4096, 1536)  3072        ['add_49[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_23 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_46[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_71 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_23[0][0]'] \n                                                                                                  \n add_50 (Add)                   (None, 4096, 1536)   0           ['add_49[0][0]',                 \n                                                                  'dropout_71[0][0]']             \n                                                                                                  \n layer_normalization_47 (LayerN  (None, 4096, 1536)  3072        ['add_50[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_58 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_47[0][0]'] \n                                                                                                  \n dropout_72 (Dropout)           (None, 4096, 3072)   0           ['dense_58[0][0]']               \n                                                                                                  \n re_lu_23 (ReLU)                (None, 4096, 3072)   0           ['dropout_72[0][0]']             \n                                                                                                  \n dense_59 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_23[0][0]']               \n                                                                                                  \n dropout_73 (Dropout)           (None, 4096, 1536)   0           ['dense_59[0][0]']               \n                                                                                                  \n add_51 (Add)                   (None, 4096, 1536)   0           ['add_50[0][0]',                 \n                                                                  'dropout_73[0][0]']             \n                                                                                                  \n sync_batch_normalization_28 (S  (None, 4096, 1536)  6144        ['add_51[0][0]']                 \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_30 (TFOpLambda)     (None, 4096, 1536)   0           ['sync_batch_normalization_28[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_29 (S  (None, 8192, 1536)  6144        ['conv1d_22[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_60 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_30[0][0]']          \n                                                                                                  \n tf.nn.gelu_31 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_29[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_4 (UpSampling1D)  (None, 8192, 1536)  0           ['dense_60[0][0]']               \n                                                                                                  \n dense_61 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_31[0][0]']          \n                                                                                                  \n add_52 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d_4[0][0]',        \n                                                                  'dense_61[0][0]']               \n                                                                                                  \n separable_conv1d_4 (SeparableC  (None, 8192, 1536)  2365440     ['add_52[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n sync_batch_normalization_30 (S  (None, 8192, 1536)  6144        ['separable_conv1d_4[0][0]']     \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_32 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_30[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_31 (S  (None, 16384, 1280)  5120       ['conv1d_21[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_62 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_32[0][0]']          \n                                                                                                  \n tf.nn.gelu_33 (TFOpLambda)     (None, 16384, 1280)  0           ['sync_batch_normalization_31[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_5 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_62[0][0]']               \n                                                                                                  \n dense_63 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_33[0][0]']          \n                                                                                                  \n add_53 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_5[0][0]',        \n                                                                  'dense_63[0][0]']               \n                                                                                                  \n separable_conv1d_5 (SeparableC  (None, 16384, 1536)  2365440    ['add_53[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n cropping1d_2 (Cropping1D)      (None, 16352, 1536)  0           ['separable_conv1d_5[0][0]']     \n                                                                                                  \n sync_batch_normalization_32 (S  (None, 16352, 1536)  6144       ['cropping1d_2[0][0]']           \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_34 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_32[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_23 (Conv1D)             (None, 16352, 1920)  2951040     ['tf.nn.gelu_34[0][0]']          \n                                                                                                  \n dropout_74 (Dropout)           (None, 16352, 1920)  0           ['conv1d_23[0][0]']              \n                                                                                                  \n tf.nn.gelu_35 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_74[0][0]']             \n                                                                                                  \n dense_64 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_35[0][0]']          \n                                                                                                  \n switch_reverse_8 (SwitchRevers  (None, 16352, 7611)  0          ['dense_64[0][0]',               \n e)                                                               'stochastic_reverse_complement_2\n                                                                 [0][1]']                         \n                                                                                                  \n==================================================================================================\nTotal params: 185,917,723\nTrainable params: 185,892,699\nNon-trainable params: 25,024\n__________________________________________________________________________________________________\nNone\nmodel_strides [32, 32]\ntarget_lengths [16352, 16352]\ntarget_crops [16, 16]\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nWARNING:tensorflow:`tf.keras.layers.experimental.SyncBatchNormalization` endpoint is deprecated and will be removed in a future release. Please use `tf.keras.layers.BatchNormalization` with parameter `synchronized` set to True.\nModel: \"model_16\"\n__________________________________________________________________________________________________\n Layer (type)                   Output Shape         Param #     Connected to                     \n==================================================================================================\n sequence (InputLayer)          [(None, 524288, 4)]  0           []                               \n                                                                                                  \n stochastic_reverse_complement_  ((None, 524288, 4),  0          ['sequence[0][0]']               \n 3 (StochasticReverseComplement   ())                                                             \n )                                                                                                \n                                                                                                  \n stochastic_shift_3 (Stochastic  (None, 524288, 4)   0           ['stochastic_reverse_complement_3\n Shift)                                                          [0][0]']                         \n                                                                                                  \n conv1d_24 (Conv1D)             (None, 524288, 512)  31232       ['stochastic_shift_3[0][0]']     \n                                                                                                  \n max_pooling1d_21 (MaxPooling1D  (None, 262144, 512)  0          ['conv1d_24[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_33 (S  (None, 262144, 512)  2048       ['max_pooling1d_21[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_36 (TFOpLambda)     (None, 262144, 512)  0           ['sync_batch_normalization_33[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_25 (Conv1D)             (None, 262144, 608)  1557088     ['tf.nn.gelu_36[0][0]']          \n                                                                                                  \n max_pooling1d_22 (MaxPooling1D  (None, 131072, 608)  0          ['conv1d_25[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_34 (S  (None, 131072, 608)  2432       ['max_pooling1d_22[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_37 (TFOpLambda)     (None, 131072, 608)  0           ['sync_batch_normalization_34[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_26 (Conv1D)             (None, 131072, 736)  2238176     ['tf.nn.gelu_37[0][0]']          \n                                                                                                  \n max_pooling1d_23 (MaxPooling1D  (None, 65536, 736)  0           ['conv1d_26[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_35 (S  (None, 65536, 736)  2944        ['max_pooling1d_23[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_38 (TFOpLambda)     (None, 65536, 736)   0           ['sync_batch_normalization_35[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_27 (Conv1D)             (None, 65536, 896)   3298176     ['tf.nn.gelu_38[0][0]']          \n                                                                                                  \n max_pooling1d_24 (MaxPooling1D  (None, 32768, 896)  0           ['conv1d_27[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_36 (S  (None, 32768, 896)  3584        ['max_pooling1d_24[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_39 (TFOpLambda)     (None, 32768, 896)   0           ['sync_batch_normalization_36[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_28 (Conv1D)             (None, 32768, 1056)  4731936     ['tf.nn.gelu_39[0][0]']          \n                                                                                                  \n max_pooling1d_25 (MaxPooling1D  (None, 16384, 1056)  0          ['conv1d_28[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_37 (S  (None, 16384, 1056)  4224       ['max_pooling1d_25[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_40 (TFOpLambda)     (None, 16384, 1056)  0           ['sync_batch_normalization_37[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_29 (Conv1D)             (None, 16384, 1280)  6759680     ['tf.nn.gelu_40[0][0]']          \n                                                                                                  \n max_pooling1d_26 (MaxPooling1D  (None, 8192, 1280)  0           ['conv1d_29[0][0]']              \n )                                                                                                \n                                                                                                  \n sync_batch_normalization_38 (S  (None, 8192, 1280)  5120        ['max_pooling1d_26[0][0]']       \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_41 (TFOpLambda)     (None, 8192, 1280)   0           ['sync_batch_normalization_38[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_30 (Conv1D)             (None, 8192, 1536)   9831936     ['tf.nn.gelu_41[0][0]']          \n                                                                                                  \n max_pooling1d_27 (MaxPooling1D  (None, 4096, 1536)  0           ['conv1d_30[0][0]']              \n )                                                                                                \n                                                                                                  \n layer_normalization_48 (LayerN  (None, 4096, 1536)  3072        ['max_pooling1d_27[0][0]']       \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_24 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_48[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_75 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_24[0][0]'] \n                                                                                                  \n add_54 (Add)                   (None, 4096, 1536)   0           ['max_pooling1d_27[0][0]',       \n                                                                  'dropout_75[0][0]']             \n                                                                                                  \n layer_normalization_49 (LayerN  (None, 4096, 1536)  3072        ['add_54[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_66 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_49[0][0]'] \n                                                                                                  \n dropout_76 (Dropout)           (None, 4096, 3072)   0           ['dense_66[0][0]']               \n                                                                                                  \n re_lu_24 (ReLU)                (None, 4096, 3072)   0           ['dropout_76[0][0]']             \n                                                                                                  \n dense_67 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_24[0][0]']               \n                                                                                                  \n dropout_77 (Dropout)           (None, 4096, 1536)   0           ['dense_67[0][0]']               \n                                                                                                  \n add_55 (Add)                   (None, 4096, 1536)   0           ['add_54[0][0]',                 \n                                                                  'dropout_77[0][0]']             \n                                                                                                  \n layer_normalization_50 (LayerN  (None, 4096, 1536)  3072        ['add_55[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_25 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_50[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_78 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_25[0][0]'] \n                                                                                                  \n add_56 (Add)                   (None, 4096, 1536)   0           ['add_55[0][0]',                 \n                                                                  'dropout_78[0][0]']             \n                                                                                                  \n layer_normalization_51 (LayerN  (None, 4096, 1536)  3072        ['add_56[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_68 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_51[0][0]'] \n                                                                                                  \n dropout_79 (Dropout)           (None, 4096, 3072)   0           ['dense_68[0][0]']               \n                                                                                                  \n re_lu_25 (ReLU)                (None, 4096, 3072)   0           ['dropout_79[0][0]']             \n                                                                                                  \n dense_69 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_25[0][0]']               \n                                                                                                  \n dropout_80 (Dropout)           (None, 4096, 1536)   0           ['dense_69[0][0]']               \n                                                                                                  \n add_57 (Add)                   (None, 4096, 1536)   0           ['add_56[0][0]',                 \n                                                                  'dropout_80[0][0]']             \n                                                                                                  \n layer_normalization_52 (LayerN  (None, 4096, 1536)  3072        ['add_57[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_26 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_52[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_81 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_26[0][0]'] \n                                                                                                  \n add_58 (Add)                   (None, 4096, 1536)   0           ['add_57[0][0]',                 \n                                                                  'dropout_81[0][0]']             \n                                                                                                  \n layer_normalization_53 (LayerN  (None, 4096, 1536)  3072        ['add_58[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_70 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_53[0][0]'] \n                                                                                                  \n dropout_82 (Dropout)           (None, 4096, 3072)   0           ['dense_70[0][0]']               \n                                                                                                  \n re_lu_26 (ReLU)                (None, 4096, 3072)   0           ['dropout_82[0][0]']             \n                                                                                                  \n dense_71 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_26[0][0]']               \n                                                                                                  \n dropout_83 (Dropout)           (None, 4096, 1536)   0           ['dense_71[0][0]']               \n                                                                                                  \n add_59 (Add)                   (None, 4096, 1536)   0           ['add_58[0][0]',                 \n                                                                  'dropout_83[0][0]']             \n                                                                                                  \n layer_normalization_54 (LayerN  (None, 4096, 1536)  3072        ['add_59[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_27 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_54[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_84 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_27[0][0]'] \n                                                                                                  \n add_60 (Add)                   (None, 4096, 1536)   0           ['add_59[0][0]',                 \n                                                                  'dropout_84[0][0]']             \n                                                                                                  \n layer_normalization_55 (LayerN  (None, 4096, 1536)  3072        ['add_60[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_72 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_55[0][0]'] \n                                                                                                  \n dropout_85 (Dropout)           (None, 4096, 3072)   0           ['dense_72[0][0]']               \n                                                                                                  \n re_lu_27 (ReLU)                (None, 4096, 3072)   0           ['dropout_85[0][0]']             \n                                                                                                  \n dense_73 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_27[0][0]']               \n                                                                                                  \n dropout_86 (Dropout)           (None, 4096, 1536)   0           ['dense_73[0][0]']               \n                                                                                                  \n add_61 (Add)                   (None, 4096, 1536)   0           ['add_60[0][0]',                 \n                                                                  'dropout_86[0][0]']             \n                                                                                                  \n layer_normalization_56 (LayerN  (None, 4096, 1536)  3072        ['add_61[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_28 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_56[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_87 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_28[0][0]'] \n                                                                                                  \n add_62 (Add)                   (None, 4096, 1536)   0           ['add_61[0][0]',                 \n                                                                  'dropout_87[0][0]']             \n                                                                                                  \n layer_normalization_57 (LayerN  (None, 4096, 1536)  3072        ['add_62[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_74 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_57[0][0]'] \n                                                                                                  \n dropout_88 (Dropout)           (None, 4096, 3072)   0           ['dense_74[0][0]']               \n                                                                                                  \n re_lu_28 (ReLU)                (None, 4096, 3072)   0           ['dropout_88[0][0]']             \n                                                                                                  \n dense_75 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_28[0][0]']               \n                                                                                                  \n dropout_89 (Dropout)           (None, 4096, 1536)   0           ['dense_75[0][0]']               \n                                                                                                  \n add_63 (Add)                   (None, 4096, 1536)   0           ['add_62[0][0]',                 \n                                                                  'dropout_89[0][0]']             \n                                                                                                  \n layer_normalization_58 (LayerN  (None, 4096, 1536)  3072        ['add_63[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_29 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_58[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_90 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_29[0][0]'] \n                                                                                                  \n add_64 (Add)                   (None, 4096, 1536)   0           ['add_63[0][0]',                 \n                                                                  'dropout_90[0][0]']             \n                                                                                                  \n layer_normalization_59 (LayerN  (None, 4096, 1536)  3072        ['add_64[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_76 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_59[0][0]'] \n                                                                                                  \n dropout_91 (Dropout)           (None, 4096, 3072)   0           ['dense_76[0][0]']               \n                                                                                                  \n re_lu_29 (ReLU)                (None, 4096, 3072)   0           ['dropout_91[0][0]']             \n                                                                                                  \n dense_77 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_29[0][0]']               \n                                                                                                  \n dropout_92 (Dropout)           (None, 4096, 1536)   0           ['dense_77[0][0]']               \n                                                                                                  \n add_65 (Add)                   (None, 4096, 1536)   0           ['add_64[0][0]',                 \n                                                                  'dropout_92[0][0]']             \n                                                                                                  \n layer_normalization_60 (LayerN  (None, 4096, 1536)  3072        ['add_65[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_30 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_60[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_93 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_30[0][0]'] \n                                                                                                  \n add_66 (Add)                   (None, 4096, 1536)   0           ['add_65[0][0]',                 \n                                                                  'dropout_93[0][0]']             \n                                                                                                  \n layer_normalization_61 (LayerN  (None, 4096, 1536)  3072        ['add_66[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_78 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_61[0][0]'] \n                                                                                                  \n dropout_94 (Dropout)           (None, 4096, 3072)   0           ['dense_78[0][0]']               \n                                                                                                  \n re_lu_30 (ReLU)                (None, 4096, 3072)   0           ['dropout_94[0][0]']             \n                                                                                                  \n dense_79 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_30[0][0]']               \n                                                                                                  \n dropout_95 (Dropout)           (None, 4096, 1536)   0           ['dense_79[0][0]']               \n                                                                                                  \n add_67 (Add)                   (None, 4096, 1536)   0           ['add_66[0][0]',                 \n                                                                  'dropout_95[0][0]']             \n                                                                                                  \n layer_normalization_62 (LayerN  (None, 4096, 1536)  3072        ['add_67[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n multihead_attention_31 (Multih  (None, 4096, 1536)  6310400     ['layer_normalization_62[0][0]'] \n eadAttention)                                                                                    \n                                                                                                  \n dropout_96 (Dropout)           (None, 4096, 1536)   0           ['multihead_attention_31[0][0]'] \n                                                                                                  \n add_68 (Add)                   (None, 4096, 1536)   0           ['add_67[0][0]',                 \n                                                                  'dropout_96[0][0]']             \n                                                                                                  \n layer_normalization_63 (LayerN  (None, 4096, 1536)  3072        ['add_68[0][0]']                 \n ormalization)                                                                                    \n                                                                                                  \n dense_80 (Dense)               (None, 4096, 3072)   4721664     ['layer_normalization_63[0][0]'] \n                                                                                                  \n dropout_97 (Dropout)           (None, 4096, 3072)   0           ['dense_80[0][0]']               \n                                                                                                  \n re_lu_31 (ReLU)                (None, 4096, 3072)   0           ['dropout_97[0][0]']             \n                                                                                                  \n dense_81 (Dense)               (None, 4096, 1536)   4720128     ['re_lu_31[0][0]']               \n                                                                                                  \n dropout_98 (Dropout)           (None, 4096, 1536)   0           ['dense_81[0][0]']               \n                                                                                                  \n add_69 (Add)                   (None, 4096, 1536)   0           ['add_68[0][0]',                 \n                                                                  'dropout_98[0][0]']             \n                                                                                                  \n sync_batch_normalization_39 (S  (None, 4096, 1536)  6144        ['add_69[0][0]']                 \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_42 (TFOpLambda)     (None, 4096, 1536)   0           ['sync_batch_normalization_39[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_40 (S  (None, 8192, 1536)  6144        ['conv1d_30[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_82 (Dense)               (None, 4096, 1536)   2360832     ['tf.nn.gelu_42[0][0]']          \n                                                                                                  \n tf.nn.gelu_43 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_40[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_6 (UpSampling1D)  (None, 8192, 1536)  0           ['dense_82[0][0]']               \n                                                                                                  \n dense_83 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_43[0][0]']          \n                                                                                                  \n add_70 (Add)                   (None, 8192, 1536)   0           ['up_sampling1d_6[0][0]',        \n                                                                  'dense_83[0][0]']               \n                                                                                                  \n separable_conv1d_6 (SeparableC  (None, 8192, 1536)  2365440     ['add_70[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n sync_batch_normalization_41 (S  (None, 8192, 1536)  6144        ['separable_conv1d_6[0][0]']     \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_44 (TFOpLambda)     (None, 8192, 1536)   0           ['sync_batch_normalization_41[0][\n                                                                 0]']                             \n                                                                                                  \n sync_batch_normalization_42 (S  (None, 16384, 1280)  5120       ['conv1d_29[0][0]']              \n yncBatchNormalization)                                                                           \n                                                                                                  \n dense_84 (Dense)               (None, 8192, 1536)   2360832     ['tf.nn.gelu_44[0][0]']          \n                                                                                                  \n tf.nn.gelu_45 (TFOpLambda)     (None, 16384, 1280)  0           ['sync_batch_normalization_42[0][\n                                                                 0]']                             \n                                                                                                  \n up_sampling1d_7 (UpSampling1D)  (None, 16384, 1536)  0          ['dense_84[0][0]']               \n                                                                                                  \n dense_85 (Dense)               (None, 16384, 1536)  1967616     ['tf.nn.gelu_45[0][0]']          \n                                                                                                  \n add_71 (Add)                   (None, 16384, 1536)  0           ['up_sampling1d_7[0][0]',        \n                                                                  'dense_85[0][0]']               \n                                                                                                  \n separable_conv1d_7 (SeparableC  (None, 16384, 1536)  2365440    ['add_71[0][0]']                 \n onv1D)                                                                                           \n                                                                                                  \n cropping1d_3 (Cropping1D)      (None, 16352, 1536)  0           ['separable_conv1d_7[0][0]']     \n                                                                                                  \n sync_batch_normalization_43 (S  (None, 16352, 1536)  6144       ['cropping1d_3[0][0]']           \n yncBatchNormalization)                                                                           \n                                                                                                  \n tf.nn.gelu_46 (TFOpLambda)     (None, 16352, 1536)  0           ['sync_batch_normalization_43[0][\n                                                                 0]']                             \n                                                                                                  \n conv1d_31 (Conv1D)             (None, 16352, 1920)  2951040     ['tf.nn.gelu_46[0][0]']          \n                                                                                                  \n dropout_99 (Dropout)           (None, 16352, 1920)  0           ['conv1d_31[0][0]']              \n                                                                                                  \n tf.nn.gelu_47 (TFOpLambda)     (None, 16352, 1920)  0           ['dropout_99[0][0]']             \n                                                                                                  \n dense_86 (Dense)               (None, 16352, 7611)  14620731    ['tf.nn.gelu_47[0][0]']          \n                                                                                                  \n switch_reverse_12 (SwitchRever  (None, 16352, 7611)  0          ['dense_86[0][0]',               \n se)                                                              'stochastic_reverse_complement_3\n                                                                 [0][1]']                         \n                                                                                                  \n==================================================================================================\nTotal params: 185,917,723\nTrainable params: 185,892,699\nNon-trainable params: 25,024\n__________________________________________________________________________________________________\nNone\nmodel_strides [32, 32]\ntarget_lengths [16352, 16352]\ntarget_crops [16, 16]\n\n\n\n#Initialize fasta sequence extractor\n\nfasta_open = pysam.Fastafile('hg38.fa')\n\n#Load splice site annotation\n\nsplice_df = pd.read_csv('gencode41_basic_protein_splice.csv.gz', sep='\\t', compression='gzip')\n\nprint(\"len(splice_df) = \" + str(len(splice_df)))\n\nlen(splice_df) = 404837"
  },
  {
    "objectID": "posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C.html#predict-exon-coverage",
    "href": "posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C.html#predict-exon-coverage",
    "title": "Borzoi eQTL Example",
    "section": "Predict Exon Coverage",
    "text": "Predict Exon Coverage\n\n#Load GTF (optional; needed to compute exon coverage attributions for example gene)\n\ntranscriptome = bgene.Transcriptome('gencode41_basic_nort.gtf')\n\nsearch_gene = 'ENSG00000187164'\n\ncenter_pos = 116952944\n\nchrom = 'chr10'\nposes = [116952944]\nalts = ['C']\n\nstart = center_pos - seq_len // 2\nend = center_pos + seq_len // 2\n\n#Get exon bin range\ngene_keys = [gene_key for gene_key in transcriptome.genes.keys() if search_gene in gene_key]\n\ngene = transcriptome.genes[gene_keys[0]]\n\n#Determine output sequence start\nseq_out_start = start + seqnn_model.model_strides[0]*seqnn_model.target_crops[0]\nseq_out_len = seqnn_model.model_strides[0]*seqnn_model.target_lengths[0]\n\n#Determine output positions of gene exons\ngene_slice = gene.output_slice(seq_out_start, seq_out_len, seqnn_model.model_strides[0], False)\n\n\n#Print index of GTEx blood and muscle tracks in targets file\n\ntargets_df['local_index'] = np.arange(len(targets_df))\n\nprint(\"blood tracks = \" + str(targets_df.loc[targets_df['description'] == 'RNA:blood']['local_index'].tolist()))\nprint(\"muscle tracks = \" + str(targets_df.loc[targets_df['description'] == 'RNA:muscle']['local_index'].tolist()))\n\nblood tracks = [9, 10, 11]\nmuscle tracks = [47, 48, 49]\n\n\n\n#Predict for chr10_116952944_T_C\n\nsave_figs = False\nsave_suffix = '_chr10_116952944_T_C'\n\nsequence_one_hot_wt = process_sequence(fasta_open, chrom, start, end)\n\n#Induce mutation(s)\nsequence_one_hot_mut = np.copy(sequence_one_hot_wt)\n\nfor pos, alt in zip(poses, alts) :\n    alt_ix = -1\n    if alt == 'A' :\n        alt_ix = 0\n    elif alt == 'C' :\n        alt_ix = 1\n    elif alt == 'G' :\n        alt_ix = 2\n    elif alt == 'T' :\n        alt_ix = 3\n\n    sequence_one_hot_mut[pos-start-1] = 0.\n    sequence_one_hot_mut[pos-start-1, alt_ix] = 1.\n\n#Make predictions\ny_wt = predict_tracks(models, sequence_one_hot_wt)\ny_mut = predict_tracks(models, sequence_one_hot_mut)\n\n#Visualize quantized tracks over SNP\n\nplot_window = 131072\nbin_size = 32\npad = 16\n\nrescale_tracks = True\nnormalize_counts = False\n\nanno_df = None #splice_df\n\n#Tracks\ntrack_indices = [\n    np.arange(0, 89).tolist(),\n    [9, 10, 11],\n    [47, 48, 49],\n]\n\ntrack_names = [\n    'GTEx Coverage (All tissues)',\n    'GTEx Coverage (Blood)',\n    'GTEx Coverage (Muscle)',\n]\n\ntrack_scales = [\n    0.01,\n    0.01,\n    0.01,\n]\n\ntrack_transforms = [\n    3./4.,\n    3./4.,\n    3./4.,\n]\n\nsoft_clips = [\n    384.,\n    384.,\n    384.,\n]\n\nprint(\"-- Counts --\")\nplot_coverage_track_pair_bins(y_wt, y_mut, chrom, start, center_pos, poses, track_indices, track_names, track_scales, track_transforms, soft_clips, plot_window=plot_window, normalize_window=1*plot_window, bin_size=bin_size, pad=pad, rescale_tracks=rescale_tracks, normalize_counts=normalize_counts, save_figs=save_figs, save_suffix=save_suffix, gene_slice=gene_slice, anno_df=anno_df)\n\n-- Counts --\n - sum_wt = 127138.67\n - sum_mut = 126502.67\n - max_y_wt = 809.7634\n - max_y_mut = 810.978\n -- (max_y = 810.978)\n - sum_wt = 43400.95\n - sum_mut = 53960.754\n - max_y_wt = 339.3114\n - max_y_mut = 423.4269\n -- (max_y = 423.4269)\n - sum_wt = 32183.52\n - sum_mut = 33052.13\n - max_y_wt = 296.1789\n - max_y_mut = 302.3407\n -- (max_y = 302.3407)\n\n\n\n\n\n\n\n\n\n\n\n\nprint(\"Output Shape:\",y_wt.shape)\ny_wt\n\nOutput Shape: (1, 4, 16352, 89)\n\n\narray([[[[0.02048 , 0.0909  , 0.0631  , ..., 0.03622 , 0.04785 ,\n          0.06726 ],\n         [0.0208  , 0.0899  , 0.0629  , ..., 0.0378  , 0.04984 ,\n          0.06885 ],\n         [0.01758 , 0.0778  , 0.05542 , ..., 0.03442 , 0.04456 ,\n          0.06064 ],\n         ...,\n         [0.001438, 0.003803, 0.003777, ..., 0.003843, 0.005497,\n          0.004044],\n         [0.001427, 0.003862, 0.003742, ..., 0.0039  , 0.005524,\n          0.003975],\n         [0.001422, 0.004257, 0.00394 , ..., 0.00432 , 0.00611 ,\n          0.00428 ]],\n\n        [[0.01269 , 0.0331  , 0.03102 , ..., 0.0242  , 0.03412 ,\n          0.02678 ],\n         [0.01817 , 0.0427  , 0.0419  , ..., 0.03146 , 0.04327 ,\n          0.03528 ],\n         [0.02103 , 0.0485  , 0.0469  , ..., 0.03714 , 0.05066 ,\n          0.04117 ],\n         ...,\n         [0.01158 , 0.02269 , 0.02554 , ..., 0.01988 , 0.02858 ,\n          0.02545 ],\n         [0.00986 , 0.02061 , 0.02254 , ..., 0.01802 , 0.02547 ,\n          0.02234 ],\n         [0.01179 , 0.02495 , 0.02696 , ..., 0.02235 , 0.03052 ,\n          0.02576 ]],\n\n        [[0.03784 , 0.1128  , 0.0934  , ..., 0.0429  , 0.05902 ,\n          0.08    ],\n         [0.0392  , 0.11163 , 0.0922  , ..., 0.0469  , 0.06168 ,\n          0.07825 ],\n         [0.03256 , 0.0951  , 0.0787  , ..., 0.0412  , 0.0526  ,\n          0.06775 ],\n         ...,\n         [0.002592, 0.007465, 0.006603, ..., 0.01239 , 0.01337 ,\n          0.00563 ],\n         [0.002804, 0.00796 , 0.00732 , ..., 0.01216 , 0.01342 ,\n          0.00619 ],\n         [0.002424, 0.007256, 0.00669 , ..., 0.011765, 0.01341 ,\n          0.005768]],\n\n        [[0.02223 , 0.05032 , 0.05585 , ..., 0.03357 , 0.041   ,\n          0.04703 ],\n         [0.01823 , 0.04477 , 0.04922 , ..., 0.03427 , 0.03983 ,\n          0.0434  ],\n         [0.01272 , 0.03345 , 0.03644 , ..., 0.0258  , 0.03027 ,\n          0.03366 ],\n         ...,\n         [0.00756 , 0.01692 , 0.02003 , ..., 0.01767 , 0.02272 ,\n          0.01932 ],\n         [0.0124  , 0.0257  , 0.03023 , ..., 0.02792 , 0.03488 ,\n          0.03027 ],\n         [0.01491 , 0.0307  , 0.03683 , ..., 0.02843 , 0.03745 ,\n          0.03604 ]]]], dtype=float16)\n\n\n\nimport importlib\nimport borzoi_helpers_sm\nimportlib.reload(borzoi_helpers_sm)\n## GTEx blood tracks\ntrack_index = [47, 48, 49]\ny_wt_curr = borzoi_helpers_sm.inverse_transform(y_wt, 0.01, 3./4., 384.)\nprint(\"Sum (Expression Attribution):\", borzoi_helpers_sm.expr_attr(y_wt, track_index, gene_slice))\n\nSum (Expression Attribution): 32183.52"
  },
  {
    "objectID": "posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C.html#score-variants",
    "href": "posts/2023-09-20-borzoi-tutorial/borzoi_example_eqtl_chr10_116952944_T_C.html#score-variants",
    "title": "Borzoi eQTL Example",
    "section": "Score Variants",
    "text": "Score Variants\n\n#Get contribution scores (gradient) for blood GTEX tracks\n\n_, _, [pred_grad_wt, pred_grad_mut] = get_prediction_gradient_w_rc(\n    models,\n    [sequence_one_hot_wt, sequence_one_hot_mut],\n    0,\n    1,\n    0,\n    1,\n    target_index[[9, 10, 11]].tolist(),\n    0.01,\n    3./4.,\n    clip_soft=384.,\n    dist_bin_index=gene_slice.tolist(),\n    use_mean=False,\n    use_ratio=False,\n    use_logodds=False,\n    subtract_avg=True,\n    fold_index=[0, 1, 2, 3],\n)\n\nWARNING:tensorflow:\nThe following Variables were used a Lambda layer's call (inp_grad), but\nare not present in its tracked objects:\n  &lt;tf.Variable 'conv1d/kernel:0' shape=(15, 4, 512) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d/bias:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization/gamma:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization/beta:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_1/kernel:0' shape=(5, 512, 608) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_1/bias:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_1/gamma:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_1/beta:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_2/kernel:0' shape=(5, 608, 736) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_2/bias:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_2/gamma:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_2/beta:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_3/kernel:0' shape=(5, 736, 896) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_3/bias:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_3/gamma:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_3/beta:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_4/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_4/bias:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_4/gamma:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_4/beta:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_5/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_5/bias:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_5/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_5/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_6/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_6/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_1/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_1/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_1/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_1/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_2/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_2/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_3/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_3/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_2/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_2/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_3/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_3/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_4/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_4/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_5/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_5/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_4/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_4/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_5/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_5/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_6/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_6/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_7/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_7/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_6/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_6/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_7/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_7/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_8/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_8/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_9/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_9/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_8/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_8/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_9/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_9/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_10/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_10/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_11/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_11/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_10/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_10/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_11/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_11/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_12/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_12/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_13/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_13/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_12/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_12/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_13/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_13/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_14/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_14/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_15/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_15/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_14/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_14/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_15/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_15/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_6/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_6/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_7/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_7/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_16/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_16/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_17/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_17/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_8/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_8/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_9/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_9/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_18/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_18/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_19/kernel:0' shape=(1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_19/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_1/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_1/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_1/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_10/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_10/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_7/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_7/bias:0' shape=(1920,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_20/kernel:0' shape=(1920, 7611) dtype=float32&gt;\n  &lt;tf.Variable 'dense_20/bias:0' shape=(7611,) dtype=float32&gt;\nIt is possible that this is intended behavior, but it is more likely\nan omission. This is a strong indication that this layer should be\nformulated as a subclassed Layer rather than a Lambda layer.\n1/1 [==============================] - 145s 145s/step\n1/1 [==============================] - 48s 48s/step\nWARNING:tensorflow:\nThe following Variables were used a Lambda layer's call (inp_grad), but\nare not present in its tracked objects:\n  &lt;tf.Variable 'conv1d_8/kernel:0' shape=(15, 4, 512) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_8/bias:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_11/gamma:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_11/beta:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_9/kernel:0' shape=(5, 512, 608) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_9/bias:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_12/gamma:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_12/beta:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_10/kernel:0' shape=(5, 608, 736) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_10/bias:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_13/gamma:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_13/beta:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_11/kernel:0' shape=(5, 736, 896) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_11/bias:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_14/gamma:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_14/beta:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_12/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_12/bias:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_15/gamma:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_15/beta:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_13/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_13/bias:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_16/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_16/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_14/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_14/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_16/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_16/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_17/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_17/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_22/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_22/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_23/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_23/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_18/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_18/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_19/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_19/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_24/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_24/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_25/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_25/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_20/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_20/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_21/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_21/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_26/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_26/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_27/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_27/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_22/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_22/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_23/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_23/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_28/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_28/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_29/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_29/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_24/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_24/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_25/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_25/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_30/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_30/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_31/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_31/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_26/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_26/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_27/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_27/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_32/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_32/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_33/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_33/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_28/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_28/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_29/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_29/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_34/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_34/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_35/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_35/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_30/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_30/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_31/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_31/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_36/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_36/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_37/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_37/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_17/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_17/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_18/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_18/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_38/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_38/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_39/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_39/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_2/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_2/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_2/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_19/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_19/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_20/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_20/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_40/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_40/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_41/kernel:0' shape=(1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_41/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_3/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_3/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_3/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_21/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_21/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_15/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_15/bias:0' shape=(1920,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_42/kernel:0' shape=(1920, 7611) dtype=float32&gt;\n  &lt;tf.Variable 'dense_42/bias:0' shape=(7611,) dtype=float32&gt;\nIt is possible that this is intended behavior, but it is more likely\nan omission. This is a strong indication that this layer should be\nformulated as a subclassed Layer rather than a Lambda layer.\n1/1 [==============================] - 144s 144s/step\n1/1 [==============================] - 48s 48s/step\nWARNING:tensorflow:\nThe following Variables were used a Lambda layer's call (inp_grad), but\nare not present in its tracked objects:\n  &lt;tf.Variable 'conv1d_16/kernel:0' shape=(15, 4, 512) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_16/bias:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_22/gamma:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_22/beta:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_17/kernel:0' shape=(5, 512, 608) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_17/bias:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_23/gamma:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_23/beta:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_18/kernel:0' shape=(5, 608, 736) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_18/bias:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_24/gamma:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_24/beta:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_19/kernel:0' shape=(5, 736, 896) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_19/bias:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_25/gamma:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_25/beta:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_20/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_20/bias:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_26/gamma:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_26/beta:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_21/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_21/bias:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_27/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_27/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_22/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_22/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_32/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_32/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_33/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_33/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_44/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_44/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_45/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_45/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_34/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_34/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_35/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_35/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_46/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_46/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_47/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_47/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_36/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_36/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_37/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_37/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_48/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_48/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_49/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_49/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_38/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_38/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_39/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_39/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_50/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_50/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_51/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_51/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_40/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_40/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_41/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_41/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_52/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_52/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_53/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_53/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_42/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_42/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_43/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_43/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_54/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_54/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_55/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_55/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_44/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_44/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_45/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_45/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_56/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_56/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_57/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_57/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_46/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_46/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_47/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_47/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_58/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_58/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_59/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_59/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_28/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_28/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_29/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_29/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_60/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_60/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_61/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_61/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_4/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_4/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_4/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_30/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_30/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_31/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_31/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_62/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_62/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_63/kernel:0' shape=(1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_63/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_5/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_5/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_5/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_32/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_32/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_23/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_23/bias:0' shape=(1920,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_64/kernel:0' shape=(1920, 7611) dtype=float32&gt;\n  &lt;tf.Variable 'dense_64/bias:0' shape=(7611,) dtype=float32&gt;\nIt is possible that this is intended behavior, but it is more likely\nan omission. This is a strong indication that this layer should be\nformulated as a subclassed Layer rather than a Lambda layer.\n1/1 [==============================] - 145s 145s/step\n1/1 [==============================] - 46s 46s/step\nWARNING:tensorflow:\nThe following Variables were used a Lambda layer's call (inp_grad), but\nare not present in its tracked objects:\n  &lt;tf.Variable 'conv1d_24/kernel:0' shape=(15, 4, 512) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_24/bias:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_33/gamma:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_33/beta:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_25/kernel:0' shape=(5, 512, 608) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_25/bias:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_34/gamma:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_34/beta:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_26/kernel:0' shape=(5, 608, 736) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_26/bias:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_35/gamma:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_35/beta:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_27/kernel:0' shape=(5, 736, 896) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_27/bias:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_36/gamma:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_36/beta:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_28/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_28/bias:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_37/gamma:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_37/beta:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_29/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_29/bias:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_38/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_38/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_30/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_30/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_48/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_48/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_49/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_49/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_66/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_66/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_67/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_67/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_50/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_50/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_51/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_51/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_68/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_68/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_69/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_69/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_52/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_52/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_53/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_53/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_70/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_70/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_71/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_71/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_54/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_54/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_55/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_55/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_72/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_72/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_73/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_73/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_56/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_56/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_57/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_57/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_74/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_74/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_75/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_75/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_58/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_58/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_59/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_59/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_76/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_76/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_77/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_77/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_60/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_60/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_61/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_61/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_78/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_78/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_79/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_79/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_62/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_62/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_63/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_63/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_80/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_80/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_81/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_81/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_39/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_39/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_40/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_40/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_82/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_82/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_83/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_83/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_6/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_6/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_6/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_41/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_41/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_42/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_42/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_84/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_84/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_85/kernel:0' shape=(1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_85/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_7/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_7/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_7/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_43/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_43/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_31/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_31/bias:0' shape=(1920,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_86/kernel:0' shape=(1920, 7611) dtype=float32&gt;\n  &lt;tf.Variable 'dense_86/bias:0' shape=(7611,) dtype=float32&gt;\nIt is possible that this is intended behavior, but it is more likely\nan omission. This is a strong indication that this layer should be\nformulated as a subclassed Layer rather than a Lambda layer.\n1/1 [==============================] - 144s 144s/step\n1/1 [==============================] - 46s 46s/step\nWARNING:tensorflow:\nThe following Variables were used a Lambda layer's call (inp_grad), but\nare not present in its tracked objects:\n  &lt;tf.Variable 'conv1d/kernel:0' shape=(15, 4, 512) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d/bias:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization/gamma:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization/beta:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_1/kernel:0' shape=(5, 512, 608) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_1/bias:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_1/gamma:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_1/beta:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_2/kernel:0' shape=(5, 608, 736) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_2/bias:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_2/gamma:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_2/beta:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_3/kernel:0' shape=(5, 736, 896) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_3/bias:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_3/gamma:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_3/beta:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_4/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_4/bias:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_4/gamma:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_4/beta:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_5/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_5/bias:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_5/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_5/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_6/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_6/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_1/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_1/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_1/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_1/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_2/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_2/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_1/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_3/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_3/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_2/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_2/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_3/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_3/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_4/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_4/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_2/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_5/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_5/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_4/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_4/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_5/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_5/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_6/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_6/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_3/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_7/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_7/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_6/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_6/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_7/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_7/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_8/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_8/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_4/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_9/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_9/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_8/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_8/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_9/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_9/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_10/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_10/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_5/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_11/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_11/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_10/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_10/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_11/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_11/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_12/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_12/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_6/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_13/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_13/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_12/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_12/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_13/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_13/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_14/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_14/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_7/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_15/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_15/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_14/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_14/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_15/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_15/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_6/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_6/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_7/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_7/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_16/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_16/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_17/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_17/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_8/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_8/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_9/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_9/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_18/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_18/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_19/kernel:0' shape=(1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_19/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_1/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_1/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_1/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_10/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_10/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_7/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_7/bias:0' shape=(1920,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_20/kernel:0' shape=(1920, 7611) dtype=float32&gt;\n  &lt;tf.Variable 'dense_20/bias:0' shape=(7611,) dtype=float32&gt;\nIt is possible that this is intended behavior, but it is more likely\nan omission. This is a strong indication that this layer should be\nformulated as a subclassed Layer rather than a Lambda layer.\nWARNING:tensorflow:5 out of the last 9 calls to &lt;function Model.make_predict_function.&lt;locals&gt;.predict_function at 0x7fefdb03cca0&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n1/1 [==============================] - 147s 147s/step\n1/1 [==============================] - 47s 47s/step\nWARNING:tensorflow:\nThe following Variables were used a Lambda layer's call (inp_grad), but\nare not present in its tracked objects:\n  &lt;tf.Variable 'conv1d_8/kernel:0' shape=(15, 4, 512) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_8/bias:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_11/gamma:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_11/beta:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_9/kernel:0' shape=(5, 512, 608) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_9/bias:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_12/gamma:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_12/beta:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_10/kernel:0' shape=(5, 608, 736) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_10/bias:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_13/gamma:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_13/beta:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_11/kernel:0' shape=(5, 736, 896) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_11/bias:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_14/gamma:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_14/beta:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_12/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_12/bias:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_15/gamma:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_15/beta:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_13/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_13/bias:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_16/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_16/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_14/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_14/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_16/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_16/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_8/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_17/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_17/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_22/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_22/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_23/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_23/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_18/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_18/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_9/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_19/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_19/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_24/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_24/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_25/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_25/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_20/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_20/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_10/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_21/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_21/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_26/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_26/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_27/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_27/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_22/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_22/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_11/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_23/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_23/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_28/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_28/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_29/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_29/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_24/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_24/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_12/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_25/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_25/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_30/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_30/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_31/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_31/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_26/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_26/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_13/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_27/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_27/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_32/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_32/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_33/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_33/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_28/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_28/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_14/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_29/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_29/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_34/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_34/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_35/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_35/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_30/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_30/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_15/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_31/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_31/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_36/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_36/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_37/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_37/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_17/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_17/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_18/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_18/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_38/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_38/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_39/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_39/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_2/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_2/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_2/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_19/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_19/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_20/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_20/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_40/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_40/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_41/kernel:0' shape=(1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_41/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_3/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_3/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_3/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_21/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_21/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_15/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_15/bias:0' shape=(1920,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_42/kernel:0' shape=(1920, 7611) dtype=float32&gt;\n  &lt;tf.Variable 'dense_42/bias:0' shape=(7611,) dtype=float32&gt;\nIt is possible that this is intended behavior, but it is more likely\nan omission. This is a strong indication that this layer should be\nformulated as a subclassed Layer rather than a Lambda layer.\nWARNING:tensorflow:6 out of the last 11 calls to &lt;function Model.make_predict_function.&lt;locals&gt;.predict_function at 0x7feea55a7040&gt; triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n1/1 [==============================] - 147s 147s/step\n1/1 [==============================] - 47s 47s/step\nWARNING:tensorflow:\nThe following Variables were used a Lambda layer's call (inp_grad), but\nare not present in its tracked objects:\n  &lt;tf.Variable 'conv1d_16/kernel:0' shape=(15, 4, 512) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_16/bias:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_22/gamma:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_22/beta:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_17/kernel:0' shape=(5, 512, 608) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_17/bias:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_23/gamma:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_23/beta:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_18/kernel:0' shape=(5, 608, 736) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_18/bias:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_24/gamma:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_24/beta:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_19/kernel:0' shape=(5, 736, 896) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_19/bias:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_25/gamma:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_25/beta:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_20/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_20/bias:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_26/gamma:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_26/beta:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_21/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_21/bias:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_27/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_27/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_22/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_22/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_32/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_32/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_16/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_33/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_33/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_44/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_44/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_45/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_45/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_34/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_34/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_17/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_35/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_35/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_46/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_46/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_47/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_47/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_36/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_36/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_18/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_37/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_37/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_48/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_48/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_49/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_49/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_38/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_38/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_19/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_39/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_39/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_50/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_50/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_51/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_51/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_40/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_40/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_20/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_41/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_41/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_52/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_52/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_53/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_53/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_42/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_42/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_21/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_43/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_43/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_54/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_54/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_55/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_55/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_44/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_44/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_22/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_45/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_45/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_56/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_56/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_57/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_57/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_46/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_46/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_23/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_47/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_47/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_58/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_58/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_59/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_59/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_28/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_28/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_29/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_29/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_60/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_60/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_61/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_61/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_4/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_4/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_4/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_30/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_30/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_31/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_31/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_62/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_62/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_63/kernel:0' shape=(1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_63/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_5/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_5/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_5/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_32/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_32/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_23/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_23/bias:0' shape=(1920,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_64/kernel:0' shape=(1920, 7611) dtype=float32&gt;\n  &lt;tf.Variable 'dense_64/bias:0' shape=(7611,) dtype=float32&gt;\nIt is possible that this is intended behavior, but it is more likely\nan omission. This is a strong indication that this layer should be\nformulated as a subclassed Layer rather than a Lambda layer.\n1/1 [==============================] - 146s 146s/step\n1/1 [==============================] - 47s 47s/step\nWARNING:tensorflow:\nThe following Variables were used a Lambda layer's call (inp_grad), but\nare not present in its tracked objects:\n  &lt;tf.Variable 'conv1d_24/kernel:0' shape=(15, 4, 512) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_24/bias:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_33/gamma:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_33/beta:0' shape=(512,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_25/kernel:0' shape=(5, 512, 608) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_25/bias:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_34/gamma:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_34/beta:0' shape=(608,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_26/kernel:0' shape=(5, 608, 736) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_26/bias:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_35/gamma:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_35/beta:0' shape=(736,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_27/kernel:0' shape=(5, 736, 896) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_27/bias:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_36/gamma:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_36/beta:0' shape=(896,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_28/kernel:0' shape=(5, 896, 1056) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_28/bias:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_37/gamma:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_37/beta:0' shape=(1056,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_29/kernel:0' shape=(5, 1056, 1280) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_29/bias:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_38/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_38/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_30/kernel:0' shape=(5, 1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_30/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_48/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_48/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_24/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_49/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_49/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_66/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_66/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_67/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_67/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_50/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_50/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_25/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_51/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_51/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_68/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_68/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_69/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_69/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_52/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_52/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_26/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_53/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_53/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_70/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_70/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_71/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_71/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_54/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_54/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_27/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_55/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_55/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_72/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_72/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_73/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_73/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_56/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_56/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_28/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_57/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_57/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_74/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_74/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_75/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_75/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_58/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_58/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_29/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_59/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_59/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_76/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_76/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_77/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_77/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_60/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_60/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_30/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_61/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_61/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_78/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_78/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_79/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_79/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_62/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_62/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/r_w_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/r_r_bias:0' shape=(1, 8, 1, 64) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/q_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/k_layer/kernel:0' shape=(1536, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/v_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/r_k_layer/kernel:0' shape=(32, 512) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/embedding_layer/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'multihead_attention_31/embedding_layer/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_63/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'layer_normalization_63/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_80/kernel:0' shape=(1536, 3072) dtype=float32&gt;\n  &lt;tf.Variable 'dense_80/bias:0' shape=(3072,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_81/kernel:0' shape=(3072, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_81/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_39/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_39/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_40/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_40/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_82/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_82/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_83/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_83/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_6/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_6/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_6/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_41/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_41/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_42/gamma:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_42/beta:0' shape=(1280,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_84/kernel:0' shape=(1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_84/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_85/kernel:0' shape=(1280, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'dense_85/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_7/depthwise_kernel:0' shape=(3, 1536, 1) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_7/pointwise_kernel:0' shape=(1, 1536, 1536) dtype=float32&gt;\n  &lt;tf.Variable 'separable_conv1d_7/bias:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_43/gamma:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'sync_batch_normalization_43/beta:0' shape=(1536,) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_31/kernel:0' shape=(1, 1536, 1920) dtype=float32&gt;\n  &lt;tf.Variable 'conv1d_31/bias:0' shape=(1920,) dtype=float32&gt;\n  &lt;tf.Variable 'dense_86/kernel:0' shape=(1920, 7611) dtype=float32&gt;\n  &lt;tf.Variable 'dense_86/bias:0' shape=(7611,) dtype=float32&gt;\nIt is possible that this is intended behavior, but it is more likely\nan omission. This is a strong indication that this layer should be\nformulated as a subclassed Layer rather than a Lambda layer.\n1/1 [==============================] - 148s 148s/step\n\n\n\n#Visualize contribution scores\n\nvisualize_input_gradient_pair(\n    pred_grad_wt,\n    pred_grad_mut,\n    plot_start=(poses[0] - start) - 64,\n    plot_end=(poses[0] - start) + 64,\n    save_figs=True,\n    fig_name=chrom + '_' + str(poses[0]) + '_prediction_grad_gtex_snp_4_folds_gtex_blood_cov_undo_clip'\n)\n\n--- WT ---\n--- Mut ---\n\n\n\n\n\n\n\n\n\n#Get contribution scores (ISM) for blood GTEX tracks\n\n[pred_ism_wt, pred_ism_mut] = get_ism(\n    models,\n    [sequence_one_hot_wt, sequence_one_hot_mut],\n    (poses[0] - start) - 64,\n    (poses[0] - start) + 64,\n    0,\n    1,\n    0,\n    1,\n    [9, 10, 11],\n    0.01,\n    3./4.,\n    384.,\n    dist_bin_index=gene_slice.tolist(),\n    use_mean=True,\n    use_ratio=False,\n    use_logodds=False,\n)\n\n\n#Visualize contribution scores\n\nvisualize_input_gradient_pair(\n    pred_ism_wt,\n    pred_ism_mut,\n    plot_start=(poses[0] - start) - 64,\n    plot_end=(poses[0] - start) + 64,\n    save_figs=True,\n    fig_name=chrom + '_' + str(poses[0]) + '_prediction_ism_gtex_snp_4_folds_gtex_blood_cov_undo_clip'\n)\n\n--- WT ---\n--- Mut ---\n\n\n\n\n\n\n\n\n\n#Get contribution scores (ISM shuffle) for blood GTEX tracks\n\n[pred_ism_wt, pred_ism_mut] = get_ism_shuffle(\n    models,\n    [sequence_one_hot_wt, sequence_one_hot_mut],\n    (poses[0] - start) - 64,\n    (poses[0] - start) + 64,\n    0,\n    1,\n    0,\n    1,\n    [9, 10, 11],\n    0.01,\n    3./4.,\n    384.,\n    window_size=7,\n    n_samples=24,\n    dinuc_shuffle=True,\n    dist_bin_index=gene_slice.tolist(),\n    use_mean=True,\n    use_ratio=False,\n    use_logodds=False,\n)\n\n\n#Visualize contribution scores\n\nvisualize_input_gradient_pair(\n    pred_ism_wt,\n    pred_ism_mut,\n    plot_start=(poses[0] - start) - 64,\n    plot_end=(poses[0] - start) + 64,\n    save_figs=True,\n    fig_name=chrom + '_' + str(poses[0]) + '_prediction_ism_shuffle_gtex_snp_4_folds_gtex_blood_cov_undo_clip'\n)\n\n--- WT ---\n--- Mut ---\n\n\n\n\n\n\n\n\n\n#Load samples with reference- and alternate alleles respectively\n\n#These files are protected by dbGaP - email to request access\n\ncov_files_wt = pd.read_csv(\"gtex_ref_chr10_116952944_T_C.txt\", sep='\\t', names=['file'])['file'].values.tolist()\ncov_files_mut = pd.read_csv(\"gtex_alt_chr10_116952944_T_C.txt\", sep='\\t', names=['file'])['file'].values.tolist()\n\n\n#Visualize measured coverage tracks for chr10_116952944_T_C\n\nsave_figs = False\nsave_suffix = '_chr10_116952944_T_C_meas_32_subjects'\n\ncenter_pos = 116952944\n\nchrom = 'chr10'\nposes = [116952944]\nalts = ['C']\n\nstart = center_pos - seq_len // 2\nend = center_pos + seq_len // 2\n\nblacklist_bed = \"/home/drk/common/data/genomes/hg38/blacklist/blacklist_hg38_all.bed\"\n\nread_coverage_func_wt, close_coverage_func_wt = get_coverage_reader(cov_files_wt, 16384, 16, blacklist_bed)\nread_coverage_func_mut, close_coverage_func_mut = get_coverage_reader(cov_files_mut, 16384, 16, blacklist_bed)\n\ngtex_targets_wt = read_coverage_func_wt(chrom, start, end, clip_soft=384., clip=768., scale=0.01)\ngtex_targets_mut = read_coverage_func_mut(chrom, start, end, clip_soft=384., clip=768., scale=0.01)\n\nclose_coverage_func_wt()\nclose_coverage_func_mut()\n\nprint(\"gtex_targets_wt.shape = \" + str(gtex_targets_wt.shape))\nprint(\"gtex_targets_mut.shape = \" + str(gtex_targets_mut.shape))\n\nplot_window = 131072\nbin_size = 32\npad = 16\n\nanno_df = None #splice_df\n\nrescale_tracks = True\nnormalize_counts = True\n\n#Tracks\ntrack_indices = [\n    np.arange(32).tolist(),\n]\n\ntrack_names = [\n    'GTEx Blood (32 subjects)',\n]\n\ntrack_scales = [\n    0.01,\n]\n\ntrack_transforms = [\n    3./4.,\n]\n\nsoft_clips = [\n    384.,\n]\n\nprint(\"-- Counts --\")\nplot_coverage_track_pair_bins(gtex_targets_wt[None, None, ...], gtex_targets_mut[None, None, ...], chrom, start, center_pos, poses, track_indices, track_names, track_scales, track_transforms, soft_clips, plot_window=plot_window, normalize_window=4*plot_window, bin_size=bin_size, pad=pad, rescale_tracks=rescale_tracks, normalize_counts=normalize_counts, save_figs=save_figs, save_suffix=save_suffix, gene_slice=gene_slice, anno_df=anno_df)\n\ngtex_targets_wt.shape = (16352, 32)\ngtex_targets_mut.shape = (16352, 32)\n-- Counts --\n - sum_wt = 27668.607\n - sum_mut = 37653.69\n - max_y_wt = 241.0508\n - max_y_mut = 370.9016\n -- (max_y = 370.9016)"
  },
  {
    "objectID": "posts/2023-07-21-running-enformer-on-all-regions-reference/reference_epigenome.html",
    "href": "posts/2023-07-21-running-enformer-on-all-regions-reference/reference_epigenome.html",
    "title": "Running Enformer over reference genome",
    "section": "",
    "text": "Code\ndef write_intervals(chromosome, length):\n    start = 0\n    increment = 57344\n    end = 114688\n    with open(f\"metadata/chr{chromosome}_intervals.txt\", 'a') as f:\n        while end &lt;= length:\n            f.write(f'\"chr{chromosome}_{start}_{end}\"\\n')\n            start += increment\n            end += increment\n        f.write(f'\"chr{chromosome}_{start}_{end}\"')\n\n\n\n\nCode\nwrite_intervals(chromosome = 5, length = 181538259)\nwrite_intervals(chromosome = 6, length = 170805979)\nwrite_intervals(chromosome = 7, length = 159345973)\n# write_intervals(chromosome = 8, length = 145138636)\n# write_intervals(chromosome = 9, length = 138394717)\n# write_intervals(chromosome = 10, length = 133797422)\n# write_intervals(chromosome = 11, length = 135086622)"
  },
  {
    "objectID": "posts/2023-07-21-running-enformer-on-all-regions-reference/reference_epigenome.html#concatenate-intervals",
    "href": "posts/2023-07-21-running-enformer-on-all-regions-reference/reference_epigenome.html#concatenate-intervals",
    "title": "Running Enformer over reference genome",
    "section": "Concatenate Intervals",
    "text": "Concatenate Intervals\nFunctions to concatenate enformer predictions can be expanded:\n\n\nCode\nimport os\nimport h5py\nimport numpy as np\nimport parsl\nfrom parsl.app.app import python_app\nfrom parsl.configs.local_threads import config\nparsl.load(config)\n\nL = 114688\nL2 = L // 2\nL4 = L // 4\n\nnum_tracks = 5313\nnum_bins = 896\n\nQ = num_bins // 4\n\nchr_lengths = {\"5\": 181538259, \"6\": 170805979, \"7\":159345973}\n\n\n\n\nCode\n\ndef get_chr_ints_list(chr_num, chr_len,):\n    intervals = []\n    \n    # determine number of tiles\n    num_tiles = chr_len // L2\n    if L2*(num_tiles)+L4 &lt; chr_len:\n        num_tiles += 1\n\n    # create intervals\n    for i in range(num_tiles):\n        start = L2 * i\n        end = L2 * (i+2)\n        interval = f'chr{chr_num}_{start}_{end}'\n        intervals.append(interval)\n            \n    return intervals\n\n@python_app\ndef concatenate_predictions(predictions_folder, concat_result_file, chr_num, chr_len):\n    intervals = get_chr_ints_list(chr_num, chr_len)\n    dest_data_name = f'chr{chr_num}'\n\n    # create empty dataset\n    with h5py.File(concat_result_file, \"w\") as dest_file: # Create or open the new big HDF5 file in write mode\n        last_interval_start = int(intervals[-1].split('_')[1])\n        num_last_bins = ((chr_len-(last_interval_start+L4)) // 128) + 1\n        data_length = (Q*3) + ((len(intervals)-2)*Q*2) + num_last_bins # Calculate the total length of the dataset\n        dest_file.create_dataset(name=dest_data_name, fillvalue=np.nan, shape=(data_length, 5313), chunks=(1000, 5313))\n        \n        # try removing chunks\n\n    # append to dataset\n    with h5py.File(concat_result_file, \"a\") as dest_file:\n\n        # first tile\n        first_tile = f'{predictions_folder}/{intervals[0]}_predictions.h5'\n        if os.path.exists(first_tile):\n            with h5py.File(first_tile, \"r\") as f: # Open first tile HDF5 file in read mode\n                tile_data = f[intervals[0]][()] # Access the dataset within the group\n                data_to_concat = tile_data[:Q*3] # Extract the first 3/4ths of the dataset\n        else:\n            data_to_concat = np.full((Q*2, 5313), np.nan) # first 2 Qs are nan\n            second_tile = f'{predictions_folder}/{intervals[1]}_predictions.h5'\n            if os.path.exists(second_tile):\n                with h5py.File(second_tile, \"r\") as f: # Open first tile HDF5 file in read mode\n                    tile_data = f[intervals[1]][()] # Access the np array within the group\n                    next_tileQ = tile_data[:Q] # Extract first Q\n                    data_to_concat = np.concatenate((data_to_concat, next_tileQ), axis=0) # 3rd Q is from second tile\n            else:\n                data_to_concat = np.full((Q*3, 5313), np.nan) # all 3 Qs are nan\n\n        dest_file[dest_data_name][:Q*3] = data_to_concat # add to dataset\n\n        # middle tiles\n        for i in range(1, len(intervals)-1):\n            curr_tile = f'{predictions_folder}/{intervals[i]}_predictions.h5'\n            if os.path.exists(curr_tile):        \n                with h5py.File(curr_tile, \"r\") as f: # Open each source HDF5 file in read mode\n                    tile_data = f[intervals[i]][()] # Access the dataset within the group\n                    data_to_concat = tile_data[Q:Q*3] # Extract the middle section of the dataset\n            else:\n                prev_tile = f'{predictions_folder}/{intervals[i-1]}_predictions.h5'\n                next_tile = f'{predictions_folder}/{intervals[i+1]}_predictions.h5'\n\n                if os.path.exists(prev_tile): # if prev tile exists\n                    with h5py.File(prev_tile, \"r\") as f:\n                        tile_data = f[intervals[i-1]][()]\n                        data_to_concat = tile_data[-Q:] # data starts with last Q from prev tile\n                else:\n                    data_to_concat = np.full((Q, 5313), np.nan) # datas first Q is nan\n                \n                if os.path.exists(next_tile): # if next tile exists\n                    with h5py.File(next_tile, \"r\") as f:\n                        tile_data = f[intervals[i+1]][()]\n                        data_to_concat = np.concatenate((data_to_concat, tile_data[:Q]), axis=0) # data ends with first Q from next tile\n                else:\n                    data_to_concat = np.concatenate((data_to_concat, np.full((Q, 5313), np.nan)), axis=0) # datas last Q is nan\n            \n            dest_file[dest_data_name][Q*(1+2*i):Q*(3+2*i)] = data_to_concat\n        \n\n        # last tile\n        last_tile = f'{predictions_folder}/{intervals[-1]}_predictions.h5'\n        if os.path.exists(last_tile):\n            with h5py.File(last_tile, \"r\") as f:\n                tile_data = f[intervals[-1]][()]\n                data_to_concat = tile_data[Q:Q+num_last_bins]\n        else:\n            prev_tile = f'{predictions_folder}/{intervals[-2]}_predictions.h5'\n            if os.path.exists(prev_tile):\n                with h5py.File(prev_tile, \"r\") as f:\n                    tile_data = f[intervals[-2]][()]\n                    if num_last_bins &gt; Q:\n                        data_to_concat = tile_data[-Q:] # data starts with last Q from prev tile \n                        data_to_concat = np.concatenate((data_to_concat, np.full((num_last_bins-Q, 5313), np.nan)), axis=0) # ends with nan\n                    else:\n                        data_to_concat = tile_data[Q*3:(Q*3)+num_last_bins] # data ends with prev tile 3Q to end of chrom\n            else:\n                data_to_concat = np.full((num_last_bins, 5313), np.nan) # all last bins are nan\n        dest_file[dest_data_name][-num_last_bins:] = data_to_concat\n\n\n\n\nCode\napp_futures = []\nfor chr in chr_lengths.keys():\n    predictions_folder = f\"/grand/TFXcan/imlab/users/sabrina/reftile_project/predictions_folder/chr{chr}_reference_overlapping_regions/predictions_2023-08-26/enformer_predictions/chr{chr}_reference/haplotype0\"\n    output = f\"/grand/TFXcan/imlab/users/lvairus/reftile_project/enformer-reference-epigenome/chr{chr}_cat.h5\"\n    app_futures.append(concatenate_predictions(predictions_folder, output, chr, chr_lengths[chr]))\n\nexec_futures = [q.result() for q in app_futures]"
  },
  {
    "objectID": "posts/2023-08-16-correlation-across-genes-human-and-mouse-tracks/pipeline.html",
    "href": "posts/2023-08-16-correlation-across-genes-human-and-mouse-tracks/pipeline.html",
    "title": "Running Enformer across all rn7 genes (continued)",
    "section": "",
    "text": "We’ll reuse the intervals.txt file that spanned all TSS in the rn7 genome."
  },
  {
    "objectID": "posts/2023-08-16-correlation-across-genes-human-and-mouse-tracks/pipeline.html#human-head",
    "href": "posts/2023-08-16-correlation-across-genes-human-and-mouse-tracks/pipeline.html#human-head",
    "title": "Running Enformer across all rn7 genes (continued)",
    "section": "Human Head",
    "text": "Human Head\nmodule load conda\n\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\n\ncd /home/s1mi/Github/shared_pipelines/enformer_pipeline\n\npython3 scripts/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-16-correlation-across-genes-human-and-mouse-tracks/all_genes_reference_human_head.json"
  },
  {
    "objectID": "posts/2023-08-16-correlation-across-genes-human-and-mouse-tracks/index.html",
    "href": "posts/2023-08-16-correlation-across-genes-human-and-mouse-tracks/index.html",
    "title": "Running Enformer across all rn7 genes (continued)",
    "section": "",
    "text": "We have successful predictions for 19,493 genes out of the 30,057 intervals supplied. We want to exclude them in the next run of the pipeline.\n\nimport os\n\njob_log_dir = \"/home/s1mi/Br_predictions/predictions_folder/reference_Br_all_genes/predictions_2023-08-18/job_logs\"\npredictions_dir = \"/home/s1mi/Br_predictions/predictions_folder/reference_Br_all_genes/predictions_2023-08-16/enformer_predictions/reference_Br/haplotype0\"\n\n\n\npredictions = os.listdir(predictions_dir)\npredicted_regions = [file.replace(\"_predictions.h5\",\"\") for file in predictions]\nwith open(f\"{job_log_dir}/invalid_queries.csv\", \"w\") as file:\n    file.write(\"region\\n\")\n    file.write(\"\\n\".join(predicted_regions))"
  },
  {
    "objectID": "posts/2023-08-16-correlation-across-genes-human-and-mouse-tracks/index.html#create-list-of-regions-to-exclude",
    "href": "posts/2023-08-16-correlation-across-genes-human-and-mouse-tracks/index.html#create-list-of-regions-to-exclude",
    "title": "Running Enformer across all rn7 genes (continued)",
    "section": "",
    "text": "We have successful predictions for 19,493 genes out of the 30,057 intervals supplied. We want to exclude them in the next run of the pipeline.\n\nimport os\n\njob_log_dir = \"/home/s1mi/Br_predictions/predictions_folder/reference_Br_all_genes/predictions_2023-08-18/job_logs\"\npredictions_dir = \"/home/s1mi/Br_predictions/predictions_folder/reference_Br_all_genes/predictions_2023-08-16/enformer_predictions/reference_Br/haplotype0\"\n\n\n\npredictions = os.listdir(predictions_dir)\npredicted_regions = [file.replace(\"_predictions.h5\",\"\") for file in predictions]\nwith open(f\"{job_log_dir}/invalid_queries.csv\", \"w\") as file:\n    file.write(\"region\\n\")\n    file.write(\"\\n\".join(predicted_regions))"
  },
  {
    "objectID": "posts/2023-08-11-comparing-enformer-CAGE-predictions-for-high-var-genes/debugging.html",
    "href": "posts/2023-08-11-comparing-enformer-CAGE-predictions-for-high-var-genes/debugging.html",
    "title": "Debugging Enformer predictions for eQTL genes",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\n/tmp/ipykernel_147902/538256472.py:4: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\n\n\ngene = 'ENSRNOG00000054549'\ngene_annot = annot_df.loc[gene][:6]\nchromosome = gene_annot['chromosome']\ntss = gene_annot['tss']\nstart = max(0, tss - 196608)\nend = tss + 196608\n\n\nregion = f\"{chromosome}:{start}-{end}\"\nprint(\"Gene region:\", region)\nvcf_file = f\"/home/s1mi/enformer_rat_data/genotypes/BrainVCFs/chr{chromosome}.vcf.gz\"\nprint(\"VCF file:\", vcf_file)\noutput_file = f\"/home/s1mi/enformer_rat_data/misc/{gene}.vcf.gz\"\nprint(\"Output VCF:\", output_file)\n\nGene region: 20:11922154-12315370\nVCF file: /home/s1mi/enformer_rat_data/genotypes/BrainVCFs/chr20.vcf.gz\nOutput VCF: /home/s1mi/enformer_rat_data/misc/ENSRNOG00000054549.vcf.gz\n\n\n\n!bcftools view {vcf_file} --regions {region}  -o {output_file} -Oz\n\nAfter a quick scroll through the VCF, there is too much genotype variation across the population to result in uniform Enformer predictions."
  },
  {
    "objectID": "posts/2023-08-11-comparing-enformer-CAGE-predictions-for-high-var-genes/debugging.html#read-genotypes",
    "href": "posts/2023-08-11-comparing-enformer-CAGE-predictions-for-high-var-genes/debugging.html#read-genotypes",
    "title": "Debugging Enformer predictions for eQTL genes",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\n/tmp/ipykernel_147902/538256472.py:4: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\n\n\ngene = 'ENSRNOG00000054549'\ngene_annot = annot_df.loc[gene][:6]\nchromosome = gene_annot['chromosome']\ntss = gene_annot['tss']\nstart = max(0, tss - 196608)\nend = tss + 196608\n\n\nregion = f\"{chromosome}:{start}-{end}\"\nprint(\"Gene region:\", region)\nvcf_file = f\"/home/s1mi/enformer_rat_data/genotypes/BrainVCFs/chr{chromosome}.vcf.gz\"\nprint(\"VCF file:\", vcf_file)\noutput_file = f\"/home/s1mi/enformer_rat_data/misc/{gene}.vcf.gz\"\nprint(\"Output VCF:\", output_file)\n\nGene region: 20:11922154-12315370\nVCF file: /home/s1mi/enformer_rat_data/genotypes/BrainVCFs/chr20.vcf.gz\nOutput VCF: /home/s1mi/enformer_rat_data/misc/ENSRNOG00000054549.vcf.gz\n\n\n\n!bcftools view {vcf_file} --regions {region}  -o {output_file} -Oz\n\nAfter a quick scroll through the VCF, there is too much genotype variation across the population to result in uniform Enformer predictions."
  },
  {
    "objectID": "posts/2023-08-11-comparing-enformer-CAGE-predictions-for-high-var-genes/index.html",
    "href": "posts/2023-08-11-comparing-enformer-CAGE-predictions-for-high-var-genes/index.html",
    "title": "Comparing predicted vs observed gene expression for rat genes selected for variation in expression across Br population, number of eQTLs, and elastic net prediction performance",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport kipoiseq \nfrom kipoiseq import Interval \nimport sys\nimport h5py\nimport matplotlib.pyplot as plt\nimport random\nimport seaborn as sns\nimport os\npredictions_dir = \"/home/s1mi/Br_predictions/predictions_folder/personalized_Br_selected_genes/predictions_2023-08-11/enformer_predictions\"\n\ngene_expr_bed = \"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\"\nobs_gene_expr = pd.read_csv(gene_expr_bed, sep=\"\\t\", header=0, index_col='gene_id')\n\nwith open(\"gene_list.txt\") as f:\n    gene_list = f.read().splitlines()\n\n/tmp/ipykernel_135100/534672817.py:4: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  obs_gene_expr = pd.read_csv(gene_expr_bed, sep=\"\\t\", header=0, index_col='gene_id')"
  },
  {
    "objectID": "posts/2023-08-11-comparing-enformer-CAGE-predictions-for-high-var-genes/index.html#quantify-gene-expression",
    "href": "posts/2023-08-11-comparing-enformer-CAGE-predictions-for-high-var-genes/index.html#quantify-gene-expression",
    "title": "Comparing predicted vs observed gene expression for rat genes selected for variation in expression across Br population, number of eQTLs, and elastic net prediction performance",
    "section": "Quantify Gene Expression",
    "text": "Quantify Gene Expression\n\nannot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\nfor gene in gene_list:\n    print(gene)\n    gene_annot = annot_df.loc[gene]\n    start = gene_annot['tss'] - 57344\n    end = gene_annot['tss'] + 57344\n    interval = f\"chr{gene_annot['chromosome']}_{start}_{end}\"\n    for individual in pred_vs_obs[gene].index:\n        haplo1 = h5py.File(f\"{predictions_dir}/{individual}/haplotype1/{interval}_predictions.h5\", \"r\")\n        haplo2 = h5py.File(f\"{predictions_dir}/{individual}/haplotype2/{interval}_predictions.h5\", \"r\")\n        predictions = (haplo1[interval][()] + haplo2[interval][()]) / 2\n        pred_expr = np.average(predictions[[447,448], 4980])\n        print(predictions[446:450, 4980])\n        pred_vs_obs[gene].loc[individual, \"predicted\"] = pred_expr\n    break\n\n/tmp/ipykernel_135100/1897498957.py:1: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  annot_df = pd.read_csv(\"/home/s1mi/enformer_rat_data/rn7.gene.txt\", sep=\"\\t\", index_col='geneId')\n\n\nENSRNOG00000054549\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n[0.17597985 9.609986   7.9004626  0.16972242]\n\n\n\ndef plot_predicted_vs_observed(gene):\n    df = pred_vs_obs[gene]\n\n    x = df['observed']\n    y = df['predicted']\n    # Create the dot plot\n    plt.scatter(x, y, color='blue', marker='o', s=100)\n\n    # Add labels and title\n    plt.xlabel('Observed')\n    plt.ylabel('Predicted')\n    plt.title('Enformed Predicted vs Observed Gene Expression')\n\n    # Show the plot\n    plt.show()\n\n\nfor gene in gene_list:\n    plot_predicted_vs_observed(gene)\n    break"
  },
  {
    "objectID": "posts/2023-09-12-test-run-on-HS-founders/index.html",
    "href": "posts/2023-09-12-test-run-on-HS-founders/index.html",
    "title": "Test run of personalized Enformer on HS rats",
    "section": "",
    "text": "Write Individuals List\nbcftools query -l /Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/Palmer_HS_founders_mRatBN7_2.vcf.gz &gt; metadata/individuals.txt\n\n\n\nRun Pipeline Locally\nconda activate enformer-predict-tools\npython /Users/sabrinami/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /Users/sabrinami/Github/deep-learning-in-genomics/posts/2023-09-12-test-run-on-HS-founders/local_test_personalized.json"
  },
  {
    "objectID": "posts/2023-08-31-testing-multiple-heads-in-pipeline/index.html",
    "href": "posts/2023-08-31-testing-multiple-heads-in-pipeline/index.html",
    "title": "Testing the Enformer pipeline option to output both human and mouse head together",
    "section": "",
    "text": "We chose ENSRNOG00000054549, centered at the TSS chr20:12118762.\nHighthroughput on polaris:\nmodule load conda\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\n\npython /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-testing-multiple-heads-in-pipeline/local_test_personalized.json\n\nLocal:\nconda activate enformer-predict-tools\npython /Users/sabrinami/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /Users/sabrinami/Github/deep-learning-in-genomics/posts/2023-08-31-testing-multiple-heads-in-pipeline/local_test_personalized2.json\n\n\nimport h5py\nimport numpy as np\nf = h5py.File(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/predictions_folder/personalized_enformer_rat_single_gene/predictions_2023-08-31/enformer_predictions/000789972A/haplotype0/chr20_12118762_12118762_predictions.h5\", \"r\")\nhuman_prediction = f['human'][()]\nmouse_prediction = f['mouse'][()]\n\n\nimport EnformerVCF\nimport kipoiseq\nfasta_file = '/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/rn7_genome.fasta'\nfasta_extractor = EnformerVCF.FastaStringExtractor(fasta_file)\n\n\ntarget_interval = kipoiseq.Interval(\"chr20\", 12118762, 12118762)\nchr20_vcf = EnformerVCF.read_vcf(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/chr20.vcf.gz\")\nhaplo1, haplo2 = EnformerVCF.vcf_to_seq(target_interval, '000789972A', chr20_vcf, fasta_extractor)\nhaplo1_enc = EnformerVCF.one_hot_encode(\"\".join(haplo1))[np.newaxis]\nhaplo2_enc = EnformerVCF.one_hot_encode(\"\".join(haplo2))[np.newaxis]\n\n\nmean_haplo = (haplo1_enc + haplo2_enc) / 2\noutput = EnformerVCF.model.predict_on_batch(mean_haplo)\n\n\nprint(human_prediction)\nprint(output['human'][0])\n\n[[0.23258275 0.2962714  0.52013165 ... 0.19615567 1.1101408  0.25560504]\n [0.15570731 0.20205402 0.3755348  ... 0.04365927 0.24989623 0.08517855]\n [0.1536611  0.21689793 0.4510562  ... 0.05227472 0.2147567  0.08478698]\n ...\n [0.1794057  0.22463816 0.29514343 ... 0.01105995 0.02652512 0.03385386]\n [0.1694869  0.20448665 0.26207498 ... 0.01688805 0.04071837 0.06028533]\n [0.15269741 0.20196484 0.22278813 ... 0.02438667 0.03900523 0.05988767]]\n[[0.23258275 0.2962714  0.52013165 ... 0.19615567 1.1101408  0.25560504]\n [0.15570731 0.20205402 0.3755348  ... 0.04365927 0.24989623 0.08517855]\n [0.1536611  0.21689793 0.4510562  ... 0.05227472 0.2147567  0.08478698]\n ...\n [0.1794057  0.22463816 0.29514343 ... 0.01105995 0.02652512 0.03385386]\n [0.1694869  0.20448665 0.26207498 ... 0.01688805 0.04071837 0.06028533]\n [0.15269741 0.20196484 0.22278813 ... 0.02438667 0.03900523 0.05988767]]\n\n\n\nprint(\"There are\", sum(sum(human_prediction != output['human'][0])), \"differences between the human heads and\", sum(sum(mouse_prediction != output['mouse'][0])), \"differences in the mouse heads.\")\n\nThere are 0 differences between the human heads and 0 differences in the mouse heads."
  },
  {
    "objectID": "posts/2023-08-31-testing-multiple-heads-in-pipeline/index.html#personalized-test",
    "href": "posts/2023-08-31-testing-multiple-heads-in-pipeline/index.html#personalized-test",
    "title": "Testing the Enformer pipeline option to output both human and mouse head together",
    "section": "",
    "text": "We chose ENSRNOG00000054549, centered at the TSS chr20:12118762.\nHighthroughput on polaris:\nmodule load conda\nconda activate /lus/grand/projects/TFXcan/imlab/shared/software/conda_envs/enformer-predict-tools\n\npython /home/s1mi/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /home/s1mi/Github/deep-learning-in-genomics/posts/2023-08-31-testing-multiple-heads-in-pipeline/local_test_personalized.json\n\nLocal:\nconda activate enformer-predict-tools\npython /Users/sabrinami/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /Users/sabrinami/Github/deep-learning-in-genomics/posts/2023-08-31-testing-multiple-heads-in-pipeline/local_test_personalized2.json\n\n\nimport h5py\nimport numpy as np\nf = h5py.File(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/predictions_folder/personalized_enformer_rat_single_gene/predictions_2023-08-31/enformer_predictions/000789972A/haplotype0/chr20_12118762_12118762_predictions.h5\", \"r\")\nhuman_prediction = f['human'][()]\nmouse_prediction = f['mouse'][()]\n\n\nimport EnformerVCF\nimport kipoiseq\nfasta_file = '/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/rn7_genome.fasta'\nfasta_extractor = EnformerVCF.FastaStringExtractor(fasta_file)\n\n\ntarget_interval = kipoiseq.Interval(\"chr20\", 12118762, 12118762)\nchr20_vcf = EnformerVCF.read_vcf(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/chr20.vcf.gz\")\nhaplo1, haplo2 = EnformerVCF.vcf_to_seq(target_interval, '000789972A', chr20_vcf, fasta_extractor)\nhaplo1_enc = EnformerVCF.one_hot_encode(\"\".join(haplo1))[np.newaxis]\nhaplo2_enc = EnformerVCF.one_hot_encode(\"\".join(haplo2))[np.newaxis]\n\n\nmean_haplo = (haplo1_enc + haplo2_enc) / 2\noutput = EnformerVCF.model.predict_on_batch(mean_haplo)\n\n\nprint(human_prediction)\nprint(output['human'][0])\n\n[[0.23258275 0.2962714  0.52013165 ... 0.19615567 1.1101408  0.25560504]\n [0.15570731 0.20205402 0.3755348  ... 0.04365927 0.24989623 0.08517855]\n [0.1536611  0.21689793 0.4510562  ... 0.05227472 0.2147567  0.08478698]\n ...\n [0.1794057  0.22463816 0.29514343 ... 0.01105995 0.02652512 0.03385386]\n [0.1694869  0.20448665 0.26207498 ... 0.01688805 0.04071837 0.06028533]\n [0.15269741 0.20196484 0.22278813 ... 0.02438667 0.03900523 0.05988767]]\n[[0.23258275 0.2962714  0.52013165 ... 0.19615567 1.1101408  0.25560504]\n [0.15570731 0.20205402 0.3755348  ... 0.04365927 0.24989623 0.08517855]\n [0.1536611  0.21689793 0.4510562  ... 0.05227472 0.2147567  0.08478698]\n ...\n [0.1794057  0.22463816 0.29514343 ... 0.01105995 0.02652512 0.03385386]\n [0.1694869  0.20448665 0.26207498 ... 0.01688805 0.04071837 0.06028533]\n [0.15269741 0.20196484 0.22278813 ... 0.02438667 0.03900523 0.05988767]]\n\n\n\nprint(\"There are\", sum(sum(human_prediction != output['human'][0])), \"differences between the human heads and\", sum(sum(mouse_prediction != output['mouse'][0])), \"differences in the mouse heads.\")\n\nThere are 0 differences between the human heads and 0 differences in the mouse heads."
  },
  {
    "objectID": "posts/2023-08-31-testing-multiple-heads-in-pipeline/index.html#reference-test",
    "href": "posts/2023-08-31-testing-multiple-heads-in-pipeline/index.html#reference-test",
    "title": "Testing the Enformer pipeline option to output both human and mouse head together",
    "section": "Reference Test",
    "text": "Reference Test\nconda activate enformer-predict-tools\n\npython /Users/sabrinami/Github/enformer_epigenome_pipeline/enformer_predict.py --parameters /Users/sabrinami/Github/deep-learning-in-genomics/posts/2023-08-31-testing-multiple-heads-in-pipeline/local_test_reference.json\n\n\nCheck Predictions\n\nimport h5py\nf = h5py.File(\"/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/predictions_folder/reference_enformer_rat_single_gene/predictions_2023-08-31/enformer_predictions/reference_enformer_rat/haplotype0/chr20_12118762_12118762_predictions.h5\", \"r\")\nimport kipoiseq \nfrom kipoiseq import Interval\nimport EnformerVCF\nimport numpy as np\nfasta_file = '/Users/sabrinami/Desktop/2022-23/tutorials/enformer_pipeline_test/rn7_data/rn7_genome.fasta'\nfasta_extractor = EnformerVCF.FastaStringExtractor(fasta_file)\nhuman_prediction1 = f['human'][()]\nmouse_prediction1 = f['mouse'][()]\n\n\nSEQUENCE_LENGTH = 393216\ntarget_interval = kipoiseq.Interval(\"chr20\", 12118762, 12118762)\nsequence_one_hot = EnformerVCF.one_hot_encode(fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH)))\noutput = EnformerVCF.model.predict_on_batch(sequence_one_hot[np.newaxis])\nmouse_prediction2 = output['mouse'][0]\nhuman_prediction2 = output['human'][0]\n\n\nprint(\"There are\", sum(sum(human_prediction1 != human_prediction2)), \"differences between human predictions and\", sum(sum(human_prediction1 != human_prediction2)), \"differences between mouse predictions.\")\n\nThere are 0 differences between human predictions and 0 differences between mouse predictions."
  },
  {
    "objectID": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html",
    "href": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html",
    "title": "GENETIC MEDICINE DEEP LEARNING HACKATHON 2022",
    "section": "",
    "text": "Authors: Saideep Gona, Temidayo Adeluwa\nAcknowledgement: - Boxiang Liu - Festus Nyasimi (for providing us with Predixcan predictions)\nDate: Saturday April 2, 2022\nCopyright 2021 DeepMind Technologies Limited\nLicensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  },
  {
    "objectID": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#genetic-medicine-deep-learning-hackathon-2022",
    "href": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#genetic-medicine-deep-learning-hackathon-2022",
    "title": "GENETIC MEDICINE DEEP LEARNING HACKATHON 2022",
    "section": "",
    "text": "Authors: Saideep Gona, Temidayo Adeluwa\nAcknowledgement: - Boxiang Liu - Festus Nyasimi (for providing us with Predixcan predictions)\nDate: Saturday April 2, 2022\nCopyright 2021 DeepMind Technologies Limited\nLicensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n https://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  },
  {
    "objectID": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#introduction",
    "href": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#introduction",
    "title": "GENETIC MEDICINE DEEP LEARNING HACKATHON 2022",
    "section": "Introduction",
    "text": "Introduction\nIn this notebook, we explore how Enformer can be used to predict the expression of protein-coding genes. We utilized some code from the original Enformer usage colab notebook. Here, we showcase how the Enformer model can be used to predict gene expression on a GEUVADIS/1000 genomes dataset, and compare the predictions with true expression.\n“Effective gene expression prediction from sequence by integrating long-range interactions”\nŽiga Avsec, Vikram Agarwal, Daniel Visentin, Joseph R. Ledsam, Agnieszka Grabska-Barwinska, Kyle R. Taylor, Yannis Assael, John Jumper, Pushmeet Kohli, David R. Kelley\n\nSteps\nThis notebook demonstrates how to - Prepare inputs for Enformer to make predictions - Make predictions with Enformer and produce figures - Compare predictions with true expression"
  },
  {
    "objectID": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#setup",
    "href": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#setup",
    "title": "GENETIC MEDICINE DEEP LEARNING HACKATHON 2022",
    "section": "Setup",
    "text": "Setup\nGoogle Colab gives us some GPU access. This limited GPU is available to anyone with a Google account, who has signed up to use Colaboratory. We will begin by changing the runtime type to GPU. Follow the instruction below by clicking on “Runtime -&gt; Change runtime type -&gt; GPU” in the menu bar below the title of this notebook.\nStart the colab kernel with GPU: Runtime -&gt; Change runtime type -&gt; GPU\nBelow, we import tensorflow as tf, and check that the runtime has been changed to GPU.\nkipoiseq is a package that helps us to extract sequences from fasta files given some intervals. We will install the package.\n\nimport tensorflow as tf\n# Make sure the GPU is enabled \nassert tf.config.list_physical_devices('GPU'), 'Start the colab kernel with GPU: Runtime -&gt; Change runtime type -&gt; GPU'\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\n\nBiopython is a python package that helps us do many bioinfomatic analysis in python\n\n#!pip install Biopython\n\n\nSetting up our environments\nWe need to have some packages imported to help us do cool stuff.\n\nimport tensorflow_hub as hub # for interacting with saved models and tensorflow hub\nimport joblib\nimport gzip # for manipulating compressed files\nimport kipoiseq # for manipulating fasta files\nfrom kipoiseq import Interval # same as above, really\nimport pyfaidx # to index our reference genome file\nimport pandas as pd # for manipulating dataframes\nimport numpy as np # for numerical computations\nimport matplotlib.pyplot as plt # for plotting\nimport matplotlib as mpl # for plotting\nimport seaborn as sns # for plotting\nimport pickle # for saving large objects\nimport os, sys # functions for interacting with the operating system\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nOptional\nYou may want to store your results. Google Drive gives about 15gb worth of storage space, used for all your files and emails.\nHere, you can mount your Google Drive using the next line of code. You will need to provide permission access.\nThe line after that will automatically create a folder called “Enformer_Hackathon_2022” in your Google Drive.\n\n#from google.colab import drive\n#drive.mount('/content/drive')\n\n\n#!mkdir -p \"/content/drive/MyDrive/Enformer_Hackathon_2022/results/\"\n\nNext,\nWe want to define some paths to save downloaded files for the duration of this notebook. These will be wiped off by Google as soon as we are done.\n\ntransform_path = 'gs://dm-enformer/models/enformer.finetuned.SAD.robustscaler-PCA500-robustscaler.transform.pkl'\nmodel_path = 'https://tfhub.dev/deepmind/enformer/1'\nfasta_file = '/home/s1mi/enformer_tutorial/genome.fa'\n\nWe may inspect the tracks used to train the model. The CAGE prediction corresponding to B lymphoblastoid cell line is index 5110. We use B lymphoblastoid cell line predictions here because that is the cell line used to generate GEUVADIS gene expression data. You can copy the https link, paste in another tab in your browser and look through the large txt file for other tracks.\n\n# Download targets from Basenji2 dataset\n# Cite: Kelley et al Cross-species regulatory sequence activity prediction. PLoS Comput. Biol. 16, e1008050 (2020).\ntargets_txt = 'https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_human.txt'\ndf_targets = pd.read_csv(targets_txt, sep='\\t')\ndf_targets[df_targets.index==5110]\n\n\n\nDownload files\nWe need to download some files. Give it a moment. We will download the following files: - The reference genome fasta file (we will also index this file in the process) - A text file for the transcription start sites for each chromosome - Per chromosome files that has annotation for the genes - A compressed file that contains the variant bed files for the genes and their locations.\nCredit to Genome Reference Consortium: https://www.ncbi.nlm.nih.gov/grc\nSchneider et al 2017 http://dx.doi.org/10.1101/gr.213611.116: Evaluation of GRCh38 and de novo haploid genome assemblies demonstrates the enduring quality of the reference assembly\nMake a data directory, and download the necessary bed files and chromosome annotation files\nNB: You may decide to download these files into your “/content/drive/MyDrive/Enformer_Hackathon_2022/” directory. You don’t need to do this. But if you want permanent access to the files we use in this notebook, you can change the path from “/home/s1mi/enformer_tutorial/” to “/content/drive/MyDrive/Enformer_Hackathon_2022/”, and modify what you need accordingly.\nThe next line of code will download the reference genome fasta file and index this file.\n\n# reference genome and indexed\n#!wget -O - https://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/hg19.fa.gz | gunzip -c &gt; {fasta_file}\n#pyfaidx.Faidx(fasta_file)\n\nThe next lines of code will download the variation bed files, and we have created links to help us download the variation bed files for each chromosome, for each gene.\n\nchrom_bed_downloads = pd.read_csv(\"https://uchicago.box.com/shared/static/du77wf31li38tciv8imivwu57svae03p.csv\")\nchrom_bed_downloads.index = chrom_bed_downloads[\"chroms\"]\n\nchrom_bed_downloads.head(5)\n\nWe will define a function to help us download bed variation files for a given gene or list of genes\n\ndef download_chrom_beds(chromosome, genes, downloads_table=chrom_bed_downloads):\n  '''\n  Downloads bed/variation files for a chromosome and list of genes\n  '''\n\n  link = downloads_table.loc[str(chromosome), \"link\"]\n  chr_which = 'chr' + chromosome\n  for gene in genes:\n    if os.path.exists('/home/s1mi/enformer_tutorial/individual_beds/chr' + chromosome + '/chr' + chromosome + '_' + gene + '.bed'): # if the file is in the folder, no need to download again\n      continue\n    !curl -L {link} --output /home/s1mi/enformer_tutorial/chr_{chromosome}_bed.tar.gz && cd /home/s1mi/enformer_tutorial && tar -zxf /home/s1mi/enformer_tutorial/chr_{chromosome}_bed.tar.gz ./individual_beds/{chr_which}/{chr_which}_{gene}.bed\n\n    # remove the download tar.gz file\n    !rm /home/s1mi/enformer_tutorial/chr_{chromosome}_bed.tar.gz\n\nWe don’t need this function yet. But we can test out how it works.\nAssuming we want to download the variation files for ‘ERAP1’, which is located on chromosome 5…\nThis will download the bed file into /home/s1mi/enformer_tutorial/individual_beds/chr5/\n\ndownload_chrom_beds(chromosome = '5', genes=['ERAP1', 'ERAP2'])\n\nAnd when you need the file, you can read it in like…\n\nerap1_variations = pd.read_table('/home/s1mi/enformer_tutorial/individual_beds/chr5/chr5_ERAP1.bed', sep='\\t')\nerap1_variations.head(5)\n\nYou can pass in a list of genes as long as they are all located on that chromosome.\nIn the next block of code, we download the TSS for each chromosome and the genes in that chromosome, as wells as the per chromosome gene annotations. We need this information to estimate predictions.\n\n#!curl -L https://uchicago.box.com/shared/static/perc3uabzzd267cbp8zc0inwgrmur7pu.gz --output /home/s1mi/enformer_tutorial/chr_tss.tar.xz && cd /home/s1mi/enformer_tutorial/ && tar -zxf /home/s1mi/enformer_tutorial/chr_tss.tar.xz\n\n#!mkdir -p /home/s1mi/enformer_tutorial/gene_chroms #creates a folder to hold our files\n#!curl -L https://uchicago.box.com/shared/static/e2kiwrjlgqqio0pc37a2iz7l5bqbv57u.gz --output /home/s1mi/enformer_tutorial/gene_chroms/gene_chroms.tar.gz && cd /home/s1mi/enformer_tutorial/gene_chroms/ && tar -zxf /home/s1mi/enformer_tutorial/gene_chroms/gene_chroms.tar.gz\n\n\n\nHow do we want to go about using Enformer given all these files we just downloaded?\nAs we know, enformer’s input is a single strand genome sequence. Yet, we are interested in predicting on population level data which includes individual-specific variation. To get around this limitation, we will treat each individual as the sum of their haplotypes. Using the phased variant data around each gene (stored in the variant bed files) to modify the reference sequence, we can create two distinct haplotype sequences for each individual. The sum of both of Enformer’s haplotype predictions serves as an individual-specific, additive estimate which we can correlate with true predictions. Together, the files we downloaded give us all the information we need to build these haplotype sequences.\nAlthought enformer predicts a wide array of functional output, we will focus here on gene expression in lymphoblastoid cells allowing for correlation against ground truth Geuvadis gene expression data.\nThere are many functions that we have defined in the next code block. You can explore them later, but for now, simply run the block by clicking on the play button.\n\n\nCode\nNext, we have some functions that will help us along the way. Classes and methods defined in this code block can be found in the original Enformer usage colab notebook.\n\n# @title `Enformer`, `EnformerScoreVariantsNormalized`, `EnformerScoreVariantsPCANormalized`,\nSEQUENCE_LENGTH = 393216\n\nclass Enformer:\n\n  def __init__(self, tfhub_url):\n    self._model = hub.load(tfhub_url).model\n\n  def predict_on_batch(self, inputs):\n    predictions = self._model.predict_on_batch(inputs)\n    return {k: v.numpy() for k, v in predictions.items()}\n\n  @tf.function\n  def contribution_input_grad(self, input_sequence,\n                              target_mask, output_head='human'):\n    input_sequence = input_sequence[tf.newaxis]\n\n    target_mask_mass = tf.reduce_sum(target_mask)\n    with tf.GradientTape() as tape:\n      tape.watch(input_sequence)\n      prediction = tf.reduce_sum(\n          target_mask[tf.newaxis] *\n          self._model.predict_on_batch(input_sequence)[output_head]) / target_mask_mass\n\n    input_grad = tape.gradient(prediction, input_sequence) * input_sequence\n    input_grad = tf.squeeze(input_grad, axis=0)\n    return tf.reduce_sum(input_grad, axis=-1)\n\n\nclass EnformerScoreVariantsRaw:\n\n  def __init__(self, tfhub_url, organism='human'):\n    self._model = Enformer(tfhub_url)\n    self._organism = organism\n\n  def predict_on_batch(self, inputs):\n    ref_prediction = self._model.predict_on_batch(inputs['ref'])[self._organism]\n    alt_prediction = self._model.predict_on_batch(inputs['alt'])[self._organism]\n\n    return alt_prediction.mean(axis=1) - ref_prediction.mean(axis=1)\n\n\nclass EnformerScoreVariantsNormalized:\n\n  def __init__(self, tfhub_url, transform_pkl_path,\n               organism='human'):\n    assert organism == 'human', 'Transforms only compatible with organism=human'\n    self._model = EnformerScoreVariantsRaw(tfhub_url, organism)\n    with tf.io.gfile.GFile(transform_pkl_path, 'rb') as f:\n      transform_pipeline = joblib.load(f)\n    self._transform = transform_pipeline.steps[0][1]  # StandardScaler.\n\n  def predict_on_batch(self, inputs):\n    scores = self._model.predict_on_batch(inputs)\n    return self._transform.transform(scores)\n\n\nclass EnformerScoreVariantsPCANormalized:\n\n  def __init__(self, tfhub_url, transform_pkl_path,\n               organism='human', num_top_features=500):\n    self._model = EnformerScoreVariantsRaw(tfhub_url, organism)\n    with tf.io.gfile.GFile(transform_pkl_path, 'rb') as f:\n      self._transform = joblib.load(f)\n    self._num_top_features = num_top_features\n\n  def predict_on_batch(self, inputs):\n    scores = self._model.predict_on_batch(inputs)\n    return self._transform.transform(scores)[:, :self._num_top_features]\n\n\n# TODO(avsec): Add feature description: Either PCX, or full names.\n\n\n# @title `variant_centered_sequences`\n\nclass FastaStringExtractor:\n\n    def __init__(self, fasta_file):\n        self.fasta = pyfaidx.Fasta(fasta_file)\n        self._chromosome_sizes = {k: len(v) for k, v in self.fasta.items()}\n    #import pd.Interval as Interval\n    def extract(self, interval: Interval, **kwargs) -&gt; str:\n        # Truncate interval if it extends beyond the chromosome lengths.\n        chromosome_length = self._chromosome_sizes[interval.chrom]\n        trimmed_interval = Interval(interval.chrom,\n                                    max(interval.start, 0),\n                                    min(interval.end, chromosome_length),\n                                    )\n        # pyfaidx wants a 1-based interval\n        sequence = str(self.fasta.get_seq(trimmed_interval.chrom,\n                                          trimmed_interval.start + 1,\n                                          trimmed_interval.stop).seq).upper()\n        # Fill truncated values with N's.\n        pad_upstream = 'N' * max(-interval.start, 0)\n        pad_downstream = 'N' * max(interval.end - chromosome_length, 0)\n        return pad_upstream + sequence + pad_downstream\n\n    def close(self):\n        return self.fasta.close()\n\n\ndef one_hot_encode(sequence):\n  return kipoiseq.transforms.functional.one_hot_dna(sequence).astype(np.float32)\n\n\n\n# @title `plot_tracks`\n\ndef plot_tracks(tracks, interval, height=1.5):\n  fig, axes = plt.subplots(len(tracks), 1, figsize=(20, height * len(tracks)), sharex=True)\n  for ax, (title, y) in zip(axes, tracks.items()):\n    ax.fill_between(np.linspace(interval.start, interval.end, num=len(y)), y)\n    ax.set_title(title)\n    sns.despine(top=True, right=True, bottom=True)\n  ax.set_xlabel(str(interval))\n  plt.tight_layout()\n\nHere, we define some utility functions for ourselves, to help us make predictions and analyse our predictions.\n\nimport Bio\n\nfrom Bio.Seq import Seq\ndef create_rev_complement(dna_string):\n    return(str(Seq(dna_string).reverse_complement()))\n\n\ndef prepare_for_quantify_prediction_per_TSS(predictions, gene, tss_df):\n\n  '''\n\n  Parameters:\n          predicitions (A numpy array): All predictions from the track\n          gene (a gene name, character): a gene\n          tss_df: a list of dataframe of genes and their transcription start sites\n  Returns:\n          A dictionary of cage experiment predictions and a list of transcription start sites\n\n  '''\n\n  output = dict()\n  for tdf in tss_df:\n    if gene not in tdf.genes.values:\n      continue\n    gene_tss_list = tdf[tdf.genes == gene].txStart_Sites.apply(str).values\n    gene_tss_list = [t.split(', ') for t in gene_tss_list]\n    gene_tss_list = [int(item) for nestedlist in gene_tss_list for item in nestedlist]\n    gene_tss_list = list(set(gene_tss_list))\n  output['cage_predictions'] = predictions[:, 5110] # a numpy array\n  output['gene_TSS'] = gene_tss_list # a list\n\n\n  return(output) # a dictionary\n\ndef quantify_prediction_per_TSS(low_range, TSS, cage_predictions):\n\n  '''\n  Parameters:\n          low_range (int): The lower interval\n          TSS (list of integers): A list of TSS for a gene\n          cage_predictions: A 1D numpy array or a vector of predictions from enformer corresponding to track 5110 or CAGE predictions\n  Returns:\n          A dictionary of gene expression predictions for each TSS for a gene\n    '''\n  tss_predictions = dict()\n  for tss in TSS:\n    bin_start = low_range + ((768 + 320) * 128)\n    count = -1\n    while bin_start &lt; tss:\n      bin_start = bin_start + 128\n      count += 1\n    if count &gt;= len(cage_predictions)-1:\n      continue\n    cage_preds = cage_predictions[count - 1] + cage_predictions[count] + cage_predictions[count + 1]\n    tss_predictions[tss] = cage_preds\n\n  return(tss_predictions)\n\ndef collect_intervals(chromosomes = [\"22\"], gene_list=None):\n\n  '''\n    Parameters :\n      chromosomes : a list of chromosome numbers; each element should be a string format\n      gene_list : a list of genes; the genes should be located on those chromosomes\n\n    Returns :\n      A dictionary of genes (from gene_list) and their intervals within their respective chromosomes\n  '''\n\n  gene_intervals = {} # Collect intervals for our genes of interest\n\n  for chrom in chromosomes:\n    with open(\"/home/s1mi/enformer_tutorial/gene_chroms/gene_\"+ chrom + \".txt\", \"r\") as chrom_genes:\n      for line in chrom_genes:\n        split_line = line.strip().split(\"\\t\")\n        gene_intervals[split_line[2]] = [\n                                          split_line[0],\n                                          int(split_line[3]),\n                                          int(split_line[4])\n                                        ]\n\n  if isinstance(gene_list, list): # if the user has supplied a list of genes they are interested in\n    use_genes = dict((k, gene_intervals[k]) for k in gene_list if k in gene_intervals)\n    return(use_genes)\n  elif isinstance(gene_list, type(None)):\n    return(gene_intervals)\n\n\ndef run_predictions(gene_intervals, tss_dataframe, individuals_list=None):\n  '''\n  Parameters :\n    gene_intervals : the results from calling `collect_intervals`\n    tss_dataframe : a list of the TSSs dataframes i.e. the TSS for the genes in the chromosomes\n    individuals_list : a list of individuals on which we want to make predictions; defaults to None\n\n  Returns :\n    A list of predictions; the first element is the predictions around the TSS for each gene. The second is the prediction across CAGE tracks\n  '''\n\n  gene_output = dict()\n  gene_predictions = dict()\n\n  for gene in gene_intervals.keys():\n    gene_interval = gene_intervals[gene]\n    target_interval = kipoiseq.Interval(\"chr\" + gene_interval[0],\n                                        gene_interval[1],\n                                        gene_interval[2]) # creates an interval to select the right sequences\n    target_fa = fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))  # extracts the fasta sequences, and resizes such that it is compatible with the sequence_length\n    window_coords = target_interval.resize(SEQUENCE_LENGTH) # we also need information about the start and end locations after resizing\n    try:\n      cur_gene_vars = pd.read_csv(\"/home/s1mi/enformer_tutorial/individual_beds/chr\" + gene_interval[0] + \"/chr\" + gene_interval[0] + \"_\"+ gene + \".bed\", sep=\"\\t\", header=0) # read in the appropriate bed file for the gene\n    except:\n      continue\n    individual_results = dict()\n    individual_prediction = dict()\n\n    if isinstance(individuals_list, list) or isinstance(individuals_list, type(np.empty([1, 1]))):\n      use_individuals = individuals_list\n    elif isinstance(individuals_list, type(None)):\n      use_individuals = cur_gene_vars.columns[4:]\n\n    for individual in use_individuals:\n      print('Currently on gene {}, and predicting on individual {}...'.format(gene, individual))\n      # two haplotypes per individual\n      haplo_1 = list(target_fa[:])\n      haplo_2 = list(target_fa[:])\n\n      ref_mismatch_count = 0\n      for i,row in cur_gene_vars.iterrows():\n\n        geno = row[individual].split(\"|\")\n        if (row[\"POS\"]-window_coords.start-1) &gt;= len(haplo_2):\n          continue\n        if (row[\"POS\"]-window_coords.start-1) &lt; 0:\n          continue\n        if geno[0] == \"1\":\n          haplo_1[row[\"POS\"]-window_coords.start-1] = row[\"ALT\"]\n        if geno[1] == \"1\":\n          haplo_2[row[\"POS\"]-window_coords.start-1] = row[\"ALT\"]\n\n      # predict on the individual's two haplotypes\n      prediction_1 = model.predict_on_batch(one_hot_encode(\"\".join(haplo_1))[np.newaxis])['human'][0]\n      prediction_2 = model.predict_on_batch(one_hot_encode(\"\".join(haplo_2))[np.newaxis])['human'][0]\n\n      temp_predictions = [prediction_1[:, 5110], prediction_2[:, 5110]] # CAGE predictions we are interested in\n      individual_prediction[individual] = temp_predictions\n\n      # Calculate TSS CAGE expression which correspond to column 5110 of the predictions above\n      temp_list = list()\n\n      pred_prepared_1 = prepare_for_quantify_prediction_per_TSS(predictions=prediction_1, gene=gene, tss_df=tss_dataframe)\n      tss_predictions_1 = quantify_prediction_per_TSS(low_range = window_coords.start, TSS=pred_prepared_1['gene_TSS'], cage_predictions=pred_prepared_1['cage_predictions'])\n\n      pred_prepared_2 = prepare_for_quantify_prediction_per_TSS(predictions=prediction_2, gene=gene, tss_df=tss_dataframe)\n      tss_predictions_2 = quantify_prediction_per_TSS(low_range = window_coords.start, TSS=pred_prepared_2['gene_TSS'], cage_predictions=pred_prepared_2['cage_predictions'])\n\n      temp_list.append(tss_predictions_1)\n      temp_list.append(tss_predictions_2) # results here are a dictionary for each TSS for each haplotype\n\n      individual_results[individual] = temp_list # save for the individual\n\n    gene_output[gene] = individual_results\n    gene_predictions[gene] = individual_prediction\n\n  return([gene_output, gene_predictions])\n\n\ndef collect_target_intervals(gene_intervals):\n\n  '''\n  Returns a dictionary of Interval objects (from kipoiseq) for each gene corresponding to the locations of the gene\n  '''\n\n  target_intervals_dict = dict()\n\n  for gene in gene_intervals.keys():\n    gene_interval = gene_intervals[gene]\n    target_interval = kipoiseq.Interval(\"chr\" + gene_interval[0],\n                                        gene_interval[1],\n                                        gene_interval[2])\n    target_intervals_dict[gene] = target_interval\n\n  return(target_intervals_dict)\n\ndef prepare_for_plot_tracks(gene, individual, all_predictions, chromosome=['22']):\n\n  '''\n  This returns a dictionary of gene tracks and gene intervals, prepared for the function plot_tracks.\n\n  Parameters:\n    - gene\n    - individual\n    - all_predictions\n  '''\n\n  haplo_predictions = all_predictions[gene][individual]\n  gene_tracks = {gene + ' | ' + individual + ' | haplotype 1': np.log10(1 + haplo_predictions[0]),\n                gene + ' | ' + individual + ' | haplotype 2': np.log10(1 + haplo_predictions[1])}\n\n  gene_intervals = collect_intervals(chromosomes=chromosome, gene_list=[gene])\n  gene_intervals = collect_target_intervals(gene_intervals)\n\n  output = dict()\n  output['gene_tracks'] = gene_tracks\n  output['gene_intervals'] = gene_intervals[gene]\n\n  return(output)\n\ndef check_individuals(path_to_bed_file, list_of_individuals):\n\n  '''\n  Checks if an individual is missing in bed variation files.\n  These individuals should be removed prior to training\n  '''\n\n  myfile = open(path_to_bed_file, 'r')\n  myline = myfile.readline()\n  bed_names = myline.split('\\t')[4:]\n  myfile.close()\n\n  if set(list_of_individuals).issubset(set(bed_names)) == False:\n    missing = list(set(list_of_individuals).difference(bed_names))\n    print('This (or these) individual(s) is/are not present: {}'.format(missing))\n  else:\n    missing = []\n    print('All individuals are present in the bed file.')\n\n  return(missing)\n\n\ndef plot_predixcan_vs_geuvadis(interested_gene, interested_individuals, geuvadis_expression, predixcan_expression):\n\n  '''\n  Show a plot and return correlation coefficient\n  '''\n  # from predixcan expression\n  df_predixcan = predixcan_expression[predixcan_expression.gene_name == interested_gene].loc[:,interested_individuals]\n  # from enformer\n  df_geuvadis = geuvadis_expression[geuvadis_expression.gene_name == interested_gene].loc[:,interested_individuals]\n\n  # concatenate both\n  df_all = pd.concat([df_predixcan, df_geuvadis], axis=0)\n  df_all.index = ['Predixcan', 'GEUVADIS']\n\n  # plotting\n  sns.regplot(x=df_all.iloc[0,:], y=df_all.iloc[1,:], color='red').set(title='Predixcan vs. GEUVADIS predictions on {} individuals for gene {}'.format(len(df_all.columns), interested_gene))\n\n  # correlation coefficient\n  corr_coef = np.corrcoef(x=df_all.iloc[0,:], y=df_all.iloc[1,:])[0][1]\n\n  return([df_all, corr_coef])\n\ndef plot_enformer_vs_predixcan(prediction_results, interested_gene, interested_individuals, predixcan_expression, how='sum'):\n\n  '''\n  Show a plot and return correlation coefficient\n  '''\n\n  enformer_predictions = dict()\n\n  for gene, individuals in prediction_results[0].items():\n    temp_individual = dict()\n    for individual, haplo_predictions in individuals.items():\n      temp = list()\n      for i in range(0, len(haplo_predictions[0])):\n        temp.append(list(haplo_predictions[0].values())[i] + list(haplo_predictions[1].values())[i])\n      if how == 'sum':\n        temp_individual[individual] = np.sum(temp)\n      elif how == 'max':\n        temp_individual[individual] = np.max(temp)\n    enformer_predictions[gene] = temp_individual\n\n  # from predixcan expression\n  df_predixcan = predixcan_expression[predixcan_expression.gene_name == interested_gene].loc[:,interested_individuals]\n  # from enformer\n  df_enformer = pd.DataFrame(enformer_predictions[interested_gene], index=[0]).loc[:, df_predixcan.columns]\n\n  # concatenate both\n  df_all = pd.concat([df_enformer, df_predixcan], axis=0)\n  df_all.index = ['Enformer', 'Predixcan']\n\n  # plotting\n  sns.regplot(x=df_all.iloc[0,:], y=df_all.iloc[1,:], color='red').set(title='Predixcan vs. Enformer predictions on {} individuals for gene {}'.format(len(df_all.columns), interested_gene))\n\n  # correlation coefficient\n  corr_coef_predix = np.corrcoef(x=df_all.iloc[0,:], y=df_all.iloc[1,:])[0][1]\n\n  return([df_all, corr_coef_predix])\n\n\ndef plot_enformer_vs_geuvadis(prediction_results, interested_gene, interested_individuals, geuvadis_expression, how='sum'):\n\n  '''\n  Show a plot and return correlation coefficient\n  '''\n\n  enformer_predictions = dict()\n\n  for gene, individuals in prediction_results[0].items():\n    temp_individual = dict()\n    for individual, haplo_predictions in individuals.items():\n      temp = list()\n      for i in range(0, len(haplo_predictions[0])):\n        temp.append(list(haplo_predictions[0].values())[i] + list(haplo_predictions[1].values())[i])\n      if how == 'sum':\n        temp_individual[individual] = np.sum(temp)\n      elif how == 'max':\n        temp_individual[individual] = np.max(temp)\n    enformer_predictions[gene] = temp_individual\n\n  # from geuvadis expression\n  df_geuvadis = geuvadis_expression[geuvadis_expression.gene_name == interested_gene].loc[:,interested_individuals]\n  #df_enformer = np.transpose(pd.DataFrame(enformer_predictions)).loc[:, df_geuvadis.columns]\n  df_enformer = pd.DataFrame(enformer_predictions[interested_gene], index=[0]).loc[:, df_geuvadis.columns]\n\n  # concatenate both\n  df_all = pd.concat([df_enformer, df_geuvadis], axis=0)\n  df_all.index = ['Enformer', 'GEUVADIS']\n\n  # plotting\n  sns.regplot(x=df_all.iloc[0,:], y=df_all.iloc[1,:], color='blue').set(title='Enformer vs. Geuvadis predictions on {} individuals for gene {}'.format(len(df_all.columns), interested_gene))\n\n  # correlation coefficient\n  corr_coef_geu = np.corrcoef(x=df_all.iloc[0,:], y=df_all.iloc[1,:])[0][1]\n\n  return([df_all, corr_coef_geu])"
  },
  {
    "objectID": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#make-predictions-on-the-geuvadis-dataset.",
    "href": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#make-predictions-on-the-geuvadis-dataset.",
    "title": "GENETIC MEDICINE DEEP LEARNING HACKATHON 2022",
    "section": "Make predictions on the GEUVADIS dataset.",
    "text": "Make predictions on the GEUVADIS dataset.\nHere, we will begin to make predictions. Excited?!\nWe still need the model itself. The model has been graciously hosted on Tensorflow Hub, which hosts many other models too. You can click on the link and explore. When you click the link, you can see that the model is about 892 Mb large. Quite big. We will use the url to the model to download and use it here.\nEarlier, we defined an Enformer class (see the codes section). We will load the model into this class. The model has been trained and the weights are freely available. All we need to do is to load this model and use it. Neat.\nWe also defined a class FastaStringExtractor, that can help us extract raw sequences from fasta files given the intervals we want. We will make use of this class too.\n\nmodel = Enformer(model_path) # here we load the model architecture.\n\nfasta_extractor = FastaStringExtractor(fasta_file) # we define a class called fasta_extractor to help us extra raw sequence data\n\n\nEXERCISE 1:\nFor evaluation, we need to sum the predictions around each unique TSS for a given gene. We will be using this a lot so it is important that we define what it means. Essentially, for a gene with one TSS, we take the sum of predicitions of the 128 bp output bin containing the TSS and its two immediate neighboring bins. We do this for each haplotype and each TSS to give TSS-level predictions.\nTo get individual-level estimates for a whole gene, we sum each haplotype TSS estimate to summarize TSS-level predictions per individual, and then take either the sum or max of TSS-level predictions to summarize at the gene level.\nThere are many genes and many individuals in our datasets. To make illustration simpler, we will use four genes, ERAP1, ERAP2, NUDT2, and PEX6, located on chromosome 5, 5, 9, and 6 respectively. We will use predictions for 10 randomly selected individuals located in the bed files.\n\ndownload_chrom_beds(chromosome = \"5\", genes = ['ERAP1', 'ERAP2'])\ndownload_chrom_beds(chromosome = \"9\", genes = ['NUDT2'])\ndownload_chrom_beds(chromosome = \"6\", genes = ['PEX6'])\n\nHere, we read into a dataframe the TSS (transcription start sites) per gene for the chromosomes we are interested in. The dataframe has three columns. The first contains the genes, and the second contains the TSS(s) for that gene, and the third contains the strand information. We are interested in genes located on chromosomes 5, 6 and 9.\n\nchr5_tss = pd.read_table('/home/s1mi/enformer_tutorial/tss_by_chr/chr5_tss_by_gene.txt', sep='\\t')\nchr6_tss = pd.read_table('/home/s1mi/enformer_tutorial/tss_by_chr/chr6_tss_by_gene.txt', sep='\\t')\nchr9_tss = pd.read_table('/home/s1mi/enformer_tutorial/tss_by_chr/chr9_tss_by_gene.txt', sep='\\t')\n\nchr9_tss.head(10)\n\n\nPreparing inputs for Enformer\nNow that we have downloaded the genetic information that we need, we want to prepare the inputs for Enformer.\nWe need the following - The genes we want to predict for - The genomic interval for these genes - Information about the transcription start sites for these genes - The individuals we want to predict for\nWe have a utility function that helps to define the intervals of a gene, and resize this interval to make it acceptable for Enformer. Enformer needs a specific, defined sequence length. We use the collect_intervals function. The result is a dictionary that contains chromosome and interval information for each gene.\nFor example, let’s explore ERAP1…\n\nERAP1_intervals = collect_intervals(chromosomes=['5'], gene_list=['ERAP1'])\nERAP1_target_intervals = collect_target_intervals(ERAP1_intervals)\nERAP1_intervals, ERAP1_target_intervals\n\nERAP1_target_intervals is an Interval object created using the kipoiseq package we installed earlier. It is used during predictions, and we don’t need to know the methods of this object for the purpose of the next questions.\nHowever, we have similar information in ERAP1_intervals, which is a python dictionary of lists. For the questions below, we will use the ERAP1_intervals object.\n\n\nQuestion 1a\nWhat is the size of this interval? Hint: Look at the ERAP1_intervals, and remember that Python is 0-based indexed. You need to access the key of this dictionary, which is the gene name, and for the value, which is a list, you can access the first element using 0, the second element using 1, and so on.\n\nERAP1_intervals['ERAP1'][2] - ERAP1_intervals['ERAP1'][1] # your answers go in the ...\n\n\n\nNote\nYou can roughly confirm this interval by going to the UCSC genome browser or Ensemble genome browser. We have provided a link for UCSC genome browser’s interval length for ERAP1 here. Click on this link, the answer is right at the top of the browser.\nEnformer takes in a defined sequence length. When we provide a gene and collect its intervals, we need to resize this interval to be acceptable for Enformer. Here, we will use the Intervals object define earlier, ERAP1_target_intervals.\n\nERAP1_target_interval_resized = ERAP1_target_intervals['ERAP1'].resize(SEQUENCE_LENGTH)\nERAP1_target_interval_resized\n\n\n\nQuestion 1b\nWhat is the length of this interval? Simply run the next line of code.\n\nERAP1_target_interval_resized.end - ERAP1_target_interval_resized.start\n\nEssentially, we resized the length of the gene and pad it with the native sequences to the left and to the right, such that the length of the input sequence is 393216, and we can imagine our gene right at the center of this wider interval. This is the same interval length used to train ENCODE data to build Enformer. Since this value is pre-define, we really cannot change it. This is information that Enformer uses to make very good predictions. Below, we confirm that this is true.\n\n(ERAP1_target_interval_resized.end - ERAP1_target_interval_resized.start) == SEQUENCE_LENGTH\n\n\n\nMaking predictions with Enformer\nWe will select 10 individuals (we have provided 10 randomly sample individuals for ease), and use four genes, ERAP1, ERAP2, NUDT2, and PEX6, located on chromosome 5, 5, 9, and 6 respectively\nWe will collect the intervals that correspond to these genes, collect the sequences for that interval from the reference fasta file, loop through each individual’s variations in the bed files we provided, switch around the variations for each haplotype and predict expression.\nEventually, for each individual, we should have predictions corresponding to each haplotype. We expect that since the haplotypes are different, the predictions should vary too.\nAdditionally, we need the TSS for these genes. Remember that we read in the dataframe earlier.\n\nexercise_1_genes = ['ERAP1', 'NUDT2', 'ERAP2', 'PEX6'] # our gene of interest\n#exercise_1_gene = ['NUDT2', 'ERAP2'] # our gene of interest\n\nexercise_1_individuals = ['NA11992', 'NA19235', 'NA20770', 'HG00232', 'HG00342', 'NA20502', 'NA19189', 'HG00108', 'HG00380', 'NA12872'] # individuals we are interested in\n\nexercise_1_chromosomes = ['5', '9', '6'] # the gene is on chromosome 5\n\nexercise_1_tss_dfs = [chr5_tss, chr9_tss, chr6_tss] # we use the TSS information\n\n\n\nQUESTION 2\nWhat is the id of the 8th individual? Hint: Python used 0-based indexing\n\nprint('The 8th individual is {}'.format(exercise_1_individuals[7])) # your code goes into the ellipsis\n\nIt is possible to have individuals not present in our variation bed files for some reasons. So, we will do some sanity checks.\nUsing the check_individuals functions, we will check if all these individuals are present in the bed file for that gene.\n\nmissing_1 = check_individuals(\"/home/s1mi/enformer_tutorial/individual_beds/chr9/chr9_NUDT2.bed\", list_of_individuals = exercise_1_individuals)\nmissing_2 = check_individuals(\"/home/s1mi/enformer_tutorial/individual_beds/chr5/chr5_ERAP2.bed\", list_of_individuals = exercise_1_individuals)\nmissing_3 = check_individuals(\"/home/s1mi/enformer_tutorial/individual_beds/chr5/chr5_ERAP1.bed\", list_of_individuals = exercise_1_individuals)\nmissing_4 = check_individuals(\"/home/s1mi/enformer_tutorial/individual_beds/chr6/chr6_PEX6.bed\", list_of_individuals = exercise_1_individuals)\nmissing_1, missing_2, missing_3, missing_4\n\nIt looks like all the individuals are present. Very nice! We are good to go.\nTo make predictions, we first collect the intervals for the genes we want to predict for.\n\nexercise_1_interval = collect_intervals(chromosomes=exercise_1_chromosomes, gene_list=exercise_1_genes) # here, we collect the intervals for that gene\nexercise_1_interval\n\nNext, we use the run_predictions function\n\nexercise_1_predictions = run_predictions(gene_intervals=exercise_1_interval, tss_dataframe=exercise_1_tss_dfs, individuals_list=exercise_1_individuals) # here we make predictions and save it.\n\nNB: If you intend to make predictions across many individuals and genes, it will be faster if you have larger GPU access. For now, we are using limited GPU. So, we have to limit our predictions.\nQuite fast right? Very nice.\nOur prediction object, exercise_1_predictions is a list of length two. - The first item in the list corresponds to the sum of predictions around each unique TSS, for each haplotype, for each individual, for each gene.\n\nThe second item in the list corresponds to the CAGE:B lymphoblastoid cell line predictions across all 128bp bins for each haplotype, for each individual, for the genes. We will use the second item for plotting the tracks.\n\nLet us take a look at the object.\n\nprint(\"The exercise_1_predictions object is a {} of length {}.\".format(type(exercise_1_predictions).__name__, len(exercise_1_predictions)))\n\n\nexercise_1_predictions[0]\n\n\n\nPlotting the CAGE:B lymphoblastoid cell line tracks\nNext, we will plot the tracks. We have already defined two helper functions, prepare_for_plot_tracks and plot_tracks to plot the expression along the TSS for a gene, for an individual and for each haplotype.\nFor NUDT2…\n\ntemp = prepare_for_plot_tracks(gene=exercise_1_genes[1], individual=exercise_1_individuals[0], all_predictions=exercise_1_predictions[1], chromosome=['9'])\nplot_tracks(tracks=temp['gene_tracks'], interval=temp['gene_intervals'])\n\nLooks nice!\nAlthough it looks like there is no variation in the predictions for the haplotypes, we can take a look at the actual prediction values across the TSS.\nThe columns are the transcription start sites, and the rows are the haplotypes for the individual. The entries are the sum of the predictions at the TSS, at TSS - 1, and at the TSS + 1.\nWe will look at the first individual, NA11992, for NUDT2…\n\npd.DataFrame(exercise_1_predictions[0][exercise_1_genes[1]][exercise_1_individuals[0]], index=['haplotype_1', 'haplotype_2'])\n\nWe will look at the first individual, NA11992, for PEX6…\n\npd.DataFrame(exercise_1_predictions[0][exercise_1_genes[3]][exercise_1_individuals[0]], index=['haplotype_1', 'haplotype_2'])\n\nMerely looking at the values, it looks like there are variations in the predictions across the haplotypes and the TSS. We expected some variations because we are predicting expression for each haplotype, which tend to have variations in them. Very nice!"
  },
  {
    "objectID": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#comparing-with-true-expression-from-geuvadis-and-with-predixcan",
    "href": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#comparing-with-true-expression-from-geuvadis-and-with-predixcan",
    "title": "GENETIC MEDICINE DEEP LEARNING HACKATHON 2022",
    "section": "Comparing with true expression from GEUVADIS and with Predixcan",
    "text": "Comparing with true expression from GEUVADIS and with Predixcan\nWe should read in the GEUVADIS and Predixcan predictions.\n\ngeuvadis_gene_expression = pd.read_table('https://uchicago.box.com/shared/static/5vwc7pjw9qmtv7298c4rc7bcuicoyemt.gz', sep='\\t',\n                                         dtype={'gene_id': str, 'gene_name':str, 'TargetID':str, 'Chr':str})\ngeuvadis_gene_expression.head(5)\n\n\npredixcan_gene_expression = pd.read_table('https://uchicago.box.com/shared/static/4k68u7x7rxjpoljfdva6qipjxwzd3l0g.txt', sep=' ')\npredixcan_gene_expression.head(5)\n\n\nQUESTION 3a\nWhat is the dimension/size/shape of the geuvadis_gene_expression dataframe? Hint: You can use the .shape method on a dataframe.\n\ngeuvadis_dimension = geuvadis_gene_expression.shape\n#print(\"The geuvadis_gene_expression dataframe has {} rows and {} columns\".format(*geuvadis_dimension))\n\n\n\nQUESTION 4b\nWhat is the dimension/size/shape of the predixcan_gene_expression dataframe? Hint: You can use the .shape method on a dataframe.\n\npredixcan_dimension = predixcan_gene_expression.shape\nprint(\"The predixcan_gene_expression dataframe has {} rows and {} columns\".format(*predixcan_dimension))\n\nWe select the individuals and the gene from the geuvadis_gene_expression dataframe.\n\nerap1_geuvadis_expression = geuvadis_gene_expression[geuvadis_gene_expression.gene_name == exercise_1_genes[0]].loc[:,exercise_1_individuals]\nnudt2_geuvadis_expression = geuvadis_gene_expression[geuvadis_gene_expression.gene_name == exercise_1_genes[1]].loc[:,exercise_1_individuals]\nerap2_geuvadis_expression = geuvadis_gene_expression[geuvadis_gene_expression.gene_name == exercise_1_genes[2]].loc[:,exercise_1_individuals]\npex6_geuvadis_expression = geuvadis_gene_expression[geuvadis_gene_expression.gene_name == exercise_1_genes[3]].loc[:,exercise_1_individuals]\n\n\nnudt2_geuvadis_expression\n\nWe will sum the prediction for both haplotypes for each TSS, and take the sum of the resulting values. The function used here can also take the max instead of the sums.\nWe have 3 utility functions to help us - plot_enformer_vs_guevadis - plot_predixcan_vs_geuvadis - plot_enformer_vs_predixcan (if you think this is necessary)\n\nerap1_vs_geu = plot_enformer_vs_geuvadis(prediction_results=exercise_1_predictions, geuvadis_expression=geuvadis_gene_expression,\n                            interested_gene=exercise_1_genes[0], interested_individuals=exercise_1_individuals, how='sum')\nprint('Correlation coefficient: {}'.format(erap1_vs_geu[1]))\n\n\npex6_vs_geu = plot_enformer_vs_geuvadis(prediction_results=exercise_1_predictions, geuvadis_expression=geuvadis_gene_expression,\n                            interested_gene=exercise_1_genes[3], interested_individuals=exercise_1_individuals, how='sum')\n\nprint('Correlation coefficient: {}'.format(pex6_vs_geu[1]))\n\n\nnudt_vs_geu = plot_enformer_vs_geuvadis(prediction_results=exercise_1_predictions, geuvadis_expression=geuvadis_gene_expression,\n                            interested_gene=exercise_1_genes[1], interested_individuals=exercise_1_individuals, how='sum')\n\nprint('Correlation coefficient: {}'.format(nudt_vs_geu[1]))\n\n\nerap2_vs_geu = plot_enformer_vs_geuvadis(prediction_results=exercise_1_predictions, geuvadis_expression=geuvadis_gene_expression,\n                            interested_gene=exercise_1_genes[2], interested_individuals=exercise_1_individuals, how='sum')\n\nprint('Correlation coefficient: {}'.format(erap2_vs_geu[1]))\n\nNow, we can see how Predixcan performs on these individuals\n\nerap1_predix = plot_predixcan_vs_geuvadis(interested_gene=exercise_1_genes[0], interested_individuals=exercise_1_individuals, geuvadis_expression=geuvadis_gene_expression, predixcan_expression=predixcan_gene_expression)\nprint('The correlation coefficient: {}'.format(erap1_predix[1]))\n\n\npex6_predix = plot_predixcan_vs_geuvadis(interested_gene=exercise_1_genes[3], interested_individuals=exercise_1_individuals, geuvadis_expression=geuvadis_gene_expression, predixcan_expression=predixcan_gene_expression)\nprint('The correlation coefficient: {}'.format(pex6_predix[1]))\n\n\nerap2_predix = plot_predixcan_vs_geuvadis(interested_gene=exercise_1_genes[2], interested_individuals=exercise_1_individuals, geuvadis_expression=geuvadis_gene_expression, predixcan_expression=predixcan_gene_expression)\nprint('The correlation coefficient: {}'.format(erap2_predix[1]))\n\n\nnudt2_predix = plot_predixcan_vs_geuvadis(interested_gene=exercise_1_genes[1], interested_individuals=exercise_1_individuals, geuvadis_expression=geuvadis_gene_expression, predixcan_expression=predixcan_gene_expression)\nprint('The correlation coefficient: {}'.format(nudt2_predix[1]))\n\nQuite neat and impressive!"
  },
  {
    "objectID": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#exercise-2",
    "href": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#exercise-2",
    "title": "GENETIC MEDICINE DEEP LEARNING HACKATHON 2022",
    "section": "EXERCISE 2",
    "text": "EXERCISE 2\nIn this exercise, you will get your hands dirty, and run Enformer on your gene(s) of interest.\n\nSelect your favorite gene(s). Note that the more genes you use, the longer it will take to run.\nRandomly select 10 individuals, just because we don’t have all the computational power.\nRun predictions\n\nWe only have data for a finite set of genes (sorry!). Here is a list of available genes you can use:\n\n!curl -L https://uchicago.box.com/shared/static/x8d7dx1ykefz49ep6sxot42v44sfvcv5.tsv --output /home/s1mi/enformer_tutorial/all_genes.tsv\n\nwith open(\"/home/s1mi/enformer_tutorial/all_genes.tsv\", \"r\") as ag:\n  all_genes = [line.strip() for line in ag]\nprint(len(all_genes))\nprint(\"First 5 genes all_genes:\", all_genes[0:5])\n\n\nSelect your genes\n\n\nmy_genes = ['ATAD3A']\nprint(\"My gene(s) is/are {}\".format(', '.join(my_genes)))\n\n\nRead in the TSS txt files where those chromosome are located. If you have genes located on more than one chromosome, copy the pd.read_table line for each chromosome you have, and replace the chromosome number (ellipses) as appropriate.\n\n\nmy_chromosomes = ['1'] # put in the chromosomes where the genes are located. Just the numbers will do, or you can put them in as a string type\n\n\nmy_tss_list = []\nfor chr in my_chromosomes:\n  chr = str(chr)\n  bed_file = '/home/s1mi/enformer_tutorial/tss_by_chr/chr{}_tss_by_gene.txt'.format(chr)\n  my_tss_list.append(pd.read_table(bed_file, sep='\\t')) # we read in the TSSs for each chromosome, and put them into a list\n\n\nRandomly select 10 individuals\n\n\n# let us set a seed to randomly select 10 individuals\nnp.random.seed(2021)  # replace ... with an integer you want\n\nnumber_of_individuals = 10\n\nmy_individuals = np.random.choice(a=geuvadis_gene_expression.columns[6:-1], size=number_of_individuals, replace=False) # individuals we are interested in\nmy_individuals\n\n\nWe want to make sure that we have complete variation information for all 10 individuals.\n\nFirst, we need to download the variation bed files for these individuals\n\ndownload_chrom_beds(chromosome='1', genes=my_genes) # remember that the genes should be on that chromosome, and you can use this code for each chromosome you have.\n\nRead in the variation bed files\n\nimport os\n\nmy_missing_list = list()\nfor chr in my_chromosomes:\n  for gene in my_genes:\n    chr = str(chr)\n    file_path = '/home/s1mi/enformer_tutorial/individual_beds/chr' + chr + '/chr' + chr + '_' + gene + '.bed'\n    if not os.path.exists(file_path):\n      continue\n    my_missing_list.append(check_individuals(file_path, my_individuals))\n\n\nQUESTION 4\nAre there missing individuals? All answers, based on your results are correct. If there are missing individuals, can you remove them? You can add new code blocks as you like.\n\nmy_missing_list\n\nIt looks like we are almost set to make predictions.\n\nMake predictions. First, we will collect the intervals for the genes we want, check the object and make sure we are on the right track. Next, we will call our run_predictions function.\n\n\nmy_intervals = collect_intervals(chromosomes= my_chromosomes, gene_list= my_genes) # here, we collect the intervals for that gene; replace ... with the right objects\nmy_intervals\n\n\nmy_predictions = run_predictions(gene_intervals= my_intervals, tss_dataframe= my_tss_list, individuals_list=my_individuals)\n\nAt this point, we will leave you to make your own plots…\n\natad3a_geuvadis_expression = geuvadis_gene_expression[geuvadis_gene_expression.gene_name == my_genes[0]].loc[:,my_individuals]\natad3a_vs_geu = plot_enformer_vs_geuvadis(prediction_results=my_predictions, geuvadis_expression=geuvadis_gene_expression, \n                            interested_gene=my_genes[0], interested_individuals=my_individuals, how='sum')\nprint('Correlation coefficient: {}'.format(atad3a_vs_geu[1]))\n\n\natad3a_predix = plot_predixcan_vs_geuvadis(interested_gene=my_genes[0], interested_individuals=my_individuals, geuvadis_expression=geuvadis_gene_expression, predixcan_expression=predixcan_gene_expression)\nprint('The correlation coefficient: {}'.format(atad3a_predix[1]))"
  },
  {
    "objectID": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#average-haplotype-vs-average-epigenome",
    "href": "posts/hackathon-enformer-usage/Hackathon_enformer_usage_participant.html#average-haplotype-vs-average-epigenome",
    "title": "GENETIC MEDICINE DEEP LEARNING HACKATHON 2022",
    "section": "Average Haplotype vs Average Epigenome",
    "text": "Average Haplotype vs Average Epigenome\nGet ERAP2 interval:\n\nERAP2_intervals = collect_intervals(chromosomes=['5'], gene_list=['ERAP2'])\nERAP2_target_intervals = collect_target_intervals(ERAP2_intervals)\nERAP2_intervals, ERAP2_target_intervals\n\nSelect random individual\n\nrand_individual = np.random.choice(a=geuvadis_gene_expression.columns[6:-1], size=1, replace=False) # individuals we are interested in\nrand_individual\n\nRun predictions (returns average epigenome):\n\nmy_predictions = run_predictions(gene_intervals= my_intervals, tss_dataframe= my_tss_list, individuals_list=my_individuals)"
  },
  {
    "objectID": "posts/2023-08-22-correlation-across-rn7-genes-by-chromosome/index.html",
    "href": "posts/2023-08-22-correlation-across-rn7-genes-by-chromosome/index.html",
    "title": "Correlation of Enformer CAGE predictions on rn7 reference genome and measured gene expression in Br rats",
    "section": "",
    "text": "We ran Enformer across all rat genes and quantified expression in brain tissue. Our numbers, 0.45 pearson’s correlation and 0.76 spearman’s correlation, are very exciting. Although Enformer is optimized to predict gene expression in humans, we see a very strong performance in rats. In GTEx, Enformer predicts reference gene expression with 0.54 pearson’s correlation and 0.79 spearman’s correlation, while in GUEVADIS (LCL tissue), we see 0.20 pearson’s and 0.77 spearman’s."
  },
  {
    "objectID": "posts/2023-08-22-correlation-across-rn7-genes-by-chromosome/index.html#concatenate-predictions",
    "href": "posts/2023-08-22-correlation-across-rn7-genes-by-chromosome/index.html#concatenate-predictions",
    "title": "Correlation of Enformer CAGE predictions on rn7 reference genome and measured gene expression in Br rats",
    "section": "Concatenate Predictions",
    "text": "Concatenate Predictions\nWe start with concatenating our predictions into separate files by chromosome number, firstly because our predictions are currently split between two directories and secondly, by grouping intervals together by chromosome, we can parallelize computing gene expression.\n\nimport glob\nimport os\nimport h5py\nimport parsl\nfrom parsl import python_app\nfrom parsl.configs.local_threads import config\nparsl.load(config)\n\n&lt;parsl.dataflow.dflow.DataFlowKernel at 0x7ff1b2188070&gt;\n\n\n\noutput_dir = \"/home/s1mi/Br_predictions/predictions_folder/reference_Br_all_genes\"\nchr_list = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"X\"]\n\n\n@python_app\ndef concatenate_predictions_by_chromosome(predictions_dir, chr, output_dir):\n    output_path = os.path.join(output_dir, f\"chr{chr}_predictions.h5\")\n    with h5py.File(output_path, \"a\") as output_file:\n        files = glob.glob(f\"{predictions_dir}/chr{chr}_*_predictions.h5\")\n        for file in files:\n            interval = os.path.basename(file).replace(\"_predictions.h5\", \"\")\n            with h5py.File(file, \"r\") as input_file:\n                output_file[interval] = input_file[interval][()]\n            \n\n\n## concatenate files in first prediction run\npredictions_dir = f\"{output_dir}/predictions_2023-08-16/enformer_predictions/reference_Br/haplotype0\"\napp_futures = []\nfor chr in chr_list:\n    app_futures.append(concatenate_predictions_by_chromosome(predictions_dir, chr, output_dir))\nexec_futures = [q.result() for q in app_futures]\n\n\n## concatenate files in second prediction run\npredictions_dir = f\"{output_dir}/predictions_2023-08-29/enformer_predictions/reference_Br/haplotype0\"\napp_futures = []\nfor chr in chr_list:\n    app_futures.append(concatenate_predictions_by_chromosome(predictions_dir, chr, output_dir))\n\nexec_futures = [q.result() for q in app_futures]\n\nSecond prediction folder done"
  },
  {
    "objectID": "posts/2023-08-22-correlation-across-rn7-genes-by-chromosome/index.html#compare-predicted-and-observed",
    "href": "posts/2023-08-22-correlation-across-rn7-genes-by-chromosome/index.html#compare-predicted-and-observed",
    "title": "Correlation of Enformer CAGE predictions on rn7 reference genome and measured gene expression in Br rats",
    "section": "Compare Predicted and Observed",
    "text": "Compare Predicted and Observed\n\nimport h5py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport parsl\nfrom parsl import python_app\nfrom parsl.configs.local_threads import config\nparsl.load(config)\n\n&lt;parsl.dataflow.dflow.DataFlowKernel at 0x7f5325796800&gt;\n\n\n\nproject_dir = \"/home/s1mi/Br_predictions/predictions_folder/reference_Br_all_genes\"\nchr_list = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"X\"]\nrn7_annot = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t')\ngene_dict = rn7_annot.groupby('chromosome')['geneId'].apply(list).to_dict()\n\n/tmp/ipykernel_89896/1953959868.py:3: DtypeWarning: Columns (2) have mixed types. Specify dtype option on import or set low_memory=False.\n  rn7_annot = pd.read_csv('/home/s1mi/enformer_rat_data/annotation/rn7.gene.txt', sep ='\\t')\n\n\n\n## filter genes to chr1-20 and X and make chr all strings\ngene_dict = {str(key): value for key, value in gene_dict.items() if str(key) in chr_list}\n\n\ntpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\nmean_tpm = tpm.iloc[:,3:].mean(axis=1)\nmean_tpm.name = 'observed'\n\n/tmp/ipykernel_89896/417279503.py:1: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\n  tpm = pd.read_csv(\"/home/s1mi/enformer_rat_data/expression_data/Brain.rn7.expr.tpm.bed\", sep=\"\\t\", header=0, index_col='gene_id')\n\n\n\n## Function to put CAGE predictions in list (in the same order as gene list by chromosome)\n@python_app\ndef query_genes(chr):\n    gene_list = gene_dict[chr]\n    with h5py.File(f\"{project_dir}/chr{chr}_predictions.h5\", \"r\") as file:\n        for gene in gene_list:\n            interval = f\"chr{chr}_{rn7_annot.loc[gene]['tss']}_{rn7_annot.loc[gene]['tss']}\"\n            bins = file[interval][446:450, 4980]\n            CAGE_predictions[chr].append(np.average(bins))\n\n\nrn7_annot.set_index(\"geneId\", inplace=True)\nCAGE_predictions = {chr: [] for chr in chr_list}\napp_futures = []\n## Collect CAGE predictions in parallel across genes\nfor chr in chr_list:\n    app_futures.append(query_genes(chr))\n## Wait for all chromosomes to finish\nexec_futures = [q.result() for q in app_futures]\n\n\nmerged_dict = {}\nfor chr in chr_list:\n    merged_dict[chr] = pd.DataFrame(index=gene_dict[chr])\n    merged_dict[chr]['predicted'] = CAGE_predictions[chr]\n    merged_dict[chr]['observed'] = mean_tpm.loc[gene_dict[chr]]\n\n\nall_genes = pd.concat(merged_dict.values())\n#all_genes.to_csv(\"/home/s1mi/enformer_rat_data/output/rn7_reference_predicted_vs_observed_expression.csv\")\n\n\nimport pandas as pd\nall_genes = pd.read_csv(\"/home/s1mi/enformer_rat_data/output/rn7_reference_predicted_vs_observed_expression.csv\", index_col=0)\nprint(\"Pearson Correlation:\")\nall_genes.corr(method=\"pearson\")\n\nPearson Correlation:\n\n\n\n\n\n\n\n\n\npredicted\nobserved\n\n\n\n\npredicted\n1.000000\n0.452596\n\n\nobserved\n0.452596\n1.000000\n\n\n\n\n\n\n\n\nprint(\"Spearman Correlation:\")\nall_genes.corr(method=\"spearman\")\n\nSpearman Correlation:\n\n\n\n\n\n\n\n\n\npredicted\nobserved\n\n\n\n\npredicted\n1.000000\n0.759705\n\n\nobserved\n0.759705\n1.000000\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\ncorr = all_genes.corr(method=\"spearman\").iloc[0,1]\nprint(\"Correlation across all rn7 genes:\", corr)\nplt.scatter(all_genes['observed'], all_genes['predicted'], label=f'Correlation: {corr:.2f}')\nplt.xlabel('observed')\nplt.ylabel('predicted')\nplt.title(\"Enformer prediction across rat genes\")\nplt.legend()\nplt.grid(True)\nplt.show()\n\nCorrelation across all rn7 genes: 0.7597054021798328"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "deep-learning-in-genomics",
    "section": "",
    "text": "Home Page for Enformer Human and Rat Cross-species Analysis\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPersonalized Borzoi test on a few genes\n\n\n\n\n\n\n\n\n\n\n\n\nOct 4, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nCode Snippets for Borzoi Personalized Prediction\n\n\n\n\n\n\n\n\n\n\n\n\nSep 27, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nBorzoi CAGE test\n\n\n\n\n\nA 3-way comparison of Enformer/Borzoi prediction models against observed gene expression in human brain tissue. Correlation tests support the Borzoi paper’s claims, we report Spearman correlations of (1) R = 0.856 for Borzoi GTEx, (2) R = 0.807 for Borzoi CAGE, and (3) R = 0.796 for Enformer CAGE tracks against observed gene expression\n\n\n\n\n\n\nSep 26, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nBorzoi test predictions on small gene set\n\n\n\n\n\nRough template of scaled up Borzoi gene expression prediction\n\n\n\n\n\n\nSep 21, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nBorzoi eQTL Example\n\n\n\n\n\n\n\n\n\n\n\n\nSep 20, 2023\n\n\nJohannes Linder, David R. Kelley\n\n\n\n\n\n\n  \n\n\n\n\nAll R plots of PrediXcan and Enformer results\n\n\n\n\n\n\n\n\n\n\n\n\nSep 15, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nSummary plots of Enformer performance across genes\n\n\n\n\n\n\n\n\n\n\n\n\nSep 13, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nPreparing HS founder rat genotypes for Enformer pipeline\n\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nTest run of personalized Enformer on HS rats\n\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nValidating reference gene expression prediction\n\n\n\n\n\n\n\n\n\n\n\n\nSep 6, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nRerunning Enformer pipeline on missing individuals, intervals\n\n\n\n\n\n\n\n\n\n\n\n\nSep 2, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nComparing human and rat reference gene expression\n\n\n\n\n\nThere is 0.89 correlation between observed human and observed rat reference gene expression.\n\n\n\n\n\n\nSep 1, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nPersonalized Prediction Correlations for 868 rn7 genes\n\n\n\n\n\n\n\n\n\n\n\n\nSep 1, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nInvestigating the various CAGE brain tissue mouse tracks\n\n\n\n\n\nI decided on using the CAGE:hippocampus mouse hippocampus track as a representative of brain tissue, as there is no equivalent CAGE:Brain track in mouse targets.\n\n\n\n\n\n\nSep 1, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nRunning personalized Enformer pipeline on Br rats for many more genes\n\n\n\n\n\n\n\n\n\n\n\n\nAug 31, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nTesting the Enformer pipeline option to output both human and mouse head together\n\n\n\n\n\n\n\n\n\n\n\n\nAug 31, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nCorrelation between Enformer CAGE:Brain predictions and mean TPM in various GTEx brain tissues\n\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nComparing the predicted reference epigenome to Enformer runs centered at the TSS and ground truth\n\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nCisd2 Correlation across rats\n\n\n\n\n\n\n\n\n\n\n\n\nAug 24, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nCorrelation of Enformer CAGE predictions on rn7 reference genome and measured gene expression in Br rats\n\n\n\n\n\nPearson correlation for across genes is 0.45 and Spearman correlation is 0.76.\n\n\n\n\n\n\nAug 23, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nCorrelation between Enformer reference CAGE prediction and GTEx brain tissue expression across genes\n\n\n\n\n\n\n\n\n\n\n\n\nAug 22, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nCorrelation between human reference CAGE predictions to mean expression across GTEx genes\n\n\n\n\n\n\n\n\n\n\n\n\nAug 22, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nbiomaRt tutorial for querying gene annotation\n\n\n\n\n\nAn example query for hg38 genes and their cannonical TSS\n\n\n\n\n\n\nAug 18, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nQuerying Human Reference Epigenome\n\n\n\n\n\nWe first collected the TSS of all human genes where we have expression data for the orthologous rat gene. We used Laura’s tools to query CAGE tracks from genome-wide Enformer predictions on the reference genome.\n\n\n\n\n\n\nAug 17, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nTesting the Enformer pipeline’s handling of unphased VCFs\n\n\n\n\n\nIn the previous test, we added an option to read in unphased VCFs as if they were phased. It correctly ran Enformer on both “haplotypes”, but to reduce number of runs, we implemented predictions on the mean haplotype for unphased VCFs. Now we check that the pipeline method returns the same results as original Enformer usage\n\n\n\n\n\n\nAug 16, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nCorrelation of Enformer CAGE predictions and observed expression across all rn7 genes\n\n\n\n\n\nWe calculated correlation of 0.45 between Enformer predictions on rn7 reference genome and average gene expression in the Brain study.\n\n\n\n\n\n\nAug 15, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nPreparing rat VCFs for Enformer pipeline\n\n\n\n\n\n\n\n\n\n\n\n\nAug 14, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nHow to install bcftools from source\n\n\n\n\n\n\n\n\n\n\n\n\nAug 14, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nAn introduction to cyvcf2\n\n\n\n\n\n\n\n\n\n\n\n\nAug 14, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nTesting the Enformer pipeline with added parameters for personalized prediction on rats\n\n\n\n\n\n\n\n\n\n\n\n\nAug 12, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nDebugging Enformer predictions for eQTL genes\n\n\n\n\n\nAlthough we have picked genes with many linked variants, we are seeing no population variation in Enformer outputs. We’ll take a closer look at the genetic variation around the TSS.\n\n\n\n\n\n\nAug 11, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nComparing predicted vs observed gene expression for rat genes selected for variation in expression across Br population, number of eQTLs, and elastic net prediction performance\n\n\n\n\n\n\n\n\n\n\n\n\nAug 11, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nSelecting Rat genes for Enformer CAGE predictions\n\n\n\n\n\nWe are looking for genes with (1) variation in observed gene expression across individuals, (2) high prediction performance in elastic net training, and (3) multiple causal variants.\n\n\n\n\n\n\nAug 10, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nRunning Enformer across all rn7 genes\n\n\n\n\n\nOur pipeline inputs to run Enformer on the reference genome and sampled rat genotypes\n\n\n\n\n\n\nAug 10, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nRunning Enformer across all rn7 genes (continued)\n\n\n\n\n\nWe pick up where we left off last time with predicting epigenome across all genes, trying to run the Enformer pipeline on intervals we missed the first time because of batching issues. Additionally, we’ll try using the added mouse head parameter\n\n\n\n\n\n\nAug 10, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nRunning Enformer across all rn7 genes (continued)\n\n\n\n\n\nWe pick up where we left off last time with predicting epigenome across all genes, trying to run the Enformer pipeline on intervals we missed the first time because of batching issues. Additionally, we’ll try using the added mouse head parameter\n\n\n\n\n\n\nAug 10, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nDebugging the issue of low variance in Enformer CAGE prediction\n\n\n\n\n\nWe checked whether our genes have peaks at the TSS and then compared the variation of CAGE predictions from the two different methods of centering intervals.\n\n\n\n\n\n\nAug 9, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nGenerating plots of Enformer CAGE predictions centered at TSS\n\n\n\n\n\n\n\n\n\n\n\n\nAug 8, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nPreparing pipeline inputs for Enformer predictions centered at canonical TSS”\n\n\n\n\n\n\n\n\n\n\n\n\nAug 8, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nCAGE Brain plots for three well-predicted genes\n\n\n\n\n\nEarlier we plotted predicts vs observed expression, but they did not show any association. Here, we investigate the CAGE predictions further\n\n\n\n\n\n\nAug 4, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nFirst attempt of comparing predicted vs observed gene expression\n\n\n\n\n\nIn this run, we centered enformer predictions around start and end for each gene. The plots show no association, but we will continue to use this template for plotting CAGE expression as we refine our approach to choosing genes for examination.\n\n\n\n\n\n\nAug 3, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nRunning Enformer pipeline on 3 well-predicted genes\n\n\n\n\n\n\n\n\n\n\n\n\nJul 26, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nComparing Enformer results on an arbitrary interval in different positions relative to window coordinates\n\n\n\n\n\n\n\n\n\n\n\n\nJul 21, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nRunning Enformer over reference genome\n\n\n\n\n\nWe use all intervals along chromosomes 5 through 7 and 8 through 11\n\n\n\n\n\n\nJul 21, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nAnnotate ENCODE targets table with system, cell, organ informations\n\n\n\n\n\n\n\n\n\n\n\n\n\nJul 17, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nComparing two methods of averaging Enformer results for personalized prediction\n\n\n\n\n\n\n\n\n\n\n\n\nJul 13, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nGENETIC MEDICINE DEEP LEARNING HACKATHON 2022\n\n\n\n\n\n\n\n\n\n\n\n\nJul 13, 2023\n\n\nSaideep Gona, Temidayo Adeluwa\n\n\n\n\n\n\n  \n\n\n\n\nGetting started on Polaris\n\n\n\n\n\nA couple snippets on the Polaris computing system\n\n\n\n\n\n\nJun 26, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nWeek 1\n\n\n\n\n\nThis week we learned the basics of VS Code, Python, and NumPy.\n\n\n\n\n\n\nJun 23, 2023\n\n\nSabrina Mi\n\n\n\n\n\n\n  \n\n\n\n\nOverview of LLM in Molecular Biology article by Serafim Batzoglou\n\n\n\n\n\nWe’ll review key points from each section of Large Language Models in Molecular Biology\n\n\n\n\n\n\nJun 20, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]