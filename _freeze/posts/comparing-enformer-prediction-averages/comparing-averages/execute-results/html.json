{
  "hash": "ba1cc77268e847068f7e668a20a220cf",
  "result": {
    "markdown": "---\ntitle: Comparing Enformer Prediction Averages\ndescription: 'We compare two methods of predicting the epigenome of an individual: the first was generated by running enformer on both haplotypes, then averaging the results, and the second by running enformer on the average of the haplotypes.'\nauthor: Sabrina Mi\ndate: 7/20/23\n---\n\n## Import Libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport tensorflow as tf\n# Make sure the GPU is enabled \nassert tf.config.list_physical_devices('GPU'), 'Start the colab kernel with GPU: Runtime -> Change runtime type -> GPU'\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\nimport tensorflow_hub as hub # for interacting with saved models and tensorflow hub\nimport joblib\nimport gzip # for manipulating compressed files\nimport kipoiseq # for manipulating fasta files\nfrom kipoiseq import Interval # same as above, really\nimport pyfaidx # to index our reference genome file\nimport pandas as pd # for manipulating dataframes\nimport numpy as np # for numerical computations\nimport matplotlib.pyplot as plt # for plotting\nimport matplotlib as mpl # for plotting\nimport seaborn as sns # for plotting\nimport pickle # for saving large objects\nimport os, sys # functions for interacting with the operating system\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n2023-07-20 21:21:07.035539: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n2023-07-20 21:21:12.080852: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /soft/compilers/cudatoolkit/cuda-11.6.2/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.6.2/lib64:/soft/libraries/trt/TensorRT-8.4.3.1.Linux.x86_64-gnu.cuda-11.6.cudnn8.4/lib:/soft/libraries/nccl/nccl_2.14.3-1+cuda11.6_x86_64/lib:/soft/libraries/cudnn/cudnn-11.6-linux-x64-v8.4.1.50/lib:/opt/cray/pe/gcc/11.2.0/snos/lib64:/opt/cray/pe/papi/6.0.0.14/lib64:/opt/cray/libfabric/1.11.0.4.125/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32\n2023-07-20 21:21:12.083590: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /soft/compilers/cudatoolkit/cuda-11.6.2/extras/CUPTI/lib64:/soft/compilers/cudatoolkit/cuda-11.6.2/lib64:/soft/libraries/trt/TensorRT-8.4.3.1.Linux.x86_64-gnu.cuda-11.6.cudnn8.4/lib:/soft/libraries/nccl/nccl_2.14.3-1+cuda11.6_x86_64/lib:/soft/libraries/cudnn/cudnn-11.6-linux-x64-v8.4.1.50/lib:/opt/cray/pe/gcc/11.2.0/snos/lib64:/opt/cray/pe/papi/6.0.0.14/lib64:/opt/cray/libfabric/1.11.0.4.125/lib64:/dbhome/db2cat/sqllib/lib64:/dbhome/db2cat/sqllib/lib64/gskit:/dbhome/db2cat/sqllib/lib32\n2023-07-20 21:21:12.083611: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNum GPUs Available:  1\n```\n:::\n:::\n\n\n## Define Paths\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntransform_path = 'gs://dm-enformer/models/enformer.finetuned.SAD.robustscaler-PCA500-robustscaler.transform.pkl'\nmodel_path = 'https://tfhub.dev/deepmind/enformer/1'\nfasta_file = '/home/s1mi/enformer_tutorial/genome.fa'\ntargets_txt = 'https://raw.githubusercontent.com/calico/basenji/master/manuscripts/cross2020/targets_human.txt'\ndf_targets = pd.read_csv(targets_txt, sep='\\t')\n```\n:::\n\n\n## Define Functions\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# @title `Enformer`, `EnformerScoreVariantsNormalized`, `EnformerScoreVariantsPCANormalized`,\nSEQUENCE_LENGTH = 393216\n\nclass Enformer:\n\n  def __init__(self, tfhub_url):\n    self._model = hub.load(tfhub_url).model\n\n  def predict_on_batch(self, inputs):\n    predictions = self._model.predict_on_batch(inputs)\n    return {k: v.numpy() for k, v in predictions.items()}\n\n  @tf.function\n  def contribution_input_grad(self, input_sequence,\n                              target_mask, output_head='human'):\n    input_sequence = input_sequence[tf.newaxis]\n\n    target_mask_mass = tf.reduce_sum(target_mask)\n    with tf.GradientTape() as tape:\n      tape.watch(input_sequence)\n      prediction = tf.reduce_sum(\n          target_mask[tf.newaxis] *\n          self._model.predict_on_batch(input_sequence)[output_head]) / target_mask_mass\n\n    input_grad = tape.gradient(prediction, input_sequence) * input_sequence\n    input_grad = tf.squeeze(input_grad, axis=0)\n    return tf.reduce_sum(input_grad, axis=-1)\n\n\nclass EnformerScoreVariantsRaw:\n\n  def __init__(self, tfhub_url, organism='human'):\n    self._model = Enformer(tfhub_url)\n    self._organism = organism\n\n  def predict_on_batch(self, inputs):\n    ref_prediction = self._model.predict_on_batch(inputs['ref'])[self._organism]\n    alt_prediction = self._model.predict_on_batch(inputs['alt'])[self._organism]\n\n    return alt_prediction.mean(axis=1) - ref_prediction.mean(axis=1)\n\n\nclass EnformerScoreVariantsNormalized:\n\n  def __init__(self, tfhub_url, transform_pkl_path,\n               organism='human'):\n    assert organism == 'human', 'Transforms only compatible with organism=human'\n    self._model = EnformerScoreVariantsRaw(tfhub_url, organism)\n    with tf.io.gfile.GFile(transform_pkl_path, 'rb') as f:\n      transform_pipeline = joblib.load(f)\n    self._transform = transform_pipeline.steps[0][1]  # StandardScaler.\n\n  def predict_on_batch(self, inputs):\n    scores = self._model.predict_on_batch(inputs)\n    return self._transform.transform(scores)\n\n\nclass EnformerScoreVariantsPCANormalized:\n\n  def __init__(self, tfhub_url, transform_pkl_path,\n               organism='human', num_top_features=500):\n    self._model = EnformerScoreVariantsRaw(tfhub_url, organism)\n    with tf.io.gfile.GFile(transform_pkl_path, 'rb') as f:\n      self._transform = joblib.load(f)\n    self._num_top_features = num_top_features\n\n  def predict_on_batch(self, inputs):\n    scores = self._model.predict_on_batch(inputs)\n    return self._transform.transform(scores)[:, :self._num_top_features]\n\n\n# TODO(avsec): Add feature description: Either PCX, or full names.\n\n\n# @title `variant_centered_sequences`\n\nclass FastaStringExtractor:\n\n    def __init__(self, fasta_file):\n        self.fasta = pyfaidx.Fasta(fasta_file)\n        self._chromosome_sizes = {k: len(v) for k, v in self.fasta.items()}\n    #import pd.Interval as Interval\n    def extract(self, interval: Interval, **kwargs) -> str:\n        # Truncate interval if it extends beyond the chromosome lengths.\n        chromosome_length = self._chromosome_sizes[interval.chrom]\n        trimmed_interval = Interval(interval.chrom,\n                                    max(interval.start, 0),\n                                    min(interval.end, chromosome_length),\n                                    )\n        # pyfaidx wants a 1-based interval\n        sequence = str(self.fasta.get_seq(trimmed_interval.chrom,\n                                          trimmed_interval.start + 1,\n                                          trimmed_interval.stop).seq).upper()\n        # Fill truncated values with N's.\n        pad_upstream = 'N' * max(-interval.start, 0)\n        pad_downstream = 'N' * max(interval.end - chromosome_length, 0)\n        return pad_upstream + sequence + pad_downstream\n\n    def close(self):\n        return self.fasta.close()\n\n\ndef one_hot_encode(sequence):\n  return kipoiseq.transforms.functional.one_hot_dna(sequence).astype(np.float32)\n\n\n\n# @title `plot_tracks`\n\ndef plot_tracks(tracks, interval, height=1.5):\n  fig, axes = plt.subplots(len(tracks), 1, figsize=(20, height * len(tracks)), sharex=True)\n  for ax, (title, y) in zip(axes, tracks.items()):\n    ax.fill_between(np.linspace(interval.start, interval.end, num=len(y)), y)\n    ax.set_title(title)\n    sns.despine(top=True, right=True, bottom=True)\n  ax.set_xlabel(str(interval))\n  plt.tight_layout()\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport Bio\n\nfrom Bio.Seq import Seq\ndef create_rev_complement(dna_string):\n    return(str(Seq(dna_string).reverse_complement()))\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef prepare_for_quantify_prediction_per_TSS(predictions, gene, tss_df):\n\n  '''\n\n  Parameters:\n          predicitions (A numpy array): All predictions from the track\n          gene (a gene name, character): a gene\n          tss_df: a list of dataframe of genes and their transcription start sites\n  Returns:\n          A dictionary of cage experiment predictions and a list of transcription start sites\n\n  '''\n\n  output = dict()\n  for tdf in tss_df:\n    if gene not in tdf.genes.values:\n      continue\n    gene_tss_list = tdf[tdf.genes == gene].txStart_Sites.apply(str).values\n    gene_tss_list = [t.split(', ') for t in gene_tss_list]\n    gene_tss_list = [int(item) for nestedlist in gene_tss_list for item in nestedlist]\n    gene_tss_list = list(set(gene_tss_list))\n  output['cage_predictions'] = predictions[:, 5110] # a numpy array\n  output['gene_TSS'] = gene_tss_list # a list\n\n\n  return(output) # a dictionary\n\ndef quantify_prediction_per_TSS(low_range, TSS, cage_predictions):\n\n  '''\n  Parameters:\n          low_range (int): The lower interval\n          TSS (list of integers): A list of TSS for a gene\n          cage_predictions: A 1D numpy array or a vector of predictions from enformer corresponding to track 5110 or CAGE predictions\n  Returns:\n          A dictionary of gene expression predictions for each TSS for a gene\n    '''\n  tss_predictions = dict()\n  for tss in TSS:\n    bin_start = low_range + ((768 + 320) * 128)\n    count = -1\n    while bin_start < tss:\n      bin_start = bin_start + 128\n      count += 1\n    if count >= len(cage_predictions)-1:\n      continue\n    cage_preds = cage_predictions[count - 1] + cage_predictions[count] + cage_predictions[count + 1]\n    tss_predictions[tss] = cage_preds\n\n  return(tss_predictions)\n\ndef collect_intervals(chromosomes = [\"22\"], gene_list=None):\n\n  '''\n    Parameters :\n      chromosomes : a list of chromosome numbers; each element should be a string format\n      gene_list : a list of genes; the genes should be located on those chromosomes\n\n    Returns :\n      A dictionary of genes (from gene_list) and their intervals within their respective chromosomes\n  '''\n\n  gene_intervals = {} # Collect intervals for our genes of interest\n\n  for chrom in chromosomes:\n    with open(\"/home/s1mi/enformer_tutorial/gene_chroms/gene_\"+ chrom + \".txt\", \"r\") as chrom_genes:\n      for line in chrom_genes:\n        split_line = line.strip().split(\"\\t\")\n        gene_intervals[split_line[2]] = [\n                                          split_line[0],\n                                          int(split_line[3]),\n                                          int(split_line[4])\n                                        ]\n\n  if isinstance(gene_list, list): # if the user has supplied a list of genes they are interested in\n    use_genes = dict((k, gene_intervals[k]) for k in gene_list if k in gene_intervals)\n    return(use_genes)\n  elif isinstance(gene_list, type(None)):\n    return(gene_intervals)\n\n\ndef run_predictions(gene_intervals, tss_dataframe, individuals_list=None):\n  '''\n  Parameters :\n    gene_intervals : the results from calling `collect_intervals`\n    tss_dataframe : a list of the TSSs dataframes i.e. the TSS for the genes in the chromosomes\n    individuals_list : a list of individuals on which we want to make predictions; defaults to None\n\n  Returns :\n    A list of predictions; the first element is the predictions around the TSS for each gene. The second is the prediction across CAGE tracks\n  '''\n\n  gene_output = dict()\n  gene_predictions = dict()\n\n  for gene in gene_intervals.keys():\n    gene_interval = gene_intervals[gene]\n    target_interval = kipoiseq.Interval(\"chr\" + gene_interval[0],\n                                        gene_interval[1],\n                                        gene_interval[2]) # creates an interval to select the right sequences\n    target_fa = fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))  # extracts the fasta sequences, and resizes such that it is compatible with the sequence_length\n    window_coords = target_interval.resize(SEQUENCE_LENGTH) # we also need information about the start and end locations after resizing\n    try:\n      cur_gene_vars = pd.read_csv(\"/home/s1mi/enformer_tutorial/individual_beds/chr\" + gene_interval[0] + \"/chr\" + gene_interval[0] + \"_\"+ gene + \".bed\", sep=\"\\t\", header=0) # read in the appropriate bed file for the gene\n    except:\n      continue\n    individual_results = dict()\n    individual_prediction = dict()\n\n    if isinstance(individuals_list, list) or isinstance(individuals_list, type(np.empty([1, 1]))):\n      use_individuals = individuals_list\n    elif isinstance(individuals_list, type(None)):\n      use_individuals = cur_gene_vars.columns[4:]\n\n    for individual in use_individuals:\n      print('Currently on gene {}, and predicting on individual {}...'.format(gene, individual))\n      # two haplotypes per individual\n      haplo_1 = list(target_fa[:])\n      haplo_2 = list(target_fa[:])\n\n      ref_mismatch_count = 0\n      for i,row in cur_gene_vars.iterrows():\n\n        geno = row[individual].split(\"|\")\n        if (row[\"POS\"]-window_coords.start-1) >= len(haplo_2):\n          continue\n        if (row[\"POS\"]-window_coords.start-1) < 0:\n          continue\n        if geno[0] == \"1\":\n          haplo_1[row[\"POS\"]-window_coords.start-1] = row[\"ALT\"]\n        if geno[1] == \"1\":\n          haplo_2[row[\"POS\"]-window_coords.start-1] = row[\"ALT\"]\n\n      # predict on the individual's two haplotypes\n      prediction_1 = model.predict_on_batch(one_hot_encode(\"\".join(haplo_1))[np.newaxis])['human'][0]\n      prediction_2 = model.predict_on_batch(one_hot_encode(\"\".join(haplo_2))[np.newaxis])['human'][0]\n\n      temp_predictions = [prediction_1[:, 5110], prediction_2[:, 5110]] # CAGE predictions we are interested in\n      individual_prediction[individual] = temp_predictions\n\n      # Calculate TSS CAGE expression which correspond to column 5110 of the predictions above\n      temp_list = list()\n\n      pred_prepared_1 = prepare_for_quantify_prediction_per_TSS(predictions=prediction_1, gene=gene, tss_df=tss_dataframe)\n      tss_predictions_1 = quantify_prediction_per_TSS(low_range = window_coords.start, TSS=pred_prepared_1['gene_TSS'], cage_predictions=pred_prepared_1['cage_predictions'])\n\n      pred_prepared_2 = prepare_for_quantify_prediction_per_TSS(predictions=prediction_2, gene=gene, tss_df=tss_dataframe)\n      tss_predictions_2 = quantify_prediction_per_TSS(low_range = window_coords.start, TSS=pred_prepared_2['gene_TSS'], cage_predictions=pred_prepared_2['cage_predictions'])\n\n      temp_list.append(tss_predictions_1)\n      temp_list.append(tss_predictions_2) # results here are a dictionary for each TSS for each haplotype\n\n      individual_results[individual] = temp_list # save for the individual\n\n    gene_output[gene] = individual_results\n    gene_predictions[gene] = individual_prediction\n\n  return([gene_output, gene_predictions])\n\n\ndef collect_target_intervals(gene_intervals):\n\n  '''\n  Returns a dictionary of Interval objects (from kipoiseq) for each gene corresponding to the locations of the gene\n  '''\n\n  target_intervals_dict = dict()\n\n  for gene in gene_intervals.keys():\n    gene_interval = gene_intervals[gene]\n    target_interval = kipoiseq.Interval(\"chr\" + gene_interval[0],\n                                        gene_interval[1],\n                                        gene_interval[2])\n    target_intervals_dict[gene] = target_interval\n\n  return(target_intervals_dict)\n\ndef prepare_for_plot_tracks(gene, individual, all_predictions, chromosome=['22']):\n\n  '''\n  This returns a dictionary of gene tracks and gene intervals, prepared for the function plot_tracks.\n\n  Parameters:\n    - gene\n    - individual\n    - all_predictions\n  '''\n\n  haplo_predictions = all_predictions[gene][individual]\n  gene_tracks = {gene + ' | ' + individual + ' | haplotype 1': np.log10(1 + haplo_predictions[0]),\n                gene + ' | ' + individual + ' | haplotype 2': np.log10(1 + haplo_predictions[1])}\n\n  gene_intervals = collect_intervals(chromosomes=chromosome, gene_list=[gene])\n  gene_intervals = collect_target_intervals(gene_intervals)\n\n  output = dict()\n  output['gene_tracks'] = gene_tracks\n  output['gene_intervals'] = gene_intervals[gene]\n\n  return(output)\n\ndef check_individuals(path_to_bed_file, list_of_individuals):\n\n  '''\n  Checks if an individual is missing in bed variation files.\n  These individuals should be removed prior to training\n  '''\n\n  myfile = open(path_to_bed_file, 'r')\n  myline = myfile.readline()\n  bed_names = myline.split('\\t')[4:]\n  myfile.close()\n\n  if set(list_of_individuals).issubset(set(bed_names)) == False:\n    missing = list(set(list_of_individuals).difference(bed_names))\n    print('This (or these) individual(s) is/are not present: {}'.format(missing))\n  else:\n    missing = []\n    print('All individuals are present in the bed file.')\n\n  return(missing)\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef geno_to_seq(gene, individual):\n      # two haplotypes per individual\n  haplo_1 = list(target_fa[:])\n  haplo_2 = list(target_fa[:])\n\n  ref_mismatch_count = 0\n  for i,row in cur_gene_vars.iterrows():\n\n    geno = row[individual].split(\"|\")\n    if (row[\"POS\"]-window_coords.start-1) >= len(haplo_2):\n      continue\n    if (row[\"POS\"]-window_coords.start-1) < 0:\n      continue\n    if geno[0] == \"1\":\n      haplo_1[row[\"POS\"]-window_coords.start-1] = row[\"ALT\"]\n    if geno[1] == \"1\":\n      haplo_2[row[\"POS\"]-window_coords.start-1] = row[\"ALT\"]\n  return haplo_1, haplo_2\n\n      # predict on the individual's two haplotypes\n\n```\n:::\n\n\n## Prepare input data\n\nWe want to predict epigenome around ERAP2 TSS on chromosome 5.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nchr5_tss = pd.read_table('/home/s1mi/enformer_tutorial/tss_by_chr/chr5_tss_by_gene.txt', sep='\\t')\nerap2_variations = pd.read_table('/home/s1mi/enformer_tutorial/individual_beds/chr5/chr5_ERAP2.bed', sep='\\t')\ngeuvadis_gene_expression = pd.read_table('https://uchicago.box.com/shared/static/5vwc7pjw9qmtv7298c4rc7bcuicoyemt.gz', sep='\\t',\n                                         dtype={'gene_id': str, 'gene_name':str, 'TargetID':str, 'Chr':str})\ngeuvadis_gene_expression.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gene_id</th>\n      <th>gene_name</th>\n      <th>TargetID</th>\n      <th>Chr</th>\n      <th>Coord</th>\n      <th>HG00096</th>\n      <th>HG00097</th>\n      <th>HG00099</th>\n      <th>HG00100</th>\n      <th>HG00101</th>\n      <th>...</th>\n      <th>NA20810</th>\n      <th>NA20811</th>\n      <th>NA20812</th>\n      <th>NA20813</th>\n      <th>NA20814</th>\n      <th>NA20815</th>\n      <th>NA20816</th>\n      <th>NA20819</th>\n      <th>NA20826</th>\n      <th>NA20828</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ENSG00000223972.4</td>\n      <td>DDX11L1</td>\n      <td>ENSG00000223972.4</td>\n      <td>1</td>\n      <td>11869</td>\n      <td>0.320818</td>\n      <td>0.344202</td>\n      <td>0.354225</td>\n      <td>0.478064</td>\n      <td>-0.102815</td>\n      <td>...</td>\n      <td>1.008605</td>\n      <td>0.384489</td>\n      <td>0.581284</td>\n      <td>0.513981</td>\n      <td>0.667449</td>\n      <td>0.350890</td>\n      <td>0.186103</td>\n      <td>-0.037976</td>\n      <td>0.405439</td>\n      <td>0.199143</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ENSG00000227232.3</td>\n      <td>WASH7P</td>\n      <td>ENSG00000227232.3</td>\n      <td>1</td>\n      <td>29806</td>\n      <td>33.714457</td>\n      <td>20.185174</td>\n      <td>18.095407</td>\n      <td>24.100871</td>\n      <td>29.018719</td>\n      <td>...</td>\n      <td>30.980194</td>\n      <td>34.086207</td>\n      <td>39.678442</td>\n      <td>29.643513</td>\n      <td>27.120420</td>\n      <td>29.121624</td>\n      <td>31.117198</td>\n      <td>32.047074</td>\n      <td>22.798959</td>\n      <td>23.563874</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ENSG00000243485.1</td>\n      <td>MIR1302-11</td>\n      <td>ENSG00000243485.1</td>\n      <td>1</td>\n      <td>29554</td>\n      <td>0.240408</td>\n      <td>0.157456</td>\n      <td>0.218806</td>\n      <td>0.320878</td>\n      <td>0.067833</td>\n      <td>...</td>\n      <td>0.065940</td>\n      <td>0.228784</td>\n      <td>0.140642</td>\n      <td>0.283905</td>\n      <td>0.273821</td>\n      <td>0.286311</td>\n      <td>0.324060</td>\n      <td>0.049574</td>\n      <td>0.255288</td>\n      <td>0.157440</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ENSG00000238009.2</td>\n      <td>RP11-34P13.7</td>\n      <td>ENSG00000238009.2</td>\n      <td>1</td>\n      <td>133566</td>\n      <td>0.328272</td>\n      <td>0.327932</td>\n      <td>0.090064</td>\n      <td>0.420443</td>\n      <td>0.220269</td>\n      <td>...</td>\n      <td>0.274071</td>\n      <td>0.384179</td>\n      <td>0.533693</td>\n      <td>0.307221</td>\n      <td>0.307367</td>\n      <td>0.400278</td>\n      <td>0.612321</td>\n      <td>0.666633</td>\n      <td>0.281138</td>\n      <td>1.346129</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ENSG00000239945.1</td>\n      <td>RP11-34P13.8</td>\n      <td>ENSG00000239945.1</td>\n      <td>1</td>\n      <td>91105</td>\n      <td>0.332171</td>\n      <td>-0.032164</td>\n      <td>0.017323</td>\n      <td>0.424677</td>\n      <td>0.214025</td>\n      <td>...</td>\n      <td>0.347323</td>\n      <td>0.346744</td>\n      <td>0.073580</td>\n      <td>0.400396</td>\n      <td>0.470517</td>\n      <td>0.069749</td>\n      <td>0.299353</td>\n      <td>0.090019</td>\n      <td>0.282554</td>\n      <td>-0.157170</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 467 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ngene_intervals = collect_intervals(chromosomes=['5'], gene_list=['ERAP2'])\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nmodel = Enformer(model_path) # here we load the model architecture.\n\nfasta_extractor = FastaStringExtractor(fasta_file) # we define a class called fasta_extractor to help us extra raw sequence data\n```\n:::\n\n\n## Run Predictions\n\nWe'll pick one individual at random.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nrand_individual = np.random.choice(a=geuvadis_gene_expression.columns[6:-1], replace=False) # individuals we are interested in\nrand_individual\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'HG00133'\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ngene = 'ERAP2'\ngene_interval = gene_intervals[gene]\ntarget_interval = kipoiseq.Interval(\"chr\" + gene_interval[0],\n                                        gene_interval[1],\n                                        gene_interval[2])\ntarget_fa = fasta_extractor.extract(target_interval.resize(SEQUENCE_LENGTH))\nwindow_coords = target_interval.resize(SEQUENCE_LENGTH)\ncur_gene_vars = pd.read_csv(\"/home/s1mi/enformer_tutorial/individual_beds/chr\" + gene_interval[0] + \"/chr\" + gene_interval[0] + \"_\"+ gene + \".bed\", sep=\"\\t\", header=0) # read in the appropriate bed file for the gene\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nhaplo_1, haplo_2 = geno_to_seq('ERAP2', rand_individual)\n\nhaplo_1_enc = one_hot_encode(\"\".join(haplo_1))[np.newaxis]\nhaplo_2_enc = one_hot_encode(\"\".join(haplo_2))[np.newaxis]\naverage_enc = np.add(haplo_1_enc, haplo_2_enc) / 2\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprediction_1 = model.predict_on_batch(haplo_1_enc)['human'][0]\nprediction_2 = model.predict_on_batch(haplo_2_enc)['human'][0]\n\npre_average = model.predict_on_batch(average_enc)['human'][0]\npost_average = (prediction_1 + prediction_2) / 2\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint(pre_average)\nprint(post_average)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0.0983258  0.09131803 0.06897802 ... 0.00298976 0.00920826 0.01195592]\n [0.05844229 0.05120772 0.0393694  ... 0.00664862 0.02121062 0.02394622]\n [0.00556148 0.00465787 0.00350308 ... 0.00303111 0.00745877 0.00867325]\n ...\n [0.00023319 0.00015917 0.00017393 ... 0.00074748 0.00243068 0.0029231 ]\n [0.00312253 0.00261029 0.00281582 ... 0.00084431 0.0019378  0.00236547]\n [0.05091214 0.03922845 0.03701665 ... 0.00821806 0.03188424 0.02977208]]\n[[0.09836499 0.09140344 0.06912695 ... 0.00298798 0.00929599 0.01202009]\n [0.05851313 0.05130395 0.03947318 ... 0.00664719 0.02141304 0.02404698]\n [0.00558177 0.0046772  0.00351959 ... 0.00302755 0.00748987 0.00869058]\n ...\n [0.00024067 0.00016469 0.0001784  ... 0.00074248 0.00242248 0.00288824]\n [0.00312049 0.00261045 0.00281425 ... 0.00084645 0.00193864 0.00237052]\n [0.05081689 0.03920878 0.03703882 ... 0.00822351 0.03193999 0.02979648]]\n```\n:::\n:::\n\n\n## Comparing across tracks\n\nWe compute correlation for each track.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ncors = []\nfor i in range(5313):\n    pre_track = pre_average[:, i]\n    post_track = post_average[:, i]\n    cor = np.corrcoef(pre_track, post_track)[0][1]\n    cors.append(cor)\n```\n:::\n\n\nThe results from both methods are nearly identical.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nprint(min(cors), max(cors))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.9927959179299012 0.9999999436970823\n```\n:::\n:::\n\n\nNow we examine the outliers.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndiff = pre_average - post_average\nprint(diff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[-3.9197505e-05 -8.5413456e-05 -1.4892966e-04 ...  1.7832499e-06\n  -8.7730587e-05 -6.4171851e-05]\n [-7.0843846e-05 -9.6220523e-05 -1.0377541e-04 ...  1.4314428e-06\n  -2.0241179e-04 -1.0076165e-04]\n [-2.0299107e-05 -1.9335654e-05 -1.6507460e-05 ...  3.5623088e-06\n  -3.1102449e-05 -1.7336570e-05]\n ...\n [-7.4755080e-06 -5.5219280e-06 -4.4692715e-06 ...  4.9936934e-06\n   8.1981998e-06  3.4861965e-05]\n [ 2.0379666e-06 -1.6158447e-07  1.5720725e-06 ... -2.1370361e-06\n  -8.4110070e-07 -5.0480012e-06]\n [ 9.5248222e-05  1.9673258e-05 -2.2165477e-05 ... -5.4491684e-06\n  -5.5748969e-05 -2.4404377e-05]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nmses = []\nfor i in range(5313):\n    mse = np.sum(np.square(diff[:, i]))\n    mses.append(mse)\n\nquartiles = np.percentile(mses, [25, 50, 75])\nprint(\"Min: \", min(mses))\nprint(\"Q1: \", quartiles[0]) \nprint(\"Median: \", quartiles[1])\nprint(\"Q3: \", quartiles[2])\nprint(\"Max: \", max(mses))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMin:  2.8938662e-06\nQ1:  0.007410927675664425\nMedian:  0.02212701365351677\nQ3:  0.07311876863241196\nMax:  142.65538\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nplt.boxplot(mses)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](comparing-averages_files/figure-html/cell-20-output-1.png){width=575 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndesc_index = [i for i, x in sorted(enumerate(mses), key=lambda x: x[1], reverse=True)]\nprint(\"Tracks from highest to lowest MSE:\", desc_index)\n\nmse_outs = [x for x in mses if x > 1]\nprint(\"Number of tracks with MSE > 1:\", len(mse_outs))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTracks from highest to lowest MSE: [4694, 4675, 5181, 4266, 4004, 5239, 4093, 5240, 5235, 4477, 5241, 1628, 5237, 3194, 1359, 5243, 706, 3824, 3602, 707, 3234, 3299, 5244, 4758, 5236, 5242, 2111, 1471, 3615, 2067, 3248, 752, 2028, 820, 3674, 705, 1882, 3387, 2047, 2062, 2126, 1348, 2665, 3200, 2640, 2492, 764, 1410, 3577, 4506, 3693, 853, 2150, 3855, 2888, 713, 3690, 766, 2696, 3744, 3264, 2155, 4416, 1470, 1966, 1783, 2833, 5238, 3889, 2280, 4078, 4421, 817, 1812, 2138, 4711, 1630, 2508, 4428, 4196, 4246, 2440, 1578, 3482, 1629, 1520, 4695, 676, 1489, 4177, 3075, 4192, 688, 2921, 1046, 3891, 3074, 2061, 2667, 2869, 1879, 2832, 3750, 2110, 790, 2049, 1094, 5110, 1382, 1843, 690, 3069, 4641, 3789, 3132, 1414, 1649, 2055, 3991, 3501, 2385, 4444, 3024, 1612, 2407, 907, 3713, 859, 691, 1383, 1100, 5217, 714, 2791, 743, 1324, 2353, 284, 4493, 4765, 4767, 4323, 2743, 5138, 1576, 2009, 2389, 5257, 3530, 4074, 4273, 4764, 1095, 1668, 1175, 2502, 3127, 4411, 1214, 3607, 3040, 2349, 1579, 2300, 2765, 1329, 1734, 2823, 1981, 4760, 3181, 680, 745, 767, 1535, 4351, 681, 5109, 3072, 1093, 4649, 2282, 2526, 4805, 1818, 719, 1023, 3469, 2000, 5215, 2602, 4036, 1988, 677, 4018, 3242, 3620, 3951, 2735, 857, 3475, 2618, 1463, 4739, 3659, 5256, 1965, 1789, 4200, 2586, 1563, 3042, 1692, 3478, 1982, 1877, 3363, 952, 953, 3665, 2734, 3843, 2201, 4054, 1724, 3947, 1602, 4642, 1340, 1179, 796, 1220, 800, 2568, 695, 1194, 3582, 5214, 3389, 2226, 819, 4005, 3686, 2185, 4013, 2844, 4640, 1189, 4268, 4007, 1956, 4163, 5212, 4806, 1092, 3433, 1330, 1840, 3893, 821, 2386, 1967, 4759, 3979, 1113, 4385, 2785, 4080, 4469, 159, 754, 3851, 1555, 1196, 2298, 1455, 3816, 4285, 3239, 1238, 4488, 4801, 3954, 1184, 788, 4092, 1973, 1561, 2329, 1117, 2122, 1608, 760, 4263, 744, 772, 5216, 4184, 1392, 3266, 5198, 3872, 770, 2188, 3773, 1143, 1487, 1310, 127, 1321, 1192, 683, 3392, 747, 4568, 4811, 3457, 2493, 1224, 2060, 1716, 2092, 4766, 3696, 1229, 1871, 2221, 1797, 1115, 836, 4134, 5124, 4158, 3859, 1835, 879, 4378, 1167, 2771, 2840, 1905, 2339, 5144, 1606, 3271, 2448, 4822, 822, 2928, 3708, 4147, 1478, 1545, 3912, 5276, 700, 3915, 3967, 3062, 3959, 3836, 3109, 2395, 4742, 878, 4726, 4461, 3700, 2215, 3899, 3805, 183, 675, 715, 1185, 3439, 2827, 1468, 3630, 5295, 3923, 1221, 2308, 2866, 808, 3107, 4712, 5123, 3653, 1106, 679, 2868, 2991, 4291, 727, 3185, 2056, 2104, 529, 981, 443, 2098, 1848, 3738, 2266, 5084, 3787, 2604, 755, 1419, 2210, 1459, 3522, 5211, 3298, 3394, 4804, 5210, 1136, 2522, 1045, 2571, 3919, 2694, 1864, 773, 682, 2304, 5067, 2933, 1451, 1239, 161, 1866, 3869, 4276, 2381, 4234, 1006, 848, 2214, 1740, 1689, 2930, 4504, 4388, 2856, 4908, 3176, 2305, 1536, 275, 3172, 2457, 4380, 2066, 2628, 4172, 1097, 57, 3175, 3307, 2219, 288, 4038, 3925, 4424, 3995, 4576, 1215, 4763, 1132, 3964, 696, 5129, 1754, 804, 1207, 2792, 1235, 763, 3149, 1109, 1831, 3552, 2919, 4738, 1534, 65, 2652, 3148, 2713, 850, 806, 2291, 516, 2654, 3028, 710, 4161, 5139, 1715, 2988, 3183, 3484, 3122, 3246, 905, 3649, 2778, 2380, 4513, 1311, 2271, 144, 961, 1617, 2819, 2074, 4235, 1388, 2974, 4372, 1169, 789, 1762, 5274, 1531, 2033, 4212, 3443, 5126, 4512, 1323, 4264, 3605, 2752, 858, 1527, 2039, 2530, 2740, 1320, 2830, 4771, 686, 824, 2821, 1805, 3736, 3314, 3664, 4282, 2451, 3663, 1441, 4776, 79, 2228, 3881, 1222, 1577, 4379, 4786, 4774, 190, 1709, 2318, 5082, 4799, 5213, 3994, 4024, 811, 2588, 3164, 2357, 3874, 4901, 3139, 2135, 4812, 3280, 5255, 4431, 3487, 832, 1111, 4418, 2725, 1747, 1308, 1758, 2119, 3331, 3302, 356, 1161, 4727, 3504, 4261, 5209, 792, 1809, 1493, 1351, 1062, 4205, 3566, 2737, 2019, 1171, 1085, 1682, 2141, 2593, 4144, 692, 1268, 3743, 1817, 4027, 1996, 2936, 4709, 3946, 1212, 1528, 1066, 3386, 1122, 2352, 3260, 3929, 2976, 1435, 2243, 2932, 3244, 1445, 4014, 3345, 1160, 4344, 2971, 5143, 260, 4775, 3095, 5219, 2270, 1943, 2796, 2281, 3261, 2116, 3333, 1334, 1499, 4807, 2681, 1951, 1591, 3468, 4386, 1614, 3754, 392, 1140, 2661, 2614, 3494, 3037, 4269, 694, 968, 983, 1919, 1769, 2262, 4037, 1128, 1662, 4484, 5066, 1056, 2154, 2598, 1164, 833, 4084, 2091, 1104, 4850, 3213, 1050, 1744, 2285, 2296, 142, 4687, 1938, 4693, 1129, 2235, 1422, 3104, 674, 1657, 2454, 678, 955, 1227, 3678, 2848, 3220, 3982, 5055, 3429, 865, 1838, 5117, 2425, 1432, 785, 1916, 1613, 1228, 1049, 3391, 3671, 2960, 3112, 698, 5277, 2170, 5125, 724, 3927, 2017, 1906, 1961, 4645, 2917, 2504, 1107, 4728, 720, 84, 4778, 2776, 1481, 1855, 1670, 2045, 1822, 2871, 2317, 4103, 701, 4734, 1397, 4377, 3828, 3897, 3488, 3619, 2225, 1562, 4756, 1627, 831, 4854, 98, 2870, 3390, 2587, 1925, 1202, 709, 2931, 1051, 4089, 864, 1492, 3878, 3462, 1389, 4773, 1332, 4225, 3936, 1086, 3330, 3214, 2366, 89, 4781, 1218, 3519, 1316, 4907, 4823, 4299, 3159, 4839, 2005, 3657, 1815, 1342, 875, 2399, 2770, 3599, 3188, 5071, 708, 3199, 4430, 4735, 1516, 5197, 405, 826, 4787, 3539, 2379, 5081, 4061, 3592, 4217, 2273, 3438, 138, 4427, 2892, 2075, 3542, 758, 4265, 3312, 3838, 1585, 5301, 2211, 900, 3013, 508, 2574, 3930, 1504, 3970, 739, 3960, 4810, 1234, 771, 1679, 3697, 2475, 3987, 2446, 2567, 2337, 4633, 4772, 5202, 2716, 4148, 2782, 1987, 3810, 4105, 1991, 753, 3119, 281, 4391, 4692, 3835, 2096, 1121, 4267, 4194, 2152, 1408, 2692, 3193, 296, 2175, 3343, 1204, 4466, 728, 3171, 1165, 2952, 1079, 1134, 1210, 4689, 3440, 5042, 1846, 3650, 3870, 4095, 4814, 1118, 1347, 982, 3008, 3616, 4230, 3318, 2728, 4359, 2432, 1891, 1081, 2421, 1673, 3831, 956, 4029, 5300, 3688, 4354, 3090, 1968, 814, 2375, 125, 3647, 697, 1819, 3608, 2197, 999, 3083, 4283, 2265, 2582, 3687, 4872, 1053, 2240, 255, 4358, 1361, 1979, 4736, 4254, 963, 1706, 3110, 2345, 2528, 80, 4710, 107, 3285, 791, 2854, 1205, 2076, 2815, 4043, 1907, 3029, 2647, 2632, 2847, 4741, 1904, 4575, 4324, 4057, 3151, 2745, 1074, 1699, 2809, 2684, 1098, 1292, 1314, 2884, 147, 3518, 3916, 2701, 1645, 3255, 1370, 2650, 1366, 3971, 5148, 4373, 711, 2360, 4032, 2191, 1211, 1638, 2455, 4657, 909, 1457, 761, 5122, 2452, 1176, 3668, 1406, 4120, 2824, 5116, 2672, 2498, 3984, 2183, 3301, 3325, 4737, 3420, 1500, 1364, 1287, 4882, 2537, 1604, 5033, 725, 3725, 2071, 1488, 717, 3006, 4983, 3015, 4393, 1553, 3441, 2839, 1443, 5156, 3783, 2319, 1687, 984, 3277, 3032, 2464, 4296, 847, 4412, 3734, 1225, 3116, 3436, 2846, 2885, 4361, 3536, 2742, 186, 58, 2294, 1469, 4223, 1012, 4800, 1748, 1208, 2970, 1659, 887, 100, 4398, 3758, 2963, 4275, 846, 2525, 5083, 4491, 4899, 95, 2040, 3612, 4697, 1678, 2890, 4221, 3706, 2630, 1873, 3942, 3017, 339, 4130, 4745, 1573, 4124, 1037, 2606, 3944, 2051, 1880, 5128, 3692, 1526, 2862, 1557, 3589, 3245, 3321, 3770, 3411, 978, 736, 3917, 880, 2233, 2642, 1842, 2306, 2643, 4318, 2202, 1182, 1753, 3066, 1395, 3364, 1420, 4190, 3300, 3334, 2828, 1989, 1502, 787, 1644, 2351, 2552, 712, 4272, 2803, 899, 4274, 3023, 2072, 3329, 2916, 3890, 740, 1955, 1206, 3623, 4701, 3999, 2420, 3800, 4198, 1532, 3786, 1423, 2106, 3158, 4448, 4349, 3025, 4876, 4768, 3068, 3177, 4394, 3222, 2622, 2927, 2486, 4454, 4126, 4485, 4140, 64, 3521, 3564, 2310, 1407, 2121, 3063, 4463, 5014, 517, 1997, 2923, 882, 2057, 3554, 815, 4215, 3156, 1138, 2766, 3108, 3880, 3798, 4706, 3759, 2758, 131, 4883, 105, 3680, 2356, 1456, 1130, 3992, 1816, 2325, 2479, 4214, 1868, 2393, 687, 4747, 3598, 1133, 2518, 1650, 1621, 2617, 3401, 235, 3784, 2478, 3642, 4229, 4784, 2722, 1875, 3233, 4648, 3323, 1962, 3924, 2065, 957, 133, 3938, 990, 5145, 4319, 4292, 4350, 2523, 2646, 2626, 2615, 2757, 2230, 2303, 4696, 3102, 1026, 2891, 2140, 3601, 2068, 141, 4213, 2719, 1453, 3485, 1029, 1084, 185, 4750, 1915, 2575, 3775, 2512, 2392, 2333, 2938, 2445, 4834, 908, 3412, 3662, 4087, 4423, 2340, 4722, 1343, 2564, 75, 4861, 881, 3795, 4802, 735, 2103, 2003, 2777, 3875, 1237, 4419, 2292, 1137, 3508, 4207, 4370, 533, 1173, 1634, 1400, 2994, 4779, 4328, 3676, 994, 5121, 1792, 914, 2899, 4785, 4375, 2267, 4460, 1929, 1677, 3444, 1647, 1639, 160, 1958, 3054, 722, 55, 3383, 2940, 4673, 5168, 3550, 3492, 3030, 1082, 4915, 3747, 4117, 4777, 2369, 2391, 2995, 2539, 916, 4381, 5127, 2113, 1554, 4320, 958, 1717, 4363, 1513, 4677, 5275, 2169, 737, 1156, 1139, 4153, 4164, 1995, 3502, 3360, 588, 2481, 2946, 3144, 1135, 3163, 3020, 1022, 1041, 1052, 4434, 742, 980, 4732, 2658, 3350, 1126, 2176, 3031, 1071, 1032, 2924, 4302, 5023, 2560, 2750, 1452, 1756, 1365, 1190, 1226, 4202, 4671, 1544, 1230, 801, 1782, 3065, 2162, 5298, 2779, 4985, 2263, 2429, 2538, 3016, 702, 1213, 4790, 4414, 2662, 4376, 1057, 4473, 746, 1926, 3240, 1044, 2975, 2196, 2239, 4303, 2705, 2664, 1344, 1686, 1546, 3547, 3520, 3749, 1355, 2883, 5040, 5294, 5218, 4399, 2467, 2099, 1163, 2437, 1319, 3403, 1685, 1068, 5097, 4022, 2569, 973, 751, 1354, 4389, 2553, 2082, 3126, 1219, 1440, 689, 3909, 2001, 2732, 1187, 2874, 3990, 1154, 2178, 1807, 4762, 2052, 1890, 2261, 1170, 2231, 2145, 1549, 3883, 3474, 4682, 4676, 3814, 1076, 4237, 3846, 1070, 1142, 2484, 1808, 1322, 4086, 3497, 2962, 2010, 1153, 3793, 4132, 4294, 4797, 3305, 812, 3320, 4245, 3515, 1439, 1200, 1356, 4170, 1412, 2717, 5159, 2908, 2372, 704, 1509, 1103, 1203, 1708, 1725, 3849, 1168, 4761, 810, 4715, 4284, 113, 2715, 526, 1781, 2950, 1174, 1318, 3396, 2415, 4683, 3739, 2945, 1477, 783, 4048, 3586, 1920, 1625, 4255, 2384, 4077, 4467, 1387, 4670, 1474, 5022, 2286, 5311, 2194, 4824, 1851, 1075, 4729, 2756, 2163, 2069, 5106, 950, 3388, 3578, 1335, 5111, 3934, 1108, 3677, 2634, 3825, 816, 1069, 1490, 4426, 3178, 1337, 2258, 4407, 2245, 1123, 3130, 3479, 137, 2089, 2190, 825, 3931, 3972, 2880, 1849, 3399, 4060, 3296, 3997, 1327, 3980, 1188, 944, 273, 3756, 2533, 1078, 2867, 4880, 1131, 3989, 2363, 4343, 3001, 4856, 4075, 3661, 4094, 3670, 2217, 2763, 291, 4916, 2070, 1949, 4937, 4365, 3091, 4109, 1191, 4338, 2177, 4339, 3506, 2509, 2612, 3226, 940, 1497, 1572, 1743, 4162, 1934, 4088, 4835, 3010, 4123, 685, 769, 2426, 2795, 3324, 2410, 2669, 1151, 1467, 1719, 4769, 4413, 4009, 3920, 2521, 1141, 4046, 885, 2671, 4406, 1380, 4496, 4783, 1077, 2925, 3050, 4636, 891, 3648, 3291, 1837, 4439, 942, 4316, 1512, 3724, 4159, 1964, 3866, 2678, 3820, 2148, 904, 2338, 1889, 1674, 1892, 1376, 3358, 3086, 1850, 2510, 4733, 3380, 4307, 4053, 4242, 4744, 1231, 5108, 5068, 2834, 2608, 3631, 3007, 4447, 3882, 4417, 3593, 960, 3583, 2751, 5015, 3867, 114, 3579, 861, 2789, 3540, 1421, 2802, 2387, 2203, 2487, 2551, 4199, 2382, 3145, 3655, 3018, 1636, 3735, 2227, 935, 2783, 1853, 3806, 3352, 1199, 2624, 3174, 3604, 3336, 4840, 2123, 1664, 2548, 1510, 1005, 2698, 1217, 2274, 3622, 3666, 4321, 2434, 3131, 1030, 4238, 1485, 3004, 2998, 4410, 2596, 4116, 5074, 4471, 3169, 5061, 5248, 1600, 3968, 4180, 1119, 4836, 3850, 2907, 3853, 2327, 1976, 1054, 2659, 995, 2723, 2377, 2529, 4796, 2877, 1857, 1116, 3629, 967, 4026, 4397, 1908, 1080, 3818, 4820, 5105, 3385, 3958, 4851, 1693, 2841, 2229, 1695, 3751, 3276, 1437, 837, 3541, 3251, 1193, 1898, 3486, 1223, 3419, 1796, 5196, 3569, 1172, 4186, 4672, 2218, 3730, 3241, 1735, 2209, 2326, 5102, 4788, 1067, 1305, 4348, 1601, 1114, 3635, 2004, 868, 1599, 749, 1760, 1957, 3254, 1263, 2744, 3710, 2402, 2807, 4355, 2335, 1480, 1517, 4847, 4995, 3490, 2520, 684, 3507, 2328, 2249, 3402, 3748, 3988, 3224, 3120, 101, 4743, 1166, 2412, 3903, 3698, 4780, 5312, 2470, 3908, 729, 3675, 4425, 631, 4789, 1705, 4914, 4239, 2912, 3707, 4678, 3660, 3728, 3695, 1941, 1910, 5101, 3281, 4475, 5053, 1007, 4197, 1643, 2836, 2967, 1338, 3509, 2563, 866, 4156, 4740, 3155, 1186, 741, 1811, 2181, 1083, 1757, 4878, 3585, 4216, 3681, 1569, 1381, 2706, 3262, 4201, 2515, 2902, 1830, 1642, 5075, 3463, 1038, 5063, 1424, 1884, 2430, 845, 3525, 4865, 3535, 1326, 3633, 2729, 4011, 1825, 466, 4451, 1712, 2619, 3712, 5038, 2490, 2906, 3856, 4859, 3900, 1483, 2133, 4708, 1755, 2591, 1267, 1548, 1833, 1260, 3548, 2131, 56, 4097, 4817, 377, 4021, 4311, 3933, 4502, 849, 2081, 4912, 3310, 1847, 2992, 3289, 2843, 1201, 3797, 2331, 4494, 2120, 2565, 4932, 4826, 3140, 3587, 4813, 1127, 4259, 979, 2972, 3257, 2244, 2583, 4041, 1236, 2030, 2865, 3407, 3603, 1262, 1611, 5019, 3790, 1522, 206, 573, 1110, 332, 1195, 4042, 1159, 5034, 4667, 2623, 4008, 3378, 4705, 3637, 2981, 2453, 3208, 4658, 1346, 1240, 1974, 3864, 3898, 2845, 3197, 1671, 4511, 1345, 3682, 3128, 2941, 3913, 2826, 4685, 5296, 1903, 3121, 3053, 3082, 3667, 3563, 1265, 1945, 5025, 1150, 2501, 2935, 4472, 4464, 4183, 2699, 636, 5207, 1620, 4260, 2272, 1371, 2064, 2639, 3740, 1072, 4869, 5032, 5008, 2611, 2987, 4885, 3356, 4792, 2913, 4643, 1378, 1096, 3778, 3871, 2656, 135, 4127, 3821, 733, 1560, 1430, 3641, 1112, 2031, 2460, 112, 2697, 779, 4474, 3341, 2666, 3627, 949, 2179, 2500, 1688, 3807, 3129, 4010, 3961, 2182, 5029, 4122, 4279, 3804, 1610, 2354, 4111, 4669, 4524, 2136, 2253, 1399, 4100, 4346, 3393, 1377, 5062, 1583, 4894, 3823, 3737, 1183, 3295, 5245, 1641, 4219, 3372, 2799, 1514, 4312, 2986, 50, 1475, 336, 4830, 4166, 2348, 3041, 3572, 4831, 1575, 3073, 5086, 3035, 1458, 4189, 3611, 5056, 1773, 4174, 1963, 3901, 3366, 4073, 1969, 2409, 2090, 4314, 5247, 2260, 2648, 964, 4248, 1242, 2838, 5302, 1162, 4257, 1436, 2043, 177, 3993, 3581, 2881, 3640, 4881, 3173, 4770, 4107, 1731, 3860, 2775, 5118, 5246, 3203, 2418, 2408, 3571, 1665, 1558, 2876, 103, 1405, 3026, 2887, 3359, 895, 4505, 4731, 1281, 5272, 3309, 1736, 4236, 1742, 3802, 3826, 1386, 2724, 3143, 4470, 2496, 3703, 1105, 2651, 3799, 3243, 4420, 1061, 2549, 539, 1888, 3865, 4849, 5098, 3998, 1313, 2801, 716, 3638, 5142, 4176, 2739, 3840, 2978, 2109, 1102, 926, 3955, 3741, 4863, 1883, 2100, 3456, 506, 2984, 2077, 3852, 2436, 4401, 2378, 4889, 860, 948, 2346, 966, 1409, 4897, 3141, 2115, 484, 1396, 1737, 1683, 1277, 3099, 4300, 2894, 3205, 3699, 2143, 2443, 4347, 996, 3949, 4035, 3103, 2134, 1844, 1666, 4468, 3832, 1893, 1711, 1918, 3427, 3729, 2997, 4842, 3180, 5069, 3106, 1539, 5049, 2413, 4151, 2497, 3803, 2172, 2483, 4960, 2581, 4848, 1697, 1622, 3432, 3879, 4509, 765, 3275, 2733, 876, 2514, 1530, 2088, 2129, 4818, 4231, 2543, 1771, 3523, 2781, 140, 1917, 1416, 1269, 3060, 3854, 3863, 5041, 454, 3483, 3532, 2342, 867, 1152, 2323, 4067, 1523, 4486, 3061, 1425, 3348, 2034, 2784, 3614, 2297, 2896, 1927, 2400, 1547, 3952, 3317, 3048, 4364, 1800, 4618, 2321, 2390, 4047, 102, 2361, 1784, 3409, 1145, 1256, 3817, 2675, 2786, 827, 4429, 4226, 1661, 4668, 2164, 4131, 3922, 4637, 4071, 4681, 3311, 1588, 2855, 2601, 1294, 2714, 2053, 906, 3862, 4098, 1276, 3232, 4167, 2842, 3868, 2746, 1278, 2673, 2527, 1749, 2863, 4059, 3290, 989, 2013, 3546, 3965, 3055, 3829, 4445, 1787, 1358, 1158, 3771, 4335, 977, 3382, 1257, 4690, 4989, 4090, 721, 912, 3526, 2644, 2158, 2117, 1018, 4152, 3981, 3914, 4040, 4718, 4271, 1895, 2388, 359, 3742, 3632, 4563, 2554, 52, 2507, 2873, 2466, 2999, 2167, 4723, 3950, 2768, 897, 48, 1605, 2903, 3459, 1008, 3078, 1374, 4331, 3844, 4403, 4072, 1350, 3953, 1494, 1632, 3719, 1924, 5054, 3857, 1444, 1635, 2078, 4085, 894, 987, 3357, 1438, 1745, 2513, 1960, 802, 3166, 1375, 3943, 1942, 4930, 3705, 5036, 1411, 1778, 1829, 1120, 256, 1672, 4838, 2559, 3313, 3496, 1004, 1821, 3227, 4006, 2849, 2631, 2023, 53, 902, 3557, 1801, 1675, 4249, 3218, 2312, 4121, 155, 3113, 3764, 3012, 3791, 4455, 3537, 3781, 2720, 2128, 1352, 2469, 807, 2499, 3448, 5058, 2195, 4278, 3328, 5035, 969, 1874, 1765, 2083, 877, 2097, 3454, 1923, 3368, 3316, 4845, 4165, 2670, 2674, 2817, 2592, 2157, 2727, 1428, 4903, 2314, 1073, 4280, 2895, 2014, 5141, 4055, 4374, 1648, 2322, 917, 4141, 2979, 2250, 2307, 1284, 1770, 946, 3493, 1702, 2761, 2578, 4065, 1272, 1181, 4864, 1751, 248, 2142, 4252, 3406, 3101, 1759, 3278, 670, 2961, 4063, 4498, 4137, 3070, 3451, 5120, 514, 2929, 4383, 2726, 2922, 2362, 2534, 4220, 1739, 5090, 3656, 3763, 4210, 3559, 4384, 1616, 1233, 3544, 3397, 1589, 4211, 4033, 3966, 4500, 4112, 2788, 2680, 4333, 3446, 3654, 1564, 1984, 5096, 1533, 4079, 2204, 1581, 5094, 1426, 4146, 3701, 1404, 4483, 2708, 3727, 5158, 2439, 2814, 1928, 4841, 489, 4342, 3238, 2449, 2299, 3465, 3941, 109, 1325, 1403, 2688, 3191, 3187, 1506, 738, 522, 930, 5021, 4986, 3379, 3796, 1501, 4707, 2063, 976, 2237, 3361, 5153, 775, 1402, 4168, 1391, 1983, 3282, 1178, 4115, 2220, 1450, 2011, 3549, 3745, 1732, 3235, 4994, 2635, 2860, 3774, 4203, 1881, 1333, 2858, 3286, 5188, 2649, 3250, 4510, 937, 1556, 2748, 323, 803, 3760, 3841, 1859, 1243, 851, 4101, 4888, 3431, 4971, 4803, 5154, 3408, 2561, 2376, 1795, 2584, 4969, 933, 2822, 1786, 3228, 1055, 2125, 888, 3114, 4017, 1824, 1932, 3027, 4713, 4794, 1253, 2535, 4045, 3813, 723, 3417, 4679, 3425, 3097, 4725, 1280, 2473, 5006, 2012, 1886, 1921, 889, 4110, 2086, 219, 1198, 3088, 3019, 4145, 1009, 3911, 3500, 1867, 1972, 975, 2147, 2301, 4433, 776, 1000, 872, 92, 1640, 3098, 1839, 1798, 3315, 1998, 116, 3715, 786, 4001, 4819, 2829, 2016, 1803, 3209, 4232, 3561, 1025, 2171, 2590, 2423, 2818, 1714, 4827, 3134, 3201, 1363, 2160, 3445, 4703, 1447, 4322, 3374, 3045, 1681, 2166, 3767, 2980, 3480, 1862, 4714, 5065, 4169, 3512, 2161, 5191, 4392, 4310, 4415, 2002, 2311, 3888, 4301, 2594, 2610, 2238, 2254, 4206, 4481, 3702, 2394, 1680, 856, 3822, 4456, 1042, 4515, 2532, 1887, 4138, 1328, 4277, 3471, 3625, 2404, 3617, 1865, 5104, 1245, 3565, 3503, 1429, 929, 2754, 4871, 750, 1999, 4369, 4091, 2947, 915, 2901, 884, 4938, 2255, 2875, 1300, 2793, 4507, 5091, 3022, 1448, 4102, 2205, 797, 1090, 2293, 2831, 4435, 3986, 1336, 4290, 3002, 778, 3059, 4025, 230, 3892, 3146, 5115, 1684, 1043, 2355, 3371, 1288, 923, 2655, 2435, 3610, 2018, 693, 2438, 2234, 1180, 1341, 3292, 3511, 3236, 3047, 3096, 3570, 2477, 1099, 2046, 4717, 5271, 4345, 2695, 3858, 3794, 869, 2151, 4382, 3369, 1089, 3928, 2700, 1197, 2259, 2934, 1703, 2417, 1282, 1491, 1462, 1933, 5200, 843, 3636, 4286, 4487, 4691, 2663, 2747, 4934, 5093, 1975, 1484, 1479, 2130, 3449, 932, 2102, 2371, 5085, 2084, 1911, 96, 4149, 1772, 535, 3513, 1870, 3039, 4542, 2491, 2547, 2223, 2503, 2857, 4518, 3782, 4808, 730, 5150, 3160, 1914, 920, 2545, 2458, 1144, 928, 62, 4064, 2494, 3284, 106, 3733, 3340, 2101, 1878, 991, 2020, 2878, 970, 731, 3428, 5201, 2546, 1398, 2406, 854, 4988, 1746, 4656, 2289, 1091, 3093, 4289, 2050, 870, 1897, 4049, 782, 2812, 4313, 2207, 3043, 3215, 4052, 1427, 1726, 5203, 3414, 5079, 947, 795, 1978, 1543, 449, 3150, 4702, 5165, 2772, 5064, 4557, 777, 1353, 2427, 1959, 971, 2213, 4508, 3679, 2898, 2107, 4340, 3370, 2268, 344, 2977, 5297, 1570, 2474, 3212, 3957, 1246, 3691, 3071, 2800, 1950, 1034, 699, 4991, 841, 1289, 2044, 4887, 3138, 3464, 1854, 2054, 927, 2465, 1295, 1518, 1357, 2767, 115, 1728, 862, 1101, 2041, 2566, 1511, 1730, 2886, 1820, 4409, 4332, 1124, 3344, 4638, 1723, 3335, 2808, 1036, 3529, 871, 1694, 1028, 2645, 5073, 1503, 4437, 1777, 1011, 4368, 1752, 3206, 4843, 2118, 1733, 3962, 2949, 3935, 1060, 1952, 2861, 1297, 1271, 3210, 924, 1031, 2835, 2416, 3939, 1003, 1584, 1763, 2589, 110, 2517, 1690, 97, 3976, 4844, 4404, 2264, 3051, 3720, 4023, 3902, 4012, 4179, 2059, 1367, 6, 2173, 896, 5099, 5005, 1155, 1559, 227, 3718, 1472, 4039, 3036, 4050, 3421, 3157, 793, 2625, 3769, 1418, 3400, 863, 4791, 1593, 3395, 883, 3600, 1944, 4224, 2027, 919, 3808, 3442, 1521, 2026, 143, 1505, 3811, 3948, 2058, 2472, 5195, 2653, 3974, 1454, 3049, 3643, 2797, 4452, 5043, 87, 3588, 1571, 1519, 4362, 934, 1259, 1373, 1360, 3591, 988, 951, 1013, 3765, 1232, 4336, 369, 974, 5020, 5189, 1793, 1861, 2774, 2920, 2428, 2206, 5028, 1779, 1248, 3005, 1937, 5103, 734, 1667, 2636, 4450, 4015, 2609, 1542, 2364, 1930, 4949, 1486, 4816, 2685, 3634, 4387, 4360, 1261, 1394, 1764, 2621, 4443, 5010, 2189, 3717, 972, 3306, 108, 1087, 3273, 3983, 118, 4171, 799, 1390, 1827, 939, 2813, 4476, 3534, 3884, 993, 4287, 2558, 3785, 855, 3956, 1065, 3014, 3067, 2208, 910, 2114, 756, 5174, 4308, 925, 2942, 2383, 5048, 1790, 1254, 3977, 2811, 1633, 3258, 2442, 893, 2879, 4432, 2969, 1656, 3531, 2370, 551, 3533, 353, 2536, 3217, 3398, 5254, 4058, 3753, 985, 2037, 1619, 921, 3562, 1710, 5223, 3297, 4083, 4352, 4688, 559, 104, 4921, 1691, 938, 1296, 401, 4862, 3125, 1856, 4698, 3573, 901, 352, 4402, 2025, 839, 2682, 2048, 726, 4128, 3279, 4222, 1653, 1948, 1654, 2411, 4716, 3590, 3057, 3904, 3819, 4828, 2153, 269, 2837, 2108, 3624, 1741, 2531, 1566, 3219, 2476, 3287, 5092, 3162, 3225, 1700, 2283, 780, 892, 3937, 2444, 2914, 943, 2958, 3905, 2540, 4081, 3812, 2759, 2330, 1794, 3580, 3308, 3685, 1393, 768, 1258, 4070, 759, 2036, 898, 2367, 3270, 732, 94, 2600, 1476, 4940, 2073, 3969, 2806, 3809, 3087, 1767, 3672, 3645, 2721, 1791, 1947, 3777, 838, 2790, 4243, 2953, 774, 4297, 3646, 3384, 3268, 4943, 1718, 1802, 4795, 4240, 3009, 2247, 2712, 1209, 2433, 4441, 3064, 842, 3714, 3196, 2990, 3184, 1663, 3179, 1306, 2679, 3516, 1552, 4193, 4499, 1985, 1738, 1125, 2341, 3499, 2794, 4891, 3424, 1704, 497, 4721, 1651, 1349, 4028, 3906, 264, 3505, 2029, 4892, 1860, 188, 1331, 1149, 2256, 2212, 1362, 3437, 1912, 1713, 4034, 2132, 3267, 4479, 2599, 3726, 1063, 4357, 4793, 1385, 1596, 1250, 10, 4204, 3618, 2556, 2516, 617, 809, 1434, 2441, 4160, 72, 1565, 4829, 2820, 922, 1442, 3092, 4928, 886, 4945, 3711, 1431, 2585, 936, 3274, 1658, 2137, 4492, 1540, 5078, 354, 4944, 829, 4353, 1339, 3644, 2257, 42, 2488, 2080, 2127, 1473, 4062, 3283, 4051, 2414, 3263, 2159, 5253, 997, 4400, 4490, 4674, 1841, 2731, 3651, 3887, 4950, 4341, 3293, 4182, 90, 3381, 992, 1148, 2524, 4315, 1603, 1384, 3628, 2279, 5199, 3450, 5273, 3426, 757, 1646, 1909, 3476, 2709, 4605, 3779, 3723, 1828, 3575, 4031, 813, 2711, 4664, 2911, 1977, 3467, 805, 2730, 1529, 3460, 654, 2397, 1449, 5095, 1216, 1902, 1064, 2422, 2124, 1899, 2686, 4815, 4478, 5107, 3932, 2736, 451, 2024, 3288, 139, 5186, 2284, 1863, 3684, 1157, 1014, 2769, 2459, 3447, 874, 1990, 3304, 834, 2174, 1900, 1720, 1594, 2973, 2872, 2637, 5284, 2463, 1814, 1309, 2008, 1035, 3489, 1885, 4076, 61, 119, 2022, 911, 3080, 3477, 1913, 2926, 3886, 5007, 3003, 1631, 3038, 3985, 3327, 1515, 2956, 5184, 2710, 1992, 2968, 784, 4191, 1832, 3780, 2246, 3458, 3303, 4173, 2704, 77, 1953, 3000, 3472, 599, 5072, 931, 3339, 5050, 4118, 3338, 1482, 2095, 3349, 2762, 1550, 1508, 3294, 3732, 5031, 93, 4482, 4900, 4873, 1775, 3527, 3973, 4754, 1813, 60, 1940, 4639, 954, 3434, 3256, 634, 4253, 455, 2964, 3837, 1946, 2489, 3716, 3229, 1761, 1852, 3877, 2419, 1698, 4746, 3845, 2572, 1465, 2755, 3085, 1146, 2542, 156, 2405, 3830, 5161, 1721, 2825, 2555, 3413, 4367, 3347, 2187, 2804, 2948, 794, 2482, 1660, 762, 1379, 1858, 85, 1896, 3058, 2347, 1303, 1417, 3207, 4961, 3613, 962, 4288, 1249, 2550, 3147, 4825, 5112, 703, 2365, 2760, 1780, 1626, 3186, 3996, 1993, 3259, 4129, 2957, 3168, 890, 3652, 3551, 3165, 2094, 2690, 4680, 3105, 1433, 1707, 5155, 2753, 4143, 4030, 2186, 4178, 2989, 4833, 4334, 3567, 1264, 1826, 1027, 2965, 4611, 3190, 918, 2627, 4356, 3639, 1939, 2707, 998, 1971, 4366, 5278, 2864, 3861, 1936, 2657, 903, 3084, 718, 2505, 4898, 1286, 2805, 373, 2461, 4016, 3757, 4208, 2511, 1788, 1279, 5140, 2035, 4188, 1275, 1048, 3170, 1019, 3597, 395, 1244, 835, 3885, 3452, 4821, 5119, 781, 3731, 2193, 3375, 2149, 1291, 1247, 3453, 4442, 4069, 3216, 4371, 2541, 2199, 1586, 4002, 4281, 1021, 78, 1301, 3514, 4068, 2773, 4133, 2966, 4326, 2485, 3430, 3195, 4113, 3123, 3089, 959, 2287, 3052, 2320, 4910, 1582, 3044, 3921, 330, 3621, 852, 2613, 941, 2334, 4503, 2462, 2798, 4489, 1372, 1567, 2910, 1597, 1869, 2562, 2079, 2373, 1766, 1040, 1466, 1088, 1806, 1580, 2738, 3689, 1024, 1033, 1273, 4495, 1317, 4798, 2982, 2278, 233, 5190, 1607, 1598, 1002, 1266, 3377, 493, 2576, 2146, 1810, 3247, 3827, 4623, 49, 2741, 495, 2985, 3746, 1986, 4920, 4251, 873, 1285, 4501, 2241, 965, 2580, 2007, 374, 3192, 1935, 3136, 4597, 3337, 1059, 2687, 1251, 3553, 4304, 457, 4866, 4782, 3011, 488, 2629, 3418, 4155, 2718, 2038, 3709, 2557, 4730, 5220, 1304, 4099, 123, 5024, 1845, 3231, 2269, 3204, 3137, 2332, 2597, 2324, 1722, 2456, 4175, 2616, 1495, 5002, 657, 3495, 3545, 1980, 1241, 2236, 300, 3595, 4526, 5249, 3230, 1538, 945, 1701, 3362, 4187, 351, 3405, 3081, 1312, 3223, 2677, 3907, 2216, 4860, 1507, 2192, 2198, 2396, 2316, 3543, 287, 1537, 3410, 3555, 1750, 3755, 1293, 1020, 1252, 3926, 2480, 3761, 1669, 5279, 3978, 2603, 3265, 4422, 2579, 2882, 986, 4228, 4270, 1307, 2749, 4917, 2471, 2577, 3353, 3198, 149, 3945, 3584, 2607, 1804, 4019, 4663, 1922, 2336, 2859, 4114, 29, 4209, 2252, 4000, 2224, 4139, 3404, 3658, 818, 2032, 1415, 4607, 2350, 2424, 2683, 3115, 2276, 151, 4457, 913, 3669, 4809, 4990, 4610, 8, 2085, 4104, 122, 3376, 2605, 1727, 3772, 1255, 748, 2852, 1901, 3975, 5303, 2112, 2290, 1001, 1401, 2909, 2139, 136, 1177, 366, 3135, 1931, 220, 1302, 3848, 3596, 2315, 509, 3100, 3415, 1460, 4933, 1637, 4258, 3834, 3142, 2633, 3077, 5169, 5016, 1970, 2959, 3322, 3873, 4305, 5163, 3594, 4517, 2242, 4520, 4570, 3355, 2853, 246, 1776, 2570, 4227, 2168, 5171, 4686, 1369, 4306, 3560, 1496, 4858, 1010, 4405, 5229, 5222, 4993, 4066, 1592, 4551, 4631, 3161, 2944, 3721, 1270, 3752, 4634, 4020, 3367, 1498, 3021, 3326, 1551, 1039, 3272, 4931, 3766, 4984, 2087, 1016, 2951, 1446, 1058, 3558, 5172, 4929, 1015, 4317, 3683, 4, 379, 2703, 3498, 1368, 3124, 2900, 3574, 2447, 5166, 386, 2358, 658, 3896, 5221, 2954, 4624, 3895, 2544, 2519, 4870, 2904, 5009, 4142, 3076, 3354, 1615, 3524, 840, 150, 1595, 1147, 1525, 1729, 357, 4602, 3253, 1823, 3056, 4136, 1283, 1785, 1290, 1799, 4395, 2403, 3373, 4999, 2302, 1017, 4627, 2156, 1298, 5100, 4218, 3461, 1768, 4909, 4440, 5045, 2165, 2248, 2295, 3094, 1047, 5194, 134, 2144, 2996, 844, 5039, 1299, 5309, 4927, 4755, 3269, 3211, 4539, 4003, 2184, 5251, 1590, 4082, 211, 117, 1623, 2851, 2689, 3034, 3918, 1652, 3768, 2021, 4096, 5233, 2702, 153, 4913, 823, 798, 3046, 2450, 4660, 4968, 3422, 625, 2359, 828, 476, 3568, 2495, 3876, 4449, 5044, 1876, 2955, 5286, 380, 1676, 5113, 4603, 4157, 4644, 3435, 1461, 4480, 2042, 3466, 3249, 4185, 2015, 467, 3473, 3894, 2660, 4879, 3510, 3332, 1274, 99, 2288, 4601, 4700, 4853, 4604, 2691, 4108, 4436, 3153, 5177, 120, 3842, 4293, 2638, 2641, 3626, 4550, 412, 4329, 4552, 3033, 4545, 2787, 4626, 1315, 5204, 3152, 4886, 363, 3847, 2374, 2506, 158, 7, 170, 2780, 2313, 3189, 5185, 5012, 2816, 4926, 128, 4647, 4628, 2764, 4720, 70, 4902, 5004, 4659, 2277, 587, 3351, 629, 2105, 340, 4135, 2889, 4967, 3319, 1413, 3079, 3455, 2693, 2401, 4608, 3111, 2943, 5030, 4922, 3491, 277, 4724, 5299, 5051, 4465, 2468, 2344, 4250, 830, 3133, 3673, 76, 5070, 1696, 4875, 4905, 2232, 4599, 4615, 4877, 4595, 2905, 4585, 88, 4244, 2251, 3801, 132, 2893, 4906, 2937, 5307, 4947, 4154, 129, 3940, 4588, 2939, 5187, 2676, 4125, 3416, 307, 4941, 1836, 2918, 5281, 2398, 408, 4233, 4852, 33, 1834, 4497, 4256, 51, 3365, 3252, 333, 4150, 5151, 5152, 3221, 3154, 3528, 5157, 598, 2983, 4625, 2222, 4453, 2200, 5026, 3963, 1587, 3839, 4653, 2850, 3517, 121, 2180, 1894, 481, 4396, 83, 4056, 242, 3704, 4614, 63, 4458, 5027, 2368, 2573, 152, 468, 5060, 5205, 130, 5289, 4241, 1568, 5183, 4309, 3202, 4298, 4337, 2668, 3423, 5179, 4408, 2810, 4438, 4247, 2897, 2309, 4330, 1954, 585, 3481, 3815, 4868, 5018, 2343, 4666, 1541, 3606, 258, 4459, 527, 2620, 4514, 5288, 3118, 4598, 4591, 43, 3346, 3609, 166, 5131, 4613, 4704, 442, 2275, 425, 2993, 4957, 3788, 4617, 4446, 5192, 2915, 375, 3776, 4119, 528, 4619, 3556, 3167, 4327, 3538, 154, 5167, 2093, 4195, 3722, 555, 1655, 148, 5089, 3576, 3694, 3342, 420, 1574, 4596, 511, 5037, 68, 290, 337, 490, 4998, 5114, 5176, 453, 157, 4936, 35, 1872, 563, 3237, 4699, 4846, 4958, 126, 2431, 3470, 4837, 4521, 513, 293, 656, 1774, 4621, 4390, 604, 34, 4553, 4572, 601, 226, 4295, 499, 4904, 46, 4966, 5208, 666, 1524, 4630, 1994, 5080, 4594, 5136, 145, 639, 410, 5252, 4529, 111, 4884, 3182, 3910, 4181, 498, 660, 1609, 4106, 616, 4832, 5149, 164, 4573, 4462, 4565, 4519, 1464, 4584, 4044, 438, 542, 3762, 32, 4522, 315, 1618, 174, 346, 5011, 4635, 4579, 4651, 5304, 5269, 274, 4262, 1624, 503, 205, 572, 2006, 5225, 432, 4533, 5283, 398, 5234, 3117, 4655, 82, 237, 4752, 4590, 4976, 3792, 38, 566, 388, 4593, 4973, 5147, 4544, 4534, 69, 5, 5001, 5266, 427, 3833, 5224, 4632, 4867, 5178, 176, 28, 5292, 5182, 4528, 244, 668, 4918, 4979, 5231, 4662, 397, 4548, 303, 4530, 456, 163, 4753, 5087, 575, 4616, 441, 4972, 4646, 240, 5282, 641, 5230, 4592, 4546, 4562, 4549, 4325, 4924, 568, 4541, 4925, 182, 41, 4629, 565, 162, 86, 319, 4997, 396, 4574, 4537, 5047, 189, 231, 21, 4527, 4935, 491, 4567, 4956, 4580, 584, 2595, 4571, 168, 305, 4561, 59, 225, 645, 627, 4606, 4684, 215, 548, 4581, 262, 31, 5133, 5280, 4751, 4516, 4564, 5003, 4535, 4962, 4582, 44, 4569, 4952, 271, 4661, 562, 5265, 5135, 4953, 4612, 45, 4896, 4622, 124, 591, 4946, 91, 644, 5287, 4890, 651, 4919, 632, 4719, 5285, 30, 469, 618, 5270, 661, 4555, 5259, 5232, 54, 480, 4559, 2, 5134, 4951, 406, 5228, 272, 671, 389, 5146, 612, 5052, 5310, 5057, 413, 521, 461, 66, 4757, 4566, 4939, 5290, 578, 580, 322, 5226, 247, 350, 4547, 5173, 502, 416, 327, 4587, 505, 4855, 546, 27, 167, 4543, 261, 4538, 25, 655, 4650, 649, 5206, 5013, 5170, 345, 590, 223, 4749, 5291, 624, 4577, 603, 4560, 4652, 279, 4523, 390, 314, 5017, 81, 4978, 295, 214, 4558, 241, 400, 407, 421, 238, 200, 37, 19, 458, 268, 301, 417, 4609, 387, 5162, 403, 620, 199, 331, 263, 512, 662, 5160, 23, 602, 24, 338, 4748, 437, 3, 537, 589, 179, 492, 4525, 569, 18, 276, 583, 71, 286, 4536, 4665, 459, 541, 361, 229, 5264, 47, 239, 477, 4948, 4987, 12, 4586, 5059, 20, 524, 4554, 464, 669, 4532, 482, 4911, 5293, 623, 419, 440, 659, 619, 196, 254, 216, 16, 321, 309, 232, 577, 40, 446, 626, 556, 4955, 270, 552, 5132, 355, 4556, 510, 5164, 500, 518, 74, 221, 402, 605, 557, 4540, 553, 15, 358, 595, 310, 586, 5305, 278, 544, 622, 393, 297, 483, 426, 609, 423, 4996, 672, 313, 485, 4857, 343, 4942, 257, 561, 213, 181, 250, 318, 370, 430, 633, 567, 5267, 4992, 317, 581, 347, 4959, 197, 463, 175, 519, 222, 249, 424, 447, 17, 192, 383, 349, 328, 36, 462, 367, 292, 547, 218, 4874, 266, 234, 5262, 311, 434, 326, 385, 320, 203, 334, 4974, 253, 445, 613, 208, 504, 621, 39, 173, 404, 4531, 582, 348, 342, 11, 444, 282, 4893, 5227, 472, 289, 324, 452, 630, 474, 501, 384, 549, 647, 570, 663, 560, 475, 228, 614, 635, 294, 431, 251, 646, 169, 325, 465, 5308, 520, 195, 667, 610, 4600, 5175, 652, 184, 4620, 180, 259, 4982, 436, 283, 642, 496, 316, 178, 308, 538, 212, 187, 372, 594, 558, 422, 650, 523, 368, 473, 165, 329, 593, 5260, 252, 415, 394, 245, 171, 648, 530, 470, 471, 364, 611, 5046, 540, 428, 207, 172, 608, 571, 146, 5306, 217, 411, 204, 304, 299, 531, 435, 210, 73, 460, 4975, 414, 507, 365, 615, 4654, 600, 536, 14, 341, 478, 487, 4954, 202, 550, 191, 532, 515, 637, 376, 592, 13, 450, 525, 194, 4583, 486, 409, 596, 4977, 607, 606, 628, 67, 312, 267, 209, 391, 564, 280, 418, 224, 335, 193, 4578, 545, 378, 4963, 5193, 4964, 579, 198, 653, 265, 5263, 285, 638, 236, 4589, 5000, 479, 302, 201, 574, 362, 5261, 494, 382, 22, 0, 448, 306, 360, 543, 439, 26, 664, 429, 5250, 371, 534, 5137, 399, 597, 576, 298, 4965, 554, 4923, 643, 673, 243, 1, 381, 665, 433, 640, 4970, 4895, 9, 5180, 5258, 5130, 5077, 4981, 5268, 5088, 4980, 5076]\nNumber of tracks with MSE > 1: 132\n```\n:::\n:::\n\n\nLet's take a closer look at the 10 tracks with highest MSE.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nprint(\"Lowest MSEs\")\nfor i in range(10):\n    track = desc_index[i]\n    print(f\"Track: {track}, MSE: {mses[track]}, Description: {df_targets.iloc[track, -1]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLowest MSEs\nTrack: 4694, MSE: 142.65538024902344, Description: CAGE:testis, adult, pool1\nTrack: 4675, MSE: 71.54290771484375, Description: CAGE:Clontech Human Universal Reference Total RNA, pool1\nTrack: 5181, MSE: 54.46543502807617, Description: CAGE:testis, adult, pool2\nTrack: 4266, MSE: 46.77195358276367, Description: CHIP:H3K27ac:epithelial cell of prostate male\nTrack: 4004, MSE: 39.536231994628906, Description: CHIP:H3K27ac:PC-3\nTrack: 5239, MSE: 30.45405387878418, Description: CAGE:CD14+ monocytes - treated with Group A streptococci,\nTrack: 4093, MSE: 23.13290786743164, Description: CHIP:H3K27ac:OCI-LY3\nTrack: 5240, MSE: 21.570188522338867, Description: CAGE:CD14+ monocytes - treated with lipopolysaccharide,\nTrack: 5235, MSE: 21.21177101135254, Description: CAGE:CD14+ monocytes - treated with BCG,\nTrack: 4477, MSE: 18.49295997619629, Description: CHIP:H3K27ac:RWPE2\n```\n:::\n:::\n\n\nThey are all ChIP-Seq tracks. \n\nNext, we look at the distribution of differences for each track.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndf_diff = pd.DataFrame(abs(diff))\nsums = df_diff.describe()\n```\n:::\n\n\nWe first sort the tracks by biggest difference (absolute value) across the bins.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ndesc_col = sorted(range(5313), reverse = True, key = lambda x: sums.loc['max', x]) # diff\n```\n:::\n\n\nNow we print summary statistics for tracks with the largest differences.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nsums.iloc[:, [i for i in desc_col[:10]]]\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>4694</th>\n      <th>4675</th>\n      <th>5181</th>\n      <th>5239</th>\n      <th>5240</th>\n      <th>5235</th>\n      <th>5241</th>\n      <th>4266</th>\n      <th>5237</th>\n      <th>5243</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>8.960000e+02</td>\n      <td>8.960000e+02</td>\n      <td>8.960000e+02</td>\n      <td>896.000000</td>\n      <td>8.960000e+02</td>\n      <td>896.000000</td>\n      <td>8.960000e+02</td>\n      <td>896.000000</td>\n      <td>896.000000</td>\n      <td>896.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.433734e-02</td>\n      <td>1.051100e-02</td>\n      <td>8.807106e-03</td>\n      <td>0.020835</td>\n      <td>2.031211e-02</td>\n      <td>0.021861</td>\n      <td>1.900812e-02</td>\n      <td>0.034657</td>\n      <td>0.020162</td>\n      <td>0.010691</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.989808e-01</td>\n      <td>2.825342e-01</td>\n      <td>2.465311e-01</td>\n      <td>0.183282</td>\n      <td>1.539082e-01</td>\n      <td>0.152387</td>\n      <td>1.278184e-01</td>\n      <td>0.225957</td>\n      <td>0.122659</td>\n      <td>0.112028</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2.104789e-07</td>\n      <td>5.960464e-08</td>\n      <td>1.005828e-07</td>\n      <td>0.000004</td>\n      <td>1.490116e-07</td>\n      <td>0.000002</td>\n      <td>3.576279e-07</td>\n      <td>0.000003</td>\n      <td>0.000008</td>\n      <td>0.000006</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.366172e-05</td>\n      <td>2.879463e-05</td>\n      <td>3.946968e-05</td>\n      <td>0.000419</td>\n      <td>5.722363e-04</td>\n      <td>0.000375</td>\n      <td>5.093981e-04</td>\n      <td>0.000543</td>\n      <td>0.000455</td>\n      <td>0.000258</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>9.969529e-05</td>\n      <td>8.479506e-05</td>\n      <td>8.589961e-05</td>\n      <td>0.001356</td>\n      <td>2.253987e-03</td>\n      <td>0.001337</td>\n      <td>1.763301e-03</td>\n      <td>0.001110</td>\n      <td>0.001543</td>\n      <td>0.000666</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.051944e-04</td>\n      <td>2.499809e-04</td>\n      <td>2.402347e-04</td>\n      <td>0.005375</td>\n      <td>9.241708e-03</td>\n      <td>0.007166</td>\n      <td>7.548980e-03</td>\n      <td>0.002978</td>\n      <td>0.007542</td>\n      <td>0.002136</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.194086e+01</td>\n      <td>8.453053e+00</td>\n      <td>7.377880e+00</td>\n      <td>4.790039</td>\n      <td>4.033737e+00</td>\n      <td>3.902428</td>\n      <td>3.294865e+00</td>\n      <td>3.184300</td>\n      <td>3.029507</td>\n      <td>2.972141</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHere we plot distributions for the tracks with largest (absolute) differences. Take note that this plot shows distributions of differences in both directions. This plot confirms the table above, that despite having outliers their mean difference is still very close to 0.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndata = [diff[:,i] for i in desc_col[:10]]\nplt.boxplot(data)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](comparing-averages_files/figure-html/cell-26-output-1.png){width=569 height=411}\n:::\n:::\n\n\n",
    "supporting": [
      "comparing-averages_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}